
data_aqusition_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fc4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800a184  0800a184  0001a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a260  0800a260  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800a260  0800a260  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a260  0800a260  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a264  0800a264  0001a264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b68  20000014  0800a27c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b7c  0800a27c  00021b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000407af  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d92  00000000  00000000  000607f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002af8  00000000  00000000  00065588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002920  00000000  00000000  00068080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032a95  00000000  00000000  0006a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028a7b  00000000  00000000  0009d435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00143b39  00000000  00000000  000c5eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002099e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba4c  00000000  00000000  00209a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a16c 	.word	0x0800a16c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	0800a16c 	.word	0x0800a16c

08000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>:
	 * @param  pBuffer: pointer to data to be read.
	 * @param  RegisterAddr: specifies internal address register to be read.
	 * @param  NumByteToRead: number of bytes to be read.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Read(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4611      	mov	r1, r2
 800020c:	461a      	mov	r2, r3
 800020e:	460b      	mov	r3, r1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4613      	mov	r3, r2
 8000214:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToRead) {
		if (&hspi1 != NULL) {
//
//			dev_spi->beginTransaction(
//					SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f003 ff8b 	bl	8004138 <HAL_GPIO_WritePin>

//digitalWrite(cs_pin, LOW);
			uint8_t msg = RegisterAddr | 0x80;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000228:	b2db      	uxtb	r3, r3
 800022a:	75fb      	strb	r3, [r7, #23]
			/* Write Reg Address */
			HAL_SPI_Transmit(&hspi1, &msg, 1, 100);
 800022c:	f107 0117 	add.w	r1, r7, #23
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	2201      	movs	r2, #1
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000236:	f006 f896 	bl	8006366 <HAL_SPI_Transmit>
//			dev_spi->transfer(RegisterAddr | 0x80);
			/* Read the data */
//			for (uint16_t i = 0; i < NumByteToRead; i++) {
//				*(pBuffer + i) = dev_spi->transfer(0x00);
//			}
			HAL_SPI_Receive(&hspi1, pBuffer, nBytesToRead, 100);
 800023a:	88ba      	ldrh	r2, [r7, #4]
 800023c:	2364      	movs	r3, #100	; 0x64
 800023e:	68b9      	ldr	r1, [r7, #8]
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000242:	f006 f9fe 	bl	8006642 <HAL_SPI_Receive>

			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2110      	movs	r1, #16
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f003 ff73 	bl	8004138 <HAL_GPIO_WritePin>

			return 0;
 8000252:	2300      	movs	r3, #0
		}

		return 1;
	}
 8000254:	4618      	mov	r0, r3
 8000256:	3718      	adds	r7, #24
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000030 	.word	0x20000030

08000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>:
	 * @param  pBuffer: pointer to data to be written.
	 * @param  RegisterAddr: specifies internal address register to be written.
	 * @param  NumByteToWrite: number of bytes to write.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Write(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	4611      	mov	r1, r2
 800026c:	461a      	mov	r2, r3
 800026e:	460b      	mov	r3, r1
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	4613      	mov	r3, r2
 8000274:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToWrite) {
		if (&hspi1!=NULL) {
			HAL_SPI_Init(&hspi1);
 8000276:	480d      	ldr	r0, [pc, #52]	; (80002ac <_ZN16ISM330DHCXSensor8IO_WriteEPhht+0x4c>)
 8000278:	f005 ffd2 	bl	8006220 <HAL_SPI_Init>
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	2110      	movs	r1, #16
 8000280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000284:	f003 ff58 	bl	8004138 <HAL_GPIO_WritePin>

			//digitalWrite(cs_pin, LOW);

			/* Write Reg Address */
			HAL_SPI_Transmit(&hspi1, &RegisterAddr, nBytesToWrite, 100);
 8000288:	88ba      	ldrh	r2, [r7, #4]
 800028a:	1df9      	adds	r1, r7, #7
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	4807      	ldr	r0, [pc, #28]	; (80002ac <_ZN16ISM330DHCXSensor8IO_WriteEPhht+0x4c>)
 8000290:	f006 f869 	bl	8006366 <HAL_SPI_Transmit>

//			HAL_SPI_Receive(&hspi1, pBuffer, nBytesToWrite, 100);

			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	2110      	movs	r1, #16
 8000298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029c:	f003 ff4c 	bl	8004138 <HAL_GPIO_WritePin>

			return 0;
 80002a0:	2300      	movs	r3, #0
		}

		return 1;
	}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000030 	.word	0x20000030

080002b0 <_ZN16ISM330DHCXSensorC1Ev>:
/** Constructor SPI
 *  @param spi object
 *  @param cs_pin the chip select pin
 *  @param spi_speed the SPI speed
 */
ISM330DHCXSensor::ISM330DHCXSensor() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(&hspi1);
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <_ZN16ISM330DHCXSensorC1Ev+0x3c>)
 80002ba:	f005 ffb1 	bl	8006220 <HAL_SPI_Init>
	reg_ctx.write_reg = ISM330DHCX_io_write;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <_ZN16ISM330DHCXSensorC1Ev+0x40>)
 80002c2:	611a      	str	r2, [r3, #16]
	reg_ctx.read_reg = ISM330DHCX_io_read;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <_ZN16ISM330DHCXSensorC1Ev+0x44>)
 80002c8:	615a      	str	r2, [r3, #20]
	reg_ctx.handle = (void*) this;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	619a      	str	r2, [r3, #24]
	address = 0U;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
	acc_is_enabled = 0U;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2200      	movs	r2, #0
 80002da:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2200      	movs	r2, #0
 80002e0:	735a      	strb	r2, [r3, #13]
}
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4618      	mov	r0, r3
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000030 	.word	0x20000030
 80002f0:	08000e4d 	.word	0x08000e4d
 80002f4:	08000e77 	.word	0x08000e77

080002f8 <_ZN16ISM330DHCXSensor4InitEv>:

/**
 *  @brief Initialize the sensor
 *  @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::Init() {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]

	/* SW reset */
	if (ism330dhcx_reset_set(&(reg_ctx), PROPERTY_ENABLE) != ISM330DHCX_OK) {
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	3310      	adds	r3, #16
 8000304:	2101      	movs	r1, #1
 8000306:	4618      	mov	r0, r3
 8000308:	f001 fa1e 	bl	8001748 <ism330dhcx_reset_set>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	bf14      	ite	ne
 8000312:	2301      	movne	r3, #1
 8000314:	2300      	moveq	r3, #0
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	d002      	beq.n	8000322 <_ZN16ISM330DHCXSensor4InitEv+0x2a>
		return ISM330DHCX_ERROR;
 800031c:	f04f 33ff 	mov.w	r3, #4294967295
 8000320:	e07d      	b.n	800041e <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* Enable register address automatically incremented during a multiple byte
	 access with a serial interface */
	if (ism330dhcx_auto_increment_set(&(reg_ctx), PROPERTY_ENABLE)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3310      	adds	r3, #16
 8000326:	2101      	movs	r1, #1
 8000328:	4618      	mov	r0, r3
 800032a:	f001 fa33 	bl	8001794 <ism330dhcx_auto_increment_set>
 800032e:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000330:	2b00      	cmp	r3, #0
 8000332:	bf14      	ite	ne
 8000334:	2301      	movne	r3, #1
 8000336:	2300      	moveq	r3, #0
 8000338:	b2db      	uxtb	r3, r3
	if (ism330dhcx_auto_increment_set(&(reg_ctx), PROPERTY_ENABLE)
 800033a:	2b00      	cmp	r3, #0
 800033c:	d002      	beq.n	8000344 <_ZN16ISM330DHCXSensor4InitEv+0x4c>
		return ISM330DHCX_ERROR;
 800033e:	f04f 33ff 	mov.w	r3, #4294967295
 8000342:	e06c      	b.n	800041e <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* Enable BDU */
	if (ism330dhcx_block_data_update_set(&(reg_ctx), PROPERTY_ENABLE)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3310      	adds	r3, #16
 8000348:	2101      	movs	r1, #1
 800034a:	4618      	mov	r0, r3
 800034c:	f001 f98e 	bl	800166c <ism330dhcx_block_data_update_set>
 8000350:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000352:	2b00      	cmp	r3, #0
 8000354:	bf14      	ite	ne
 8000356:	2301      	movne	r3, #1
 8000358:	2300      	moveq	r3, #0
 800035a:	b2db      	uxtb	r3, r3
	if (ism330dhcx_block_data_update_set(&(reg_ctx), PROPERTY_ENABLE)
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <_ZN16ISM330DHCXSensor4InitEv+0x6e>
		return ISM330DHCX_ERROR;
 8000360:	f04f 33ff 	mov.w	r3, #4294967295
 8000364:	e05b      	b.n	800041e <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* FIFO mode selection */
	if (ism330dhcx_fifo_mode_set(&(reg_ctx), ISM330DHCX_BYPASS_MODE)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3310      	adds	r3, #16
 800036a:	2100      	movs	r1, #0
 800036c:	4618      	mov	r0, r3
 800036e:	f001 fa83 	bl	8001878 <ism330dhcx_fifo_mode_set>
 8000372:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000374:	2b00      	cmp	r3, #0
 8000376:	bf14      	ite	ne
 8000378:	2301      	movne	r3, #1
 800037a:	2300      	moveq	r3, #0
 800037c:	b2db      	uxtb	r3, r3
	if (ism330dhcx_fifo_mode_set(&(reg_ctx), ISM330DHCX_BYPASS_MODE)
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <_ZN16ISM330DHCXSensor4InitEv+0x90>
		return ISM330DHCX_ERROR;
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	e04a      	b.n	800041e <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* ACCELEROMETER Output data rate selection - power down */
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_OFF)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3310      	adds	r3, #16
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fe14 	bl	8000fbc <ism330dhcx_xl_data_rate_set>
 8000394:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000396:	2b00      	cmp	r3, #0
 8000398:	bf14      	ite	ne
 800039a:	2301      	movne	r3, #1
 800039c:	2300      	moveq	r3, #0
 800039e:	b2db      	uxtb	r3, r3
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_OFF)
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d002      	beq.n	80003aa <_ZN16ISM330DHCXSensor4InitEv+0xb2>
		return ISM330DHCX_ERROR;
 80003a4:	f04f 33ff 	mov.w	r3, #4294967295
 80003a8:	e039      	b.n	800041e <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* ACCELEROMETER Full scale selection */
	if (ism330dhcx_xl_full_scale_set(&(reg_ctx), ISM330DHCX_2g)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3310      	adds	r3, #16
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fda5 	bl	8000f00 <ism330dhcx_xl_full_scale_set>
 80003b6:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	bf14      	ite	ne
 80003bc:	2301      	movne	r3, #1
 80003be:	2300      	moveq	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
	if (ism330dhcx_xl_full_scale_set(&(reg_ctx), ISM330DHCX_2g)
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d002      	beq.n	80003cc <_ZN16ISM330DHCXSensor4InitEv+0xd4>
		return ISM330DHCX_ERROR;
 80003c6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ca:	e028      	b.n	800041e <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* GYROSCOPE Output data rate selection - power down */
	if (ism330dhcx_gy_data_rate_set(&(reg_ctx), ISM330DHCX_GY_ODR_OFF)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3310      	adds	r3, #16
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 ffda 	bl	800138c <ism330dhcx_gy_data_rate_set>
 80003d8:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf14      	ite	ne
 80003de:	2301      	movne	r3, #1
 80003e0:	2300      	moveq	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
	if (ism330dhcx_gy_data_rate_set(&(reg_ctx), ISM330DHCX_GY_ODR_OFF)
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d002      	beq.n	80003ee <_ZN16ISM330DHCXSensor4InitEv+0xf6>
		return ISM330DHCX_ERROR;
 80003e8:	f04f 33ff 	mov.w	r3, #4294967295
 80003ec:	e017      	b.n	800041e <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* GYROSCOPE Full scale selection */
	if (ism330dhcx_gy_full_scale_set(&(reg_ctx), ISM330DHCX_2000dps)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3310      	adds	r3, #16
 80003f2:	210c      	movs	r1, #12
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 ff51 	bl	800129c <ism330dhcx_gy_full_scale_set>
 80003fa:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	bf14      	ite	ne
 8000400:	2301      	movne	r3, #1
 8000402:	2300      	moveq	r3, #0
 8000404:	b2db      	uxtb	r3, r3
	if (ism330dhcx_gy_full_scale_set(&(reg_ctx), ISM330DHCX_2000dps)
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <_ZN16ISM330DHCXSensor4InitEv+0x118>
		return ISM330DHCX_ERROR;
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
 800040e:	e006      	b.n	800041e <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	acc_is_enabled = 0U;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2200      	movs	r2, #0
 8000414:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2200      	movs	r2, #0
 800041a:	735a      	strb	r2, [r3, #13]

	return ISM330DHCX_OK;
 800041c:	2300      	movs	r3, #0
}
 800041e:	4618      	mov	r0, r3
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <_ZN16ISM330DHCXSensor5beginEv>:

/**
 * @brief  Configure the sensor in order to be used
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::begin() {
 8000426:	b580      	push	{r7, lr}
 8000428:	b082      	sub	sp, #8
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
	if (&hspi1 != NULL) {
		// Configure CS pin
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2110      	movs	r1, #16
 8000432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000436:	f003 fe7f 	bl	8004138 <HAL_GPIO_WritePin>

	}

	if (Init() != ISM330DHCX_OK) {
 800043a:	6878      	ldr	r0, [r7, #4]
 800043c:	f7ff ff5c 	bl	80002f8 <_ZN16ISM330DHCXSensor4InitEv>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	bf14      	ite	ne
 8000446:	2301      	movne	r3, #1
 8000448:	2300      	moveq	r3, #0
 800044a:	b2db      	uxtb	r3, r3
 800044c:	2b00      	cmp	r3, #0
 800044e:	d002      	beq.n	8000456 <_ZN16ISM330DHCXSensor5beginEv+0x30>
		return ISM330DHCX_ERROR;
 8000450:	f04f 33ff 	mov.w	r3, #4294967295
 8000454:	e000      	b.n	8000458 <_ZN16ISM330DHCXSensor5beginEv+0x32>
	}

	return ISM330DHCX_OK;
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <_ZN16ISM330DHCXSensor10ACC_EnableEv>:

/**
 * @brief Enabled the ISM330DHCX accelerometer sensor
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_Enable() {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	if (acc_is_enabled == 1U) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	7b1b      	ldrb	r3, [r3, #12]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d101      	bne.n	8000474 <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x14>
		return ISM330DHCX_OK;
 8000470:	2300      	movs	r3, #0
 8000472:	e014      	b.n	800049e <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x3e>
	}

	/*ODR selection*/
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_104Hz)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3310      	adds	r3, #16
 8000478:	2104      	movs	r1, #4
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fd9e 	bl	8000fbc <ism330dhcx_xl_data_rate_set>
 8000480:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000482:	2b00      	cmp	r3, #0
 8000484:	bf14      	ite	ne
 8000486:	2301      	movne	r3, #1
 8000488:	2300      	moveq	r3, #0
 800048a:	b2db      	uxtb	r3, r3
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_104Hz)
 800048c:	2b00      	cmp	r3, #0
 800048e:	d002      	beq.n	8000496 <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x36>
		return ISM330DHCX_ERROR;
 8000490:	f04f 33ff 	mov.w	r3, #4294967295
 8000494:	e003      	b.n	800049e <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x3e>
	}

	acc_is_enabled = 1U;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2201      	movs	r2, #1
 800049a:	731a      	strb	r2, [r3, #12]
	return ISM330DHCX_OK;
 800049c:	2300      	movs	r3, #0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf>:
 * @brief Get the ISM330DHCX accelerometer sensitivity
 * @param Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_GetSensitivity(
		float *Sensitivity) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_xl_t full_scale;
	ISM330DHCXStatusTypeDef ret = ISM330DHCX_OK;
 80004b2:	2300      	movs	r3, #0
 80004b4:	73fb      	strb	r3, [r7, #15]

	/**Read actual full scale selection from sensor  */
	if (ism330dhcx_xl_full_scale_get(&reg_ctx, &full_scale) != ISM330DHCX_OK) {
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	3310      	adds	r3, #16
 80004ba:	f107 020e 	add.w	r2, r7, #14
 80004be:	4611      	mov	r1, r2
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fd43 	bl	8000f4c <ism330dhcx_xl_full_scale_get>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	bf14      	ite	ne
 80004cc:	2301      	movne	r3, #1
 80004ce:	2300      	moveq	r3, #0
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d002      	beq.n	80004dc <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x34>
		return ISM330DHCX_ERROR;
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295
 80004da:	e022      	b.n	8000522 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x7a>
	}

	/*Store the value of Sensitivity based on actual full scale*/
	switch (full_scale) {
 80004dc:	7bbb      	ldrb	r3, [r7, #14]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d81a      	bhi.n	8000518 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x70>
 80004e2:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x40>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	08000511 	.word	0x08000511
 80004f0:	08000501 	.word	0x08000501
 80004f4:	08000509 	.word	0x08000509
	case ISM330DHCX_2g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	4a0c      	ldr	r2, [pc, #48]	; (800052c <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x84>)
 80004fc:	601a      	str	r2, [r3, #0]
		break;
 80004fe:	e00e      	b.n	800051e <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	case ISM330DHCX_4g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x88>)
 8000504:	601a      	str	r2, [r3, #0]
		break;
 8000506:	e00a      	b.n	800051e <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	case ISM330DHCX_8g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x8c>)
 800050c:	601a      	str	r2, [r3, #0]
		break;
 800050e:	e006      	b.n	800051e <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	case ISM330DHCX_16g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	4a09      	ldr	r2, [pc, #36]	; (8000538 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x90>)
 8000514:	601a      	str	r2, [r3, #0]
		break;
 8000516:	e002      	b.n	800051e <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	default:
		ret = ISM330DHCX_ERROR;
 8000518:	23ff      	movs	r3, #255	; 0xff
 800051a:	73fb      	strb	r3, [r7, #15]
		break;
 800051c:	bf00      	nop
	}
	return ret;
 800051e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	3d79db23 	.word	0x3d79db23
 8000530:	3df9db23 	.word	0x3df9db23
 8000534:	3e79db23 	.word	0x3e79db23
 8000538:	3ef9db23 	.word	0x3ef9db23

0800053c <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf>:
/**
 * @brief Set the ISM330DHCX accelerometer Output Data Rate
 * @param Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_SetOutputDataRate(float Odr) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_odr_xl_t new_odr;

	new_odr =
			(Odr <= 12.5f) ? ISM330DHCX_XL_ODR_12Hz5 :
 8000548:	edd7 7a00 	vldr	s15, [r7]
 800054c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000558:	d801      	bhi.n	800055e <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x22>
 800055a:	2301      	movs	r3, #1
 800055c:	e058      	b.n	8000610 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 26.0f) ? ISM330DHCX_XL_ODR_26Hz :
 800055e:	edd7 7a00 	vldr	s15, [r7]
 8000562:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800056e:	d801      	bhi.n	8000574 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x38>
 8000570:	2302      	movs	r3, #2
 8000572:	e04d      	b.n	8000610 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 52.0f) ? ISM330DHCX_XL_ODR_52Hz :
 8000574:	edd7 7a00 	vldr	s15, [r7]
 8000578:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000640 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x104>
 800057c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000584:	d801      	bhi.n	800058a <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x4e>
 8000586:	2303      	movs	r3, #3
 8000588:	e042      	b.n	8000610 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 104.0f) ? ISM330DHCX_XL_ODR_104Hz :
 800058a:	edd7 7a00 	vldr	s15, [r7]
 800058e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000644 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x108>
 8000592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059a:	d801      	bhi.n	80005a0 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x64>
 800059c:	2304      	movs	r3, #4
 800059e:	e037      	b.n	8000610 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 208.0f) ? ISM330DHCX_XL_ODR_208Hz :
 80005a0:	edd7 7a00 	vldr	s15, [r7]
 80005a4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000648 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x10c>
 80005a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	d801      	bhi.n	80005b6 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x7a>
 80005b2:	2305      	movs	r3, #5
 80005b4:	e02c      	b.n	8000610 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 417.0f) ? ISM330DHCX_XL_ODR_417Hz :
 80005b6:	edd7 7a00 	vldr	s15, [r7]
 80005ba:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800064c <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x110>
 80005be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c6:	d801      	bhi.n	80005cc <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x90>
 80005c8:	2306      	movs	r3, #6
 80005ca:	e021      	b.n	8000610 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 833.0f) ? ISM330DHCX_XL_ODR_833Hz :
 80005cc:	edd7 7a00 	vldr	s15, [r7]
 80005d0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000650 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x114>
 80005d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005dc:	d801      	bhi.n	80005e2 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xa6>
 80005de:	2307      	movs	r3, #7
 80005e0:	e016      	b.n	8000610 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz :
 80005e2:	edd7 7a00 	vldr	s15, [r7]
 80005e6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000654 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x118>
 80005ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f2:	d801      	bhi.n	80005f8 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xbc>
 80005f4:	2308      	movs	r3, #8
 80005f6:	e00b      	b.n	8000610 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 3333.0f) ?
 80005f8:	edd7 7a00 	vldr	s15, [r7]
 80005fc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000658 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x11c>
 8000600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000608:	d801      	bhi.n	800060e <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd2>
 800060a:	2309      	movs	r3, #9
 800060c:	e000      	b.n	8000610 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
 800060e:	230a      	movs	r3, #10
	new_odr =
 8000610:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_XL_ODR_3333Hz : ISM330DHCX_XL_ODR_6667Hz;

	/* Output data rate selection */
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), new_odr) != ISM330DHCX_OK) {
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3310      	adds	r3, #16
 8000616:	7bfa      	ldrb	r2, [r7, #15]
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fcce 	bl	8000fbc <ism330dhcx_xl_data_rate_set>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	bf14      	ite	ne
 8000626:	2301      	movne	r3, #1
 8000628:	2300      	moveq	r3, #0
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xfa>
		return ISM330DHCX_ERROR;
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	e000      	b.n	8000638 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xfc>
	}

	return ISM330DHCX_OK;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	42500000 	.word	0x42500000
 8000644:	42d00000 	.word	0x42d00000
 8000648:	43500000 	.word	0x43500000
 800064c:	43d08000 	.word	0x43d08000
 8000650:	44504000 	.word	0x44504000
 8000654:	44d06000 	.word	0x44d06000
 8000658:	45505000 	.word	0x45505000

0800065c <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl>:
/**
 * @brief Set the ISM330DHCX accelerometer sensor full scale
 * @param fullscale the fullscale to be set
 * @retval  0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_SetFullScale(int32_t FullScale) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_xl_t new_fs;

	new_fs = (FullScale <= 2) ? ISM330DHCX_2g :
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2b02      	cmp	r3, #2
 800066a:	dd0b      	ble.n	8000684 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x28>
				(FullScale <= 4) ? ISM330DHCX_4g :
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2b04      	cmp	r3, #4
 8000670:	dd06      	ble.n	8000680 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x24>
				(FullScale <= 8) ? ISM330DHCX_8g : ISM330DHCX_16g;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	2b08      	cmp	r3, #8
 8000676:	dc01      	bgt.n	800067c <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x20>
 8000678:	2303      	movs	r3, #3
 800067a:	e004      	b.n	8000686 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x2a>
 800067c:	2301      	movs	r3, #1
 800067e:	e002      	b.n	8000686 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x2a>
				(FullScale <= 4) ? ISM330DHCX_4g :
 8000680:	2302      	movs	r3, #2
 8000682:	e000      	b.n	8000686 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x2a>
	new_fs = (FullScale <= 2) ? ISM330DHCX_2g :
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]

	if (ism330dhcx_xl_full_scale_set(&(reg_ctx), new_fs) != ISM330DHCX_OK) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3310      	adds	r3, #16
 800068c:	7bfa      	ldrb	r2, [r7, #15]
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fc35 	bl	8000f00 <ism330dhcx_xl_full_scale_set>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	bf14      	ite	ne
 800069c:	2301      	movne	r3, #1
 800069e:	2300      	moveq	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x50>
		return ISM330DHCX_ERROR;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	e000      	b.n	80006ae <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x52>
	}

	return ISM330DHCX_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs>:
/**
 * @brief Get the ISM330DHCX accelerometer sensor raw axes
 * @param value pointer where the raw values are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_GetAxesRaw(int16_t *Value) {
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b084      	sub	sp, #16
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
	axis3bit16_t data_raw;

	/*Read raw data values */
	if (ism330dhcx_acceleration_raw_get(&reg_ctx, data_raw.u8bit)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3310      	adds	r3, #16
 80006c4:	f107 0208 	add.w	r2, r7, #8
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f805 	bl	80016da <ism330dhcx_acceleration_raw_get>
 80006d0:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf14      	ite	ne
 80006d6:	2301      	movne	r3, #1
 80006d8:	2300      	moveq	r3, #0
 80006da:	b2db      	uxtb	r3, r3
	if (ism330dhcx_acceleration_raw_get(&reg_ctx, data_raw.u8bit)
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs+0x30>
		return ISM330DHCX_ERROR;
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	e00e      	b.n	8000704 <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs+0x4e>
	}

	/*Formatting data */
	Value[0] = data_raw.i16bit[0];
 80006e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	801a      	strh	r2, [r3, #0]
	Value[1] = data_raw.i16bit[1];
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	3302      	adds	r3, #2
 80006f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80006f6:	801a      	strh	r2, [r3, #0]
	Value[2] = data_raw.i16bit[2];
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	3304      	adds	r3, #4
 80006fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000700:	801a      	strh	r2, [r3, #0]

	return ISM330DHCX_OK;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl>:
/**
 * @brief Get the ISM330DHCX accelerometer sensor axes
 * @param acceleration pointer where the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_GetAxes(int32_t *Acceleration) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	float sensitivity = 0.0f;
 8000716:	f04f 0300 	mov.w	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
	int16_t data_raw[3];

	/* Get actualSensitivity */
	if (ACC_GetSensitivity(&sensitivity) != ISM330DHCX_OK) {
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff fec0 	bl	80004a8 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf14      	ite	ne
 800072e:	2301      	movne	r3, #1
 8000730:	2300      	moveq	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0x32>
		return ISM330DHCX_ERROR;
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	e043      	b.n	80007c6 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0xba>
	}

	/*Get Data Raw*/
	if (ACC_GetAxesRaw(data_raw) != ISM330DHCX_OK) {
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ffb6 	bl	80006b6 <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0x54>
		return ISM330DHCX_ERROR;
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	e032      	b.n	80007c6 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0xba>
	}

	/*Calculate data */
	Acceleration[0] = (int32_t) ((float) data_raw[0] * sensitivity);
 8000760:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000764:	ee07 3a90 	vmov	s15, r3
 8000768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800076c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000778:	ee17 2a90 	vmov	r2, s15
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	601a      	str	r2, [r3, #0]
	Acceleration[1] = (int32_t) ((float) data_raw[1] * sensitivity);
 8000780:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800078c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800079c:	ee17 2a90 	vmov	r2, s15
 80007a0:	601a      	str	r2, [r3, #0]
	Acceleration[2] = (int32_t) ((float) data_raw[2] * sensitivity);
 80007a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80007a6:	ee07 3a90 	vmov	s15, r3
 80007aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	3308      	adds	r3, #8
 80007ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007be:	ee17 2a90 	vmov	r2, s15
 80007c2:	601a      	str	r2, [r3, #0]

	return ISM330DHCX_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_ZN16ISM330DHCXSensor11GYRO_EnableEv>:

/**
 * @brief Enabled the ISM330DHCX gyroscope sensor
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_Enable() {
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	/*Check if the component is already enabled*/
	if (gyro_is_enabled == 1U) {
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7b5b      	ldrb	r3, [r3, #13]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d101      	bne.n	80007e2 <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x14>
		return ISM330DHCX_OK;
 80007de:	2300      	movs	r3, #0
 80007e0:	e014      	b.n	800080c <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x3e>
	}

	/*Output data rate selection */
	if (ism330dhcx_gy_data_rate_set(&reg_ctx, ISM330DHCX_GY_ODR_104Hz)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3310      	adds	r3, #16
 80007e6:	2104      	movs	r1, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fdcf 	bl	800138c <ism330dhcx_gy_data_rate_set>
 80007ee:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
	if (ism330dhcx_gy_data_rate_set(&reg_ctx, ISM330DHCX_GY_ODR_104Hz)
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x36>
		return ISM330DHCX_ERROR;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e003      	b.n	800080c <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x3e>
	}

	gyro_is_enabled = 1U;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2201      	movs	r2, #1
 8000808:	735a      	strb	r2, [r3, #13]

	return ISM330DHCX_OK;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf>:
 * @brief Get the ISM330DHCX gyroscope sensitivity
 * @param Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_GetSensitivity(
		float *Sensitivity) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_g_t full_scale;
	ISM330DHCXStatusTypeDef ret = ISM330DHCX_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]

	if (ism330dhcx_gy_full_scale_get(&reg_ctx, &full_scale) != ISM330DHCX_OK) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3310      	adds	r3, #16
 8000826:	f107 020e 	add.w	r2, r7, #14
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fd5b 	bl	80012e8 <ism330dhcx_gy_full_scale_get>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf14      	ite	ne
 8000838:	2301      	movne	r3, #1
 800083a:	2300      	moveq	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0x34>
		return ISM330DHCX_ERROR;
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	e03c      	b.n	80008c2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xae>
	}

	switch (full_scale) {
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d834      	bhi.n	80008b8 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xa4>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0x40>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	08000891 	.word	0x08000891
 8000858:	080008b1 	.word	0x080008b1
 800085c:	08000889 	.word	0x08000889
 8000860:	080008b9 	.word	0x080008b9
 8000864:	08000899 	.word	0x08000899
 8000868:	080008b9 	.word	0x080008b9
 800086c:	080008b9 	.word	0x080008b9
 8000870:	080008b9 	.word	0x080008b9
 8000874:	080008a1 	.word	0x080008a1
 8000878:	080008b9 	.word	0x080008b9
 800087c:	080008b9 	.word	0x080008b9
 8000880:	080008b9 	.word	0x080008b9
 8000884:	080008a9 	.word	0x080008a9
	case ISM330DHCX_125dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xb8>)
 800088c:	601a      	str	r2, [r3, #0]
		break;
 800088e:	e016      	b.n	80008be <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_250dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xbc>)
 8000894:	601a      	str	r2, [r3, #0]
		break;
 8000896:	e012      	b.n	80008be <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_500dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xc0>)
 800089c:	601a      	str	r2, [r3, #0]
		break;
 800089e:	e00e      	b.n	80008be <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_1000dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xc4>)
 80008a4:	601a      	str	r2, [r3, #0]
		break;
 80008a6:	e00a      	b.n	80008be <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_2000dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xc8>)
 80008ac:	601a      	str	r2, [r3, #0]
		break;
 80008ae:	e006      	b.n	80008be <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_4000dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xcc>)
 80008b4:	601a      	str	r2, [r3, #0]
		break;
 80008b6:	e002      	b.n	80008be <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	default:
		ret = ISM330DHCX_ERROR;
 80008b8:	23ff      	movs	r3, #255	; 0xff
 80008ba:	73fb      	strb	r3, [r7, #15]
		break;
 80008bc:	bf00      	nop
	}
	return ret;
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	408c0000 	.word	0x408c0000
 80008d0:	410c0000 	.word	0x410c0000
 80008d4:	418c0000 	.word	0x418c0000
 80008d8:	420c0000 	.word	0x420c0000
 80008dc:	428c0000 	.word	0x428c0000
 80008e0:	430c0000 	.word	0x430c0000

080008e4 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf>:
/**
 * @brief Set the ISM330DHCX gyroscope Output Data Rate
 * @param Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_SetOutputDataRate(float Odr) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_odr_g_t new_odr;

	new_odr =
			(Odr <= 12.5f) ? ISM330DHCX_GY_ODR_12Hz5 :
 80008f0:	edd7 7a00 	vldr	s15, [r7]
 80008f4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80008f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000900:	d801      	bhi.n	8000906 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x22>
 8000902:	2301      	movs	r3, #1
 8000904:	e058      	b.n	80009b8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 26.0f) ? ISM330DHCX_GY_ODR_26Hz :
 8000906:	edd7 7a00 	vldr	s15, [r7]
 800090a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800090e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000916:	d801      	bhi.n	800091c <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x38>
 8000918:	2302      	movs	r3, #2
 800091a:	e04d      	b.n	80009b8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 52.0f) ? ISM330DHCX_GY_ODR_52Hz :
 800091c:	edd7 7a00 	vldr	s15, [r7]
 8000920:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80009e8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x104>
 8000924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092c:	d801      	bhi.n	8000932 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x4e>
 800092e:	2303      	movs	r3, #3
 8000930:	e042      	b.n	80009b8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 104.0f) ? ISM330DHCX_GY_ODR_104Hz :
 8000932:	edd7 7a00 	vldr	s15, [r7]
 8000936:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80009ec <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x108>
 800093a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800093e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000942:	d801      	bhi.n	8000948 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x64>
 8000944:	2304      	movs	r3, #4
 8000946:	e037      	b.n	80009b8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 208.0f) ? ISM330DHCX_GY_ODR_208Hz :
 8000948:	edd7 7a00 	vldr	s15, [r7]
 800094c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80009f0 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x10c>
 8000950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000958:	d801      	bhi.n	800095e <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x7a>
 800095a:	2305      	movs	r3, #5
 800095c:	e02c      	b.n	80009b8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 417.0f) ? ISM330DHCX_GY_ODR_417Hz :
 800095e:	edd7 7a00 	vldr	s15, [r7]
 8000962:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80009f4 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x110>
 8000966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800096a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096e:	d801      	bhi.n	8000974 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x90>
 8000970:	2306      	movs	r3, #6
 8000972:	e021      	b.n	80009b8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 833.0f) ? ISM330DHCX_GY_ODR_833Hz :
 8000974:	edd7 7a00 	vldr	s15, [r7]
 8000978:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80009f8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x114>
 800097c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000984:	d801      	bhi.n	800098a <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xa6>
 8000986:	2307      	movs	r3, #7
 8000988:	e016      	b.n	80009b8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz :
 800098a:	edd7 7a00 	vldr	s15, [r7]
 800098e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80009fc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x118>
 8000992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099a:	d801      	bhi.n	80009a0 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xbc>
 800099c:	2308      	movs	r3, #8
 800099e:	e00b      	b.n	80009b8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 3333.0f) ?
 80009a0:	edd7 7a00 	vldr	s15, [r7]
 80009a4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000a00 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x11c>
 80009a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009b0:	d801      	bhi.n	80009b6 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd2>
 80009b2:	2309      	movs	r3, #9
 80009b4:	e000      	b.n	80009b8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
 80009b6:	230a      	movs	r3, #10
	new_odr =
 80009b8:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_GY_ODR_3333Hz : ISM330DHCX_GY_ODR_6667Hz;

	/* Output data rate selection */
	if (ism330dhcx_gy_data_rate_set(&reg_ctx, new_odr) != ISM330DHCX_OK) {
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3310      	adds	r3, #16
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	4611      	mov	r1, r2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fce2 	bl	800138c <ism330dhcx_gy_data_rate_set>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf14      	ite	ne
 80009ce:	2301      	movne	r3, #1
 80009d0:	2300      	moveq	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xfa>
		return ISM330DHCX_ERROR;
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	e000      	b.n	80009e0 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xfc>
	}

	return ISM330DHCX_OK;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	42500000 	.word	0x42500000
 80009ec:	42d00000 	.word	0x42d00000
 80009f0:	43500000 	.word	0x43500000
 80009f4:	43d08000 	.word	0x43d08000
 80009f8:	44504000 	.word	0x44504000
 80009fc:	44d06000 	.word	0x44d06000
 8000a00:	45505000 	.word	0x45505000

08000a04 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl>:
/**
 * @brief Set the ISM330DHCX gyroscope sensor full scale
 * @param fullscale the fullscale to be set
 * @retval  0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_SetFullScale(int32_t FullScale) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_g_t new_fs;

	new_fs = (FullScale <= 125) ? ISM330DHCX_125dps :
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	2b7d      	cmp	r3, #125	; 0x7d
 8000a12:	dd18      	ble.n	8000a46 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x42>
				(FullScale <= 250) ? ISM330DHCX_250dps :
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2bfa      	cmp	r3, #250	; 0xfa
 8000a18:	dd13      	ble.n	8000a42 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x3e>
				(FullScale <= 500) ? ISM330DHCX_500dps :
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a20:	dd0d      	ble.n	8000a3e <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x3a>
				(FullScale <= 1000) ? ISM330DHCX_1000dps :
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a28:	dd07      	ble.n	8000a3a <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x36>
				(FullScale <= 2000) ? ISM330DHCX_2000dps : ISM330DHCX_4000dps;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a30:	dc01      	bgt.n	8000a36 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x32>
 8000a32:	230c      	movs	r3, #12
 8000a34:	e008      	b.n	8000a48 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e006      	b.n	8000a48 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
				(FullScale <= 1000) ? ISM330DHCX_1000dps :
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	e004      	b.n	8000a48 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
				(FullScale <= 500) ? ISM330DHCX_500dps :
 8000a3e:	2304      	movs	r3, #4
 8000a40:	e002      	b.n	8000a48 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
				(FullScale <= 250) ? ISM330DHCX_250dps :
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
	new_fs = (FullScale <= 125) ? ISM330DHCX_125dps :
 8000a46:	2302      	movs	r3, #2
 8000a48:	73fb      	strb	r3, [r7, #15]

	if (ism330dhcx_gy_full_scale_set(&reg_ctx, new_fs) != ISM330DHCX_OK) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3310      	adds	r3, #16
 8000a4e:	7bfa      	ldrb	r2, [r7, #15]
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fc22 	bl	800129c <ism330dhcx_gy_full_scale_set>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bf14      	ite	ne
 8000a5e:	2301      	movne	r3, #1
 8000a60:	2300      	moveq	r3, #0
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x6a>
		return ISM330DHCX_ERROR;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	e000      	b.n	8000a70 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x6c>
	}

	return ISM330DHCX_OK;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs>:
/**
 * @brief Get the ISM330DHCX gyroscope sensor raw axes
 * @param value pointer where the raw values are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_GetAxesRaw(int16_t *Value) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	axis3bit16_t data_raw;

	/* Read raw data values */
	if (ism330dhcx_angular_rate_raw_get(&reg_ctx, data_raw.u8bit)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3310      	adds	r3, #16
 8000a86:	f107 0208 	add.w	r2, r7, #8
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fe13 	bl	80016b8 <ism330dhcx_angular_rate_raw_get>
 8000a92:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf14      	ite	ne
 8000a98:	2301      	movne	r3, #1
 8000a9a:	2300      	moveq	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
	if (ism330dhcx_angular_rate_raw_get(&reg_ctx, data_raw.u8bit)
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs+0x30>
		return ISM330DHCX_ERROR;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	e00e      	b.n	8000ac6 <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs+0x4e>
	}

	/* Format the data */
	Value[0] = data_raw.i16bit[0];
 8000aa8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	801a      	strh	r2, [r3, #0]
	Value[1] = data_raw.i16bit[1];
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ab8:	801a      	strh	r2, [r3, #0]
	Value[2] = data_raw.i16bit[2];
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3304      	adds	r3, #4
 8000abe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ac2:	801a      	strh	r2, [r3, #0]

	return ISM330DHCX_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl>:
/**
 * @brief Get the ISM330DHCX gyroscope sensor axes
 * @param acceleration pointer where the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_GetAxes(int32_t *AngularRate) {
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
	float sensitivity;
	int16_t raw_data[3];

	/*Read raw data values */
	if (GYRO_GetAxesRaw(raw_data) != ISM330DHCX_OK) {
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffca 	bl	8000a78 <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0x2c>
		return ISM330DHCX_ERROR;
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295
 8000af8:	e043      	b.n	8000b82 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0xb4>
	}

	/*Read actual sensitivity */
	if (GYRO_GetSensitivity(&sensitivity) != ISM330DHCX_OK) {
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fe87 	bl	8000814 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	bf14      	ite	ne
 8000b0c:	2301      	movne	r3, #1
 8000b0e:	2300      	moveq	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0x4e>
		return ISM330DHCX_ERROR;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	e032      	b.n	8000b82 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0xb4>
	}

	AngularRate[0] = (int32_t) ((float) raw_data[0] * sensitivity);
 8000b1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b20:	ee07 3a90 	vmov	s15, r3
 8000b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b28:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b34:	ee17 2a90 	vmov	r2, s15
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	601a      	str	r2, [r3, #0]
	AngularRate[1] = (int32_t) ((float) raw_data[1] * sensitivity);
 8000b3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	3304      	adds	r3, #4
 8000b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b58:	ee17 2a90 	vmov	r2, s15
 8000b5c:	601a      	str	r2, [r3, #0]
	AngularRate[2] = (int32_t) ((float) raw_data[2] * sensitivity);
 8000b5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b62:	ee07 3a90 	vmov	s15, r3
 8000b66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	3308      	adds	r3, #8
 8000b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7a:	ee17 2a90 	vmov	r2, s15
 8000b7e:	601a      	str	r2, [r3, #0]

	return ISM330DHCX_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf>:
/**
 * @brief  Set the ISM330DHCX FIFO ACC ODR value
 * @param  Odr FIFO ODR value
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::FIFO_ACC_Set_BDR(float Bdr) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_bdr_xl_t new_odr;

	new_odr =
			(Bdr <= 12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5 :
 8000b98:	edd7 7a00 	vldr	s15, [r7]
 8000b9c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba8:	d801      	bhi.n	8000bae <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x22>
 8000baa:	2301      	movs	r3, #1
 8000bac:	e058      	b.n	8000c60 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz :
 8000bae:	edd7 7a00 	vldr	s15, [r7]
 8000bb2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbe:	d801      	bhi.n	8000bc4 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x38>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e04d      	b.n	8000c60 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 52.0f) ? ISM330DHCX_XL_BATCHED_AT_52Hz :
 8000bc4:	edd7 7a00 	vldr	s15, [r7]
 8000bc8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000c90 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x104>
 8000bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd4:	d801      	bhi.n	8000bda <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x4e>
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e042      	b.n	8000c60 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 104.0f) ? ISM330DHCX_XL_BATCHED_AT_104Hz :
 8000bda:	edd7 7a00 	vldr	s15, [r7]
 8000bde:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000c94 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x108>
 8000be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bea:	d801      	bhi.n	8000bf0 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x64>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e037      	b.n	8000c60 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 208.0f) ? ISM330DHCX_XL_BATCHED_AT_208Hz :
 8000bf0:	edd7 7a00 	vldr	s15, [r7]
 8000bf4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000c98 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x10c>
 8000bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c00:	d801      	bhi.n	8000c06 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x7a>
 8000c02:	2305      	movs	r3, #5
 8000c04:	e02c      	b.n	8000c60 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 417.0f) ? ISM330DHCX_XL_BATCHED_AT_417Hz :
 8000c06:	edd7 7a00 	vldr	s15, [r7]
 8000c0a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000c9c <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x110>
 8000c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c16:	d801      	bhi.n	8000c1c <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x90>
 8000c18:	2306      	movs	r3, #6
 8000c1a:	e021      	b.n	8000c60 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 833.0f) ? ISM330DHCX_XL_BATCHED_AT_833Hz :
 8000c1c:	edd7 7a00 	vldr	s15, [r7]
 8000c20:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000ca0 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x114>
 8000c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2c:	d801      	bhi.n	8000c32 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xa6>
 8000c2e:	2307      	movs	r3, #7
 8000c30:	e016      	b.n	8000c60 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 1667.0f) ? ISM330DHCX_XL_BATCHED_AT_1667Hz :
 8000c32:	edd7 7a00 	vldr	s15, [r7]
 8000c36:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000ca4 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x118>
 8000c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c42:	d801      	bhi.n	8000c48 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xbc>
 8000c44:	2308      	movs	r3, #8
 8000c46:	e00b      	b.n	8000c60 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 3333.0f) ?
 8000c48:	edd7 7a00 	vldr	s15, [r7]
 8000c4c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000ca8 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x11c>
 8000c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c58:	d801      	bhi.n	8000c5e <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd2>
 8000c5a:	2309      	movs	r3, #9
 8000c5c:	e000      	b.n	8000c60 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
 8000c5e:	230a      	movs	r3, #10
	new_odr =
 8000c60:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_XL_BATCHED_AT_3333Hz :
					ISM330DHCX_XL_BATCHED_AT_6667Hz;

	if (ism330dhcx_fifo_xl_batch_set(&reg_ctx, new_odr) != ISM330DHCX_OK) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3310      	adds	r3, #16
 8000c66:	7bfa      	ldrb	r2, [r7, #15]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fdb8 	bl	80017e0 <ism330dhcx_fifo_xl_batch_set>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bf14      	ite	ne
 8000c76:	2301      	movne	r3, #1
 8000c78:	2300      	moveq	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xfa>
		return ISM330DHCX_ERROR;
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
 8000c84:	e000      	b.n	8000c88 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xfc>
	}

	return ISM330DHCX_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	42500000 	.word	0x42500000
 8000c94:	42d00000 	.word	0x42d00000
 8000c98:	43500000 	.word	0x43500000
 8000c9c:	43d08000 	.word	0x43d08000
 8000ca0:	44504000 	.word	0x44504000
 8000ca4:	44d06000 	.word	0x44d06000
 8000ca8:	45505000 	.word	0x45505000

08000cac <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf>:
/**
 * @brief  Set the ISM330DHCX FIFO GYRO ODR value
 * @param  Odr FIFO ODR value
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::FIFO_GYRO_Set_BDR(float Bdr) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_bdr_gy_t new_odr;

	new_odr =
			(Bdr <= 12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5 :
 8000cb8:	edd7 7a00 	vldr	s15, [r7]
 8000cbc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc8:	d801      	bhi.n	8000cce <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x22>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e058      	b.n	8000d80 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz :
 8000cce:	edd7 7a00 	vldr	s15, [r7]
 8000cd2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cde:	d801      	bhi.n	8000ce4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x38>
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	e04d      	b.n	8000d80 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 52.0f) ? ISM330DHCX_GY_BATCHED_AT_52Hz :
 8000ce4:	edd7 7a00 	vldr	s15, [r7]
 8000ce8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000db0 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x104>
 8000cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf4:	d801      	bhi.n	8000cfa <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x4e>
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e042      	b.n	8000d80 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 104.0f) ? ISM330DHCX_GY_BATCHED_AT_104Hz :
 8000cfa:	edd7 7a00 	vldr	s15, [r7]
 8000cfe:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000db4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x108>
 8000d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0a:	d801      	bhi.n	8000d10 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x64>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e037      	b.n	8000d80 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 208.0f) ? ISM330DHCX_GY_BATCHED_AT_208Hz :
 8000d10:	edd7 7a00 	vldr	s15, [r7]
 8000d14:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000db8 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x10c>
 8000d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d20:	d801      	bhi.n	8000d26 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x7a>
 8000d22:	2305      	movs	r3, #5
 8000d24:	e02c      	b.n	8000d80 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 417.0f) ? ISM330DHCX_GY_BATCHED_AT_417Hz :
 8000d26:	edd7 7a00 	vldr	s15, [r7]
 8000d2a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000dbc <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x110>
 8000d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d36:	d801      	bhi.n	8000d3c <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x90>
 8000d38:	2306      	movs	r3, #6
 8000d3a:	e021      	b.n	8000d80 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 833.0f) ? ISM330DHCX_GY_BATCHED_AT_833Hz :
 8000d3c:	edd7 7a00 	vldr	s15, [r7]
 8000d40:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000dc0 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x114>
 8000d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4c:	d801      	bhi.n	8000d52 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xa6>
 8000d4e:	2307      	movs	r3, #7
 8000d50:	e016      	b.n	8000d80 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 1667.0f) ? ISM330DHCX_GY_BATCHED_AT_1667Hz :
 8000d52:	edd7 7a00 	vldr	s15, [r7]
 8000d56:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000dc4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x118>
 8000d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d62:	d801      	bhi.n	8000d68 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xbc>
 8000d64:	2308      	movs	r3, #8
 8000d66:	e00b      	b.n	8000d80 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 3333.0f) ?
 8000d68:	edd7 7a00 	vldr	s15, [r7]
 8000d6c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000dc8 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x11c>
 8000d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d78:	d801      	bhi.n	8000d7e <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd2>
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	e000      	b.n	8000d80 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
 8000d7e:	230a      	movs	r3, #10
	new_odr =
 8000d80:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_GY_BATCHED_AT_3333Hz :
					ISM330DHCX_GY_BATCHED_AT_6667Hz;

	if (ism330dhcx_fifo_gy_batch_set(&reg_ctx, new_odr) != ISM330DHCX_OK) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3310      	adds	r3, #16
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fd4e 	bl	800182c <ism330dhcx_fifo_gy_batch_set>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf14      	ite	ne
 8000d96:	2301      	movne	r3, #1
 8000d98:	2300      	moveq	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xfa>
		return ISM330DHCX_ERROR;
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
 8000da4:	e000      	b.n	8000da8 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xfc>
	}

	return ISM330DHCX_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	42500000 	.word	0x42500000
 8000db4:	42d00000 	.word	0x42d00000
 8000db8:	43500000 	.word	0x43500000
 8000dbc:	43d08000 	.word	0x43d08000
 8000dc0:	44504000 	.word	0x44504000
 8000dc4:	44d06000 	.word	0x44d06000
 8000dc8:	45505000 	.word	0x45505000

08000dcc <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh>:
/**
 * @brief  Set the ISM330DHCX FIFO mode
 * @param  Mode FIFO mode
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::FIFO_Set_Mode(uint8_t Mode) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
	ISM330DHCXStatusTypeDef ret = ISM330DHCX_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

	/* Verify that the passed parameter contains one of the valid values */
	switch ((ism330dhcx_fifo_mode_t) Mode) {
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	bf8c      	ite	hi
 8000de2:	2201      	movhi	r2, #1
 8000de4:	2200      	movls	r2, #0
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d10b      	bne.n	8000e04 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x38>
 8000dec:	2201      	movs	r2, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf14      	ite	ne
 8000dfa:	2301      	movne	r3, #1
 8000dfc:	2300      	moveq	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x3e>
	case ISM330DHCX_BYPASS_TO_STREAM_MODE:
	case ISM330DHCX_STREAM_MODE:
		break;

	default:
		ret = ISM330DHCX_ERROR;
 8000e04:	23ff      	movs	r3, #255	; 0xff
 8000e06:	73fb      	strb	r3, [r7, #15]
		break;
 8000e08:	e000      	b.n	8000e0c <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x40>
		break;
 8000e0a:	bf00      	nop
	}

	if (ret == ISM330DHCX_ERROR) {
 8000e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d102      	bne.n	8000e1c <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x50>
		return ret;
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	e013      	b.n	8000e44 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x78>
	}

	if (ism330dhcx_fifo_mode_set(&reg_ctx, (ism330dhcx_fifo_mode_t) Mode)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3310      	adds	r3, #16
 8000e20:	78fa      	ldrb	r2, [r7, #3]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fd27 	bl	8001878 <ism330dhcx_fifo_mode_set>
 8000e2a:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2301      	movne	r3, #1
 8000e32:	2300      	moveq	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
	if (ism330dhcx_fifo_mode_set(&reg_ctx, (ism330dhcx_fifo_mode_t) Mode)
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x74>
		return ISM330DHCX_ERROR;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e001      	b.n	8000e44 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x78>
	}

	return ret;
 8000e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <ISM330DHCX_io_write>:

	return ISM330DHCX_OK;
}

int32_t ISM330DHCX_io_write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer,
		uint16_t nBytesToWrite) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	461a      	mov	r2, r3
 8000e58:	460b      	mov	r3, r1
 8000e5a:	72fb      	strb	r3, [r7, #11]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Write(pBuffer, WriteAddr,
 8000e60:	893b      	ldrh	r3, [r7, #8]
 8000e62:	7afa      	ldrb	r2, [r7, #11]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff f9fa 	bl	8000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>
 8000e6c:	4603      	mov	r3, r0
			nBytesToWrite);
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <ISM330DHCX_io_read>:

int32_t ISM330DHCX_io_read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer,
		uint16_t nBytesToRead) {
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	461a      	mov	r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	72fb      	strb	r3, [r7, #11]
 8000e86:	4613      	mov	r3, r2
 8000e88:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Read(pBuffer, ReadAddr,
 8000e8a:	893b      	ldrh	r3, [r7, #8]
 8000e8c:	7afa      	ldrb	r2, [r7, #11]
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f7ff f9b5 	bl	8000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>
 8000e96:	4603      	mov	r3, r0
			nBytesToRead);
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <ism330dhcx_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330dhcx_read_reg(ism330dhcx_ctx_t *ctx, uint8_t reg, uint8_t *data,
                            uint16_t len)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	460b      	mov	r3, r1
 8000eae:	72fb      	strb	r3, [r7, #11]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	685c      	ldr	r4, [r3, #4]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6898      	ldr	r0, [r3, #8]
 8000ebc:	893b      	ldrh	r3, [r7, #8]
 8000ebe:	7af9      	ldrb	r1, [r7, #11]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	47a0      	blx	r4
 8000ec4:	6178      	str	r0, [r7, #20]
  return ret;
 8000ec6:	697b      	ldr	r3, [r7, #20]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	371c      	adds	r7, #28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}

08000ed0 <ism330dhcx_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330dhcx_write_reg(ism330dhcx_ctx_t *ctx, uint8_t reg, uint8_t *data,
                             uint16_t len)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	461a      	mov	r2, r3
 8000edc:	460b      	mov	r3, r1
 8000ede:	72fb      	strb	r3, [r7, #11]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681c      	ldr	r4, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6898      	ldr	r0, [r3, #8]
 8000eec:	893b      	ldrh	r3, [r7, #8]
 8000eee:	7af9      	ldrb	r1, [r7, #11]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	47a0      	blx	r4
 8000ef4:	6178      	str	r0, [r7, #20]
  return ret;
 8000ef6:	697b      	ldr	r3, [r7, #20]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd90      	pop	{r4, r7, pc}

08000f00 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000f0c:	f107 0208 	add.w	r2, r7, #8
 8000f10:	2301      	movs	r3, #1
 8000f12:	2110      	movs	r1, #16
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffc3 	bl	8000ea0 <ism330dhcx_read_reg>
 8000f1a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10f      	bne.n	8000f42 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	7a3b      	ldrb	r3, [r7, #8]
 8000f2c:	f362 0383 	bfi	r3, r2, #2, #2
 8000f30:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8000f32:	f107 0208 	add.w	r2, r7, #8
 8000f36:	2301      	movs	r3, #1
 8000f38:	2110      	movs	r1, #16
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffc8 	bl	8000ed0 <ism330dhcx_write_reg>
 8000f40:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }
  return ret;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000f56:	f107 0208 	add.w	r2, r7, #8
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff9e 	bl	8000ea0 <ism330dhcx_read_reg>
 8000f64:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8000f66:	7a3b      	ldrb	r3, [r7, #8]
 8000f68:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d81a      	bhi.n	8000fa8 <ism330dhcx_xl_full_scale_get+0x5c>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <ism330dhcx_xl_full_scale_get+0x2c>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000f91 	.word	0x08000f91
 8000f80:	08000f99 	.word	0x08000f99
 8000f84:	08000fa1 	.word	0x08000fa1
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
      break;
 8000f8e:	e00f      	b.n	8000fb0 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
      break;
 8000f96:	e00b      	b.n	8000fb0 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
      break;
 8000f9e:	e007      	b.n	8000fb0 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	701a      	strb	r2, [r3, #0]
      break;
 8000fa6:	e003      	b.n	8000fb0 <ism330dhcx_xl_full_scale_get+0x64>
    default:
      *val = ISM330DHCX_2g;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
      break;
 8000fae:	bf00      	nop
  }
  return ret;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop

08000fbc <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(ism330dhcx_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	75fb      	strb	r3, [r7, #23]
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fc76 	bl	80018c4 <ism330dhcx_fsm_enable_get>
 8000fd8:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f040 80c4 	bne.w	800116a <ism330dhcx_xl_data_rate_set+0x1ae>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000fe2:	7b3b      	ldrb	r3, [r7, #12]
 8000fe4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000fe8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8000fea:	7b3b      	ldrb	r3, [r7, #12]
 8000fec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ff0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8000ff6:	7b3b      	ldrb	r3, [r7, #12]
 8000ff8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000ffc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001002:	7b3b      	ldrb	r3, [r7, #12]
 8001004:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001008:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800100a:	4313      	orrs	r3, r2
 800100c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001014:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001016:	4313      	orrs	r3, r2
 8001018:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800101a:	7b3b      	ldrb	r3, [r7, #12]
 800101c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001020:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001022:	4313      	orrs	r3, r2
 8001024:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800102c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800102e:	4313      	orrs	r3, r2
 8001030:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001032:	7b3b      	ldrb	r3, [r7, #12]
 8001034:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001038:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800103a:	4313      	orrs	r3, r2
 800103c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001044:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001046:	4313      	orrs	r3, r2
 8001048:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800104a:	7b7b      	ldrb	r3, [r7, #13]
 800104c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001050:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001052:	4313      	orrs	r3, r2
 8001054:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800105c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800105e:	4313      	orrs	r3, r2
 8001060:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001068:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800106a:	4313      	orrs	r3, r2
 800106c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001074:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001076:	4313      	orrs	r3, r2
 8001078:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001082:	4313      	orrs	r3, r2
 8001084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001086:	7b7b      	ldrb	r3, [r7, #13]
 8001088:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800108c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800108e:	4313      	orrs	r3, r2
 8001090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE) {
 8001092:	7b7b      	ldrb	r3, [r7, #13]
 8001094:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001098:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800109a:	4313      	orrs	r3, r2
 800109c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d163      	bne.n	800116a <ism330dhcx_xl_data_rate_set+0x1ae>

      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80010a2:	f107 030b 	add.w	r3, r7, #11
 80010a6:	4619      	mov	r1, r3
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 fc37 	bl	800191c <ism330dhcx_fsm_data_rate_get>
 80010ae:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d159      	bne.n	800116a <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80010b6:	7afb      	ldrb	r3, [r7, #11]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d853      	bhi.n	8001164 <ism330dhcx_xl_data_rate_set+0x1a8>
 80010bc:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <ism330dhcx_xl_data_rate_set+0x108>)
 80010be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c2:	bf00      	nop
 80010c4:	080010d5 	.word	0x080010d5
 80010c8:	080010e7 	.word	0x080010e7
 80010cc:	08001105 	.word	0x08001105
 80010d0:	0800112f 	.word	0x0800112f
          case ISM330DHCX_ODR_FSM_12Hz5:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d102      	bne.n	80010e0 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80010da:	2301      	movs	r3, #1
 80010dc:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80010de:	e045      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	75fb      	strb	r3, [r7, #23]
            break;
 80010e4:	e042      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_26Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80010ec:	2302      	movs	r3, #2
 80010ee:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80010f0:	e03c      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d102      	bne.n	80010fe <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80010f8:	2302      	movs	r3, #2
 80010fa:	75fb      	strb	r3, [r7, #23]
            break;
 80010fc:	e036      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	75fb      	strb	r3, [r7, #23]
            break;
 8001102:	e033      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_52Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800110a:	2303      	movs	r3, #3
 800110c:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 800110e:	e02d      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d102      	bne.n	800111c <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001116:	2303      	movs	r3, #3
 8001118:	75fb      	strb	r3, [r7, #23]
            break;
 800111a:	e027      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d102      	bne.n	8001128 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001122:	2303      	movs	r3, #3
 8001124:	75fb      	strb	r3, [r7, #23]
            break;
 8001126:	e021      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	75fb      	strb	r3, [r7, #23]
            break;
 800112c:	e01e      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_104Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001134:	2304      	movs	r3, #4
 8001136:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001138:	e018      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d102      	bne.n	8001146 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001140:	2304      	movs	r3, #4
 8001142:	75fb      	strb	r3, [r7, #23]
            break;
 8001144:	e012      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d102      	bne.n	8001152 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800114c:	2304      	movs	r3, #4
 800114e:	75fb      	strb	r3, [r7, #23]
            break;
 8001150:	e00c      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d102      	bne.n	800115e <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001158:	2304      	movs	r3, #4
 800115a:	75fb      	strb	r3, [r7, #23]
            break;
 800115c:	e006      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	75fb      	strb	r3, [r7, #23]
            break;
 8001162:	e003      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	75fb      	strb	r3, [r7, #23]
            break;
 8001168:	e000      	b.n	800116c <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 800116a:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d16d      	bne.n	8001252 <ism330dhcx_xl_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8001176:	f107 030a 	add.w	r3, r7, #10
 800117a:	4619      	mov	r1, r3
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 fc15 	bl	80019ac <ism330dhcx_mlc_get>
 8001182:	6138      	str	r0, [r7, #16]
    if (mlc_enable == PROPERTY_ENABLE) {
 8001184:	7abb      	ldrb	r3, [r7, #10]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d163      	bne.n	8001252 <ism330dhcx_xl_data_rate_set+0x296>

      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800118a:	f107 0309 	add.w	r3, r7, #9
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fc35 	bl	8001a00 <ism330dhcx_mlc_data_rate_get>
 8001196:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d159      	bne.n	8001252 <ism330dhcx_xl_data_rate_set+0x296>
        switch (mlc_odr) {
 800119e:	7a7b      	ldrb	r3, [r7, #9]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d853      	bhi.n	800124c <ism330dhcx_xl_data_rate_set+0x290>
 80011a4:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <ism330dhcx_xl_data_rate_set+0x1f0>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	080011bd 	.word	0x080011bd
 80011b0:	080011cf 	.word	0x080011cf
 80011b4:	080011ed 	.word	0x080011ed
 80011b8:	08001217 	.word	0x08001217
          case ISM330DHCX_ODR_PRGS_12Hz5:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <ism330dhcx_xl_data_rate_set+0x20c>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80011c2:	2301      	movs	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80011c6:	e045      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	75fb      	strb	r3, [r7, #23]
            break;
 80011cc:	e042      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <ism330dhcx_xl_data_rate_set+0x21e>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80011d4:	2302      	movs	r3, #2
 80011d6:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80011d8:	e03c      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d102      	bne.n	80011e6 <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80011e0:	2302      	movs	r3, #2
 80011e2:	75fb      	strb	r3, [r7, #23]
            break;
 80011e4:	e036      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	75fb      	strb	r3, [r7, #23]
            break;
 80011ea:	e033      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_52Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <ism330dhcx_xl_data_rate_set+0x23c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80011f2:	2303      	movs	r3, #3
 80011f4:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80011f6:	e02d      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d102      	bne.n	8001204 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80011fe:	2303      	movs	r3, #3
 8001200:	75fb      	strb	r3, [r7, #23]
            break;
 8001202:	e027      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d102      	bne.n	8001210 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800120a:	2303      	movs	r3, #3
 800120c:	75fb      	strb	r3, [r7, #23]
            break;
 800120e:	e021      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	75fb      	strb	r3, [r7, #23]
            break;
 8001214:	e01e      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <ism330dhcx_xl_data_rate_set+0x266>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800121c:	2304      	movs	r3, #4
 800121e:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001220:	e018      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001228:	2304      	movs	r3, #4
 800122a:	75fb      	strb	r3, [r7, #23]
            break;
 800122c:	e012      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d102      	bne.n	800123a <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001234:	2304      	movs	r3, #4
 8001236:	75fb      	strb	r3, [r7, #23]
            break;
 8001238:	e00c      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_52Hz) {
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d102      	bne.n	8001246 <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001240:	2304      	movs	r3, #4
 8001242:	75fb      	strb	r3, [r7, #23]
            break;
 8001244:	e006      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	75fb      	strb	r3, [r7, #23]
            break;
 800124a:	e003      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
          default:
            odr_xl = val;
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	75fb      	strb	r3, [r7, #23]
            break;
 8001250:	e000      	b.n	8001254 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8001252:	bf00      	nop
    }
  }
  if (ret == 0) {
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d107      	bne.n	800126a <ism330dhcx_xl_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800125a:	f107 0208 	add.w	r2, r7, #8
 800125e:	2301      	movs	r3, #1
 8001260:	2110      	movs	r1, #16
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fe1c 	bl	8000ea0 <ism330dhcx_read_reg>
 8001268:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }
  if (ret == 0) {
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10f      	bne.n	8001290 <ism330dhcx_xl_data_rate_set+0x2d4>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	b2da      	uxtb	r2, r3
 8001278:	7a3b      	ldrb	r3, [r7, #8]
 800127a:	f362 1307 	bfi	r3, r2, #4, #4
 800127e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001280:	f107 0208 	add.w	r2, r7, #8
 8001284:	2301      	movs	r3, #1
 8001286:	2110      	movs	r1, #16
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fe21 	bl	8000ed0 <ism330dhcx_write_reg>
 800128e:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }
  return ret;
 8001290:	693b      	ldr	r3, [r7, #16]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop

0800129c <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	2301      	movs	r3, #1
 80012ae:	2111      	movs	r1, #17
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fdf5 	bl	8000ea0 <ism330dhcx_read_reg>
 80012b6:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10f      	bne.n	80012de <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	7a3b      	ldrb	r3, [r7, #8]
 80012c8:	f362 0303 	bfi	r3, r2, #0, #4
 80012cc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80012ce:	f107 0208 	add.w	r2, r7, #8
 80012d2:	2301      	movs	r3, #1
 80012d4:	2111      	movs	r1, #17
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fdfa 	bl	8000ed0 <ism330dhcx_write_reg>
 80012dc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80012f2:	f107 0208 	add.w	r2, r7, #8
 80012f6:	2301      	movs	r3, #1
 80012f8:	2111      	movs	r1, #17
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fdd0 	bl	8000ea0 <ism330dhcx_read_reg>
 8001300:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8001302:	7a3b      	ldrb	r3, [r7, #8]
 8001304:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d834      	bhi.n	8001378 <ism330dhcx_gy_full_scale_get+0x90>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <ism330dhcx_gy_full_scale_get+0x2c>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	08001351 	.word	0x08001351
 8001318:	08001371 	.word	0x08001371
 800131c:	08001349 	.word	0x08001349
 8001320:	08001379 	.word	0x08001379
 8001324:	08001359 	.word	0x08001359
 8001328:	08001379 	.word	0x08001379
 800132c:	08001379 	.word	0x08001379
 8001330:	08001379 	.word	0x08001379
 8001334:	08001361 	.word	0x08001361
 8001338:	08001379 	.word	0x08001379
 800133c:	08001379 	.word	0x08001379
 8001340:	08001379 	.word	0x08001379
 8001344:	08001369 	.word	0x08001369
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2202      	movs	r2, #2
 800134c:	701a      	strb	r2, [r3, #0]
      break;
 800134e:	e017      	b.n	8001380 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
      break;
 8001356:	e013      	b.n	8001380 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2204      	movs	r2, #4
 800135c:	701a      	strb	r2, [r3, #0]
      break;
 800135e:	e00f      	b.n	8001380 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2208      	movs	r2, #8
 8001364:	701a      	strb	r2, [r3, #0]
      break;
 8001366:	e00b      	b.n	8001380 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	220c      	movs	r2, #12
 800136c:	701a      	strb	r2, [r3, #0]
      break;
 800136e:	e007      	b.n	8001380 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
      break;
 8001376:	e003      	b.n	8001380 <ism330dhcx_gy_full_scale_get+0x98>
    default:
      *val = ISM330DHCX_125dps;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	2202      	movs	r2, #2
 800137c:	701a      	strb	r2, [r3, #0]
      break;
 800137e:	bf00      	nop
  }
  return ret;
 8001380:	68fb      	ldr	r3, [r7, #12]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop

0800138c <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(ism330dhcx_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	75fb      	strb	r3, [r7, #23]
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fa8e 	bl	80018c4 <ism330dhcx_fsm_enable_get>
 80013a8:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 80c4 	bne.w	800153a <ism330dhcx_gy_data_rate_set+0x1ae>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80013b2:	7b3b      	ldrb	r3, [r7, #12]
 80013b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80013ba:	7b3b      	ldrb	r3, [r7, #12]
 80013bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013c0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80013d2:	7b3b      	ldrb	r3, [r7, #12]
 80013d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80013d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80013da:	4313      	orrs	r3, r2
 80013dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80013ea:	7b3b      	ldrb	r3, [r7, #12]
 80013ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80013f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80013f6:	7b3b      	ldrb	r3, [r7, #12]
 80013f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80013fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80013fe:	4313      	orrs	r3, r2
 8001400:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001402:	7b3b      	ldrb	r3, [r7, #12]
 8001404:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001408:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800140a:	4313      	orrs	r3, r2
 800140c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800140e:	7b7b      	ldrb	r3, [r7, #13]
 8001410:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001414:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001416:	4313      	orrs	r3, r2
 8001418:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800141a:	7b7b      	ldrb	r3, [r7, #13]
 800141c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001420:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001422:	4313      	orrs	r3, r2
 8001424:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001426:	7b7b      	ldrb	r3, [r7, #13]
 8001428:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800142c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800142e:	4313      	orrs	r3, r2
 8001430:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001432:	7b7b      	ldrb	r3, [r7, #13]
 8001434:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001438:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800143a:	4313      	orrs	r3, r2
 800143c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001444:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001446:	4313      	orrs	r3, r2
 8001448:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800144a:	7b7b      	ldrb	r3, [r7, #13]
 800144c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001450:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001452:	4313      	orrs	r3, r2
 8001454:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001456:	7b7b      	ldrb	r3, [r7, #13]
 8001458:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800145c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800145e:	4313      	orrs	r3, r2
 8001460:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE) {
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001468:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800146a:	4313      	orrs	r3, r2
 800146c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800146e:	2b01      	cmp	r3, #1
 8001470:	d163      	bne.n	800153a <ism330dhcx_gy_data_rate_set+0x1ae>

      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8001472:	f107 030b 	add.w	r3, r7, #11
 8001476:	4619      	mov	r1, r3
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fa4f 	bl	800191c <ism330dhcx_fsm_data_rate_get>
 800147e:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d159      	bne.n	800153a <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d853      	bhi.n	8001534 <ism330dhcx_gy_data_rate_set+0x1a8>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <ism330dhcx_gy_data_rate_set+0x108>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014a5 	.word	0x080014a5
 8001498:	080014b7 	.word	0x080014b7
 800149c:	080014d5 	.word	0x080014d5
 80014a0:	080014ff 	.word	0x080014ff
          case ISM330DHCX_ODR_FSM_12Hz5:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 80014ae:	e045      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	75fb      	strb	r3, [r7, #23]
            break;
 80014b4:	e042      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_26Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80014bc:	2302      	movs	r3, #2
 80014be:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 80014c0:	e03c      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d102      	bne.n	80014ce <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80014c8:	2302      	movs	r3, #2
 80014ca:	75fb      	strb	r3, [r7, #23]
            break;
 80014cc:	e036      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	75fb      	strb	r3, [r7, #23]
            break;
 80014d2:	e033      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_52Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80014da:	2303      	movs	r3, #3
 80014dc:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 80014de:	e02d      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d102      	bne.n	80014ec <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80014e6:	2303      	movs	r3, #3
 80014e8:	75fb      	strb	r3, [r7, #23]
            break;
 80014ea:	e027      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d102      	bne.n	80014f8 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80014f2:	2303      	movs	r3, #3
 80014f4:	75fb      	strb	r3, [r7, #23]
            break;
 80014f6:	e021      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	75fb      	strb	r3, [r7, #23]
            break;
 80014fc:	e01e      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_104Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001504:	2304      	movs	r3, #4
 8001506:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8001508:	e018      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d102      	bne.n	8001516 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001510:	2304      	movs	r3, #4
 8001512:	75fb      	strb	r3, [r7, #23]
            break;
 8001514:	e012      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d102      	bne.n	8001522 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800151c:	2304      	movs	r3, #4
 800151e:	75fb      	strb	r3, [r7, #23]
            break;
 8001520:	e00c      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d102      	bne.n	800152e <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001528:	2304      	movs	r3, #4
 800152a:	75fb      	strb	r3, [r7, #23]
            break;
 800152c:	e006      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	75fb      	strb	r3, [r7, #23]
            break;
 8001532:	e003      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	75fb      	strb	r3, [r7, #23]
            break;
 8001538:	e000      	b.n	800153c <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 800153a:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d16d      	bne.n	8001622 <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8001546:	f107 030a 	add.w	r3, r7, #10
 800154a:	4619      	mov	r1, r3
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fa2d 	bl	80019ac <ism330dhcx_mlc_get>
 8001552:	6138      	str	r0, [r7, #16]
    if (mlc_enable == PROPERTY_ENABLE) {
 8001554:	7abb      	ldrb	r3, [r7, #10]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d163      	bne.n	8001622 <ism330dhcx_gy_data_rate_set+0x296>

      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800155a:	f107 0309 	add.w	r3, r7, #9
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fa4d 	bl	8001a00 <ism330dhcx_mlc_data_rate_get>
 8001566:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d159      	bne.n	8001622 <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 800156e:	7a7b      	ldrb	r3, [r7, #9]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d853      	bhi.n	800161c <ism330dhcx_gy_data_rate_set+0x290>
 8001574:	a201      	add	r2, pc, #4	; (adr r2, 800157c <ism330dhcx_gy_data_rate_set+0x1f0>)
 8001576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157a:	bf00      	nop
 800157c:	0800158d 	.word	0x0800158d
 8001580:	0800159f 	.word	0x0800159f
 8001584:	080015bd 	.word	0x080015bd
 8001588:	080015e7 	.word	0x080015e7
          case ISM330DHCX_ODR_PRGS_12Hz5:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8001592:	2301      	movs	r3, #1
 8001594:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 8001596:	e045      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	75fb      	strb	r3, [r7, #23]
            break;
 800159c:	e042      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_26Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80015a4:	2302      	movs	r3, #2
 80015a6:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 80015a8:	e03c      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d102      	bne.n	80015b6 <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80015b0:	2302      	movs	r3, #2
 80015b2:	75fb      	strb	r3, [r7, #23]
            break;
 80015b4:	e036      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	75fb      	strb	r3, [r7, #23]
            break;
 80015ba:	e033      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_52Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80015c2:	2303      	movs	r3, #3
 80015c4:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 80015c6:	e02d      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d102      	bne.n	80015d4 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80015ce:	2303      	movs	r3, #3
 80015d0:	75fb      	strb	r3, [r7, #23]
            break;
 80015d2:	e027      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d102      	bne.n	80015e0 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80015da:	2303      	movs	r3, #3
 80015dc:	75fb      	strb	r3, [r7, #23]
            break;
 80015de:	e021      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	75fb      	strb	r3, [r7, #23]
            break;
 80015e4:	e01e      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_104Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80015ec:	2304      	movs	r3, #4
 80015ee:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 80015f0:	e018      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d102      	bne.n	80015fe <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80015f8:	2304      	movs	r3, #4
 80015fa:	75fb      	strb	r3, [r7, #23]
            break;
 80015fc:	e012      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d102      	bne.n	800160a <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001604:	2304      	movs	r3, #4
 8001606:	75fb      	strb	r3, [r7, #23]
            break;
 8001608:	e00c      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_52Hz) {
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	2b03      	cmp	r3, #3
 800160e:	d102      	bne.n	8001616 <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001610:	2304      	movs	r3, #4
 8001612:	75fb      	strb	r3, [r7, #23]
            break;
 8001614:	e006      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	75fb      	strb	r3, [r7, #23]
            break;
 800161a:	e003      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
          default:
            odr_gy = val;
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	75fb      	strb	r3, [r7, #23]
            break;
 8001620:	e000      	b.n	8001624 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8001622:	bf00      	nop
    }
  }
  if (ret == 0) {
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d107      	bne.n	800163a <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800162a:	f107 0208 	add.w	r2, r7, #8
 800162e:	2301      	movs	r3, #1
 8001630:	2111      	movs	r1, #17
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fc34 	bl	8000ea0 <ism330dhcx_read_reg>
 8001638:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10f      	bne.n	8001660 <ism330dhcx_gy_data_rate_set+0x2d4>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	b2da      	uxtb	r2, r3
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	f362 1307 	bfi	r3, r2, #4, #4
 800164e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001650:	f107 0208 	add.w	r2, r7, #8
 8001654:	2301      	movs	r3, #1
 8001656:	2111      	movs	r1, #17
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fc39 	bl	8000ed0 <ism330dhcx_write_reg>
 800165e:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8001660:	693b      	ldr	r3, [r7, #16]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop

0800166c <ism330dhcx_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(ism330dhcx_ctx_t *ctx, uint8_t val)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001678:	f107 0208 	add.w	r2, r7, #8
 800167c:	2301      	movs	r3, #1
 800167e:	2112      	movs	r1, #18
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fc0d 	bl	8000ea0 <ism330dhcx_read_reg>
 8001686:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	7a3b      	ldrb	r3, [r7, #8]
 8001698:	f362 1386 	bfi	r3, r2, #6, #1
 800169c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800169e:	f107 0208 	add.w	r2, r7, #8
 80016a2:	2301      	movs	r3, #1
 80016a4:	2112      	movs	r1, #18
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fc12 	bl	8000ed0 <ism330dhcx_write_reg>
 80016ac:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <ism330dhcx_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(ism330dhcx_ctx_t *ctx, uint8_t *buff)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 80016c2:	2306      	movs	r3, #6
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	2122      	movs	r1, #34	; 0x22
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fbe9 	bl	8000ea0 <ism330dhcx_read_reg>
 80016ce:	60f8      	str	r0, [r7, #12]
  return ret;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <ism330dhcx_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(ism330dhcx_ctx_t *ctx, uint8_t *buff)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 80016e4:	2306      	movs	r3, #6
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	2128      	movs	r1, #40	; 0x28
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fbd8 	bl	8000ea0 <ism330dhcx_read_reg>
 80016f0:	60f8      	str	r0, [r7, #12]
  return ret;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(ism330dhcx_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8001708:	f107 0208 	add.w	r2, r7, #8
 800170c:	2301      	movs	r3, #1
 800170e:	2101      	movs	r1, #1
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fbc5 	bl	8000ea0 <ism330dhcx_read_reg>
 8001716:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  if (ret == 0) {
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	b2da      	uxtb	r2, r3
 8001726:	7a3b      	ldrb	r3, [r7, #8]
 8001728:	f362 1387 	bfi	r3, r2, #6, #2
 800172c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800172e:	f107 0208 	add.w	r2, r7, #8
 8001732:	2301      	movs	r3, #1
 8001734:	2101      	movs	r1, #1
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fbca 	bl	8000ed0 <ism330dhcx_write_reg>
 800173c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }
  return ret;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(ism330dhcx_ctx_t *ctx, uint8_t val)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001754:	f107 0208 	add.w	r2, r7, #8
 8001758:	2301      	movs	r3, #1
 800175a:	2112      	movs	r1, #18
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fb9f 	bl	8000ea0 <ism330dhcx_read_reg>
 8001762:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10f      	bne.n	800178a <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	b2da      	uxtb	r2, r3
 8001772:	7a3b      	ldrb	r3, [r7, #8]
 8001774:	f362 0300 	bfi	r3, r2, #0, #1
 8001778:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800177a:	f107 0208 	add.w	r2, r7, #8
 800177e:	2301      	movs	r3, #1
 8001780:	2112      	movs	r1, #18
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fba4 	bl	8000ed0 <ism330dhcx_write_reg>
 8001788:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }
  return ret;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(ism330dhcx_ctx_t *ctx, uint8_t val)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80017a0:	f107 0208 	add.w	r2, r7, #8
 80017a4:	2301      	movs	r3, #1
 80017a6:	2112      	movs	r1, #18
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff fb79 	bl	8000ea0 <ism330dhcx_read_reg>
 80017ae:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10f      	bne.n	80017d6 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	7a3b      	ldrb	r3, [r7, #8]
 80017c0:	f362 0382 	bfi	r3, r2, #2, #1
 80017c4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80017c6:	f107 0208 	add.w	r2, r7, #8
 80017ca:	2301      	movs	r3, #1
 80017cc:	2112      	movs	r1, #18
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fb7e 	bl	8000ed0 <ism330dhcx_write_reg>
 80017d4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80017ec:	f107 0208 	add.w	r2, r7, #8
 80017f0:	2301      	movs	r3, #1
 80017f2:	2109      	movs	r1, #9
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fb53 	bl	8000ea0 <ism330dhcx_read_reg>
 80017fa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  if (ret == 0) {
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <ism330dhcx_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	b2da      	uxtb	r2, r3
 800180a:	7a3b      	ldrb	r3, [r7, #8]
 800180c:	f362 0303 	bfi	r3, r2, #0, #4
 8001810:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8001812:	f107 0208 	add.w	r2, r7, #8
 8001816:	2301      	movs	r3, #1
 8001818:	2109      	movs	r1, #9
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fb58 	bl	8000ed0 <ism330dhcx_write_reg>
 8001820:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }
  return ret;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8001838:	f107 0208 	add.w	r2, r7, #8
 800183c:	2301      	movs	r3, #1
 800183e:	2109      	movs	r1, #9
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fb2d 	bl	8000ea0 <ism330dhcx_read_reg>
 8001846:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  if (ret == 0) {
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10f      	bne.n	800186e <ism330dhcx_fifo_gy_batch_set+0x42>
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	b2da      	uxtb	r2, r3
 8001856:	7a3b      	ldrb	r3, [r7, #8]
 8001858:	f362 1307 	bfi	r3, r2, #4, #4
 800185c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 800185e:	f107 0208 	add.w	r2, r7, #8
 8001862:	2301      	movs	r3, #1
 8001864:	2109      	movs	r1, #9
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fb32 	bl	8000ed0 <ism330dhcx_write_reg>
 800186c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }
  return ret;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(ism330dhcx_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8001884:	f107 0208 	add.w	r2, r7, #8
 8001888:	2301      	movs	r3, #1
 800188a:	210a      	movs	r1, #10
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fb07 	bl	8000ea0 <ism330dhcx_read_reg>
 8001892:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  if (ret == 0) {
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10f      	bne.n	80018ba <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	7a3b      	ldrb	r3, [r7, #8]
 80018a4:	f362 0302 	bfi	r3, r2, #0, #3
 80018a8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80018aa:	f107 0208 	add.w	r2, r7, #8
 80018ae:	2301      	movs	r3, #1
 80018b0:	210a      	movs	r1, #10
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fb0c 	bl	8000ed0 <ism330dhcx_write_reg>
 80018b8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }
  return ret;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(ism330dhcx_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80018ce:	2102      	movs	r1, #2
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff13 	bl	80016fc <ism330dhcx_mem_bank_set>
 80018d6:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80018de:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80018e0:	2301      	movs	r3, #1
 80018e2:	2146      	movs	r1, #70	; 0x46
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff fadb 	bl	8000ea0 <ism330dhcx_read_reg>
 80018ea:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80018f6:	2301      	movs	r3, #1
 80018f8:	2147      	movs	r1, #71	; 0x47
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fad0 	bl	8000ea0 <ism330dhcx_read_reg>
 8001900:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d104      	bne.n	8001912 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8001908:	2100      	movs	r1, #0
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fef6 	bl	80016fc <ism330dhcx_mem_bank_set>
 8001910:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8001926:	2102      	movs	r1, #2
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fee7 	bl	80016fc <ism330dhcx_mem_bank_set>
 800192e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d107      	bne.n	8001946 <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8001936:	f107 0208 	add.w	r2, r7, #8
 800193a:	2301      	movs	r3, #1
 800193c:	215f      	movs	r1, #95	; 0x5f
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff faae 	bl	8000ea0 <ism330dhcx_read_reg>
 8001944:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }
  if (ret == 0) {
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d104      	bne.n	8001956 <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800194c:	2100      	movs	r1, #0
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fed4 	bl	80016fc <ism330dhcx_mem_bank_set>
 8001954:	60f8      	str	r0, [r7, #12]
  }
  switch (emb_func_odr_cfg_b.fsm_odr) {
 8001956:	7a3b      	ldrb	r3, [r7, #8]
 8001958:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b03      	cmp	r3, #3
 8001960:	d81a      	bhi.n	8001998 <ism330dhcx_fsm_data_rate_get+0x7c>
 8001962:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	08001979 	.word	0x08001979
 800196c:	08001981 	.word	0x08001981
 8001970:	08001989 	.word	0x08001989
 8001974:	08001991 	.word	0x08001991
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
      break;
 800197e:	e00f      	b.n	80019a0 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
      break;
 8001986:	e00b      	b.n	80019a0 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
      break;
 800198e:	e007      	b.n	80019a0 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2203      	movs	r2, #3
 8001994:	701a      	strb	r2, [r3, #0]
      break;
 8001996:	e003      	b.n	80019a0 <ism330dhcx_fsm_data_rate_get+0x84>
    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
      break;
 800199e:	bf00      	nop
  }
  return ret;
 80019a0:	68fb      	ldr	r3, [r7, #12]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop

080019ac <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(ism330dhcx_ctx_t *ctx, uint8_t *val)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80019b6:	2102      	movs	r1, #2
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fe9f 	bl	80016fc <ism330dhcx_mem_bank_set>
 80019be:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d107      	bne.n	80019d6 <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80019c6:	f107 0208 	add.w	r2, r7, #8
 80019ca:	2301      	movs	r3, #1
 80019cc:	2105      	movs	r1, #5
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fa66 	bl	8000ea0 <ism330dhcx_read_reg>
 80019d4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }
  if (ret == 0) {
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10b      	bne.n	80019f4 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80019dc:	2100      	movs	r1, #0
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fe8c 	bl	80016fc <ism330dhcx_mem_bank_set>
 80019e4:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80019e6:	7a3b      	ldrb	r3, [r7, #8]
 80019e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 80019f4:	68fb      	ldr	r3, [r7, #12]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fe75 	bl	80016fc <ism330dhcx_mem_bank_set>
 8001a12:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d107      	bne.n	8001a2a <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8001a1a:	f107 0208 	add.w	r2, r7, #8
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2160      	movs	r1, #96	; 0x60
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fa3c 	bl	8000ea0 <ism330dhcx_read_reg>
 8001a28:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }
  if (ret == 0) {
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d12a      	bne.n	8001a86 <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8001a30:	7a3b      	ldrb	r3, [r7, #8]
 8001a32:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d81b      	bhi.n	8001a74 <ism330dhcx_mlc_data_rate_get+0x74>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <ism330dhcx_mlc_data_rate_get+0x44>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08001a5d 	.word	0x08001a5d
 8001a4c:	08001a65 	.word	0x08001a65
 8001a50:	08001a6d 	.word	0x08001a6d
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
        break;
 8001a5a:	e00f      	b.n	8001a7c <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
        break;
 8001a62:	e00b      	b.n	8001a7c <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2202      	movs	r2, #2
 8001a68:	701a      	strb	r2, [r3, #0]
        break;
 8001a6a:	e007      	b.n	8001a7c <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2203      	movs	r2, #3
 8001a70:	701a      	strb	r2, [r3, #0]
        break;
 8001a72:	e003      	b.n	8001a7c <ism330dhcx_mlc_data_rate_get+0x7c>
      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
        break;
 8001a7a:	bf00      	nop
    }
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fe3c 	bl	80016fc <ism330dhcx_mem_bank_set>
 8001a84:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a94:	f000 fe35 	bl	8002702 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 f82e 	bl	8001af8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9c:	f000 fa6c 	bl	8001f78 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001aa0:	f000 fa40 	bl	8001f24 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001aa4:	f000 f88a 	bl	8001bbc <_ZL12MX_ADC1_Initv>
  MX_CAN1_Init();
 8001aa8:	f000 f94e 	bl	8001d48 <_ZL12MX_CAN1_Initv>
  MX_RTC_Init();
 8001aac:	f000 f988 	bl	8001dc0 <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 8001ab0:	f000 f9f6 	bl	8001ea0 <_ZL12MX_SPI1_Initv>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ab4:	f005 fdd0 	bl	8007658 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ab8:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <main+0x50>)
 8001aba:	2100      	movs	r1, #0
 8001abc:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <main+0x54>)
 8001abe:	f005 fe15 	bl	80076ec <osThreadNew>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <main+0x58>)
 8001ac6:	6013      	str	r3, [r2, #0]

  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8001ac8:	4a08      	ldr	r2, [pc, #32]	; (8001aec <main+0x5c>)
 8001aca:	2100      	movs	r1, #0
 8001acc:	4808      	ldr	r0, [pc, #32]	; (8001af0 <main+0x60>)
 8001ace:	f005 fe0d 	bl	80076ec <osThreadNew>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <main+0x64>)
 8001ad6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ad8:	f005 fde2 	bl	80076a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001adc:	e7fe      	b.n	8001adc <main+0x4c>
 8001ade:	bf00      	nop
 8001ae0:	0800a1d0 	.word	0x0800a1d0
 8001ae4:	080020d9 	.word	0x080020d9
 8001ae8:	20000204 	.word	0x20000204
 8001aec:	0800a1f4 	.word	0x0800a1f4
 8001af0:	080020e9 	.word	0x080020e9
 8001af4:	20000208 	.word	0x20000208

08001af8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b098      	sub	sp, #96	; 0x60
 8001afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afe:	f107 0318 	add.w	r3, r7, #24
 8001b02:	2248      	movs	r2, #72	; 0x48
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f008 fb28 	bl	800a15c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f002 fb66 	bl	80041ec <HAL_PWREx_ControlVoltageScaling>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8001b30:	f000 fb64 	bl	80021fc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001b34:	2318      	movs	r3, #24
 8001b36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b44:	2360      	movs	r3, #96	; 0x60
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001b54:	233c      	movs	r3, #60	; 0x3c
 8001b56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b60:	2302      	movs	r3, #2
 8001b62:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b64:	f107 0318 	add.w	r3, r7, #24
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fc3d 	bl	80043e8 <HAL_RCC_OscConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8001b7e:	f000 fb3d 	bl	80021fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b82:	230f      	movs	r3, #15
 8001b84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b86:	2303      	movs	r3, #3
 8001b88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2105      	movs	r1, #5
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 f8ac 	bl	8004cf8 <HAL_RCC_ClockConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf14      	ite	ne
 8001ba6:	2301      	movne	r3, #1
 8001ba8:	2300      	moveq	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001bb0:	f000 fb24 	bl	80021fc <Error_Handler>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3760      	adds	r7, #96	; 0x60
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
 8001bdc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bde:	4b54      	ldr	r3, [pc, #336]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001be0:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <_ZL12MX_ADC1_Initv+0x178>)
 8001be2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001be4:	4b52      	ldr	r3, [pc, #328]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001be6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bf2:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c00:	2204      	movs	r2, #4
 8001c02:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c0a:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c12:	2204      	movs	r2, #4
 8001c14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c16:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c1e:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c24:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c32:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c38:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c40:	483b      	ldr	r0, [pc, #236]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c42:	f000 ff37 	bl	8002ab4 <HAL_ADC_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf14      	ite	ne
 8001c4c:	2301      	movne	r3, #1
 8001c4e:	2300      	moveq	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 8001c56:	f000 fad1 	bl	80021fc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4832      	ldr	r0, [pc, #200]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c66:	f001 fc99 	bl	800359c <HAL_ADCEx_MultiModeConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8001c7a:	f000 fabf 	bl	80021fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <_ZL12MX_ADC1_Initv+0x17c>)
 8001c80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c82:	2306      	movs	r3, #6
 8001c84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001c86:	2301      	movs	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c8a:	237f      	movs	r3, #127	; 0x7f
 8001c8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4825      	ldr	r0, [pc, #148]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001c9c:	f001 f85c 	bl	8002d58 <HAL_ADC_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 8001cb0:	f000 faa4 	bl	80021fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <_ZL12MX_ADC1_Initv+0x180>)
 8001cb6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cb8:	230c      	movs	r3, #12
 8001cba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481b      	ldr	r0, [pc, #108]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001cc2:	f001 f849 	bl	8002d58 <HAL_ADC_ConfigChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf14      	ite	ne
 8001ccc:	2301      	movne	r3, #1
 8001cce:	2300      	moveq	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <_ZL12MX_ADC1_Initv+0x11e>
  {
    Error_Handler();
 8001cd6:	f000 fa91 	bl	80021fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <_ZL12MX_ADC1_Initv+0x184>)
 8001cdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cde:	2312      	movs	r3, #18
 8001ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4812      	ldr	r0, [pc, #72]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001ce8:	f001 f836 	bl	8002d58 <HAL_ADC_ConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bf14      	ite	ne
 8001cf2:	2301      	movne	r3, #1
 8001cf4:	2300      	moveq	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <_ZL12MX_ADC1_Initv+0x144>
  {
    Error_Handler();
 8001cfc:	f000 fa7e 	bl	80021fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <_ZL12MX_ADC1_Initv+0x188>)
 8001d02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d04:	2318      	movs	r3, #24
 8001d06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4808      	ldr	r0, [pc, #32]	; (8001d30 <_ZL12MX_ADC1_Initv+0x174>)
 8001d0e:	f001 f823 	bl	8002d58 <HAL_ADC_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf14      	ite	ne
 8001d18:	2301      	movne	r3, #1
 8001d1a:	2300      	moveq	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <_ZL12MX_ADC1_Initv+0x16a>
  {
    Error_Handler();
 8001d22:	f000 fa6b 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000094 	.word	0x20000094
 8001d34:	50040000 	.word	0x50040000
 8001d38:	04300002 	.word	0x04300002
 8001d3c:	08600004 	.word	0x08600004
 8001d40:	0c900008 	.word	0x0c900008
 8001d44:	10c00010 	.word	0x10c00010

08001d48 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d4e:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <_ZL12MX_CAN1_Initv+0x74>)
 8001d50:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d54:	2208      	movs	r2, #8
 8001d56:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d66:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001d6a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d72:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <_ZL12MX_CAN1_Initv+0x70>)
 8001d9a:	f001 fca3 	bl	80036e4 <HAL_CAN_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf14      	ite	ne
 8001da4:	2301      	movne	r3, #1
 8001da6:	2300      	moveq	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8001dae:	f000 fa25 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000015c 	.word	0x2000015c
 8001dbc:	40006400 	.word	0x40006400

08001dc0 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001dda:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <_ZL11MX_RTC_Initv+0xdc>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dde:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001de6:	227f      	movs	r2, #127	; 0x7f
 8001de8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001dea:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001dec:	22ff      	movs	r2, #255	; 0xff
 8001dee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dfc:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e02:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001e04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e08:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001e0a:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e10:	4821      	ldr	r0, [pc, #132]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001e12:	f003 ff93 	bl	8005d3c <HAL_RTC_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 8001e26:	f000 f9e9 	bl	80021fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2201      	movs	r2, #1
 8001e42:	4619      	mov	r1, r3
 8001e44:	4814      	ldr	r0, [pc, #80]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001e46:	f004 f809 	bl	8005e5c <HAL_RTC_SetTime>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf14      	ite	ne
 8001e50:	2301      	movne	r3, #1
 8001e52:	2300      	moveq	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 8001e5a:	f000 f9cf 	bl	80021fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e62:	2301      	movs	r3, #1
 8001e64:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e6e:	463b      	mov	r3, r7
 8001e70:	2201      	movs	r2, #1
 8001e72:	4619      	mov	r1, r3
 8001e74:	4808      	ldr	r0, [pc, #32]	; (8001e98 <_ZL11MX_RTC_Initv+0xd8>)
 8001e76:	f004 f891 	bl	8005f9c <HAL_RTC_SetDate>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <_ZL11MX_RTC_Initv+0xce>
  {
    Error_Handler();
 8001e8a:	f000 f9b7 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000184 	.word	0x20000184
 8001e9c:	40002800 	.word	0x40002800

08001ea0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <_ZL12MX_SPI1_Initv+0x80>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001eac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001eba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ebe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ecc:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001ed6:	2230      	movs	r2, #48	; 0x30
 8001ed8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001eee:	2207      	movs	r2, #7
 8001ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001efe:	4807      	ldr	r0, [pc, #28]	; (8001f1c <_ZL12MX_SPI1_Initv+0x7c>)
 8001f00:	f004 f98e 	bl	8006220 <HAL_SPI_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8001f14:	f000 f972 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000030 	.word	0x20000030
 8001f20:	40013000 	.word	0x40013000

08001f24 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <_ZL11MX_DMA_Initv+0x50>)
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2e:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <_ZL11MX_DMA_Initv+0x50>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6493      	str	r3, [r2, #72]	; 0x48
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <_ZL11MX_DMA_Initv+0x50>)
 8001f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <_ZL11MX_DMA_Initv+0x50>)
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <_ZL11MX_DMA_Initv+0x50>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6493      	str	r3, [r2, #72]	; 0x48
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <_ZL11MX_DMA_Initv+0x50>)
 8001f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2105      	movs	r1, #5
 8001f5e:	200b      	movs	r0, #11
 8001f60:	f001 fd74 	bl	8003a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f64:	200b      	movs	r0, #11
 8001f66:	f001 fd8d 	bl	8003a84 <HAL_NVIC_EnableIRQ>

}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000

08001f78 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <_ZL12MX_GPIO_Initv+0x154>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <_ZL12MX_GPIO_Initv+0x154>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <_ZL12MX_GPIO_Initv+0x154>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b49      	ldr	r3, [pc, #292]	; (80020cc <_ZL12MX_GPIO_Initv+0x154>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4a48      	ldr	r2, [pc, #288]	; (80020cc <_ZL12MX_GPIO_Initv+0x154>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb2:	4b46      	ldr	r3, [pc, #280]	; (80020cc <_ZL12MX_GPIO_Initv+0x154>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	4b43      	ldr	r3, [pc, #268]	; (80020cc <_ZL12MX_GPIO_Initv+0x154>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a42      	ldr	r2, [pc, #264]	; (80020cc <_ZL12MX_GPIO_Initv+0x154>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b40      	ldr	r3, [pc, #256]	; (80020cc <_ZL12MX_GPIO_Initv+0x154>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2110      	movs	r1, #16
 8001fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fde:	f002 f8ab 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f24f 0180 	movw	r1, #61568	; 0xf080
 8001fe8:	4839      	ldr	r0, [pc, #228]	; (80020d0 <_ZL12MX_GPIO_Initv+0x158>)
 8001fea:	f002 f8a5 	bl	8004138 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001ff4:	4837      	ldr	r0, [pc, #220]	; (80020d4 <_ZL12MX_GPIO_Initv+0x15c>)
 8001ff6:	f002 f89f 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002002:	2302      	movs	r3, #2
 8002004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002014:	f001 fefe 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : EEPROM_SCL_Pin EEPROM_SDA_Pin */
  GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8002018:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800201c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201e:	2312      	movs	r3, #18
 8002020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800202a:	2304      	movs	r3, #4
 800202c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	4619      	mov	r1, r3
 8002034:	4826      	ldr	r0, [pc, #152]	; (80020d0 <_ZL12MX_GPIO_Initv+0x158>)
 8002036:	f001 feed 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           PB7 */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800203a:	f24f 0380 	movw	r3, #61568	; 0xf080
 800203e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4619      	mov	r1, r3
 8002052:	481f      	ldr	r0, [pc, #124]	; (80020d0 <_ZL12MX_GPIO_Initv+0x158>)
 8002054:	f001 fede 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002058:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800205c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205e:	2301      	movs	r3, #1
 8002060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	4619      	mov	r1, r3
 8002070:	4818      	ldr	r0, [pc, #96]	; (80020d4 <_ZL12MX_GPIO_Initv+0x15c>)
 8002072:	f001 fecf 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4619      	mov	r1, r3
 800208a:	4812      	ldr	r0, [pc, #72]	; (80020d4 <_ZL12MX_GPIO_Initv+0x15c>)
 800208c:	f001 fec2 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002090:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	4619      	mov	r1, r3
 80020a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a8:	f001 feb4 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISM_INT1_Pin */
  GPIO_InitStruct.Pin = ISM_INT1_Pin;
 80020ac:	2340      	movs	r3, #64	; 0x40
 80020ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ISM_INT1_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	4804      	ldr	r0, [pc, #16]	; (80020d0 <_ZL12MX_GPIO_Initv+0x158>)
 80020c0:	f001 fea8 	bl	8003e14 <HAL_GPIO_Init>

}
 80020c4:	bf00      	nop
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	48000800 	.word	0x48000800

080020d8 <_Z16StartDefaultTaskPv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */

	for (;;) {
		osDelay(1);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f005 fb95 	bl	8007810 <osDelay>
 80020e6:	e7fb      	b.n	80020e0 <_Z16StartDefaultTaskPv+0x8>

080020e8 <_Z12StartBlink01Pv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	; 0x30
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink01 */

	ISM330DHCXSensor AccGyr;
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f8db 	bl	80002b0 <_ZN16ISM330DHCXSensorC1Ev>
	AccGyr.begin();
 80020fa:	f107 0310 	add.w	r3, r7, #16
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe f991 	bl	8000426 <_ZN16ISM330DHCXSensor5beginEv>
	AccGyr.ACC_Enable();
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f9a9 	bl	8000460 <_ZN16ISM330DHCXSensor10ACC_EnableEv>
	AccGyr.GYRO_Enable();
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fb5b 	bl	80007ce <_ZN16ISM330DHCXSensor11GYRO_EnableEv>
	// Configure ODR and FS of the acc and gyro
	AccGyr.ACC_SetOutputDataRate(SENSOR_ODR);
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80021c0 <_Z12StartBlink01Pv+0xd8>
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fa0b 	bl	800053c <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf>
	AccGyr.ACC_SetFullScale(ACC_FS);
 8002126:	f107 0310 	add.w	r3, r7, #16
 800212a:	2102      	movs	r1, #2
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fa95 	bl	800065c <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl>
	AccGyr.GYRO_SetOutputDataRate(SENSOR_ODR);
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80021c0 <_Z12StartBlink01Pv+0xd8>
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fbd2 	bl	80008e4 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf>
	AccGyr.GYRO_SetFullScale(GYR_FS);
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fc5b 	bl	8000a04 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl>
	// Configure FIFO BDR for acc and gyro
	AccGyr.FIFO_ACC_Set_BDR(SENSOR_ODR);
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80021c0 <_Z12StartBlink01Pv+0xd8>
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fd18 	bl	8000b8c <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf>
	AccGyr.FIFO_GYRO_Set_BDR(SENSOR_ODR);
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80021c0 <_Z12StartBlink01Pv+0xd8>
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fda1 	bl	8000cac <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf>
	// Set FIFO in Continuous mode
	AccGyr.FIFO_Set_Mode(ISM330DHCX_STREAM_MODE);
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	2106      	movs	r1, #6
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fe2b 	bl	8000dcc <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh>


	uint8_t status;
	uint16_t fifo_samples;
	uint8_t data[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <_Z12StartBlink01Pv+0xdc>)
 8002178:	f107 0308 	add.w	r3, r7, #8
 800217c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002180:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mail_box = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Infinite loop */
	for (;;) {
		osDelay(10);
 8002188:	200a      	movs	r0, #10
 800218a:	f005 fb41 	bl	8007810 <osDelay>
		i ^= 1;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <_Z12StartBlink01Pv+0xe0>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f083 0301 	eor.w	r3, r3, #1
 8002196:	b2da      	uxtb	r2, r3
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <_Z12StartBlink01Pv+0xe0>)
 800219a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800219c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a0:	480a      	ldr	r0, [pc, #40]	; (80021cc <_Z12StartBlink01Pv+0xe4>)
 80021a2:	f001 ffe1 	bl	8004168 <HAL_GPIO_TogglePin>


		AccGyr.ACC_GetAxes(accelerometer);
 80021a6:	f107 0310 	add.w	r3, r7, #16
 80021aa:	4909      	ldr	r1, [pc, #36]	; (80021d0 <_Z12StartBlink01Pv+0xe8>)
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe faad 	bl	800070c <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl>
		AccGyr.GYRO_GetAxes(gyroscope);
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	4907      	ldr	r1, [pc, #28]	; (80021d4 <_Z12StartBlink01Pv+0xec>)
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fc88 	bl	8000ace <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl>
		osDelay(10);
 80021be:	e7e3      	b.n	8002188 <_Z12StartBlink01Pv+0xa0>
 80021c0:	42500000 	.word	0x42500000
 80021c4:	0800a1b0 	.word	0x0800a1b0
 80021c8:	20000000 	.word	0x20000000
 80021cc:	48000400 	.word	0x48000400
 80021d0:	2000020c 	.word	0x2000020c
 80021d4:	20000218 	.word	0x20000218

080021d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021ea:	f000 faa3 	bl	8002734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40001000 	.word	0x40001000

080021fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
}
 8002202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002204:	e7fe      	b.n	8002204 <Error_Handler+0x8>
	...

08002208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_MspInit+0x5c>)
 8002210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_MspInit+0x5c>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6613      	str	r3, [r2, #96]	; 0x60
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_MspInit+0x5c>)
 800221c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_MspInit+0x5c>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_MspInit+0x5c>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	6593      	str	r3, [r2, #88]	; 0x58
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_MspInit+0x5c>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	210f      	movs	r1, #15
 8002242:	f06f 0001 	mvn.w	r0, #1
 8002246:	f001 fc01 	bl	8003a4c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 5, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2105      	movs	r1, #5
 800224e:	2001      	movs	r0, #1
 8002250:	f001 fbfc 	bl	8003a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8002254:	2001      	movs	r0, #1
 8002256:	f001 fc15 	bl	8003a84 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000

08002268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0b0      	sub	sp, #192	; 0xc0
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2298      	movs	r2, #152	; 0x98
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f007 ff67 	bl	800a15c <memset>
  if(hadc->Instance==ADC1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a3c      	ldr	r2, [pc, #240]	; (8002384 <HAL_ADC_MspInit+0x11c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d171      	bne.n	800237c <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002298:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800229c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800229e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80022a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80022ae:	2310      	movs	r3, #16
 80022b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80022b2:	2302      	movs	r3, #2
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80022b6:	2302      	movs	r3, #2
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022ba:	2302      	movs	r3, #2
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80022be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 ffe3 	bl	8005294 <HAL_RCCEx_PeriphCLKConfig>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80022d4:	f7ff ff92 	bl	80021fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022d8:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_ADC_MspInit+0x120>)
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	4a2a      	ldr	r2, [pc, #168]	; (8002388 <HAL_ADC_MspInit+0x120>)
 80022de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e4:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_ADC_MspInit+0x120>)
 80022e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f0:	4b25      	ldr	r3, [pc, #148]	; (8002388 <HAL_ADC_MspInit+0x120>)
 80022f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f4:	4a24      	ldr	r2, [pc, #144]	; (8002388 <HAL_ADC_MspInit+0x120>)
 80022f6:	f043 0304 	orr.w	r3, r3, #4
 80022fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <HAL_ADC_MspInit+0x120>)
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 8002308:	233f      	movs	r3, #63	; 0x3f
 800230a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |ADC4_Pin|ADC5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800230e:	230b      	movs	r3, #11
 8002310:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800231e:	4619      	mov	r1, r3
 8002320:	481a      	ldr	r0, [pc, #104]	; (800238c <HAL_ADC_MspInit+0x124>)
 8002322:	f001 fd77 	bl	8003e14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_ADC_MspInit+0x128>)
 8002328:	4a1a      	ldr	r2, [pc, #104]	; (8002394 <HAL_ADC_MspInit+0x12c>)
 800232a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_ADC_MspInit+0x128>)
 800232e:	2205      	movs	r2, #5
 8002330:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_ADC_MspInit+0x128>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_ADC_MspInit+0x128>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_ADC_MspInit+0x128>)
 8002340:	2280      	movs	r2, #128	; 0x80
 8002342:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_ADC_MspInit+0x128>)
 8002346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_ADC_MspInit+0x128>)
 800234e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002352:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_ADC_MspInit+0x128>)
 8002356:	2220      	movs	r2, #32
 8002358:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_ADC_MspInit+0x128>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002360:	480b      	ldr	r0, [pc, #44]	; (8002390 <HAL_ADC_MspInit+0x128>)
 8002362:	f001 fb9d 	bl	8003aa0 <HAL_DMA_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800236c:	f7ff ff46 	bl	80021fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_ADC_MspInit+0x128>)
 8002374:	651a      	str	r2, [r3, #80]	; 0x50
 8002376:	4a06      	ldr	r2, [pc, #24]	; (8002390 <HAL_ADC_MspInit+0x128>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800237c:	bf00      	nop
 800237e:	37c0      	adds	r7, #192	; 0xc0
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	50040000 	.word	0x50040000
 8002388:	40021000 	.word	0x40021000
 800238c:	48000800 	.word	0x48000800
 8002390:	200000fc 	.word	0x200000fc
 8002394:	40020008 	.word	0x40020008

08002398 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a17      	ldr	r2, [pc, #92]	; (8002414 <HAL_CAN_MspInit+0x7c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d128      	bne.n	800240c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_CAN_MspInit+0x80>)
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	4a16      	ldr	r2, [pc, #88]	; (8002418 <HAL_CAN_MspInit+0x80>)
 80023c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023c4:	6593      	str	r3, [r2, #88]	; 0x58
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_CAN_MspInit+0x80>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_CAN_MspInit+0x80>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <HAL_CAN_MspInit+0x80>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_CAN_MspInit+0x80>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80023fc:	2309      	movs	r3, #9
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <HAL_CAN_MspInit+0x84>)
 8002408:	f001 fd04 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800240c:	bf00      	nop
 800240e:	3728      	adds	r7, #40	; 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40006400 	.word	0x40006400
 8002418:	40021000 	.word	0x40021000
 800241c:	48000400 	.word	0x48000400

08002420 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0aa      	sub	sp, #168	; 0xa8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	2298      	movs	r2, #152	; 0x98
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f007 fe93 	bl	800a15c <memset>
  if(hrtc->Instance==RTC)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_RTC_MspInit+0x74>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d124      	bne.n	800248a <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002444:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	4618      	mov	r0, r3
 8002454:	f002 ff1e 	bl	8005294 <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800245e:	f7ff fecd 	bl	80021fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RTC_MspInit+0x78>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_RTC_MspInit+0x78>)
 800246a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RTC_MspInit+0x78>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_RTC_MspInit+0x78>)
 8002478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247c:	6593      	str	r3, [r2, #88]	; 0x58
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RTC_MspInit+0x78>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800248a:	bf00      	nop
 800248c:	37a8      	adds	r7, #168	; 0xa8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40002800 	.word	0x40002800
 8002498:	40021000 	.word	0x40021000

0800249c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_SPI_MspInit+0x7c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d128      	bne.n	8002510 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c2:	4a16      	ldr	r2, [pc, #88]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024c8:	6613      	str	r3, [r2, #96]	; 0x60
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024ee:	23e0      	movs	r3, #224	; 0xe0
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024fe:	2305      	movs	r3, #5
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	4619      	mov	r1, r3
 8002508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800250c:	f001 fc82 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002510:	bf00      	nop
 8002512:	3728      	adds	r7, #40	; 0x28
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40013000 	.word	0x40013000
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <HAL_TIM_Base_MspInit+0x44>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d113      	bne.n	800255a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_TIM_Base_MspInit+0x48>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <HAL_TIM_Base_MspInit+0x48>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	6593      	str	r3, [r2, #88]	; 0x58
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_TIM_Base_MspInit+0x48>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2105      	movs	r1, #5
 800254e:	201d      	movs	r0, #29
 8002550:	f001 fa7c 	bl	8003a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002554:	201d      	movs	r0, #29
 8002556:	f001 fa95 	bl	8003a84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40000400 	.word	0x40000400
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	; 0x30
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800257c:	2200      	movs	r2, #0
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	2036      	movs	r0, #54	; 0x36
 8002582:	f001 fa63 	bl	8003a4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002586:	2036      	movs	r0, #54	; 0x36
 8002588:	f001 fa7c 	bl	8003a84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_InitTick+0x9c>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_InitTick+0x9c>)
 8002592:	f043 0310 	orr.w	r3, r3, #16
 8002596:	6593      	str	r3, [r2, #88]	; 0x58
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_InitTick+0x9c>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025a4:	f107 0210 	add.w	r2, r7, #16
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 fd7c 	bl	80050ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025b4:	f002 fd64 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 80025b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	4a13      	ldr	r2, [pc, #76]	; (800260c <HAL_InitTick+0xa0>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	3b01      	subs	r3, #1
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_InitTick+0xa4>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_InitTick+0xa8>)
 80025cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_InitTick+0xa4>)
 80025d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025d6:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <HAL_InitTick+0xa4>)
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_InitTick+0xa4>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_InitTick+0xa4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80025e8:	4809      	ldr	r0, [pc, #36]	; (8002610 <HAL_InitTick+0xa4>)
 80025ea:	f004 fd29 	bl	8007040 <HAL_TIM_Base_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d104      	bne.n	80025fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80025f4:	4806      	ldr	r0, [pc, #24]	; (8002610 <HAL_InitTick+0xa4>)
 80025f6:	f004 fd7b 	bl	80070f0 <HAL_TIM_Base_Start_IT>
 80025fa:	4603      	mov	r3, r0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	431bde83 	.word	0x431bde83
 8002610:	20001aec 	.word	0x20001aec
 8002614:	40001000 	.word	0x40001000

08002618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800261c:	e7fe      	b.n	800261c <NMI_Handler+0x4>

0800261e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <HardFault_Handler+0x4>

08002624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <MemManage_Handler+0x4>

0800262a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <UsageFault_Handler+0x4>

08002636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8002648:	f001 fe74 	bl	8004334 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}

08002650 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <DMA1_Channel1_IRQHandler+0x10>)
 8002656:	f001 facb 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200000fc 	.word	0x200000fc

08002664 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <TIM3_IRQHandler+0x10>)
 800266a:	f004 fdb1 	bl	80071d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200001b8 	.word	0x200001b8

08002678 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM6_DAC_IRQHandler+0x10>)
 800267e:	f004 fda7 	bl	80071d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20001aec 	.word	0x20001aec

0800268c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <SystemInit+0x20>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <SystemInit+0x20>)
 8002698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800269c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026b4:	f7ff ffea 	bl	800268c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <LoopForever+0x6>)
  ldr r1, =_edata
 80026ba:	490d      	ldr	r1, [pc, #52]	; (80026f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <LoopForever+0xe>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d0:	4c0a      	ldr	r4, [pc, #40]	; (80026fc <LoopForever+0x16>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026de:	f007 fd0b 	bl	800a0f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026e2:	f7ff f9d5 	bl	8001a90 <main>

080026e6 <LoopForever>:

LoopForever:
    b LoopForever
 80026e6:	e7fe      	b.n	80026e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80026f4:	0800a268 	.word	0x0800a268
  ldr r2, =_sbss
 80026f8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80026fc:	20001b7c 	.word	0x20001b7c

08002700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC1_2_IRQHandler>

08002702 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800270c:	2003      	movs	r0, #3
 800270e:	f001 f992 	bl	8003a36 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002712:	200f      	movs	r0, #15
 8002714:	f7ff ff2a 	bl	800256c <HAL_InitTick>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	e001      	b.n	8002728 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002724:	f7ff fd70 	bl	8002208 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002728:	79fb      	ldrb	r3, [r7, #7]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_IncTick+0x20>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_IncTick+0x24>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4413      	add	r3, r2
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <HAL_IncTick+0x24>)
 8002746:	6013      	str	r3, [r2, #0]
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	2000000c 	.word	0x2000000c
 8002758:	20001b38 	.word	0x20001b38

0800275c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return uwTick;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_GetTick+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20001b38 	.word	0x20001b38

08002774 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	609a      	str	r2, [r3, #8]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	609a      	str	r2, [r3, #8]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3360      	adds	r3, #96	; 0x60
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <LL_ADC_SetOffset+0x44>)
 80027fe:	4013      	ands	r3, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	4313      	orrs	r3, r2
 800280c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	03fff000 	.word	0x03fff000

08002824 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3360      	adds	r3, #96	; 0x60
 8002832:	461a      	mov	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3360      	adds	r3, #96	; 0x60
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	431a      	orrs	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	615a      	str	r2, [r3, #20]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3330      	adds	r3, #48	; 0x30
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	4413      	add	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	211f      	movs	r1, #31
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	401a      	ands	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0e9b      	lsrs	r3, r3, #26
 80028e4:	f003 011f 	and.w	r1, r3, #31
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	431a      	orrs	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3314      	adds	r3, #20
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0e5b      	lsrs	r3, r3, #25
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	4413      	add	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0d1b      	lsrs	r3, r3, #20
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2107      	movs	r1, #7
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	401a      	ands	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	0d1b      	lsrs	r3, r3, #20
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	431a      	orrs	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	43db      	mvns	r3, r3
 8002976:	401a      	ands	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0318 	and.w	r3, r3, #24
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002980:	40d9      	lsrs	r1, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	400b      	ands	r3, r1
 8002986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298a:	431a      	orrs	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	0007ffff 	.word	0x0007ffff

080029a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6093      	str	r3, [r2, #8]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029dc:	d101      	bne.n	80029e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a2c:	d101      	bne.n	8002a32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <LL_ADC_IsEnabled+0x18>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <LL_ADC_IsEnabled+0x1a>
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d101      	bne.n	8002a7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d101      	bne.n	8002aa4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e134      	b.n	8002d38 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fbc3 	bl	8002268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff67 	bl	80029c8 <LL_ADC_IsDeepPowerDownEnabled>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d004      	beq.n	8002b0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff4d 	bl	80029a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff82 	bl	8002a18 <LL_ADC_IsInternalRegulatorEnabled>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d115      	bne.n	8002b46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff66 	bl	80029f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b24:	4b86      	ldr	r3, [pc, #536]	; (8002d40 <HAL_ADC_Init+0x28c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	4a86      	ldr	r2, [pc, #536]	; (8002d44 <HAL_ADC_Init+0x290>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	3301      	adds	r3, #1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b38:	e002      	b.n	8002b40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f9      	bne.n	8002b3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff64 	bl	8002a18 <LL_ADC_IsInternalRegulatorEnabled>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10d      	bne.n	8002b72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f043 0210 	orr.w	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff75 	bl	8002a66 <LL_ADC_REG_IsConversionOngoing>
 8002b7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 80cd 	bne.w	8002d26 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 80c9 	bne.w	8002d26 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b9c:	f043 0202 	orr.w	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff49 	bl	8002a40 <LL_ADC_IsEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d110      	bne.n	8002bd6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb4:	4864      	ldr	r0, [pc, #400]	; (8002d48 <HAL_ADC_Init+0x294>)
 8002bb6:	f7ff ff43 	bl	8002a40 <LL_ADC_IsEnabled>
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4863      	ldr	r0, [pc, #396]	; (8002d4c <HAL_ADC_Init+0x298>)
 8002bbe:	f7ff ff3f 	bl	8002a40 <LL_ADC_IsEnabled>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4323      	orrs	r3, r4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	485f      	ldr	r0, [pc, #380]	; (8002d50 <HAL_ADC_Init+0x29c>)
 8002bd2:	f7ff fdcf 	bl	8002774 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7e5b      	ldrb	r3, [r3, #25]
 8002bda:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002be0:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002be6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002bec:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d106      	bne.n	8002c12 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	045b      	lsls	r3, r3, #17
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_ADC_Init+0x2a0>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	69b9      	ldr	r1, [r7, #24]
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ff0d 	bl	8002a66 <LL_ADC_REG_IsConversionOngoing>
 8002c4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff1a 	bl	8002a8c <LL_ADC_INJ_IsConversionOngoing>
 8002c58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d140      	bne.n	8002ce2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d13d      	bne.n	8002ce2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7e1b      	ldrb	r3, [r3, #24]
 8002c6e:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c70:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c78:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c88:	f023 0306 	bic.w	r3, r3, #6
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	69b9      	ldr	r1, [r7, #24]
 8002c92:	430b      	orrs	r3, r1
 8002c94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d118      	bne.n	8002cd2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002caa:	f023 0304 	bic.w	r3, r3, #4
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cbc:	4311      	orrs	r1, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	611a      	str	r2, [r3, #16]
 8002cd0:	e007      	b.n	8002ce2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d10c      	bne.n	8002d04 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f023 010f 	bic.w	r1, r3, #15
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	1e5a      	subs	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
 8002d02:	e007      	b.n	8002d14 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 020f 	bic.w	r2, r2, #15
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	f023 0303 	bic.w	r3, r3, #3
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	659a      	str	r2, [r3, #88]	; 0x58
 8002d24:	e007      	b.n	8002d36 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	f043 0210 	orr.w	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d36:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3724      	adds	r7, #36	; 0x24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	20000004 	.word	0x20000004
 8002d44:	053e2d63 	.word	0x053e2d63
 8002d48:	50040000 	.word	0x50040000
 8002d4c:	50040100 	.word	0x50040100
 8002d50:	50040300 	.word	0x50040300
 8002d54:	fff0c007 	.word	0xfff0c007

08002d58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b0b6      	sub	sp, #216	; 0xd8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x22>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e3d5      	b.n	8003526 <HAL_ADC_ConfigChannel+0x7ce>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fe6d 	bl	8002a66 <LL_ADC_REG_IsConversionOngoing>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 83ba 	bne.w	8003508 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d824      	bhi.n	8002de6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	3b02      	subs	r3, #2
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d81b      	bhi.n	8002dde <HAL_ADC_ConfigChannel+0x86>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_ADC_ConfigChannel+0x54>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002dbd 	.word	0x08002dbd
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002dcd 	.word	0x08002dcd
 8002db8:	08002dd5 	.word	0x08002dd5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	605a      	str	r2, [r3, #4]
          break;
 8002dc2:	e011      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2212      	movs	r2, #18
 8002dc8:	605a      	str	r2, [r3, #4]
          break;
 8002dca:	e00d      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2218      	movs	r2, #24
 8002dd0:	605a      	str	r2, [r3, #4]
          break;
 8002dd2:	e009      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dda:	605a      	str	r2, [r3, #4]
          break;
 8002ddc:	e004      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2206      	movs	r2, #6
 8002de2:	605a      	str	r2, [r3, #4]
          break;
 8002de4:	e000      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002de6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	f7ff fd59 	bl	80028ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fe31 	bl	8002a66 <LL_ADC_REG_IsConversionOngoing>
 8002e04:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fe3d 	bl	8002a8c <LL_ADC_INJ_IsConversionOngoing>
 8002e12:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 81c1 	bne.w	80031a2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 81bc 	bne.w	80031a2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e32:	d10f      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f7ff fd60 	bl	8002904 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fd1a 	bl	8002886 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e52:	e00e      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6819      	ldr	r1, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f7ff fd4f 	bl	8002904 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fd0a 	bl	8002886 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	08db      	lsrs	r3, r3, #3
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d00a      	beq.n	8002eaa <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6919      	ldr	r1, [r3, #16]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ea4:	f7ff fc9a 	bl	80027dc <LL_ADC_SetOffset>
 8002ea8:	e17b      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fcb7 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x17e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fcac 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	e01e      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x1bc>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fca1 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e004      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1d4>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	e018      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x206>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002f50:	2320      	movs	r3, #32
 8002f52:	e004      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002f54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d106      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fc70 	bl	8002850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fc54 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x244>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fc49 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	f003 021f 	and.w	r2, r3, #31
 8002f9a:	e01e      	b.n	8002fda <HAL_ADC_ConfigChannel+0x282>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fc3e 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e004      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002fce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d105      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x29a>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	0e9b      	lsrs	r3, r3, #26
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	e018      	b.n	8003024 <HAL_ADC_ConfigChannel+0x2cc>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003006:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800300a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800300e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003016:	2320      	movs	r3, #32
 8003018:	e004      	b.n	8003024 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800301a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003024:	429a      	cmp	r2, r3
 8003026:	d106      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2200      	movs	r2, #0
 800302e:	2101      	movs	r1, #1
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fc0d 	bl	8002850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2102      	movs	r1, #2
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fbf1 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x30a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2102      	movs	r1, #2
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fbe6 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8003058:	4603      	mov	r3, r0
 800305a:	0e9b      	lsrs	r3, r3, #26
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	e01e      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x348>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2102      	movs	r1, #2
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fbdb 	bl	8002824 <LL_ADC_GetOffsetChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003084:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003090:	2320      	movs	r3, #32
 8003092:	e004      	b.n	800309e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x360>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	e016      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x38e>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80030ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80030d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e004      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80030dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d106      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2200      	movs	r2, #0
 80030f0:	2102      	movs	r1, #2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fbac 	bl	8002850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2103      	movs	r1, #3
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fb90 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8003104:	4603      	mov	r3, r0
 8003106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x3cc>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2103      	movs	r1, #3
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fb85 	bl	8002824 <LL_ADC_GetOffsetChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	0e9b      	lsrs	r3, r3, #26
 800311e:	f003 021f 	and.w	r2, r3, #31
 8003122:	e017      	b.n	8003154 <HAL_ADC_ConfigChannel+0x3fc>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2103      	movs	r1, #3
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fb7a 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800313c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800313e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003146:	2320      	movs	r3, #32
 8003148:	e003      	b.n	8003152 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800314a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_ADC_ConfigChannel+0x414>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0e9b      	lsrs	r3, r3, #26
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	e011      	b.n	8003190 <HAL_ADC_ConfigChannel+0x438>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800317a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800317e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003184:	2320      	movs	r3, #32
 8003186:	e003      	b.n	8003190 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2200      	movs	r2, #0
 800319a:	2103      	movs	r1, #3
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fb57 	bl	8002850 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fc4a 	bl	8002a40 <LL_ADC_IsEnabled>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 8140 	bne.w	8003434 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f7ff fbcb 	bl	800295c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	4a8f      	ldr	r2, [pc, #572]	; (8003408 <HAL_ADC_ConfigChannel+0x6b0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	f040 8131 	bne.w	8003434 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x4a2>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2b09      	cmp	r3, #9
 80031f0:	bf94      	ite	ls
 80031f2:	2301      	movls	r3, #1
 80031f4:	2300      	movhi	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	e019      	b.n	800322e <HAL_ADC_ConfigChannel+0x4d6>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800320c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003212:	2320      	movs	r3, #32
 8003214:	e003      	b.n	800321e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	3301      	adds	r3, #1
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2b09      	cmp	r3, #9
 8003226:	bf94      	ite	ls
 8003228:	2301      	movls	r3, #1
 800322a:	2300      	movhi	r3, #0
 800322c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800322e:	2b00      	cmp	r3, #0
 8003230:	d079      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d107      	bne.n	800324e <HAL_ADC_ConfigChannel+0x4f6>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	3301      	adds	r3, #1
 8003246:	069b      	lsls	r3, r3, #26
 8003248:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800324c:	e015      	b.n	800327a <HAL_ADC_ConfigChannel+0x522>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800325c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003266:	2320      	movs	r3, #32
 8003268:	e003      	b.n	8003272 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800326a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	3301      	adds	r3, #1
 8003274:	069b      	lsls	r3, r3, #26
 8003276:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_ADC_ConfigChannel+0x542>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	0e9b      	lsrs	r3, r3, #26
 800328c:	3301      	adds	r3, #1
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	2101      	movs	r1, #1
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	e017      	b.n	80032ca <HAL_ADC_ConfigChannel+0x572>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80032a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80032ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80032b2:	2320      	movs	r3, #32
 80032b4:	e003      	b.n	80032be <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80032b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	3301      	adds	r3, #1
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	ea42 0103 	orr.w	r1, r2, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x598>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	3301      	adds	r3, #1
 80032e2:	f003 021f 	and.w	r2, r3, #31
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	051b      	lsls	r3, r3, #20
 80032ee:	e018      	b.n	8003322 <HAL_ADC_ConfigChannel+0x5ca>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003308:	2320      	movs	r3, #32
 800330a:	e003      	b.n	8003314 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800330c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3301      	adds	r3, #1
 8003316:	f003 021f 	and.w	r2, r3, #31
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003322:	430b      	orrs	r3, r1
 8003324:	e081      	b.n	800342a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332e:	2b00      	cmp	r3, #0
 8003330:	d107      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x5ea>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	0e9b      	lsrs	r3, r3, #26
 8003338:	3301      	adds	r3, #1
 800333a:	069b      	lsls	r3, r3, #26
 800333c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003340:	e015      	b.n	800336e <HAL_ADC_ConfigChannel+0x616>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800335a:	2320      	movs	r3, #32
 800335c:	e003      	b.n	8003366 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3301      	adds	r3, #1
 8003368:	069b      	lsls	r3, r3, #26
 800336a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_ADC_ConfigChannel+0x636>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	0e9b      	lsrs	r3, r3, #26
 8003380:	3301      	adds	r3, #1
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2101      	movs	r1, #1
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	e017      	b.n	80033be <HAL_ADC_ConfigChannel+0x666>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	61fb      	str	r3, [r7, #28]
  return result;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80033a6:	2320      	movs	r3, #32
 80033a8:	e003      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	ea42 0103 	orr.w	r1, r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x692>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	0e9b      	lsrs	r3, r3, #26
 80033d4:	3301      	adds	r3, #1
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	051b      	lsls	r3, r3, #20
 80033e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033e8:	e01e      	b.n	8003428 <HAL_ADC_ConfigChannel+0x6d0>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	613b      	str	r3, [r7, #16]
  return result;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e006      	b.n	8003414 <HAL_ADC_ConfigChannel+0x6bc>
 8003406:	bf00      	nop
 8003408:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	3301      	adds	r3, #1
 8003416:	f003 021f 	and.w	r2, r3, #31
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	3b1e      	subs	r3, #30
 8003422:	051b      	lsls	r3, r3, #20
 8003424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003428:	430b      	orrs	r3, r1
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	6892      	ldr	r2, [r2, #8]
 800342e:	4619      	mov	r1, r3
 8003430:	f7ff fa68 	bl	8002904 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_ADC_ConfigChannel+0x7d8>)
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d06c      	beq.n	800351a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003440:	483c      	ldr	r0, [pc, #240]	; (8003534 <HAL_ADC_ConfigChannel+0x7dc>)
 8003442:	f7ff f9bd 	bl	80027c0 <LL_ADC_GetCommonPathInternalCh>
 8003446:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a3a      	ldr	r2, [pc, #232]	; (8003538 <HAL_ADC_ConfigChannel+0x7e0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d127      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d121      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a35      	ldr	r2, [pc, #212]	; (800353c <HAL_ADC_ConfigChannel+0x7e4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d157      	bne.n	800351a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800346e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003472:	4619      	mov	r1, r3
 8003474:	482f      	ldr	r0, [pc, #188]	; (8003534 <HAL_ADC_ConfigChannel+0x7dc>)
 8003476:	f7ff f990 	bl	800279a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800347a:	4b31      	ldr	r3, [pc, #196]	; (8003540 <HAL_ADC_ConfigChannel+0x7e8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	4a30      	ldr	r2, [pc, #192]	; (8003544 <HAL_ADC_ConfigChannel+0x7ec>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003494:	e002      	b.n	800349c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3b01      	subs	r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f9      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034a2:	e03a      	b.n	800351a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a27      	ldr	r2, [pc, #156]	; (8003548 <HAL_ADC_ConfigChannel+0x7f0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d113      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x77e>
 80034ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10d      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1f      	ldr	r2, [pc, #124]	; (800353c <HAL_ADC_ConfigChannel+0x7e4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d12a      	bne.n	800351a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034cc:	4619      	mov	r1, r3
 80034ce:	4819      	ldr	r0, [pc, #100]	; (8003534 <HAL_ADC_ConfigChannel+0x7dc>)
 80034d0:	f7ff f963 	bl	800279a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034d4:	e021      	b.n	800351a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1c      	ldr	r2, [pc, #112]	; (800354c <HAL_ADC_ConfigChannel+0x7f4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d11c      	bne.n	800351a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d116      	bne.n	800351a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a12      	ldr	r2, [pc, #72]	; (800353c <HAL_ADC_ConfigChannel+0x7e4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d111      	bne.n	800351a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034fe:	4619      	mov	r1, r3
 8003500:	480c      	ldr	r0, [pc, #48]	; (8003534 <HAL_ADC_ConfigChannel+0x7dc>)
 8003502:	f7ff f94a 	bl	800279a <LL_ADC_SetCommonPathInternalCh>
 8003506:	e008      	b.n	800351a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003522:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003526:	4618      	mov	r0, r3
 8003528:	37d8      	adds	r7, #216	; 0xd8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	80080000 	.word	0x80080000
 8003534:	50040300 	.word	0x50040300
 8003538:	c7520000 	.word	0xc7520000
 800353c:	50040000 	.word	0x50040000
 8003540:	20000004 	.word	0x20000004
 8003544:	053e2d63 	.word	0x053e2d63
 8003548:	cb840000 	.word	0xcb840000
 800354c:	80000001 	.word	0x80000001

08003550 <LL_ADC_IsEnabled>:
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <LL_ADC_IsEnabled+0x18>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <LL_ADC_IsEnabled+0x1a>
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_ADC_REG_IsConversionOngoing>:
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d101      	bne.n	800358e <LL_ADC_REG_IsConversionOngoing+0x18>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b0a1      	sub	sp, #132	; 0x84
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e089      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80035c2:	2300      	movs	r3, #0
 80035c4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80035c6:	2300      	movs	r3, #0
 80035c8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a42      	ldr	r2, [pc, #264]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d102      	bne.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035d4:	4b41      	ldr	r3, [pc, #260]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e001      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e068      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ffb9 	bl	8003576 <LL_ADC_REG_IsConversionOngoing>
 8003604:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff ffb3 	bl	8003576 <LL_ADC_REG_IsConversionOngoing>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d14a      	bne.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003618:	2b00      	cmp	r3, #0
 800361a:	d147      	bne.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800361c:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800361e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d027      	beq.n	8003678 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800363a:	035b      	lsls	r3, r3, #13
 800363c:	430b      	orrs	r3, r1
 800363e:	431a      	orrs	r2, r3
 8003640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003642:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003644:	4824      	ldr	r0, [pc, #144]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003646:	f7ff ff83 	bl	8003550 <LL_ADC_IsEnabled>
 800364a:	4604      	mov	r4, r0
 800364c:	4823      	ldr	r0, [pc, #140]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800364e:	f7ff ff7f 	bl	8003550 <LL_ADC_IsEnabled>
 8003652:	4603      	mov	r3, r0
 8003654:	4323      	orrs	r3, r4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d132      	bne.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800365a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003662:	f023 030f 	bic.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	6811      	ldr	r1, [r2, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	6892      	ldr	r2, [r2, #8]
 800366e:	430a      	orrs	r2, r1
 8003670:	431a      	orrs	r2, r3
 8003672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003674:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003676:	e023      	b.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003682:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003684:	4814      	ldr	r0, [pc, #80]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003686:	f7ff ff63 	bl	8003550 <LL_ADC_IsEnabled>
 800368a:	4604      	mov	r4, r0
 800368c:	4813      	ldr	r0, [pc, #76]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800368e:	f7ff ff5f 	bl	8003550 <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	4323      	orrs	r3, r4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d112      	bne.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800369a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036a2:	f023 030f 	bic.w	r3, r3, #15
 80036a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036aa:	e009      	b.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80036be:	e000      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80036ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3784      	adds	r7, #132	; 0x84
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd90      	pop	{r4, r7, pc}
 80036d6:	bf00      	nop
 80036d8:	50040000 	.word	0x50040000
 80036dc:	50040100 	.word	0x50040100
 80036e0:	50040300 	.word	0x50040300

080036e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0ed      	b.n	80038d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe fe48 	bl	8002398 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003718:	f7ff f820 	bl	800275c <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800371e:	e012      	b.n	8003746 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003720:	f7ff f81c 	bl	800275c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b0a      	cmp	r3, #10
 800372c:	d90b      	bls.n	8003746 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2205      	movs	r2, #5
 800373e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e0c5      	b.n	80038d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0e5      	beq.n	8003720 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0202 	bic.w	r2, r2, #2
 8003762:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003764:	f7fe fffa 	bl	800275c <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800376a:	e012      	b.n	8003792 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800376c:	f7fe fff6 	bl	800275c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b0a      	cmp	r3, #10
 8003778:	d90b      	bls.n	8003792 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2205      	movs	r2, #5
 800378a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e09f      	b.n	80038d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e5      	bne.n	800376c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7e1b      	ldrb	r3, [r3, #24]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d108      	bne.n	80037ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e007      	b.n	80037ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7e5b      	ldrb	r3, [r3, #25]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d108      	bne.n	80037e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e007      	b.n	80037f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	7e9b      	ldrb	r3, [r3, #26]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d108      	bne.n	800380e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0220 	orr.w	r2, r2, #32
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e007      	b.n	800381e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0220 	bic.w	r2, r2, #32
 800381c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7edb      	ldrb	r3, [r3, #27]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d108      	bne.n	8003838 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0210 	bic.w	r2, r2, #16
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e007      	b.n	8003848 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0210 	orr.w	r2, r2, #16
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7f1b      	ldrb	r3, [r3, #28]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d108      	bne.n	8003862 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0208 	orr.w	r2, r2, #8
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e007      	b.n	8003872 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0208 	bic.w	r2, r2, #8
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7f5b      	ldrb	r3, [r3, #29]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d108      	bne.n	800388c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0204 	orr.w	r2, r2, #4
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e007      	b.n	800389c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0204 	bic.w	r2, r2, #4
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	ea42 0103 	orr.w	r1, r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	1e5a      	subs	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <__NVIC_SetPriorityGrouping+0x44>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038f8:	4013      	ands	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800390e:	4a04      	ldr	r2, [pc, #16]	; (8003920 <__NVIC_SetPriorityGrouping+0x44>)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	60d3      	str	r3, [r2, #12]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003928:	4b04      	ldr	r3, [pc, #16]	; (800393c <__NVIC_GetPriorityGrouping+0x18>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	0a1b      	lsrs	r3, r3, #8
 800392e:	f003 0307 	and.w	r3, r3, #7
}
 8003932:	4618      	mov	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	2b00      	cmp	r3, #0
 8003950:	db0b      	blt.n	800396a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	4907      	ldr	r1, [pc, #28]	; (8003978 <__NVIC_EnableIRQ+0x38>)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	2001      	movs	r0, #1
 8003962:	fa00 f202 	lsl.w	r2, r0, r2
 8003966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	e000e100 	.word	0xe000e100

0800397c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	2b00      	cmp	r3, #0
 800398e:	db0a      	blt.n	80039a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	490c      	ldr	r1, [pc, #48]	; (80039c8 <__NVIC_SetPriority+0x4c>)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	0112      	lsls	r2, r2, #4
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	440b      	add	r3, r1
 80039a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a4:	e00a      	b.n	80039bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4908      	ldr	r1, [pc, #32]	; (80039cc <__NVIC_SetPriority+0x50>)
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	3b04      	subs	r3, #4
 80039b4:	0112      	lsls	r2, r2, #4
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	440b      	add	r3, r1
 80039ba:	761a      	strb	r2, [r3, #24]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000e100 	.word	0xe000e100
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f1c3 0307 	rsb	r3, r3, #7
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	bf28      	it	cs
 80039ee:	2304      	movcs	r3, #4
 80039f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d902      	bls.n	8003a00 <NVIC_EncodePriority+0x30>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3b03      	subs	r3, #3
 80039fe:	e000      	b.n	8003a02 <NVIC_EncodePriority+0x32>
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	401a      	ands	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a18:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	43d9      	mvns	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a28:	4313      	orrs	r3, r2
         );
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3724      	adds	r7, #36	; 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ff4c 	bl	80038dc <__NVIC_SetPriorityGrouping>
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a5e:	f7ff ff61 	bl	8003924 <__NVIC_GetPriorityGrouping>
 8003a62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	6978      	ldr	r0, [r7, #20]
 8003a6a:	f7ff ffb1 	bl	80039d0 <NVIC_EncodePriority>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff ff80 	bl	800397c <__NVIC_SetPriority>
}
 8003a7c:	bf00      	nop
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff54 	bl	8003940 <__NVIC_EnableIRQ>
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e08d      	b.n	8003bce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <HAL_DMA_Init+0x138>)
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d80f      	bhi.n	8003ade <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <HAL_DMA_Init+0x13c>)
 8003ac6:	4413      	add	r3, r2
 8003ac8:	4a45      	ldr	r2, [pc, #276]	; (8003be0 <HAL_DMA_Init+0x140>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	009a      	lsls	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a42      	ldr	r2, [pc, #264]	; (8003be4 <HAL_DMA_Init+0x144>)
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
 8003adc:	e00e      	b.n	8003afc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_DMA_Init+0x148>)
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4a3d      	ldr	r2, [pc, #244]	; (8003be0 <HAL_DMA_Init+0x140>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	009a      	lsls	r2, r3, #2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a3c      	ldr	r2, [pc, #240]	; (8003bec <HAL_DMA_Init+0x14c>)
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8fe 	bl	8003d50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b5c:	d102      	bne.n	8003b64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b78:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d010      	beq.n	8003ba4 <HAL_DMA_Init+0x104>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d80c      	bhi.n	8003ba4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f91e 	bl	8003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	e008      	b.n	8003bb6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40020407 	.word	0x40020407
 8003bdc:	bffdfff8 	.word	0xbffdfff8
 8003be0:	cccccccd 	.word	0xcccccccd
 8003be4:	40020000 	.word	0x40020000
 8003be8:	bffdfbf8 	.word	0xbffdfbf8
 8003bec:	40020400 	.word	0x40020400

08003bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	f003 031c 	and.w	r3, r3, #28
 8003c10:	2204      	movs	r2, #4
 8003c12:	409a      	lsls	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d026      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x7a>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d021      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0204 	bic.w	r2, r2, #4
 8003c42:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c48:	f003 021c 	and.w	r2, r3, #28
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	2104      	movs	r1, #4
 8003c52:	fa01 f202 	lsl.w	r2, r1, r2
 8003c56:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d071      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003c68:	e06c      	b.n	8003d44 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f003 031c 	and.w	r3, r3, #28
 8003c72:	2202      	movs	r2, #2
 8003c74:	409a      	lsls	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d02e      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xec>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d029      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10b      	bne.n	8003cae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 020a 	bic.w	r2, r2, #10
 8003ca4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f003 021c 	and.w	r2, r3, #28
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	2102      	movs	r1, #2
 8003cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d038      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003cda:	e033      	b.n	8003d44 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	f003 031c 	and.w	r3, r3, #28
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d02a      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x156>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d025      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 020e 	bic.w	r2, r2, #14
 8003d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f003 021c 	and.w	r2, r3, #28
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop
}
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d80a      	bhi.n	8003d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	089b      	lsrs	r3, r3, #2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d70:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6493      	str	r3, [r2, #72]	; 0x48
 8003d78:	e007      	b.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	009a      	lsls	r2, r3, #2
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d84:	4413      	add	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	3b08      	subs	r3, #8
 8003d92:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003da0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2201      	movs	r2, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40020407 	.word	0x40020407
 8003dc0:	4002081c 	.word	0x4002081c
 8003dc4:	cccccccd 	.word	0xcccccccd
 8003dc8:	40020880 	.word	0x40020880

08003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a08      	ldr	r2, [pc, #32]	; (8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003dee:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2201      	movs	r2, #1
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	1000823f 	.word	0x1000823f
 8003e10:	40020940 	.word	0x40020940

08003e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e22:	e166      	b.n	80040f2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2101      	movs	r1, #1
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	4013      	ands	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8158 	beq.w	80040ec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d005      	beq.n	8003e54 <HAL_GPIO_Init+0x40>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d130      	bne.n	8003eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	2203      	movs	r2, #3
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0201 	and.w	r2, r3, #1
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d017      	beq.n	8003ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	2203      	movs	r2, #3
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d123      	bne.n	8003f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	08da      	lsrs	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3208      	adds	r2, #8
 8003f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	220f      	movs	r2, #15
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	08da      	lsrs	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3208      	adds	r2, #8
 8003f40:	6939      	ldr	r1, [r7, #16]
 8003f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	2203      	movs	r2, #3
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 0203 	and.w	r2, r3, #3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80b2 	beq.w	80040ec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f88:	4b61      	ldr	r3, [pc, #388]	; (8004110 <HAL_GPIO_Init+0x2fc>)
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8c:	4a60      	ldr	r2, [pc, #384]	; (8004110 <HAL_GPIO_Init+0x2fc>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6613      	str	r3, [r2, #96]	; 0x60
 8003f94:	4b5e      	ldr	r3, [pc, #376]	; (8004110 <HAL_GPIO_Init+0x2fc>)
 8003f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fa0:	4a5c      	ldr	r2, [pc, #368]	; (8004114 <HAL_GPIO_Init+0x300>)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	3302      	adds	r3, #2
 8003fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	220f      	movs	r2, #15
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fca:	d02b      	beq.n	8004024 <HAL_GPIO_Init+0x210>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a52      	ldr	r2, [pc, #328]	; (8004118 <HAL_GPIO_Init+0x304>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d025      	beq.n	8004020 <HAL_GPIO_Init+0x20c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a51      	ldr	r2, [pc, #324]	; (800411c <HAL_GPIO_Init+0x308>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d01f      	beq.n	800401c <HAL_GPIO_Init+0x208>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a50      	ldr	r2, [pc, #320]	; (8004120 <HAL_GPIO_Init+0x30c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d019      	beq.n	8004018 <HAL_GPIO_Init+0x204>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a4f      	ldr	r2, [pc, #316]	; (8004124 <HAL_GPIO_Init+0x310>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_GPIO_Init+0x200>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a4e      	ldr	r2, [pc, #312]	; (8004128 <HAL_GPIO_Init+0x314>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00d      	beq.n	8004010 <HAL_GPIO_Init+0x1fc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a4d      	ldr	r2, [pc, #308]	; (800412c <HAL_GPIO_Init+0x318>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <HAL_GPIO_Init+0x1f8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a4c      	ldr	r2, [pc, #304]	; (8004130 <HAL_GPIO_Init+0x31c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <HAL_GPIO_Init+0x1f4>
 8004004:	2307      	movs	r3, #7
 8004006:	e00e      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004008:	2308      	movs	r3, #8
 800400a:	e00c      	b.n	8004026 <HAL_GPIO_Init+0x212>
 800400c:	2306      	movs	r3, #6
 800400e:	e00a      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004010:	2305      	movs	r3, #5
 8004012:	e008      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004014:	2304      	movs	r3, #4
 8004016:	e006      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004018:	2303      	movs	r3, #3
 800401a:	e004      	b.n	8004026 <HAL_GPIO_Init+0x212>
 800401c:	2302      	movs	r3, #2
 800401e:	e002      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004024:	2300      	movs	r3, #0
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	f002 0203 	and.w	r2, r2, #3
 800402c:	0092      	lsls	r2, r2, #2
 800402e:	4093      	lsls	r3, r2
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004036:	4937      	ldr	r1, [pc, #220]	; (8004114 <HAL_GPIO_Init+0x300>)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004044:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_GPIO_Init+0x320>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	43db      	mvns	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004068:	4a32      	ldr	r2, [pc, #200]	; (8004134 <HAL_GPIO_Init+0x320>)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_GPIO_Init+0x320>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004092:	4a28      	ldr	r2, [pc, #160]	; (8004134 <HAL_GPIO_Init+0x320>)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004098:	4b26      	ldr	r3, [pc, #152]	; (8004134 <HAL_GPIO_Init+0x320>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040bc:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <HAL_GPIO_Init+0x320>)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <HAL_GPIO_Init+0x320>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <HAL_GPIO_Init+0x320>)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3301      	adds	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f ae91 	bne.w	8003e24 <HAL_GPIO_Init+0x10>
  }
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40021000 	.word	0x40021000
 8004114:	40010000 	.word	0x40010000
 8004118:	48000400 	.word	0x48000400
 800411c:	48000800 	.word	0x48000800
 8004120:	48000c00 	.word	0x48000c00
 8004124:	48001000 	.word	0x48001000
 8004128:	48001400 	.word	0x48001400
 800412c:	48001800 	.word	0x48001800
 8004130:	48001c00 	.word	0x48001c00
 8004134:	40010400 	.word	0x40010400

08004138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
 8004144:	4613      	mov	r3, r2
 8004146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004148:	787b      	ldrb	r3, [r7, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004154:	e002      	b.n	800415c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	43d9      	mvns	r1, r3
 8004186:	887b      	ldrh	r3, [r7, #2]
 8004188:	400b      	ands	r3, r1
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	d102      	bne.n	80041c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80041be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041c2:	e00b      	b.n	80041dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d2:	d102      	bne.n	80041da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80041d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041d8:	e000      	b.n	80041dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80041da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40007000 	.word	0x40007000

080041ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d141      	bne.n	800427e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041fa:	4b4b      	ldr	r3, [pc, #300]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d131      	bne.n	800426c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004208:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420e:	4a46      	ldr	r2, [pc, #280]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004214:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004218:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004220:	4a41      	ldr	r2, [pc, #260]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004226:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004228:	4b40      	ldr	r3, [pc, #256]	; (800432c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2232      	movs	r2, #50	; 0x32
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	4a3f      	ldr	r2, [pc, #252]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	0c9b      	lsrs	r3, r3, #18
 800423a:	3301      	adds	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800423e:	e002      	b.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3b01      	subs	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004246:	4b38      	ldr	r3, [pc, #224]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004252:	d102      	bne.n	800425a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f2      	bne.n	8004240 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800425a:	4b33      	ldr	r3, [pc, #204]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004266:	d158      	bne.n	800431a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e057      	b.n	800431c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800426c:	4b2e      	ldr	r3, [pc, #184]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004272:	4a2d      	ldr	r2, [pc, #180]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004278:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800427c:	e04d      	b.n	800431a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004284:	d141      	bne.n	800430a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004286:	4b28      	ldr	r3, [pc, #160]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004292:	d131      	bne.n	80042f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004294:	4b24      	ldr	r3, [pc, #144]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429a:	4a23      	ldr	r2, [pc, #140]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a4:	4b20      	ldr	r3, [pc, #128]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ac:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042b4:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2232      	movs	r2, #50	; 0x32
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	0c9b      	lsrs	r3, r3, #18
 80042c6:	3301      	adds	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ca:	e002      	b.n	80042d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042de:	d102      	bne.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f2      	bne.n	80042cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f2:	d112      	bne.n	800431a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e011      	b.n	800431c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042fe:	4a0a      	ldr	r2, [pc, #40]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004308:	e007      	b.n	800431a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004312:	4a05      	ldr	r2, [pc, #20]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004314:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004318:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	40007000 	.word	0x40007000
 800432c:	20000004 	.word	0x20000004
 8004330:	431bde83 	.word	0x431bde83

08004334 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8004338:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004344:	f7ff ff2a 	bl	800419c <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004348:	4b18      	ldr	r3, [pc, #96]	; (80043ac <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800434a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800434e:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8004350:	4b16      	ldr	r3, [pc, #88]	; (80043ac <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800435c:	f000 f828 	bl	80043b0 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004362:	2208      	movs	r2, #8
 8004364:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8004366:	4b11      	ldr	r3, [pc, #68]	; (80043ac <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8004372:	f000 f824 	bl	80043be <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004378:	2210      	movs	r2, #16
 800437a:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004388:	f000 f820 	bl	80043cc <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800438c:	4b07      	ldr	r3, [pc, #28]	; (80043ac <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800438e:	2220      	movs	r2, #32
 8004390:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800439e:	f000 f81c 	bl	80043da <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 80043a2:	4b02      	ldr	r3, [pc, #8]	; (80043ac <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80043a4:	2240      	movs	r2, #64	; 0x40
 80043a6:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80043a8:	bf00      	nop
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40010400 	.word	0x40010400

080043b0 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 80043be:	b480      	push	{r7}
 80043c0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	; 0x28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f000 bc76 	b.w	8004ce8 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043fc:	4ba1      	ldr	r3, [pc, #644]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004406:	4b9f      	ldr	r3, [pc, #636]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80e6 	beq.w	80045ea <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_RCC_OscConfig+0x4c>
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	2b0c      	cmp	r3, #12
 8004428:	f040 808d 	bne.w	8004546 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b01      	cmp	r3, #1
 8004430:	f040 8089 	bne.w	8004546 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004434:	4b93      	ldr	r3, [pc, #588]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <HAL_RCC_OscConfig+0x66>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f000 bc4d 	b.w	8004ce8 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004452:	4b8c      	ldr	r3, [pc, #560]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <HAL_RCC_OscConfig+0x80>
 800445e:	4b89      	ldr	r3, [pc, #548]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004466:	e005      	b.n	8004474 <HAL_RCC_OscConfig+0x8c>
 8004468:	4b86      	ldr	r3, [pc, #536]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 800446a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004474:	4293      	cmp	r3, r2
 8004476:	d224      	bcs.n	80044c2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fe47 	bl	8005110 <RCC_SetFlashLatencyFromMSIRange>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	f000 bc2d 	b.w	8004ce8 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800448e:	4b7d      	ldr	r3, [pc, #500]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a7c      	ldr	r2, [pc, #496]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004494:	f043 0308 	orr.w	r3, r3, #8
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b7a      	ldr	r3, [pc, #488]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	4977      	ldr	r1, [pc, #476]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ac:	4b75      	ldr	r3, [pc, #468]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	4972      	ldr	r1, [pc, #456]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
 80044c0:	e025      	b.n	800450e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044c2:	4b70      	ldr	r3, [pc, #448]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a6f      	ldr	r2, [pc, #444]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80044c8:	f043 0308 	orr.w	r3, r3, #8
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b6d      	ldr	r3, [pc, #436]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	496a      	ldr	r1, [pc, #424]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044e0:	4b68      	ldr	r3, [pc, #416]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	4965      	ldr	r1, [pc, #404]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fe06 	bl	8005110 <RCC_SetFlashLatencyFromMSIRange>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e3ec      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800450e:	f000 fd1f 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004512:	4602      	mov	r2, r0
 8004514:	4b5b      	ldr	r3, [pc, #364]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	495a      	ldr	r1, [pc, #360]	; (8004688 <HAL_RCC_OscConfig+0x2a0>)
 8004520:	5ccb      	ldrb	r3, [r1, r3]
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	fa22 f303 	lsr.w	r3, r2, r3
 800452a:	4a58      	ldr	r2, [pc, #352]	; (800468c <HAL_RCC_OscConfig+0x2a4>)
 800452c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800452e:	4b58      	ldr	r3, [pc, #352]	; (8004690 <HAL_RCC_OscConfig+0x2a8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe f81a 	bl	800256c <HAL_InitTick>
 8004538:	4603      	mov	r3, r0
 800453a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d052      	beq.n	80045e8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	e3d0      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d032      	beq.n	80045b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800454e:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a4c      	ldr	r2, [pc, #304]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800455a:	f7fe f8ff 	bl	800275c <HAL_GetTick>
 800455e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004562:	f7fe f8fb 	bl	800275c <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e3b9      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004574:	4b43      	ldr	r3, [pc, #268]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004580:	4b40      	ldr	r3, [pc, #256]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a3f      	ldr	r2, [pc, #252]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004586:	f043 0308 	orr.w	r3, r3, #8
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4b3d      	ldr	r3, [pc, #244]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	493a      	ldr	r1, [pc, #232]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800459e:	4b39      	ldr	r3, [pc, #228]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	4935      	ldr	r1, [pc, #212]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]
 80045b2:	e01a      	b.n	80045ea <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045b4:	4b33      	ldr	r3, [pc, #204]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a32      	ldr	r2, [pc, #200]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045c0:	f7fe f8cc 	bl	800275c <HAL_GetTick>
 80045c4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045c8:	f7fe f8c8 	bl	800275c <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e386      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045da:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x1e0>
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d073      	beq.n	80046de <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_OscConfig+0x220>
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d10e      	bne.n	8004620 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d10b      	bne.n	8004620 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d063      	beq.n	80046dc <HAL_RCC_OscConfig+0x2f4>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d15f      	bne.n	80046dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e363      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d106      	bne.n	8004638 <HAL_RCC_OscConfig+0x250>
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e01d      	b.n	8004674 <HAL_RCC_OscConfig+0x28c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0x274>
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a0f      	ldr	r2, [pc, #60]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0x28c>
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 8004662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a05      	ldr	r2, [pc, #20]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 800466e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fe f86e 	bl	800275c <HAL_GetTick>
 8004680:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004682:	e010      	b.n	80046a6 <HAL_RCC_OscConfig+0x2be>
 8004684:	40021000 	.word	0x40021000
 8004688:	0800a218 	.word	0x0800a218
 800468c:	20000004 	.word	0x20000004
 8004690:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004694:	f7fe f862 	bl	800275c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e320      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046a6:	4ba0      	ldr	r3, [pc, #640]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x2ac>
 80046b2:	e014      	b.n	80046de <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fe f852 	bl	800275c <HAL_GetTick>
 80046b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046bc:	f7fe f84e 	bl	800275c <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	; 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e30c      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ce:	4b96      	ldr	r3, [pc, #600]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0x2d4>
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d060      	beq.n	80047ac <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_OscConfig+0x314>
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	2b0c      	cmp	r3, #12
 80046f4:	d119      	bne.n	800472a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d116      	bne.n	800472a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046fc:	4b8a      	ldr	r3, [pc, #552]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_OscConfig+0x32c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e2e9      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004714:	4b84      	ldr	r3, [pc, #528]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	4981      	ldr	r1, [pc, #516]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004728:	e040      	b.n	80047ac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d023      	beq.n	800477a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004732:	4b7d      	ldr	r3, [pc, #500]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7c      	ldr	r2, [pc, #496]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fe f80d 	bl	800275c <HAL_GetTick>
 8004742:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004746:	f7fe f809 	bl	800275c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e2c7      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004758:	4b73      	ldr	r3, [pc, #460]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004764:	4b70      	ldr	r3, [pc, #448]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	496d      	ldr	r1, [pc, #436]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
 8004778:	e018      	b.n	80047ac <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477a:	4b6b      	ldr	r3, [pc, #428]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a6a      	ldr	r2, [pc, #424]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004786:	f7fd ffe9 	bl	800275c <HAL_GetTick>
 800478a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478e:	f7fd ffe5 	bl	800275c <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e2a3      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047a0:	4b61      	ldr	r3, [pc, #388]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f0      	bne.n	800478e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d07f      	beq.n	80048b8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d05f      	beq.n	8004880 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80047c0:	4b59      	ldr	r3, [pc, #356]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80047c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d037      	beq.n	8004846 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d006      	beq.n	80047ee <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e27c      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01b      	beq.n	8004830 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80047f8:	4b4b      	ldr	r3, [pc, #300]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fe:	4a4a      	ldr	r2, [pc, #296]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004808:	f7fd ffa8 	bl	800275c <HAL_GetTick>
 800480c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004810:	f7fd ffa4 	bl	800275c <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b11      	cmp	r3, #17
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e262      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004822:	4b41      	ldr	r3, [pc, #260]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1ef      	bne.n	8004810 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004830:	4b3d      	ldr	r3, [pc, #244]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004836:	f023 0210 	bic.w	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	493a      	ldr	r1, [pc, #232]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004846:	4b38      	ldr	r3, [pc, #224]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484c:	4a36      	ldr	r2, [pc, #216]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004856:	f7fd ff81 	bl	800275c <HAL_GetTick>
 800485a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485e:	f7fd ff7d 	bl	800275c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b11      	cmp	r3, #17
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e23b      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004870:	4b2d      	ldr	r3, [pc, #180]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0ef      	beq.n	800485e <HAL_RCC_OscConfig+0x476>
 800487e:	e01b      	b.n	80048b8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004880:	4b29      	ldr	r3, [pc, #164]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004886:	4a28      	ldr	r2, [pc, #160]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fd ff64 	bl	800275c <HAL_GetTick>
 8004894:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004898:	f7fd ff60 	bl	800275c <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b11      	cmp	r3, #17
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e21e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048aa:	4b1f      	ldr	r3, [pc, #124]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80048ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ef      	bne.n	8004898 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80c1 	beq.w	8004a48 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048cc:	4b16      	ldr	r3, [pc, #88]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10e      	bne.n	80048f6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d8:	4b13      	ldr	r3, [pc, #76]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80048da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048dc:	4a12      	ldr	r2, [pc, #72]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80048de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e2:	6593      	str	r3, [r2, #88]	; 0x58
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <HAL_RCC_OscConfig+0x540>)
 80048e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <HAL_RCC_OscConfig+0x544>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11c      	bne.n	800493c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <HAL_RCC_OscConfig+0x544>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a09      	ldr	r2, [pc, #36]	; (800492c <HAL_RCC_OscConfig+0x544>)
 8004908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490e:	f7fd ff25 	bl	800275c <HAL_GetTick>
 8004912:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004914:	e00c      	b.n	8004930 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004916:	f7fd ff21 	bl	800275c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d905      	bls.n	8004930 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e1df      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
 8004928:	40021000 	.word	0x40021000
 800492c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004930:	4b99      	ldr	r3, [pc, #612]	; (8004b98 <HAL_RCC_OscConfig+0x7b0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0ec      	beq.n	8004916 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02c      	beq.n	80049a2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004948:	4b94      	ldr	r3, [pc, #592]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495a:	4990      	ldr	r1, [pc, #576]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d010      	beq.n	8004990 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800496e:	4b8b      	ldr	r3, [pc, #556]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	4a89      	ldr	r2, [pc, #548]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800497e:	4b87      	ldr	r3, [pc, #540]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004984:	4a85      	ldr	r2, [pc, #532]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800498e:	e018      	b.n	80049c2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004990:	4b82      	ldr	r3, [pc, #520]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	4a81      	ldr	r2, [pc, #516]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049a0:	e00f      	b.n	80049c2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049a2:	4b7e      	ldr	r3, [pc, #504]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a8:	4a7c      	ldr	r2, [pc, #496]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049b2:	4b7a      	ldr	r3, [pc, #488]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	4a78      	ldr	r2, [pc, #480]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 80049ba:	f023 0304 	bic.w	r3, r3, #4
 80049be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d016      	beq.n	80049f8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ca:	f7fd fec7 	bl	800275c <HAL_GetTick>
 80049ce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fd fec3 	bl	800275c <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e17f      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e8:	4b6c      	ldr	r3, [pc, #432]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0ed      	beq.n	80049d2 <HAL_RCC_OscConfig+0x5ea>
 80049f6:	e01d      	b.n	8004a34 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fd feb0 	bl	800275c <HAL_GetTick>
 80049fc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fd feac 	bl	800275c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e168      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a16:	4b61      	ldr	r3, [pc, #388]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ed      	bne.n	8004a00 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004a24:	4b5d      	ldr	r3, [pc, #372]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	4a5c      	ldr	r2, [pc, #368]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a3c:	4b57      	ldr	r3, [pc, #348]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	4a56      	ldr	r2, [pc, #344]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d03c      	beq.n	8004ace <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01c      	beq.n	8004a96 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a5c:	4b4f      	ldr	r3, [pc, #316]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a62:	4a4e      	ldr	r2, [pc, #312]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6c:	f7fd fe76 	bl	800275c <HAL_GetTick>
 8004a70:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a74:	f7fd fe72 	bl	800275c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e130      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a86:	4b45      	ldr	r3, [pc, #276]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0ef      	beq.n	8004a74 <HAL_RCC_OscConfig+0x68c>
 8004a94:	e01b      	b.n	8004ace <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a96:	4b41      	ldr	r3, [pc, #260]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a9c:	4a3f      	ldr	r2, [pc, #252]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004a9e:	f023 0301 	bic.w	r3, r3, #1
 8004aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa6:	f7fd fe59 	bl	800275c <HAL_GetTick>
 8004aaa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aae:	f7fd fe55 	bl	800275c <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e113      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ac0:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1ef      	bne.n	8004aae <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8107 	beq.w	8004ce6 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	f040 80cf 	bne.w	8004c80 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ae2:	4b2e      	ldr	r3, [pc, #184]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0203 	and.w	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d12c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	3b01      	subs	r3, #1
 8004b02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d123      	bne.n	8004b50 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d11b      	bne.n	8004b50 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d113      	bne.n	8004b50 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	3b01      	subs	r3, #1
 8004b36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d109      	bne.n	8004b50 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d071      	beq.n	8004c34 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	2b0c      	cmp	r3, #12
 8004b54:	d06c      	beq.n	8004c30 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b62:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0ba      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <HAL_RCC_OscConfig+0x7b4>)
 8004b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b7e:	f7fd fded 	bl	800275c <HAL_GetTick>
 8004b82:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b84:	e00c      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b86:	f7fd fde9 	bl	800275c <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d905      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e0a7      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
 8004b98:	40007000 	.word	0x40007000
 8004b9c:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ba0:	4b53      	ldr	r3, [pc, #332]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1ec      	bne.n	8004b86 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bac:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	4b50      	ldr	r3, [pc, #320]	; (8004cf4 <HAL_RCC_OscConfig+0x90c>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bbc:	3a01      	subs	r2, #1
 8004bbe:	0112      	lsls	r2, r2, #4
 8004bc0:	4311      	orrs	r1, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc6:	0212      	lsls	r2, r2, #8
 8004bc8:	4311      	orrs	r1, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bce:	0852      	lsrs	r2, r2, #1
 8004bd0:	3a01      	subs	r2, #1
 8004bd2:	0552      	lsls	r2, r2, #21
 8004bd4:	4311      	orrs	r1, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004bda:	0852      	lsrs	r2, r2, #1
 8004bdc:	3a01      	subs	r2, #1
 8004bde:	0652      	lsls	r2, r2, #25
 8004be0:	4311      	orrs	r1, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004be6:	06d2      	lsls	r2, r2, #27
 8004be8:	430a      	orrs	r2, r1
 8004bea:	4941      	ldr	r1, [pc, #260]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bf0:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a3e      	ldr	r2, [pc, #248]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bfc:	4b3c      	ldr	r3, [pc, #240]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a3b      	ldr	r2, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c08:	f7fd fda8 	bl	800275c <HAL_GetTick>
 8004c0c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c10:	f7fd fda4 	bl	800275c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e062      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c22:	4b33      	ldr	r3, [pc, #204]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c2e:	e05a      	b.n	8004ce6 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e059      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c34:	4b2e      	ldr	r3, [pc, #184]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d152      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2a      	ldr	r2, [pc, #168]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c58:	f7fd fd80 	bl	800275c <HAL_GetTick>
 8004c5c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fd fd7c 	bl	800275c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e03a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c72:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x878>
 8004c7e:	e032      	b.n	8004ce6 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d02d      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c86:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a19      	ldr	r2, [pc, #100]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c90:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c92:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d105      	bne.n	8004caa <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c9e:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004cb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cba:	f7fd fd4f 	bl	800275c <HAL_GetTick>
 8004cbe:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc2:	f7fd fd4b 	bl	800275c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e009      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_RCC_OscConfig+0x908>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x8da>
 8004ce0:	e001      	b.n	8004ce6 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	019d800c 	.word	0x019d800c

08004cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e10f      	b.n	8004f30 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d10:	4b89      	ldr	r3, [pc, #548]	; (8004f38 <HAL_RCC_ClockConfig+0x240>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d910      	bls.n	8004d40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b86      	ldr	r3, [pc, #536]	; (8004f38 <HAL_RCC_ClockConfig+0x240>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 020f 	bic.w	r2, r3, #15
 8004d26:	4984      	ldr	r1, [pc, #528]	; (8004f38 <HAL_RCC_ClockConfig+0x240>)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2e:	4b82      	ldr	r3, [pc, #520]	; (8004f38 <HAL_RCC_ClockConfig+0x240>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0f7      	b.n	8004f30 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8089 	beq.w	8004e60 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d133      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d56:	4b79      	ldr	r3, [pc, #484]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e0e4      	b.n	8004f30 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004d66:	f000 fa2d 	bl	80051c4 <RCC_GetSysClockFreqFromPLLSource>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4a74      	ldr	r2, [pc, #464]	; (8004f40 <HAL_RCC_ClockConfig+0x248>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d955      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d72:	4b72      	ldr	r3, [pc, #456]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d7e:	4b6f      	ldr	r3, [pc, #444]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d86:	4a6d      	ldr	r2, [pc, #436]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e044      	b.n	8004e1e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d03e      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x126>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d13a      	bne.n	8004e1e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004da8:	4b64      	ldr	r3, [pc, #400]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004db0:	4a62      	ldr	r2, [pc, #392]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e02f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dc6:	4b5d      	ldr	r3, [pc, #372]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d115      	bne.n	8004dfe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0ac      	b.n	8004f30 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dde:	4b57      	ldr	r3, [pc, #348]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0a0      	b.n	8004f30 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dee:	4b53      	ldr	r3, [pc, #332]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e098      	b.n	8004f30 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004dfe:	f000 f8a7 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4a4e      	ldr	r2, [pc, #312]	; (8004f40 <HAL_RCC_ClockConfig+0x248>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d909      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e0a:	4b4c      	ldr	r3, [pc, #304]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e12:	4a4a      	ldr	r2, [pc, #296]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e1e:	4b47      	ldr	r3, [pc, #284]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f023 0203 	bic.w	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4944      	ldr	r1, [pc, #272]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e30:	f7fd fc94 	bl	800275c <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	e00a      	b.n	8004e4e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e38:	f7fd fc90 	bl	800275c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e070      	b.n	8004f30 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 020c 	and.w	r2, r3, #12
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d1eb      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6c:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4930      	ldr	r1, [pc, #192]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2b80      	cmp	r3, #128	; 0x80
 8004e84:	d105      	bne.n	8004e92 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e86:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4a2c      	ldr	r2, [pc, #176]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e90:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e92:	4b29      	ldr	r3, [pc, #164]	; (8004f38 <HAL_RCC_ClockConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d210      	bcs.n	8004ec2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea0:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <HAL_RCC_ClockConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 020f 	bic.w	r2, r3, #15
 8004ea8:	4923      	ldr	r1, [pc, #140]	; (8004f38 <HAL_RCC_ClockConfig+0x240>)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb0:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <HAL_RCC_ClockConfig+0x240>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e036      	b.n	8004f30 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ece:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	4918      	ldr	r1, [pc, #96]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eec:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4910      	ldr	r1, [pc, #64]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f00:	f000 f826 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <HAL_RCC_ClockConfig+0x244>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	490c      	ldr	r1, [pc, #48]	; (8004f44 <HAL_RCC_ClockConfig+0x24c>)
 8004f12:	5ccb      	ldrb	r3, [r1, r3]
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <HAL_RCC_ClockConfig+0x250>)
 8004f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f20:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <HAL_RCC_ClockConfig+0x254>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fd fb21 	bl	800256c <HAL_InitTick>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40022000 	.word	0x40022000
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	04c4b400 	.word	0x04c4b400
 8004f44:	0800a218 	.word	0x0800a218
 8004f48:	20000004 	.word	0x20000004
 8004f4c:	20000008 	.word	0x20000008

08004f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	; 0x24
 8004f54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f5e:	4b3e      	ldr	r3, [pc, #248]	; (8005058 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f68:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0x34>
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2b0c      	cmp	r3, #12
 8004f7c:	d121      	bne.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d11e      	bne.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f84:	4b34      	ldr	r3, [pc, #208]	; (8005058 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f90:	4b31      	ldr	r3, [pc, #196]	; (8005058 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e005      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fa0:	4b2d      	ldr	r3, [pc, #180]	; (8005058 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fac:	4a2b      	ldr	r2, [pc, #172]	; (800505c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10d      	bne.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d102      	bne.n	8004fce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fc8:	4b25      	ldr	r3, [pc, #148]	; (8005060 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fd4:	4b23      	ldr	r3, [pc, #140]	; (8005064 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b0c      	cmp	r3, #12
 8004fdc:	d134      	bne.n	8005048 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fde:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d003      	beq.n	8004ff6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d003      	beq.n	8004ffc <HAL_RCC_GetSysClockFreq+0xac>
 8004ff4:	e005      	b.n	8005002 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ff6:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ff8:	617b      	str	r3, [r7, #20]
      break;
 8004ffa:	e005      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ffc:	4b19      	ldr	r3, [pc, #100]	; (8005064 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ffe:	617b      	str	r3, [r7, #20]
      break;
 8005000:	e002      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	617b      	str	r3, [r7, #20]
      break;
 8005006:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005008:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_RCC_GetSysClockFreq+0x108>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	3301      	adds	r3, #1
 8005014:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <HAL_RCC_GetSysClockFreq+0x108>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	0a1b      	lsrs	r3, r3, #8
 800501c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	fb02 f203 	mul.w	r2, r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <HAL_RCC_GetSysClockFreq+0x108>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	0e5b      	lsrs	r3, r3, #25
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	3301      	adds	r3, #1
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005048:	69bb      	ldr	r3, [r7, #24]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3724      	adds	r7, #36	; 0x24
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000
 800505c:	0800a230 	.word	0x0800a230
 8005060:	00f42400 	.word	0x00f42400
 8005064:	007a1200 	.word	0x007a1200

08005068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <HAL_RCC_GetHCLKFreq+0x14>)
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000004 	.word	0x20000004

08005080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005084:	f7ff fff0 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	4904      	ldr	r1, [pc, #16]	; (80050a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	f003 031f 	and.w	r3, r3, #31
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	0800a228 	.word	0x0800a228

080050ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	220f      	movs	r2, #15
 80050ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80050bc:	4b12      	ldr	r3, [pc, #72]	; (8005108 <HAL_RCC_GetClockConfig+0x5c>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0203 	and.w	r2, r3, #3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <HAL_RCC_GetClockConfig+0x5c>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80050d4:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <HAL_RCC_GetClockConfig+0x5c>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80050e0:	4b09      	ldr	r3, [pc, #36]	; (8005108 <HAL_RCC_GetClockConfig+0x5c>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	08db      	lsrs	r3, r3, #3
 80050e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <HAL_RCC_GetClockConfig+0x60>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 020f 	and.w	r2, r3, #15
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000
 800510c:	40022000 	.word	0x40022000

08005110 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800511e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005128:	f7ff f840 	bl	80041ac <HAL_PWREx_GetVoltageRange>
 800512c:	6178      	str	r0, [r7, #20]
 800512e:	e014      	b.n	800515a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005130:	4b22      	ldr	r3, [pc, #136]	; (80051bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	4a21      	ldr	r2, [pc, #132]	; (80051bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513a:	6593      	str	r3, [r2, #88]	; 0x58
 800513c:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005148:	f7ff f830 	bl	80041ac <HAL_PWREx_GetVoltageRange>
 800514c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800514e:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005152:	4a1a      	ldr	r2, [pc, #104]	; (80051bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005158:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005160:	d10b      	bne.n	800517a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b80      	cmp	r3, #128	; 0x80
 8005166:	d913      	bls.n	8005190 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2ba0      	cmp	r3, #160	; 0xa0
 800516c:	d902      	bls.n	8005174 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800516e:	2302      	movs	r3, #2
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	e00d      	b.n	8005190 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005174:	2301      	movs	r3, #1
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	e00a      	b.n	8005190 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b7f      	cmp	r3, #127	; 0x7f
 800517e:	d902      	bls.n	8005186 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005180:	2302      	movs	r3, #2
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	e004      	b.n	8005190 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b70      	cmp	r3, #112	; 0x70
 800518a:	d101      	bne.n	8005190 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800518c:	2301      	movs	r3, #1
 800518e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 020f 	bic.w	r2, r3, #15
 8005198:	4909      	ldr	r1, [pc, #36]	; (80051c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d001      	beq.n	80051b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40022000 	.word	0x40022000

080051c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80051ce:	4b2d      	ldr	r3, [pc, #180]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d118      	bne.n	800520c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051da:	4b2a      	ldr	r3, [pc, #168]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d107      	bne.n	80051f6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ec:	0a1b      	lsrs	r3, r3, #8
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e005      	b.n	8005202 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051f6:	4b23      	ldr	r3, [pc, #140]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005202:	4a21      	ldr	r2, [pc, #132]	; (8005288 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800520c:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d003      	beq.n	8005224 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d003      	beq.n	800522a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8005222:	e005      	b.n	8005230 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005226:	613b      	str	r3, [r7, #16]
    break;
 8005228:	e005      	b.n	8005236 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800522a:	4b19      	ldr	r3, [pc, #100]	; (8005290 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800522c:	613b      	str	r3, [r7, #16]
    break;
 800522e:	e002      	b.n	8005236 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	613b      	str	r3, [r7, #16]
    break;
 8005234:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005236:	4b13      	ldr	r3, [pc, #76]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	3301      	adds	r3, #1
 8005242:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	0a1b      	lsrs	r3, r3, #8
 800524a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	fb02 f203 	mul.w	r2, r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	0e5b      	lsrs	r3, r3, #25
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	3301      	adds	r3, #1
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005276:	683b      	ldr	r3, [r7, #0]
}
 8005278:	4618      	mov	r0, r3
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40021000 	.word	0x40021000
 8005288:	0800a230 	.word	0x0800a230
 800528c:	00f42400 	.word	0x00f42400
 8005290:	007a1200 	.word	0x007a1200

08005294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800529c:	2300      	movs	r3, #0
 800529e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052a0:	2300      	movs	r3, #0
 80052a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d040      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b4:	2b80      	cmp	r3, #128	; 0x80
 80052b6:	d02a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d825      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052bc:	2b60      	cmp	r3, #96	; 0x60
 80052be:	d026      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052c0:	2b60      	cmp	r3, #96	; 0x60
 80052c2:	d821      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d006      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d81d      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d010      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80052d4:	e018      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052d6:	4b89      	ldr	r3, [pc, #548]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4a88      	ldr	r2, [pc, #544]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052e2:	e015      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fb3e 	bl	800596c <RCCEx_PLLSAI1_Config>
 80052f0:	4603      	mov	r3, r0
 80052f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052f4:	e00c      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3320      	adds	r3, #32
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fc29 	bl	8005b54 <RCCEx_PLLSAI2_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005306:	e003      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	74fb      	strb	r3, [r7, #19]
      break;
 800530c:	e000      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800530e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005316:	4b79      	ldr	r3, [pc, #484]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800531c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005324:	4975      	ldr	r1, [pc, #468]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800532c:	e001      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532e:	7cfb      	ldrb	r3, [r7, #19]
 8005330:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d047      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005346:	d030      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534c:	d82a      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800534e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005352:	d02a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005358:	d824      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800535a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800535e:	d008      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005364:	d81e      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800536a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536e:	d010      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005370:	e018      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005372:	4b62      	ldr	r3, [pc, #392]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	4a61      	ldr	r2, [pc, #388]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800537e:	e015      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	2100      	movs	r1, #0
 8005386:	4618      	mov	r0, r3
 8005388:	f000 faf0 	bl	800596c <RCCEx_PLLSAI1_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005390:	e00c      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3320      	adds	r3, #32
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fbdb 	bl	8005b54 <RCCEx_PLLSAI2_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053a2:	e003      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	74fb      	strb	r3, [r7, #19]
      break;
 80053a8:	e000      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80053aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10b      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053b2:	4b52      	ldr	r3, [pc, #328]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	494e      	ldr	r1, [pc, #312]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80053c8:	e001      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 809f 	beq.w	800551a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053dc:	2300      	movs	r3, #0
 80053de:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053e0:	4b46      	ldr	r3, [pc, #280]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	4b41      	ldr	r3, [pc, #260]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	4a40      	ldr	r2, [pc, #256]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005400:	6593      	str	r3, [r2, #88]	; 0x58
 8005402:	4b3e      	ldr	r3, [pc, #248]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540a:	60bb      	str	r3, [r7, #8]
 800540c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800540e:	2301      	movs	r3, #1
 8005410:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005412:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a3a      	ldr	r2, [pc, #232]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800541e:	f7fd f99d 	bl	800275c <HAL_GetTick>
 8005422:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005424:	e009      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005426:	f7fd f999 	bl	800275c <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d902      	bls.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	74fb      	strb	r3, [r7, #19]
        break;
 8005438:	e005      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800543a:	4b31      	ldr	r3, [pc, #196]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0ef      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d15b      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800544c:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005456:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01f      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	429a      	cmp	r2, r3
 8005468:	d019      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800546a:	4b24      	ldr	r3, [pc, #144]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005476:	4b21      	ldr	r3, [pc, #132]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	4a1f      	ldr	r2, [pc, #124]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800547e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005486:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548c:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800548e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005496:	4a19      	ldr	r2, [pc, #100]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d016      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd f958 	bl	800275c <HAL_GetTick>
 80054ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ae:	e00b      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b0:	f7fd f954 	bl	800275c <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80054be:	4293      	cmp	r3, r2
 80054c0:	d902      	bls.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	74fb      	strb	r3, [r7, #19]
            break;
 80054c6:	e006      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c8:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0ec      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10c      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054dc:	4b07      	ldr	r3, [pc, #28]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ec:	4903      	ldr	r1, [pc, #12]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054f4:	e008      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054f6:	7cfb      	ldrb	r3, [r7, #19]
 80054f8:	74bb      	strb	r3, [r7, #18]
 80054fa:	e005      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80054fc:	40021000 	.word	0x40021000
 8005500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005508:	7c7b      	ldrb	r3, [r7, #17]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d105      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550e:	4ba0      	ldr	r3, [pc, #640]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005512:	4a9f      	ldr	r2, [pc, #636]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005518:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005526:	4b9a      	ldr	r3, [pc, #616]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552c:	f023 0203 	bic.w	r2, r3, #3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005534:	4996      	ldr	r1, [pc, #600]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005548:	4b91      	ldr	r3, [pc, #580]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f023 020c 	bic.w	r2, r3, #12
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	498e      	ldr	r1, [pc, #568]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800556a:	4b89      	ldr	r3, [pc, #548]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005578:	4985      	ldr	r1, [pc, #532]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800558c:	4b80      	ldr	r3, [pc, #512]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559a:	497d      	ldr	r1, [pc, #500]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055ae:	4b78      	ldr	r3, [pc, #480]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055bc:	4974      	ldr	r1, [pc, #464]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055d0:	4b6f      	ldr	r3, [pc, #444]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	496c      	ldr	r1, [pc, #432]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055f2:	4b67      	ldr	r3, [pc, #412]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005600:	4963      	ldr	r1, [pc, #396]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005614:	4b5e      	ldr	r3, [pc, #376]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005622:	495b      	ldr	r1, [pc, #364]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005636:	4b56      	ldr	r3, [pc, #344]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005644:	4952      	ldr	r1, [pc, #328]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005658:	4b4d      	ldr	r3, [pc, #308]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005666:	494a      	ldr	r1, [pc, #296]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800567a:	4b45      	ldr	r3, [pc, #276]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005688:	4941      	ldr	r1, [pc, #260]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800569c:	4b3c      	ldr	r3, [pc, #240]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800569e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056a2:	f023 0203 	bic.w	r2, r3, #3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056aa:	4939      	ldr	r1, [pc, #228]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d028      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056be:	4b34      	ldr	r3, [pc, #208]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056cc:	4930      	ldr	r1, [pc, #192]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056dc:	d106      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056de:	4b2c      	ldr	r3, [pc, #176]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	4a2b      	ldr	r2, [pc, #172]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056e8:	60d3      	str	r3, [r2, #12]
 80056ea:	e011      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056f4:	d10c      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3304      	adds	r3, #4
 80056fa:	2101      	movs	r1, #1
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f935 	bl	800596c <RCCEx_PLLSAI1_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d04d      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005724:	d108      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005726:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005728:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800572c:	4a18      	ldr	r2, [pc, #96]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800572e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005732:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005736:	e012      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800573a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800573e:	4a14      	ldr	r2, [pc, #80]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005744:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005756:	490e      	ldr	r1, [pc, #56]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005766:	d106      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005768:	4b09      	ldr	r3, [pc, #36]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a08      	ldr	r2, [pc, #32]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800576e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005772:	60d3      	str	r3, [r2, #12]
 8005774:	e020      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800577a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800577e:	d109      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005780:	4b03      	ldr	r3, [pc, #12]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4a02      	ldr	r2, [pc, #8]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578a:	60d3      	str	r3, [r2, #12]
 800578c:	e014      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800579c:	d10c      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3304      	adds	r3, #4
 80057a2:	2101      	movs	r1, #1
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 f8e1 	bl	800596c <RCCEx_PLLSAI1_Config>
 80057aa:	4603      	mov	r3, r0
 80057ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ae:	7cfb      	ldrb	r3, [r7, #19]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80057b4:	7cfb      	ldrb	r3, [r7, #19]
 80057b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d028      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057c4:	4b68      	ldr	r3, [pc, #416]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d2:	4965      	ldr	r1, [pc, #404]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e2:	d106      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e4:	4b60      	ldr	r3, [pc, #384]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4a5f      	ldr	r2, [pc, #380]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80057ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ee:	60d3      	str	r3, [r2, #12]
 80057f0:	e011      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057fa:	d10c      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	2101      	movs	r1, #1
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f8b2 	bl	800596c <RCCEx_PLLSAI1_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01e      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005822:	4b51      	ldr	r3, [pc, #324]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005832:	494d      	ldr	r1, [pc, #308]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005844:	d10c      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3304      	adds	r3, #4
 800584a:	2102      	movs	r1, #2
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f88d 	bl	800596c <RCCEx_PLLSAI1_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800585c:	7cfb      	ldrb	r3, [r7, #19]
 800585e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800586c:	4b3e      	ldr	r3, [pc, #248]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800586e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005872:	f023 0204 	bic.w	r2, r3, #4
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587c:	493a      	ldr	r1, [pc, #232]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00b      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005890:	4b35      	ldr	r3, [pc, #212]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005896:	f023 0218 	bic.w	r2, r3, #24
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a0:	4931      	ldr	r1, [pc, #196]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d035      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058b4:	4b2c      	ldr	r3, [pc, #176]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a2b      	ldr	r2, [pc, #172]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c0:	f7fc ff4c 	bl	800275c <HAL_GetTick>
 80058c4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058c6:	e009      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058c8:	f7fc ff48 	bl	800275c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d902      	bls.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	74fb      	strb	r3, [r7, #19]
        break;
 80058da:	e005      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058dc:	4b22      	ldr	r3, [pc, #136]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1ef      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80058e8:	7cfb      	ldrb	r3, [r7, #19]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d113      	bne.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80058ee:	4b1e      	ldr	r3, [pc, #120]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058fe:	491a      	ldr	r1, [pc, #104]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3320      	adds	r3, #32
 800590a:	2102      	movs	r1, #2
 800590c:	4618      	mov	r0, r3
 800590e:	f000 f921 	bl	8005b54 <RCCEx_PLLSAI2_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005916:	7cfb      	ldrb	r3, [r7, #19]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d017      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800592c:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800592e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005932:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593c:	490a      	ldr	r1, [pc, #40]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800593e:	4313      	orrs	r3, r2
 8005940:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800594e:	d105      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4a04      	ldr	r2, [pc, #16]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800595a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800595c:	7cbb      	ldrb	r3, [r7, #18]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000

0800596c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800597a:	4b72      	ldr	r3, [pc, #456]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00e      	beq.n	80059a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005986:	4b6f      	ldr	r3, [pc, #444]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0203 	and.w	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d103      	bne.n	800599e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
       ||
 800599a:	2b00      	cmp	r3, #0
 800599c:	d142      	bne.n	8005a24 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
 80059a2:	e03f      	b.n	8005a24 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d018      	beq.n	80059de <RCCEx_PLLSAI1_Config+0x72>
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d825      	bhi.n	80059fc <RCCEx_PLLSAI1_Config+0x90>
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d002      	beq.n	80059ba <RCCEx_PLLSAI1_Config+0x4e>
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d009      	beq.n	80059cc <RCCEx_PLLSAI1_Config+0x60>
 80059b8:	e020      	b.n	80059fc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059ba:	4b62      	ldr	r3, [pc, #392]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d11d      	bne.n	8005a02 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ca:	e01a      	b.n	8005a02 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059cc:	4b5d      	ldr	r3, [pc, #372]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d116      	bne.n	8005a06 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059dc:	e013      	b.n	8005a06 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059de:	4b59      	ldr	r3, [pc, #356]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10f      	bne.n	8005a0a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059ea:	4b56      	ldr	r3, [pc, #344]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059fa:	e006      	b.n	8005a0a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005a00:	e004      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a02:	bf00      	nop
 8005a04:	e002      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a06:	bf00      	nop
 8005a08:	e000      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d108      	bne.n	8005a24 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005a12:	4b4c      	ldr	r3, [pc, #304]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f023 0203 	bic.w	r2, r3, #3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4949      	ldr	r1, [pc, #292]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 8086 	bne.w	8005b38 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a2c:	4b45      	ldr	r3, [pc, #276]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a44      	ldr	r2, [pc, #272]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a38:	f7fc fe90 	bl	800275c <HAL_GetTick>
 8005a3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a3e:	e009      	b.n	8005a54 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a40:	f7fc fe8c 	bl	800275c <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d902      	bls.n	8005a54 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	73fb      	strb	r3, [r7, #15]
        break;
 8005a52:	e005      	b.n	8005a60 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a54:	4b3b      	ldr	r3, [pc, #236]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1ef      	bne.n	8005a40 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d168      	bne.n	8005b38 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d113      	bne.n	8005a94 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a6c:	4b35      	ldr	r3, [pc, #212]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	4b35      	ldr	r3, [pc, #212]	; (8005b48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6892      	ldr	r2, [r2, #8]
 8005a78:	0211      	lsls	r1, r2, #8
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	68d2      	ldr	r2, [r2, #12]
 8005a7e:	06d2      	lsls	r2, r2, #27
 8005a80:	4311      	orrs	r1, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6852      	ldr	r2, [r2, #4]
 8005a86:	3a01      	subs	r2, #1
 8005a88:	0112      	lsls	r2, r2, #4
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	492d      	ldr	r1, [pc, #180]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	610b      	str	r3, [r1, #16]
 8005a92:	e02d      	b.n	8005af0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d115      	bne.n	8005ac6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a9a:	4b2a      	ldr	r3, [pc, #168]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	4b2b      	ldr	r3, [pc, #172]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6892      	ldr	r2, [r2, #8]
 8005aa6:	0211      	lsls	r1, r2, #8
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6912      	ldr	r2, [r2, #16]
 8005aac:	0852      	lsrs	r2, r2, #1
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	0552      	lsls	r2, r2, #21
 8005ab2:	4311      	orrs	r1, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6852      	ldr	r2, [r2, #4]
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	0112      	lsls	r2, r2, #4
 8005abc:	430a      	orrs	r2, r1
 8005abe:	4921      	ldr	r1, [pc, #132]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	610b      	str	r3, [r1, #16]
 8005ac4:	e014      	b.n	8005af0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ac6:	4b1f      	ldr	r3, [pc, #124]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6892      	ldr	r2, [r2, #8]
 8005ad2:	0211      	lsls	r1, r2, #8
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6952      	ldr	r2, [r2, #20]
 8005ad8:	0852      	lsrs	r2, r2, #1
 8005ada:	3a01      	subs	r2, #1
 8005adc:	0652      	lsls	r2, r2, #25
 8005ade:	4311      	orrs	r1, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6852      	ldr	r2, [r2, #4]
 8005ae4:	3a01      	subs	r2, #1
 8005ae6:	0112      	lsls	r2, r2, #4
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	4916      	ldr	r1, [pc, #88]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005af0:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005afa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afc:	f7fc fe2e 	bl	800275c <HAL_GetTick>
 8005b00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b02:	e009      	b.n	8005b18 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b04:	f7fc fe2a 	bl	800275c <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d902      	bls.n	8005b18 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	73fb      	strb	r3, [r7, #15]
          break;
 8005b16:	e005      	b.n	8005b24 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0ef      	beq.n	8005b04 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	4904      	ldr	r1, [pc, #16]	; (8005b44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40021000 	.word	0x40021000
 8005b48:	07ff800f 	.word	0x07ff800f
 8005b4c:	ff9f800f 	.word	0xff9f800f
 8005b50:	f9ff800f 	.word	0xf9ff800f

08005b54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b62:	4b72      	ldr	r3, [pc, #456]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00e      	beq.n	8005b8c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b6e:	4b6f      	ldr	r3, [pc, #444]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f003 0203 	and.w	r2, r3, #3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d103      	bne.n	8005b86 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
       ||
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d142      	bne.n	8005c0c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
 8005b8a:	e03f      	b.n	8005c0c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d018      	beq.n	8005bc6 <RCCEx_PLLSAI2_Config+0x72>
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d825      	bhi.n	8005be4 <RCCEx_PLLSAI2_Config+0x90>
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d002      	beq.n	8005ba2 <RCCEx_PLLSAI2_Config+0x4e>
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d009      	beq.n	8005bb4 <RCCEx_PLLSAI2_Config+0x60>
 8005ba0:	e020      	b.n	8005be4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ba2:	4b62      	ldr	r3, [pc, #392]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d11d      	bne.n	8005bea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb2:	e01a      	b.n	8005bea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bb4:	4b5d      	ldr	r3, [pc, #372]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d116      	bne.n	8005bee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bc4:	e013      	b.n	8005bee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bc6:	4b59      	ldr	r3, [pc, #356]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10f      	bne.n	8005bf2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bd2:	4b56      	ldr	r3, [pc, #344]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005be2:	e006      	b.n	8005bf2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]
      break;
 8005be8:	e004      	b.n	8005bf4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005bea:	bf00      	nop
 8005bec:	e002      	b.n	8005bf4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005bf2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d108      	bne.n	8005c0c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f023 0203 	bic.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4949      	ldr	r1, [pc, #292]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f040 8086 	bne.w	8005d20 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c14:	4b45      	ldr	r3, [pc, #276]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a44      	ldr	r2, [pc, #272]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c20:	f7fc fd9c 	bl	800275c <HAL_GetTick>
 8005c24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c26:	e009      	b.n	8005c3c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c28:	f7fc fd98 	bl	800275c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d902      	bls.n	8005c3c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	73fb      	strb	r3, [r7, #15]
        break;
 8005c3a:	e005      	b.n	8005c48 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1ef      	bne.n	8005c28 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d168      	bne.n	8005d20 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d113      	bne.n	8005c7c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c54:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c56:	695a      	ldr	r2, [r3, #20]
 8005c58:	4b35      	ldr	r3, [pc, #212]	; (8005d30 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6892      	ldr	r2, [r2, #8]
 8005c60:	0211      	lsls	r1, r2, #8
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68d2      	ldr	r2, [r2, #12]
 8005c66:	06d2      	lsls	r2, r2, #27
 8005c68:	4311      	orrs	r1, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6852      	ldr	r2, [r2, #4]
 8005c6e:	3a01      	subs	r2, #1
 8005c70:	0112      	lsls	r2, r2, #4
 8005c72:	430a      	orrs	r2, r1
 8005c74:	492d      	ldr	r1, [pc, #180]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	614b      	str	r3, [r1, #20]
 8005c7a:	e02d      	b.n	8005cd8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d115      	bne.n	8005cae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c82:	4b2a      	ldr	r3, [pc, #168]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c84:	695a      	ldr	r2, [r3, #20]
 8005c86:	4b2b      	ldr	r3, [pc, #172]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6892      	ldr	r2, [r2, #8]
 8005c8e:	0211      	lsls	r1, r2, #8
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6912      	ldr	r2, [r2, #16]
 8005c94:	0852      	lsrs	r2, r2, #1
 8005c96:	3a01      	subs	r2, #1
 8005c98:	0552      	lsls	r2, r2, #21
 8005c9a:	4311      	orrs	r1, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6852      	ldr	r2, [r2, #4]
 8005ca0:	3a01      	subs	r2, #1
 8005ca2:	0112      	lsls	r2, r2, #4
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	4921      	ldr	r1, [pc, #132]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	614b      	str	r3, [r1, #20]
 8005cac:	e014      	b.n	8005cd8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cae:	4b1f      	ldr	r3, [pc, #124]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cb0:	695a      	ldr	r2, [r3, #20]
 8005cb2:	4b21      	ldr	r3, [pc, #132]	; (8005d38 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6892      	ldr	r2, [r2, #8]
 8005cba:	0211      	lsls	r1, r2, #8
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6952      	ldr	r2, [r2, #20]
 8005cc0:	0852      	lsrs	r2, r2, #1
 8005cc2:	3a01      	subs	r2, #1
 8005cc4:	0652      	lsls	r2, r2, #25
 8005cc6:	4311      	orrs	r1, r2
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6852      	ldr	r2, [r2, #4]
 8005ccc:	3a01      	subs	r2, #1
 8005cce:	0112      	lsls	r2, r2, #4
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	4916      	ldr	r1, [pc, #88]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005cd8:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce4:	f7fc fd3a 	bl	800275c <HAL_GetTick>
 8005ce8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cea:	e009      	b.n	8005d00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cec:	f7fc fd36 	bl	800275c <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d902      	bls.n	8005d00 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	73fb      	strb	r3, [r7, #15]
          break;
 8005cfe:	e005      	b.n	8005d0c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d00:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0ef      	beq.n	8005cec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d12:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	4904      	ldr	r1, [pc, #16]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	07ff800f 	.word	0x07ff800f
 8005d34:	ff9f800f 	.word	0xff9f800f
 8005d38:	f9ff800f 	.word	0xf9ff800f

08005d3c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d07f      	beq.n	8005e4e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fc fb5c 	bl	8002420 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005d6e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	22ca      	movs	r2, #202	; 0xca
 8005d7e:	625a      	str	r2, [r3, #36]	; 0x24
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2253      	movs	r2, #83	; 0x53
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f9b5 	bl	80060f8 <RTC_EnterInitMode>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d15a      	bne.n	8005e4e <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005daa:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6999      	ldr	r1, [r3, #24]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6912      	ldr	r2, [r2, #16]
 8005dd2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6919      	ldr	r1, [r3, #16]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	041a      	lsls	r2, r3, #16
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005de8:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <HAL_RTC_Init+0x11c>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	4917      	ldr	r1, [pc, #92]	; (8005e58 <HAL_RTC_Init+0x11c>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f9af 	bl	8006164 <RTC_ExitInitMode>
 8005e06:	4603      	mov	r3, r0
 8005e08:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11e      	bne.n	8005e4e <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005e1e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6999      	ldr	r1, [r3, #24]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	22ff      	movs	r2, #255	; 0xff
 8005e44:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40002800 	.word	0x40002800

08005e5c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e5c:	b590      	push	{r4, r7, lr}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_RTC_SetTime+0x1a>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e08b      	b.n	8005f8e <HAL_RTC_SetTime+0x132>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2202      	movs	r2, #2
 8005e82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	22ca      	movs	r2, #202	; 0xca
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2253      	movs	r2, #83	; 0x53
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f92e 	bl	80060f8 <RTC_EnterInitMode>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005ea0:	7cfb      	ldrb	r3, [r7, #19]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d15e      	bne.n	8005f64 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005ea6:	4b3c      	ldr	r3, [pc, #240]	; (8005f98 <HAL_RTC_SetTime+0x13c>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb2:	d057      	beq.n	8005f64 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d125      	bne.n	8005f06 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005eba:	4b37      	ldr	r3, [pc, #220]	; (8005f98 <HAL_RTC_SetTime+0x13c>)
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 f985 	bl	80061e0 <RTC_ByteToBcd2>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f97e 	bl	80061e0 <RTC_ByteToBcd2>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ee8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	789b      	ldrb	r3, [r3, #2]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f976 	bl	80061e0 <RTC_ByteToBcd2>
 8005ef4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ef6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	78db      	ldrb	r3, [r3, #3]
 8005efe:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e017      	b.n	8005f36 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005f06:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <HAL_RTC_SetTime+0x13c>)
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d102      	bne.n	8005f18 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f24:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f2a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	78db      	ldrb	r3, [r3, #3]
 8005f30:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005f36:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <HAL_RTC_SetTime+0x13c>)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f3e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f42:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005f44:	4b14      	ldr	r3, [pc, #80]	; (8005f98 <HAL_RTC_SetTime+0x13c>)
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	4a13      	ldr	r2, [pc, #76]	; (8005f98 <HAL_RTC_SetTime+0x13c>)
 8005f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f4e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005f50:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <HAL_RTC_SetTime+0x13c>)
 8005f52:	699a      	ldr	r2, [r3, #24]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	68d9      	ldr	r1, [r3, #12]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	490e      	ldr	r1, [pc, #56]	; (8005f98 <HAL_RTC_SetTime+0x13c>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f8fd 	bl	8006164 <RTC_ExitInitMode>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	22ff      	movs	r2, #255	; 0xff
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005f76:	7cfb      	ldrb	r3, [r7, #19]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005f8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd90      	pop	{r4, r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40002800 	.word	0x40002800

08005f9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f9c:	b590      	push	{r4, r7, lr}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RTC_SetDate+0x1a>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e074      	b.n	80060a0 <HAL_RTC_SetDate+0x104>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10e      	bne.n	8005fea <HAL_RTC_SetDate+0x4e>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	f023 0310 	bic.w	r3, r3, #16
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	330a      	adds	r3, #10
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d11c      	bne.n	800602a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	78db      	ldrb	r3, [r3, #3]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f8f3 	bl	80061e0 <RTC_ByteToBcd2>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f8ec 	bl	80061e0 <RTC_ByteToBcd2>
 8006008:	4603      	mov	r3, r0
 800600a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800600c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	789b      	ldrb	r3, [r3, #2]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f8e4 	bl	80061e0 <RTC_ByteToBcd2>
 8006018:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800601a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e00e      	b.n	8006048 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	78db      	ldrb	r3, [r3, #3]
 800602e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006036:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800603c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	22ca      	movs	r2, #202	; 0xca
 800604e:	625a      	str	r2, [r3, #36]	; 0x24
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2253      	movs	r2, #83	; 0x53
 8006056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f84d 	bl	80060f8 <RTC_EnterInitMode>
 800605e:	4603      	mov	r3, r0
 8006060:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006062:	7cfb      	ldrb	r3, [r7, #19]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10b      	bne.n	8006080 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8006068:	4a0f      	ldr	r2, [pc, #60]	; (80060a8 <HAL_RTC_SetDate+0x10c>)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006070:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006074:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f874 	bl	8006164 <RTC_ExitInitMode>
 800607c:	4603      	mov	r3, r0
 800607e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	22ff      	movs	r2, #255	; 0xff
 8006086:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006088:	7cfb      	ldrb	r3, [r7, #19]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800609e:	7cfb      	ldrb	r3, [r7, #19]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd90      	pop	{r4, r7, pc}
 80060a8:	40002800 	.word	0x40002800

080060ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060c2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 80060c4:	f7fc fb4a 	bl	800275c <HAL_GetTick>
 80060c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80060ca:	e009      	b.n	80060e0 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060cc:	f7fc fb46 	bl	800275c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060da:	d901      	bls.n	80060e0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e007      	b.n	80060f0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0ee      	beq.n	80060cc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d123      	bne.n	800615a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006120:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006122:	f7fc fb1b 	bl	800275c <HAL_GetTick>
 8006126:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006128:	e00d      	b.n	8006146 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800612a:	f7fc fb17 	bl	800275c <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006138:	d905      	bls.n	8006146 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2203      	movs	r2, #3
 8006142:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d102      	bne.n	800615a <RTC_EnterInitMode+0x62>
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d1e7      	bne.n	800612a <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006170:	4b1a      	ldr	r3, [pc, #104]	; (80061dc <RTC_ExitInitMode+0x78>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	4a19      	ldr	r2, [pc, #100]	; (80061dc <RTC_ExitInitMode+0x78>)
 8006176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617a:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800617c:	4b17      	ldr	r3, [pc, #92]	; (80061dc <RTC_ExitInitMode+0x78>)
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10c      	bne.n	80061a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ff8f 	bl	80060ac <HAL_RTC_WaitForSynchro>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01e      	beq.n	80061d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2203      	movs	r2, #3
 8006198:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	73fb      	strb	r3, [r7, #15]
 80061a0:	e017      	b.n	80061d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061a2:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <RTC_ExitInitMode+0x78>)
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <RTC_ExitInitMode+0x78>)
 80061a8:	f023 0320 	bic.w	r3, r3, #32
 80061ac:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff ff7c 	bl	80060ac <HAL_RTC_WaitForSynchro>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2203      	movs	r2, #3
 80061be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <RTC_ExitInitMode+0x78>)
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	4a04      	ldr	r2, [pc, #16]	; (80061dc <RTC_ExitInitMode+0x78>)
 80061cc:	f043 0320 	orr.w	r3, r3, #32
 80061d0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40002800 	.word	0x40002800

080061e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80061f2:	e005      	b.n	8006200 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3301      	adds	r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	3b0a      	subs	r3, #10
 80061fe:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006200:	7afb      	ldrb	r3, [r7, #11]
 8006202:	2b09      	cmp	r3, #9
 8006204:	d8f6      	bhi.n	80061f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	b2da      	uxtb	r2, r3
 800620e:	7afb      	ldrb	r3, [r7, #11]
 8006210:	4313      	orrs	r3, r2
 8006212:	b2db      	uxtb	r3, r3
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e095      	b.n	800635e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	2b00      	cmp	r3, #0
 8006238:	d108      	bne.n	800624c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006242:	d009      	beq.n	8006258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	61da      	str	r2, [r3, #28]
 800624a:	e005      	b.n	8006258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fc f912 	bl	800249c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800628e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006298:	d902      	bls.n	80062a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	e002      	b.n	80062a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80062ae:	d007      	beq.n	80062c0 <HAL_SPI_Init+0xa0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062b8:	d002      	beq.n	80062c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006302:	ea42 0103 	orr.w	r1, r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	0c1b      	lsrs	r3, r3, #16
 800631c:	f003 0204 	and.w	r2, r3, #4
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800633c:	ea42 0103 	orr.w	r1, r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b088      	sub	sp, #32
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_SPI_Transmit+0x22>
 8006384:	2302      	movs	r3, #2
 8006386:	e158      	b.n	800663a <HAL_SPI_Transmit+0x2d4>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006390:	f7fc f9e4 	bl	800275c <HAL_GetTick>
 8006394:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d002      	beq.n	80063ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063a6:	2302      	movs	r3, #2
 80063a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063aa:	e13d      	b.n	8006628 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_SPI_Transmit+0x52>
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063bc:	e134      	b.n	8006628 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2203      	movs	r2, #3
 80063c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	88fa      	ldrh	r2, [r7, #6]
 80063d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006408:	d10f      	bne.n	800642a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006418:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006428:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d007      	beq.n	8006448 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006450:	d94b      	bls.n	80064ea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_SPI_Transmit+0xfa>
 800645a:	8afb      	ldrh	r3, [r7, #22]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d13e      	bne.n	80064de <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	881a      	ldrh	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	1c9a      	adds	r2, r3, #2
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006484:	e02b      	b.n	80064de <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d112      	bne.n	80064ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	881a      	ldrh	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	1c9a      	adds	r2, r3, #2
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064b8:	e011      	b.n	80064de <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ba:	f7fc f94f 	bl	800275c <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d803      	bhi.n	80064d2 <HAL_SPI_Transmit+0x16c>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d102      	bne.n	80064d8 <HAL_SPI_Transmit+0x172>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064dc:	e0a4      	b.n	8006628 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ce      	bne.n	8006486 <HAL_SPI_Transmit+0x120>
 80064e8:	e07c      	b.n	80065e4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_SPI_Transmit+0x192>
 80064f2:	8afb      	ldrh	r3, [r7, #22]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d170      	bne.n	80065da <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d912      	bls.n	8006528 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	881a      	ldrh	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	1c9a      	adds	r2, r3, #2
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b02      	subs	r3, #2
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006526:	e058      	b.n	80065da <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	330c      	adds	r3, #12
 8006532:	7812      	ldrb	r2, [r2, #0]
 8006534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800654e:	e044      	b.n	80065da <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b02      	cmp	r3, #2
 800655c:	d12b      	bne.n	80065b6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d912      	bls.n	800658e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	881a      	ldrh	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	1c9a      	adds	r2, r3, #2
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b02      	subs	r3, #2
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800658c:	e025      	b.n	80065da <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	7812      	ldrb	r2, [r2, #0]
 800659a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065b4:	e011      	b.n	80065da <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b6:	f7fc f8d1 	bl	800275c <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d803      	bhi.n	80065ce <HAL_SPI_Transmit+0x268>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065cc:	d102      	bne.n	80065d4 <HAL_SPI_Transmit+0x26e>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065d8:	e026      	b.n	8006628 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1b5      	bne.n	8006550 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fce3 	bl	8006fb4 <SPI_EndRxTxTransaction>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006602:	2300      	movs	r3, #0
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e000      	b.n	8006628 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006626:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006638:	7ffb      	ldrb	r3, [r7, #31]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b088      	sub	sp, #32
 8006646:	af02      	add	r7, sp, #8
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	603b      	str	r3, [r7, #0]
 800664e:	4613      	mov	r3, r2
 8006650:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800665e:	d112      	bne.n	8006686 <HAL_SPI_Receive+0x44>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10e      	bne.n	8006686 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2204      	movs	r2, #4
 800666c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	4613      	mov	r3, r2
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f910 	bl	80068a2 <HAL_SPI_TransmitReceive>
 8006682:	4603      	mov	r3, r0
 8006684:	e109      	b.n	800689a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_SPI_Receive+0x52>
 8006690:	2302      	movs	r3, #2
 8006692:	e102      	b.n	800689a <HAL_SPI_Receive+0x258>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800669c:	f7fc f85e 	bl	800275c <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d002      	beq.n	80066b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80066ae:	2302      	movs	r3, #2
 80066b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066b2:	e0e9      	b.n	8006888 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_SPI_Receive+0x7e>
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066c4:	e0e0      	b.n	8006888 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2204      	movs	r2, #4
 80066ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	88fa      	ldrh	r2, [r7, #6]
 80066de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	88fa      	ldrh	r2, [r7, #6]
 80066e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006710:	d908      	bls.n	8006724 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006720:	605a      	str	r2, [r3, #4]
 8006722:	e007      	b.n	8006734 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006732:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673c:	d10f      	bne.n	800675e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800674c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800675c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b40      	cmp	r3, #64	; 0x40
 800676a:	d007      	beq.n	800677c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800677a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006784:	d867      	bhi.n	8006856 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006786:	e030      	b.n	80067ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b01      	cmp	r3, #1
 8006794:	d117      	bne.n	80067c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f103 020c 	add.w	r2, r3, #12
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	7812      	ldrb	r2, [r2, #0]
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80067c4:	e011      	b.n	80067ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067c6:	f7fb ffc9 	bl	800275c <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d803      	bhi.n	80067de <HAL_SPI_Receive+0x19c>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d102      	bne.n	80067e4 <HAL_SPI_Receive+0x1a2>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067e8:	e04e      	b.n	8006888 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1c8      	bne.n	8006788 <HAL_SPI_Receive+0x146>
 80067f6:	e034      	b.n	8006862 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b01      	cmp	r3, #1
 8006804:	d115      	bne.n	8006832 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	b292      	uxth	r2, r2
 8006812:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	1c9a      	adds	r2, r3, #2
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006830:	e011      	b.n	8006856 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006832:	f7fb ff93 	bl	800275c <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d803      	bhi.n	800684a <HAL_SPI_Receive+0x208>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d102      	bne.n	8006850 <HAL_SPI_Receive+0x20e>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006854:	e018      	b.n	8006888 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1ca      	bne.n	80067f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 fb4c 	bl	8006f04 <SPI_EndRxTransaction>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]
 8006884:	e000      	b.n	8006888 <HAL_SPI_Receive+0x246>
  }

error :
 8006886:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b08a      	sub	sp, #40	; 0x28
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	607a      	str	r2, [r7, #4]
 80068ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068b0:	2301      	movs	r3, #1
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_SPI_TransmitReceive+0x26>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e1fb      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0x41e>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068d0:	f7fb ff44 	bl	800275c <HAL_GetTick>
 80068d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80068e4:	887b      	ldrh	r3, [r7, #2]
 80068e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80068e8:	887b      	ldrh	r3, [r7, #2]
 80068ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068ec:	7efb      	ldrb	r3, [r7, #27]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d00e      	beq.n	8006910 <HAL_SPI_TransmitReceive+0x6e>
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f8:	d106      	bne.n	8006908 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d102      	bne.n	8006908 <HAL_SPI_TransmitReceive+0x66>
 8006902:	7efb      	ldrb	r3, [r7, #27]
 8006904:	2b04      	cmp	r3, #4
 8006906:	d003      	beq.n	8006910 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006908:	2302      	movs	r3, #2
 800690a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800690e:	e1cd      	b.n	8006cac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <HAL_SPI_TransmitReceive+0x80>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_SPI_TransmitReceive+0x80>
 800691c:	887b      	ldrh	r3, [r7, #2]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006928:	e1c0      	b.n	8006cac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b04      	cmp	r3, #4
 8006934:	d003      	beq.n	800693e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2205      	movs	r2, #5
 800693a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	887a      	ldrh	r2, [r7, #2]
 800694e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	887a      	ldrh	r2, [r7, #2]
 8006956:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	887a      	ldrh	r2, [r7, #2]
 8006964:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	887a      	ldrh	r2, [r7, #2]
 800696a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006980:	d802      	bhi.n	8006988 <HAL_SPI_TransmitReceive+0xe6>
 8006982:	8a3b      	ldrh	r3, [r7, #16]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d908      	bls.n	800699a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006996:	605a      	str	r2, [r3, #4]
 8006998:	e007      	b.n	80069aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b4:	2b40      	cmp	r3, #64	; 0x40
 80069b6:	d007      	beq.n	80069c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069d0:	d97c      	bls.n	8006acc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <HAL_SPI_TransmitReceive+0x13e>
 80069da:	8a7b      	ldrh	r3, [r7, #18]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d169      	bne.n	8006ab4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	881a      	ldrh	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	1c9a      	adds	r2, r3, #2
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a04:	e056      	b.n	8006ab4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d11b      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0x1aa>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d016      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x1aa>
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d113      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	1c9a      	adds	r2, r3, #2
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d11c      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x1f2>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d016      	beq.n	8006a94 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	b292      	uxth	r2, r2
 8006a72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	1c9a      	adds	r2, r3, #2
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a90:	2301      	movs	r3, #1
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a94:	f7fb fe62 	bl	800275c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d807      	bhi.n	8006ab4 <HAL_SPI_TransmitReceive+0x212>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d003      	beq.n	8006ab4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006ab2:	e0fb      	b.n	8006cac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1a3      	bne.n	8006a06 <HAL_SPI_TransmitReceive+0x164>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d19d      	bne.n	8006a06 <HAL_SPI_TransmitReceive+0x164>
 8006aca:	e0df      	b.n	8006c8c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <HAL_SPI_TransmitReceive+0x23a>
 8006ad4:	8a7b      	ldrh	r3, [r7, #18]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	f040 80cb 	bne.w	8006c72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d912      	bls.n	8006b0c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	881a      	ldrh	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	1c9a      	adds	r2, r3, #2
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b02      	subs	r3, #2
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b0a:	e0b2      	b.n	8006c72 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	7812      	ldrb	r2, [r2, #0]
 8006b18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b32:	e09e      	b.n	8006c72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d134      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x30a>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d02f      	beq.n	8006bac <HAL_SPI_TransmitReceive+0x30a>
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d12c      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d912      	bls.n	8006b82 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	881a      	ldrh	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	1c9a      	adds	r2, r3, #2
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b02      	subs	r3, #2
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b80:	e012      	b.n	8006ba8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	7812      	ldrb	r2, [r2, #0]
 8006b8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d148      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x3aa>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d042      	beq.n	8006c4c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d923      	bls.n	8006c1a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	b292      	uxth	r2, r2
 8006bde:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	1c9a      	adds	r2, r3, #2
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b02      	subs	r3, #2
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d81f      	bhi.n	8006c48 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	e016      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f103 020c 	add.w	r2, r3, #12
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	7812      	ldrb	r2, [r2, #0]
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c4c:	f7fb fd86 	bl	800275c <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d803      	bhi.n	8006c64 <HAL_SPI_TransmitReceive+0x3c2>
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d102      	bne.n	8006c6a <HAL_SPI_TransmitReceive+0x3c8>
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d103      	bne.n	8006c72 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006c70:	e01c      	b.n	8006cac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f47f af5b 	bne.w	8006b34 <HAL_SPI_TransmitReceive+0x292>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f47f af54 	bne.w	8006b34 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 f98f 	bl	8006fb4 <SPI_EndRxTxTransaction>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d006      	beq.n	8006caa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	661a      	str	r2, [r3, #96]	; 0x60
 8006ca8:	e000      	b.n	8006cac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006caa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3728      	adds	r7, #40	; 0x28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006cd8:	f7fb fd40 	bl	800275c <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ce8:	f7fb fd38 	bl	800275c <HAL_GetTick>
 8006cec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cee:	4b39      	ldr	r3, [pc, #228]	; (8006dd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	015b      	lsls	r3, r3, #5
 8006cf4:	0d1b      	lsrs	r3, r3, #20
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cfe:	e054      	b.n	8006daa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d050      	beq.n	8006daa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d08:	f7fb fd28 	bl	800275c <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d902      	bls.n	8006d1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d13d      	bne.n	8006d9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d36:	d111      	bne.n	8006d5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d40:	d004      	beq.n	8006d4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d4a:	d107      	bne.n	8006d5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d64:	d10f      	bne.n	8006d86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e017      	b.n	8006dca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	4013      	ands	r3, r2
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	bf0c      	ite	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	2300      	movne	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d19b      	bne.n	8006d00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3720      	adds	r7, #32
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000004 	.word	0x20000004

08006dd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006dea:	f7fb fcb7 	bl	800275c <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	4413      	add	r3, r2
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006dfa:	f7fb fcaf 	bl	800275c <HAL_GetTick>
 8006dfe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	330c      	adds	r3, #12
 8006e06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e08:	4b3d      	ldr	r3, [pc, #244]	; (8006f00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	00da      	lsls	r2, r3, #3
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	0d1b      	lsrs	r3, r3, #20
 8006e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006e20:	e060      	b.n	8006ee4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e28:	d107      	bne.n	8006e3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e40:	d050      	beq.n	8006ee4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e42:	f7fb fc8b 	bl	800275c <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d902      	bls.n	8006e58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d13d      	bne.n	8006ed4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e70:	d111      	bne.n	8006e96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e7a:	d004      	beq.n	8006e86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e84:	d107      	bne.n	8006e96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e9e:	d10f      	bne.n	8006ec0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ebe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e010      	b.n	8006ef6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	4013      	ands	r3, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d196      	bne.n	8006e22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3728      	adds	r7, #40	; 0x28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000004 	.word	0x20000004

08006f04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f18:	d111      	bne.n	8006f3e <SPI_EndRxTransaction+0x3a>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f22:	d004      	beq.n	8006f2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f2c:	d107      	bne.n	8006f3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f3c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	2180      	movs	r1, #128	; 0x80
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff febd 	bl	8006cc8 <SPI_WaitFlagStateUntilTimeout>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f58:	f043 0220 	orr.w	r2, r3, #32
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e023      	b.n	8006fac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f6c:	d11d      	bne.n	8006faa <SPI_EndRxTransaction+0xa6>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f76:	d004      	beq.n	8006f82 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f80:	d113      	bne.n	8006faa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f7ff ff22 	bl	8006dd8 <SPI_WaitFifoStateUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d007      	beq.n	8006faa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9e:	f043 0220 	orr.w	r2, r3, #32
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e000      	b.n	8006fac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af02      	add	r7, sp, #8
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff ff03 	bl	8006dd8 <SPI_WaitFifoStateUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fdc:	f043 0220 	orr.w	r2, r3, #32
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e027      	b.n	8007038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2180      	movs	r1, #128	; 0x80
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff fe68 	bl	8006cc8 <SPI_WaitFlagStateUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007002:	f043 0220 	orr.w	r2, r3, #32
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e014      	b.n	8007038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2200      	movs	r2, #0
 8007016:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff fedc 	bl	8006dd8 <SPI_WaitFifoStateUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800702a:	f043 0220 	orr.w	r2, r3, #32
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e000      	b.n	8007038 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e049      	b.n	80070e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fb fa5a 	bl	8002520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f000 f9ee 	bl	8007460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b01      	cmp	r3, #1
 8007102:	d001      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e04f      	b.n	80071a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a23      	ldr	r2, [pc, #140]	; (80071b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01d      	beq.n	8007166 <HAL_TIM_Base_Start_IT+0x76>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007132:	d018      	beq.n	8007166 <HAL_TIM_Base_Start_IT+0x76>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1f      	ldr	r2, [pc, #124]	; (80071b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d013      	beq.n	8007166 <HAL_TIM_Base_Start_IT+0x76>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1e      	ldr	r2, [pc, #120]	; (80071bc <HAL_TIM_Base_Start_IT+0xcc>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00e      	beq.n	8007166 <HAL_TIM_Base_Start_IT+0x76>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1c      	ldr	r2, [pc, #112]	; (80071c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d009      	beq.n	8007166 <HAL_TIM_Base_Start_IT+0x76>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a1b      	ldr	r2, [pc, #108]	; (80071c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d004      	beq.n	8007166 <HAL_TIM_Base_Start_IT+0x76>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a19      	ldr	r2, [pc, #100]	; (80071c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d115      	bne.n	8007192 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	4b17      	ldr	r3, [pc, #92]	; (80071cc <HAL_TIM_Base_Start_IT+0xdc>)
 800716e:	4013      	ands	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b06      	cmp	r3, #6
 8007176:	d015      	beq.n	80071a4 <HAL_TIM_Base_Start_IT+0xb4>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800717e:	d011      	beq.n	80071a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007190:	e008      	b.n	80071a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0201 	orr.w	r2, r2, #1
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	e000      	b.n	80071a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	40012c00 	.word	0x40012c00
 80071b8:	40000400 	.word	0x40000400
 80071bc:	40000800 	.word	0x40000800
 80071c0:	40000c00 	.word	0x40000c00
 80071c4:	40013400 	.word	0x40013400
 80071c8:	40014000 	.word	0x40014000
 80071cc:	00010007 	.word	0x00010007

080071d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d122      	bne.n	800722c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d11b      	bne.n	800722c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f06f 0202 	mvn.w	r2, #2
 80071fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f905 	bl	8007422 <HAL_TIM_IC_CaptureCallback>
 8007218:	e005      	b.n	8007226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f8f7 	bl	800740e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f908 	bl	8007436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0304 	and.w	r3, r3, #4
 8007236:	2b04      	cmp	r3, #4
 8007238:	d122      	bne.n	8007280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b04      	cmp	r3, #4
 8007246:	d11b      	bne.n	8007280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f06f 0204 	mvn.w	r2, #4
 8007250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2202      	movs	r2, #2
 8007256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f8db 	bl	8007422 <HAL_TIM_IC_CaptureCallback>
 800726c:	e005      	b.n	800727a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f8cd 	bl	800740e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f8de 	bl	8007436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b08      	cmp	r3, #8
 800728c:	d122      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b08      	cmp	r3, #8
 800729a:	d11b      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0208 	mvn.w	r2, #8
 80072a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2204      	movs	r2, #4
 80072aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8b1 	bl	8007422 <HAL_TIM_IC_CaptureCallback>
 80072c0:	e005      	b.n	80072ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f8a3 	bl	800740e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f8b4 	bl	8007436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0310 	and.w	r3, r3, #16
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d122      	bne.n	8007328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b10      	cmp	r3, #16
 80072ee:	d11b      	bne.n	8007328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0210 	mvn.w	r2, #16
 80072f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2208      	movs	r2, #8
 80072fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f887 	bl	8007422 <HAL_TIM_IC_CaptureCallback>
 8007314:	e005      	b.n	8007322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f879 	bl	800740e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f88a 	bl	8007436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b01      	cmp	r3, #1
 8007334:	d10e      	bne.n	8007354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b01      	cmp	r3, #1
 8007342:	d107      	bne.n	8007354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0201 	mvn.w	r2, #1
 800734c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fa ff42 	bl	80021d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d10e      	bne.n	8007380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736c:	2b80      	cmp	r3, #128	; 0x80
 800736e:	d107      	bne.n	8007380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f914 	bl	80075a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800738e:	d10e      	bne.n	80073ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739a:	2b80      	cmp	r3, #128	; 0x80
 800739c:	d107      	bne.n	80073ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80073a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f907 	bl	80075bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d10e      	bne.n	80073da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c6:	2b40      	cmp	r3, #64	; 0x40
 80073c8:	d107      	bne.n	80073da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f838 	bl	800744a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b20      	cmp	r3, #32
 80073e6:	d10e      	bne.n	8007406 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d107      	bne.n	8007406 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f06f 0220 	mvn.w	r2, #32
 80073fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f8c7 	bl	8007594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007406:	bf00      	nop
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
	...

08007460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a40      	ldr	r2, [pc, #256]	; (8007574 <TIM_Base_SetConfig+0x114>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d013      	beq.n	80074a0 <TIM_Base_SetConfig+0x40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800747e:	d00f      	beq.n	80074a0 <TIM_Base_SetConfig+0x40>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a3d      	ldr	r2, [pc, #244]	; (8007578 <TIM_Base_SetConfig+0x118>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00b      	beq.n	80074a0 <TIM_Base_SetConfig+0x40>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a3c      	ldr	r2, [pc, #240]	; (800757c <TIM_Base_SetConfig+0x11c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <TIM_Base_SetConfig+0x40>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a3b      	ldr	r2, [pc, #236]	; (8007580 <TIM_Base_SetConfig+0x120>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_Base_SetConfig+0x40>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a3a      	ldr	r2, [pc, #232]	; (8007584 <TIM_Base_SetConfig+0x124>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d108      	bne.n	80074b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a2f      	ldr	r2, [pc, #188]	; (8007574 <TIM_Base_SetConfig+0x114>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01f      	beq.n	80074fa <TIM_Base_SetConfig+0x9a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c0:	d01b      	beq.n	80074fa <TIM_Base_SetConfig+0x9a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a2c      	ldr	r2, [pc, #176]	; (8007578 <TIM_Base_SetConfig+0x118>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d017      	beq.n	80074fa <TIM_Base_SetConfig+0x9a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a2b      	ldr	r2, [pc, #172]	; (800757c <TIM_Base_SetConfig+0x11c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <TIM_Base_SetConfig+0x9a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a2a      	ldr	r2, [pc, #168]	; (8007580 <TIM_Base_SetConfig+0x120>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00f      	beq.n	80074fa <TIM_Base_SetConfig+0x9a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a29      	ldr	r2, [pc, #164]	; (8007584 <TIM_Base_SetConfig+0x124>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d00b      	beq.n	80074fa <TIM_Base_SetConfig+0x9a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a28      	ldr	r2, [pc, #160]	; (8007588 <TIM_Base_SetConfig+0x128>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d007      	beq.n	80074fa <TIM_Base_SetConfig+0x9a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a27      	ldr	r2, [pc, #156]	; (800758c <TIM_Base_SetConfig+0x12c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d003      	beq.n	80074fa <TIM_Base_SetConfig+0x9a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a26      	ldr	r2, [pc, #152]	; (8007590 <TIM_Base_SetConfig+0x130>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d108      	bne.n	800750c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a10      	ldr	r2, [pc, #64]	; (8007574 <TIM_Base_SetConfig+0x114>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00f      	beq.n	8007558 <TIM_Base_SetConfig+0xf8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a12      	ldr	r2, [pc, #72]	; (8007584 <TIM_Base_SetConfig+0x124>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00b      	beq.n	8007558 <TIM_Base_SetConfig+0xf8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a11      	ldr	r2, [pc, #68]	; (8007588 <TIM_Base_SetConfig+0x128>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d007      	beq.n	8007558 <TIM_Base_SetConfig+0xf8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a10      	ldr	r2, [pc, #64]	; (800758c <TIM_Base_SetConfig+0x12c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d003      	beq.n	8007558 <TIM_Base_SetConfig+0xf8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a0f      	ldr	r2, [pc, #60]	; (8007590 <TIM_Base_SetConfig+0x130>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d103      	bne.n	8007560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	615a      	str	r2, [r3, #20]
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40000400 	.word	0x40000400
 800757c:	40000800 	.word	0x40000800
 8007580:	40000c00 	.word	0x40000c00
 8007584:	40013400 	.word	0x40013400
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800

08007594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <__NVIC_SetPriority>:
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	db0a      	blt.n	80075fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	490c      	ldr	r1, [pc, #48]	; (800761c <__NVIC_SetPriority+0x4c>)
 80075ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ee:	0112      	lsls	r2, r2, #4
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	440b      	add	r3, r1
 80075f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80075f8:	e00a      	b.n	8007610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	4908      	ldr	r1, [pc, #32]	; (8007620 <__NVIC_SetPriority+0x50>)
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	3b04      	subs	r3, #4
 8007608:	0112      	lsls	r2, r2, #4
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	440b      	add	r3, r1
 800760e:	761a      	strb	r2, [r3, #24]
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	e000e100 	.word	0xe000e100
 8007620:	e000ed00 	.word	0xe000ed00

08007624 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <SysTick_Handler+0x1c>)
 800762a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800762c:	f002 f936 	bl	800989c <xTaskGetSchedulerState>
 8007630:	4603      	mov	r3, r0
 8007632:	2b01      	cmp	r3, #1
 8007634:	d001      	beq.n	800763a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007636:	f000 fd97 	bl	8008168 <xPortSysTickHandler>
  }
}
 800763a:	bf00      	nop
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	e000e010 	.word	0xe000e010

08007644 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007648:	2100      	movs	r1, #0
 800764a:	f06f 0004 	mvn.w	r0, #4
 800764e:	f7ff ffbf 	bl	80075d0 <__NVIC_SetPriority>
#endif
}
 8007652:	bf00      	nop
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800765e:	f3ef 8305 	mrs	r3, IPSR
 8007662:	603b      	str	r3, [r7, #0]
  return(result);
 8007664:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800766a:	f06f 0305 	mvn.w	r3, #5
 800766e:	607b      	str	r3, [r7, #4]
 8007670:	e00c      	b.n	800768c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007672:	4b0a      	ldr	r3, [pc, #40]	; (800769c <osKernelInitialize+0x44>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d105      	bne.n	8007686 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800767a:	4b08      	ldr	r3, [pc, #32]	; (800769c <osKernelInitialize+0x44>)
 800767c:	2201      	movs	r2, #1
 800767e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007680:	2300      	movs	r3, #0
 8007682:	607b      	str	r3, [r7, #4]
 8007684:	e002      	b.n	800768c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007686:	f04f 33ff 	mov.w	r3, #4294967295
 800768a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800768c:	687b      	ldr	r3, [r7, #4]
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	20000224 	.word	0x20000224

080076a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076a6:	f3ef 8305 	mrs	r3, IPSR
 80076aa:	603b      	str	r3, [r7, #0]
  return(result);
 80076ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80076b2:	f06f 0305 	mvn.w	r3, #5
 80076b6:	607b      	str	r3, [r7, #4]
 80076b8:	e010      	b.n	80076dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076ba:	4b0b      	ldr	r3, [pc, #44]	; (80076e8 <osKernelStart+0x48>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d109      	bne.n	80076d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076c2:	f7ff ffbf 	bl	8007644 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076c6:	4b08      	ldr	r3, [pc, #32]	; (80076e8 <osKernelStart+0x48>)
 80076c8:	2202      	movs	r2, #2
 80076ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076cc:	f001 fc9e 	bl	800900c <vTaskStartScheduler>
      stat = osOK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	e002      	b.n	80076dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80076d6:	f04f 33ff 	mov.w	r3, #4294967295
 80076da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076dc:	687b      	ldr	r3, [r7, #4]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000224 	.word	0x20000224

080076ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08e      	sub	sp, #56	; 0x38
 80076f0:	af04      	add	r7, sp, #16
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076fc:	f3ef 8305 	mrs	r3, IPSR
 8007700:	617b      	str	r3, [r7, #20]
  return(result);
 8007702:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007704:	2b00      	cmp	r3, #0
 8007706:	d17e      	bne.n	8007806 <osThreadNew+0x11a>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d07b      	beq.n	8007806 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800770e:	2380      	movs	r3, #128	; 0x80
 8007710:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007712:	2318      	movs	r3, #24
 8007714:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800771a:	f04f 33ff 	mov.w	r3, #4294967295
 800771e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d045      	beq.n	80077b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <osThreadNew+0x48>
        name = attr->name;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d008      	beq.n	800775a <osThreadNew+0x6e>
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	2b38      	cmp	r3, #56	; 0x38
 800774c:	d805      	bhi.n	800775a <osThreadNew+0x6e>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <osThreadNew+0x72>
        return (NULL);
 800775a:	2300      	movs	r3, #0
 800775c:	e054      	b.n	8007808 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	089b      	lsrs	r3, r3, #2
 800776c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00e      	beq.n	8007794 <osThreadNew+0xa8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	2b5b      	cmp	r3, #91	; 0x5b
 800777c:	d90a      	bls.n	8007794 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007782:	2b00      	cmp	r3, #0
 8007784:	d006      	beq.n	8007794 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <osThreadNew+0xa8>
        mem = 1;
 800778e:	2301      	movs	r3, #1
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	e010      	b.n	80077b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10c      	bne.n	80077b6 <osThreadNew+0xca>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d108      	bne.n	80077b6 <osThreadNew+0xca>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d104      	bne.n	80077b6 <osThreadNew+0xca>
          mem = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	61bb      	str	r3, [r7, #24]
 80077b0:	e001      	b.n	80077b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d110      	bne.n	80077de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077c4:	9202      	str	r2, [sp, #8]
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6a3a      	ldr	r2, [r7, #32]
 80077d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f001 fa44 	bl	8008c60 <xTaskCreateStatic>
 80077d8:	4603      	mov	r3, r0
 80077da:	613b      	str	r3, [r7, #16]
 80077dc:	e013      	b.n	8007806 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d110      	bne.n	8007806 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	f107 0310 	add.w	r3, r7, #16
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f001 fa8f 	bl	8008d1a <xTaskCreate>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d001      	beq.n	8007806 <osThreadNew+0x11a>
            hTask = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007806:	693b      	ldr	r3, [r7, #16]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3728      	adds	r7, #40	; 0x28
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007818:	f3ef 8305 	mrs	r3, IPSR
 800781c:	60bb      	str	r3, [r7, #8]
  return(result);
 800781e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <osDelay+0x1c>
    stat = osErrorISR;
 8007824:	f06f 0305 	mvn.w	r3, #5
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	e007      	b.n	800783c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 fbb4 	bl	8008fa4 <vTaskDelay>
    }
  }

  return (stat);
 800783c:	68fb      	ldr	r3, [r7, #12]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4a07      	ldr	r2, [pc, #28]	; (8007874 <vApplicationGetIdleTaskMemory+0x2c>)
 8007858:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	4a06      	ldr	r2, [pc, #24]	; (8007878 <vApplicationGetIdleTaskMemory+0x30>)
 800785e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2280      	movs	r2, #128	; 0x80
 8007864:	601a      	str	r2, [r3, #0]
}
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20000228 	.word	0x20000228
 8007878:	20000284 	.word	0x20000284

0800787c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4a07      	ldr	r2, [pc, #28]	; (80078a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800788c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4a06      	ldr	r2, [pc, #24]	; (80078ac <vApplicationGetTimerTaskMemory+0x30>)
 8007892:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800789a:	601a      	str	r2, [r3, #0]
}
 800789c:	bf00      	nop
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	20000484 	.word	0x20000484
 80078ac:	200004e0 	.word	0x200004e0

080078b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	; 0x28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078bc:	f001 fc0c 	bl	80090d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078c0:	4b5b      	ldr	r3, [pc, #364]	; (8007a30 <pvPortMalloc+0x180>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078c8:	f000 f920 	bl	8007b0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078cc:	4b59      	ldr	r3, [pc, #356]	; (8007a34 <pvPortMalloc+0x184>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4013      	ands	r3, r2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f040 8093 	bne.w	8007a00 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01d      	beq.n	800791c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078e0:	2208      	movs	r2, #8
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4413      	add	r3, r2
 80078e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d014      	beq.n	800791c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f023 0307 	bic.w	r3, r3, #7
 80078f8:	3308      	adds	r3, #8
 80078fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007918:	bf00      	nop
 800791a:	e7fe      	b.n	800791a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d06e      	beq.n	8007a00 <pvPortMalloc+0x150>
 8007922:	4b45      	ldr	r3, [pc, #276]	; (8007a38 <pvPortMalloc+0x188>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d869      	bhi.n	8007a00 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800792c:	4b43      	ldr	r3, [pc, #268]	; (8007a3c <pvPortMalloc+0x18c>)
 800792e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007930:	4b42      	ldr	r3, [pc, #264]	; (8007a3c <pvPortMalloc+0x18c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007936:	e004      	b.n	8007942 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	429a      	cmp	r2, r3
 800794a:	d903      	bls.n	8007954 <pvPortMalloc+0xa4>
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1f1      	bne.n	8007938 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007954:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <pvPortMalloc+0x180>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795a:	429a      	cmp	r2, r3
 800795c:	d050      	beq.n	8007a00 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2208      	movs	r2, #8
 8007964:	4413      	add	r3, r2
 8007966:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	2308      	movs	r3, #8
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	429a      	cmp	r2, r3
 800797e:	d91f      	bls.n	80079c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <pvPortMalloc+0xf8>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	613b      	str	r3, [r7, #16]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	1ad2      	subs	r2, r2, r3
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079ba:	69b8      	ldr	r0, [r7, #24]
 80079bc:	f000 f908 	bl	8007bd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079c0:	4b1d      	ldr	r3, [pc, #116]	; (8007a38 <pvPortMalloc+0x188>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	4a1b      	ldr	r2, [pc, #108]	; (8007a38 <pvPortMalloc+0x188>)
 80079cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079ce:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <pvPortMalloc+0x188>)
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <pvPortMalloc+0x190>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d203      	bcs.n	80079e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079da:	4b17      	ldr	r3, [pc, #92]	; (8007a38 <pvPortMalloc+0x188>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a18      	ldr	r2, [pc, #96]	; (8007a40 <pvPortMalloc+0x190>)
 80079e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	4b13      	ldr	r3, [pc, #76]	; (8007a34 <pvPortMalloc+0x184>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <pvPortMalloc+0x194>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3301      	adds	r3, #1
 80079fc:	4a11      	ldr	r2, [pc, #68]	; (8007a44 <pvPortMalloc+0x194>)
 80079fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a00:	f001 fb78 	bl	80090f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <pvPortMalloc+0x174>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	60fb      	str	r3, [r7, #12]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <pvPortMalloc+0x172>
	return pvReturn;
 8007a24:	69fb      	ldr	r3, [r7, #28]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3728      	adds	r7, #40	; 0x28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	200014a0 	.word	0x200014a0
 8007a34:	200014b4 	.word	0x200014b4
 8007a38:	200014a4 	.word	0x200014a4
 8007a3c:	20001498 	.word	0x20001498
 8007a40:	200014a8 	.word	0x200014a8
 8007a44:	200014ac 	.word	0x200014ac

08007a48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d04d      	beq.n	8007af6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a5a:	2308      	movs	r3, #8
 8007a5c:	425b      	negs	r3, r3
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	4413      	add	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <vPortFree+0xb8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4013      	ands	r3, r2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <vPortFree+0x44>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	60fb      	str	r3, [r7, #12]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <vPortFree+0x62>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	60bb      	str	r3, [r7, #8]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	4b14      	ldr	r3, [pc, #80]	; (8007b00 <vPortFree+0xb8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01e      	beq.n	8007af6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d11a      	bne.n	8007af6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <vPortFree+0xb8>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	401a      	ands	r2, r3
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ad0:	f001 fb02 	bl	80090d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <vPortFree+0xbc>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4413      	add	r3, r2
 8007ade:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <vPortFree+0xbc>)
 8007ae0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ae2:	6938      	ldr	r0, [r7, #16]
 8007ae4:	f000 f874 	bl	8007bd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ae8:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <vPortFree+0xc0>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3301      	adds	r3, #1
 8007aee:	4a06      	ldr	r2, [pc, #24]	; (8007b08 <vPortFree+0xc0>)
 8007af0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007af2:	f001 faff 	bl	80090f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007af6:	bf00      	nop
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	200014b4 	.word	0x200014b4
 8007b04:	200014a4 	.word	0x200014a4
 8007b08:	200014b0 	.word	0x200014b0

08007b0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b12:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007b16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b18:	4b27      	ldr	r3, [pc, #156]	; (8007bb8 <prvHeapInit+0xac>)
 8007b1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00c      	beq.n	8007b40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3307      	adds	r3, #7
 8007b2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 0307 	bic.w	r3, r3, #7
 8007b32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	4a1f      	ldr	r2, [pc, #124]	; (8007bb8 <prvHeapInit+0xac>)
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b44:	4a1d      	ldr	r2, [pc, #116]	; (8007bbc <prvHeapInit+0xb0>)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b4a:	4b1c      	ldr	r3, [pc, #112]	; (8007bbc <prvHeapInit+0xb0>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	4413      	add	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b58:	2208      	movs	r2, #8
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f023 0307 	bic.w	r3, r3, #7
 8007b66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4a15      	ldr	r2, [pc, #84]	; (8007bc0 <prvHeapInit+0xb4>)
 8007b6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b6e:	4b14      	ldr	r3, [pc, #80]	; (8007bc0 <prvHeapInit+0xb4>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b76:	4b12      	ldr	r3, [pc, #72]	; (8007bc0 <prvHeapInit+0xb4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b8c:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <prvHeapInit+0xb4>)
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	4a0a      	ldr	r2, [pc, #40]	; (8007bc4 <prvHeapInit+0xb8>)
 8007b9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	4a09      	ldr	r2, [pc, #36]	; (8007bc8 <prvHeapInit+0xbc>)
 8007ba2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ba4:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <prvHeapInit+0xc0>)
 8007ba6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007baa:	601a      	str	r2, [r3, #0]
}
 8007bac:	bf00      	nop
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	200008e0 	.word	0x200008e0
 8007bbc:	20001498 	.word	0x20001498
 8007bc0:	200014a0 	.word	0x200014a0
 8007bc4:	200014a8 	.word	0x200014a8
 8007bc8:	200014a4 	.word	0x200014a4
 8007bcc:	200014b4 	.word	0x200014b4

08007bd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bd8:	4b28      	ldr	r3, [pc, #160]	; (8007c7c <prvInsertBlockIntoFreeList+0xac>)
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	e002      	b.n	8007be4 <prvInsertBlockIntoFreeList+0x14>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d8f7      	bhi.n	8007bde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d108      	bne.n	8007c12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	441a      	add	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	441a      	add	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d118      	bne.n	8007c58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <prvInsertBlockIntoFreeList+0xb0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d00d      	beq.n	8007c4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	441a      	add	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e008      	b.n	8007c60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c4e:	4b0c      	ldr	r3, [pc, #48]	; (8007c80 <prvInsertBlockIntoFreeList+0xb0>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	e003      	b.n	8007c60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d002      	beq.n	8007c6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c6e:	bf00      	nop
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	20001498 	.word	0x20001498
 8007c80:	200014a0 	.word	0x200014a0

08007c84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f103 0208 	add.w	r2, r3, #8
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f103 0208 	add.w	r2, r3, #8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f103 0208 	add.w	r2, r3, #8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3c:	d103      	bne.n	8007d46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e00c      	b.n	8007d60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3308      	adds	r3, #8
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	e002      	b.n	8007d54 <vListInsert+0x2e>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d2f6      	bcs.n	8007d4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	601a      	str	r2, [r3, #0]
}
 8007d8c:	bf00      	nop
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6892      	ldr	r2, [r2, #8]
 8007dae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6852      	ldr	r2, [r2, #4]
 8007db8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d103      	bne.n	8007dcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1e5a      	subs	r2, r3, #1
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3b04      	subs	r3, #4
 8007dfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3b04      	subs	r3, #4
 8007e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f023 0201 	bic.w	r2, r3, #1
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e1c:	4a0c      	ldr	r2, [pc, #48]	; (8007e50 <pxPortInitialiseStack+0x64>)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3b14      	subs	r3, #20
 8007e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3b04      	subs	r3, #4
 8007e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f06f 0202 	mvn.w	r2, #2
 8007e3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3b20      	subs	r3, #32
 8007e40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e42:	68fb      	ldr	r3, [r7, #12]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	08007e55 	.word	0x08007e55

08007e54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e5e:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <prvTaskExitError+0x54>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e66:	d00a      	beq.n	8007e7e <prvTaskExitError+0x2a>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	60fb      	str	r3, [r7, #12]
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <prvTaskExitError+0x28>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	60bb      	str	r3, [r7, #8]
}
 8007e90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e92:	bf00      	nop
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0fc      	beq.n	8007e94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e9a:	bf00      	nop
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	20000010 	.word	0x20000010
 8007eac:	00000000 	.word	0x00000000

08007eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <pxCurrentTCBConst2>)
 8007eb2:	6819      	ldr	r1, [r3, #0]
 8007eb4:	6808      	ldr	r0, [r1, #0]
 8007eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eba:	f380 8809 	msr	PSP, r0
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f04f 0000 	mov.w	r0, #0
 8007ec6:	f380 8811 	msr	BASEPRI, r0
 8007eca:	4770      	bx	lr
 8007ecc:	f3af 8000 	nop.w

08007ed0 <pxCurrentTCBConst2>:
 8007ed0:	200014c0 	.word	0x200014c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop

08007ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ed8:	4808      	ldr	r0, [pc, #32]	; (8007efc <prvPortStartFirstTask+0x24>)
 8007eda:	6800      	ldr	r0, [r0, #0]
 8007edc:	6800      	ldr	r0, [r0, #0]
 8007ede:	f380 8808 	msr	MSP, r0
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	f380 8814 	msr	CONTROL, r0
 8007eea:	b662      	cpsie	i
 8007eec:	b661      	cpsie	f
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	df00      	svc	0
 8007ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007efa:	bf00      	nop
 8007efc:	e000ed08 	.word	0xe000ed08

08007f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f06:	4b46      	ldr	r3, [pc, #280]	; (8008020 <xPortStartScheduler+0x120>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a46      	ldr	r2, [pc, #280]	; (8008024 <xPortStartScheduler+0x124>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d10a      	bne.n	8007f26 <xPortStartScheduler+0x26>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	613b      	str	r3, [r7, #16]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f26:	4b3e      	ldr	r3, [pc, #248]	; (8008020 <xPortStartScheduler+0x120>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a3f      	ldr	r2, [pc, #252]	; (8008028 <xPortStartScheduler+0x128>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10a      	bne.n	8007f46 <xPortStartScheduler+0x46>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60fb      	str	r3, [r7, #12]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f46:	4b39      	ldr	r3, [pc, #228]	; (800802c <xPortStartScheduler+0x12c>)
 8007f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	22ff      	movs	r2, #255	; 0xff
 8007f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	4b31      	ldr	r3, [pc, #196]	; (8008030 <xPortStartScheduler+0x130>)
 8007f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f6e:	4b31      	ldr	r3, [pc, #196]	; (8008034 <xPortStartScheduler+0x134>)
 8007f70:	2207      	movs	r2, #7
 8007f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f74:	e009      	b.n	8007f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f76:	4b2f      	ldr	r3, [pc, #188]	; (8008034 <xPortStartScheduler+0x134>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	4a2d      	ldr	r2, [pc, #180]	; (8008034 <xPortStartScheduler+0x134>)
 8007f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f92:	2b80      	cmp	r3, #128	; 0x80
 8007f94:	d0ef      	beq.n	8007f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f96:	4b27      	ldr	r3, [pc, #156]	; (8008034 <xPortStartScheduler+0x134>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f1c3 0307 	rsb	r3, r3, #7
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d00a      	beq.n	8007fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	60bb      	str	r3, [r7, #8]
}
 8007fb4:	bf00      	nop
 8007fb6:	e7fe      	b.n	8007fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fb8:	4b1e      	ldr	r3, [pc, #120]	; (8008034 <xPortStartScheduler+0x134>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	4a1d      	ldr	r2, [pc, #116]	; (8008034 <xPortStartScheduler+0x134>)
 8007fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fc2:	4b1c      	ldr	r3, [pc, #112]	; (8008034 <xPortStartScheduler+0x134>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fca:	4a1a      	ldr	r2, [pc, #104]	; (8008034 <xPortStartScheduler+0x134>)
 8007fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fd6:	4b18      	ldr	r3, [pc, #96]	; (8008038 <xPortStartScheduler+0x138>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a17      	ldr	r2, [pc, #92]	; (8008038 <xPortStartScheduler+0x138>)
 8007fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fe2:	4b15      	ldr	r3, [pc, #84]	; (8008038 <xPortStartScheduler+0x138>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a14      	ldr	r2, [pc, #80]	; (8008038 <xPortStartScheduler+0x138>)
 8007fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fee:	f000 f8dd 	bl	80081ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ff2:	4b12      	ldr	r3, [pc, #72]	; (800803c <xPortStartScheduler+0x13c>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ff8:	f000 f8fc 	bl	80081f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ffc:	4b10      	ldr	r3, [pc, #64]	; (8008040 <xPortStartScheduler+0x140>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a0f      	ldr	r2, [pc, #60]	; (8008040 <xPortStartScheduler+0x140>)
 8008002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008008:	f7ff ff66 	bl	8007ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800800c:	f001 f9da 	bl	80093c4 <vTaskSwitchContext>
	prvTaskExitError();
 8008010:	f7ff ff20 	bl	8007e54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	e000ed00 	.word	0xe000ed00
 8008024:	410fc271 	.word	0x410fc271
 8008028:	410fc270 	.word	0x410fc270
 800802c:	e000e400 	.word	0xe000e400
 8008030:	200014b8 	.word	0x200014b8
 8008034:	200014bc 	.word	0x200014bc
 8008038:	e000ed20 	.word	0xe000ed20
 800803c:	20000010 	.word	0x20000010
 8008040:	e000ef34 	.word	0xe000ef34

08008044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	607b      	str	r3, [r7, #4]
}
 800805c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <vPortEnterCritical+0x58>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3301      	adds	r3, #1
 8008064:	4a0d      	ldr	r2, [pc, #52]	; (800809c <vPortEnterCritical+0x58>)
 8008066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008068:	4b0c      	ldr	r3, [pc, #48]	; (800809c <vPortEnterCritical+0x58>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10f      	bne.n	8008090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <vPortEnterCritical+0x5c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <vPortEnterCritical+0x4c>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	603b      	str	r3, [r7, #0]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <vPortEnterCritical+0x4a>
	}
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	20000010 	.word	0x20000010
 80080a0:	e000ed04 	.word	0xe000ed04

080080a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080aa:	4b12      	ldr	r3, [pc, #72]	; (80080f4 <vPortExitCritical+0x50>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10a      	bne.n	80080c8 <vPortExitCritical+0x24>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	607b      	str	r3, [r7, #4]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <vPortExitCritical+0x50>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	4a09      	ldr	r2, [pc, #36]	; (80080f4 <vPortExitCritical+0x50>)
 80080d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080d2:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <vPortExitCritical+0x50>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d105      	bne.n	80080e6 <vPortExitCritical+0x42>
 80080da:	2300      	movs	r3, #0
 80080dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000010 	.word	0x20000010
	...

08008100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008100:	f3ef 8009 	mrs	r0, PSP
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	4b15      	ldr	r3, [pc, #84]	; (8008160 <pxCurrentTCBConst>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	f01e 0f10 	tst.w	lr, #16
 8008110:	bf08      	it	eq
 8008112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811a:	6010      	str	r0, [r2, #0]
 800811c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008124:	f380 8811 	msr	BASEPRI, r0
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f001 f948 	bl	80093c4 <vTaskSwitchContext>
 8008134:	f04f 0000 	mov.w	r0, #0
 8008138:	f380 8811 	msr	BASEPRI, r0
 800813c:	bc09      	pop	{r0, r3}
 800813e:	6819      	ldr	r1, [r3, #0]
 8008140:	6808      	ldr	r0, [r1, #0]
 8008142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008146:	f01e 0f10 	tst.w	lr, #16
 800814a:	bf08      	it	eq
 800814c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008150:	f380 8809 	msr	PSP, r0
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	f3af 8000 	nop.w

08008160 <pxCurrentTCBConst>:
 8008160:	200014c0 	.word	0x200014c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop

08008168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	607b      	str	r3, [r7, #4]
}
 8008180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008182:	f001 f865 	bl	8009250 <xTaskIncrementTick>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <xPortSysTickHandler+0x40>)
 800818e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	2300      	movs	r3, #0
 8008196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	f383 8811 	msr	BASEPRI, r3
}
 800819e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081b0:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <vPortSetupTimerInterrupt+0x34>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081b6:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <vPortSetupTimerInterrupt+0x38>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <vPortSetupTimerInterrupt+0x3c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <vPortSetupTimerInterrupt+0x40>)
 80081c2:	fba2 2303 	umull	r2, r3, r2, r3
 80081c6:	099b      	lsrs	r3, r3, #6
 80081c8:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <vPortSetupTimerInterrupt+0x44>)
 80081ca:	3b01      	subs	r3, #1
 80081cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ce:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <vPortSetupTimerInterrupt+0x34>)
 80081d0:	2207      	movs	r2, #7
 80081d2:	601a      	str	r2, [r3, #0]
}
 80081d4:	bf00      	nop
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	e000e010 	.word	0xe000e010
 80081e4:	e000e018 	.word	0xe000e018
 80081e8:	20000004 	.word	0x20000004
 80081ec:	10624dd3 	.word	0x10624dd3
 80081f0:	e000e014 	.word	0xe000e014

080081f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008204 <vPortEnableVFP+0x10>
 80081f8:	6801      	ldr	r1, [r0, #0]
 80081fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081fe:	6001      	str	r1, [r0, #0]
 8008200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008202:	bf00      	nop
 8008204:	e000ed88 	.word	0xe000ed88

08008208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800820e:	f3ef 8305 	mrs	r3, IPSR
 8008212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b0f      	cmp	r3, #15
 8008218:	d914      	bls.n	8008244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800821a:	4a17      	ldr	r2, [pc, #92]	; (8008278 <vPortValidateInterruptPriority+0x70>)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008224:	4b15      	ldr	r3, [pc, #84]	; (800827c <vPortValidateInterruptPriority+0x74>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	7afa      	ldrb	r2, [r7, #11]
 800822a:	429a      	cmp	r2, r3
 800822c:	d20a      	bcs.n	8008244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	607b      	str	r3, [r7, #4]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008244:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <vPortValidateInterruptPriority+0x78>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800824c:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <vPortValidateInterruptPriority+0x7c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d90a      	bls.n	800826a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	603b      	str	r3, [r7, #0]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <vPortValidateInterruptPriority+0x60>
	}
 800826a:	bf00      	nop
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	e000e3f0 	.word	0xe000e3f0
 800827c:	200014b8 	.word	0x200014b8
 8008280:	e000ed0c 	.word	0xe000ed0c
 8008284:	200014bc 	.word	0x200014bc

08008288 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10a      	bne.n	80082b2 <xQueueGenericReset+0x2a>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	60bb      	str	r3, [r7, #8]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082b2:	f7ff fec7 	bl	8008044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	68f9      	ldr	r1, [r7, #12]
 80082c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082c2:	fb01 f303 	mul.w	r3, r1, r3
 80082c6:	441a      	add	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e2:	3b01      	subs	r3, #1
 80082e4:	68f9      	ldr	r1, [r7, #12]
 80082e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082e8:	fb01 f303 	mul.w	r3, r1, r3
 80082ec:	441a      	add	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	22ff      	movs	r2, #255	; 0xff
 80082f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	22ff      	movs	r2, #255	; 0xff
 80082fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d114      	bne.n	8008332 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01a      	beq.n	8008346 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	3310      	adds	r3, #16
 8008314:	4618      	mov	r0, r3
 8008316:	f001 f903 	bl	8009520 <xTaskRemoveFromEventList>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d012      	beq.n	8008346 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008320:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <xQueueGenericReset+0xcc>)
 8008322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	e009      	b.n	8008346 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3310      	adds	r3, #16
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff fca4 	bl	8007c84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3324      	adds	r3, #36	; 0x24
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff fc9f 	bl	8007c84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008346:	f7ff fead 	bl	80080a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800834a:	2301      	movs	r3, #1
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08e      	sub	sp, #56	; 0x38
 800835c:	af02      	add	r7, sp, #8
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	627b      	str	r3, [r7, #36]	; 0x24
}
 800839a:	bf00      	nop
 800839c:	e7fe      	b.n	800839c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <xQueueGenericCreateStatic+0x52>
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <xQueueGenericCreateStatic+0x56>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e000      	b.n	80083b0 <xQueueGenericCreateStatic+0x58>
 80083ae:	2300      	movs	r3, #0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	623b      	str	r3, [r7, #32]
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d102      	bne.n	80083d6 <xQueueGenericCreateStatic+0x7e>
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <xQueueGenericCreateStatic+0x82>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e000      	b.n	80083dc <xQueueGenericCreateStatic+0x84>
 80083da:	2300      	movs	r3, #0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10a      	bne.n	80083f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	61fb      	str	r3, [r7, #28]
}
 80083f2:	bf00      	nop
 80083f4:	e7fe      	b.n	80083f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80083f6:	2350      	movs	r3, #80	; 0x50
 80083f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b50      	cmp	r3, #80	; 0x50
 80083fe:	d00a      	beq.n	8008416 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	61bb      	str	r3, [r7, #24]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008416:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00d      	beq.n	800843e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800842a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	4613      	mov	r3, r2
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 f805 	bl	8008448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008440:	4618      	mov	r0, r3
 8008442:	3730      	adds	r7, #48	; 0x30
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d103      	bne.n	8008464 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	69ba      	ldr	r2, [r7, #24]
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	e002      	b.n	800846a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008476:	2101      	movs	r1, #1
 8008478:	69b8      	ldr	r0, [r7, #24]
 800847a:	f7ff ff05 	bl	8008288 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	78fa      	ldrb	r2, [r7, #3]
 8008482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08e      	sub	sp, #56	; 0x38
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800849e:	2300      	movs	r3, #0
 80084a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <xQueueGenericSend+0x32>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d103      	bne.n	80084d0 <xQueueGenericSend+0x40>
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <xQueueGenericSend+0x44>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e000      	b.n	80084d6 <xQueueGenericSend+0x46>
 80084d4:	2300      	movs	r3, #0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <xQueueGenericSend+0x60>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084ec:	bf00      	nop
 80084ee:	e7fe      	b.n	80084ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d103      	bne.n	80084fe <xQueueGenericSend+0x6e>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d101      	bne.n	8008502 <xQueueGenericSend+0x72>
 80084fe:	2301      	movs	r3, #1
 8008500:	e000      	b.n	8008504 <xQueueGenericSend+0x74>
 8008502:	2300      	movs	r3, #0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <xQueueGenericSend+0x8e>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	623b      	str	r3, [r7, #32]
}
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800851e:	f001 f9bd 	bl	800989c <xTaskGetSchedulerState>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <xQueueGenericSend+0x9e>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <xQueueGenericSend+0xa2>
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <xQueueGenericSend+0xa4>
 8008532:	2300      	movs	r3, #0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <xQueueGenericSend+0xbe>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	61fb      	str	r3, [r7, #28]
}
 800854a:	bf00      	nop
 800854c:	e7fe      	b.n	800854c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800854e:	f7ff fd79 	bl	8008044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855a:	429a      	cmp	r2, r3
 800855c:	d302      	bcc.n	8008564 <xQueueGenericSend+0xd4>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b02      	cmp	r3, #2
 8008562:	d129      	bne.n	80085b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	68b9      	ldr	r1, [r7, #8]
 8008568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800856a:	f000 fa0b 	bl	8008984 <prvCopyDataToQueue>
 800856e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	2b00      	cmp	r3, #0
 8008576:	d010      	beq.n	800859a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	3324      	adds	r3, #36	; 0x24
 800857c:	4618      	mov	r0, r3
 800857e:	f000 ffcf 	bl	8009520 <xTaskRemoveFromEventList>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d013      	beq.n	80085b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008588:	4b3f      	ldr	r3, [pc, #252]	; (8008688 <xQueueGenericSend+0x1f8>)
 800858a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	e00a      	b.n	80085b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d007      	beq.n	80085b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085a0:	4b39      	ldr	r3, [pc, #228]	; (8008688 <xQueueGenericSend+0x1f8>)
 80085a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085b0:	f7ff fd78 	bl	80080a4 <vPortExitCritical>
				return pdPASS;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e063      	b.n	8008680 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085be:	f7ff fd71 	bl	80080a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	e05c      	b.n	8008680 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d106      	bne.n	80085da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085cc:	f107 0314 	add.w	r3, r7, #20
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 f809 	bl	80095e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085d6:	2301      	movs	r3, #1
 80085d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085da:	f7ff fd63 	bl	80080a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085de:	f000 fd7b 	bl	80090d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085e2:	f7ff fd2f 	bl	8008044 <vPortEnterCritical>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085ec:	b25b      	sxtb	r3, r3
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	d103      	bne.n	80085fc <xQueueGenericSend+0x16c>
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008602:	b25b      	sxtb	r3, r3
 8008604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008608:	d103      	bne.n	8008612 <xQueueGenericSend+0x182>
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	2200      	movs	r2, #0
 800860e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008612:	f7ff fd47 	bl	80080a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008616:	1d3a      	adds	r2, r7, #4
 8008618:	f107 0314 	add.w	r3, r7, #20
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fff8 	bl	8009614 <xTaskCheckForTimeOut>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d124      	bne.n	8008674 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800862a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800862c:	f000 faa2 	bl	8008b74 <prvIsQueueFull>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d018      	beq.n	8008668 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	3310      	adds	r3, #16
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	4611      	mov	r1, r2
 800863e:	4618      	mov	r0, r3
 8008640:	f000 ff1e 	bl	8009480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008646:	f000 fa2d 	bl	8008aa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800864a:	f000 fd53 	bl	80090f4 <xTaskResumeAll>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	f47f af7c 	bne.w	800854e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008656:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <xQueueGenericSend+0x1f8>)
 8008658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	e772      	b.n	800854e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800866a:	f000 fa1b 	bl	8008aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800866e:	f000 fd41 	bl	80090f4 <xTaskResumeAll>
 8008672:	e76c      	b.n	800854e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008676:	f000 fa15 	bl	8008aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800867a:	f000 fd3b 	bl	80090f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800867e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008680:	4618      	mov	r0, r3
 8008682:	3738      	adds	r7, #56	; 0x38
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	e000ed04 	.word	0xe000ed04

0800868c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b090      	sub	sp, #64	; 0x40
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d103      	bne.n	80086c8 <xQueueGenericSendFromISR+0x3c>
 80086c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <xQueueGenericSendFromISR+0x40>
 80086c8:	2301      	movs	r3, #1
 80086ca:	e000      	b.n	80086ce <xQueueGenericSendFromISR+0x42>
 80086cc:	2300      	movs	r3, #0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d103      	bne.n	80086f6 <xQueueGenericSendFromISR+0x6a>
 80086ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d101      	bne.n	80086fa <xQueueGenericSendFromISR+0x6e>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <xQueueGenericSendFromISR+0x70>
 80086fa:	2300      	movs	r3, #0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	623b      	str	r3, [r7, #32]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008716:	f7ff fd77 	bl	8008208 <vPortValidateInterruptPriority>
	__asm volatile
 800871a:	f3ef 8211 	mrs	r2, BASEPRI
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	61fa      	str	r2, [r7, #28]
 8008730:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008732:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008734:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873e:	429a      	cmp	r2, r3
 8008740:	d302      	bcc.n	8008748 <xQueueGenericSendFromISR+0xbc>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b02      	cmp	r3, #2
 8008746:	d12f      	bne.n	80087a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800874e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	68b9      	ldr	r1, [r7, #8]
 800875c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800875e:	f000 f911 	bl	8008984 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008762:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876a:	d112      	bne.n	8008792 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	2b00      	cmp	r3, #0
 8008772:	d016      	beq.n	80087a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	3324      	adds	r3, #36	; 0x24
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fed1 	bl	8009520 <xTaskRemoveFromEventList>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00e      	beq.n	80087a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00b      	beq.n	80087a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	e007      	b.n	80087a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008792:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008796:	3301      	adds	r3, #1
 8008798:	b2db      	uxtb	r3, r3
 800879a:	b25a      	sxtb	r2, r3
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087a2:	2301      	movs	r3, #1
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80087a6:	e001      	b.n	80087ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087a8:	2300      	movs	r3, #0
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ae:	617b      	str	r3, [r7, #20]
	__asm volatile
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f383 8811 	msr	BASEPRI, r3
}
 80087b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3740      	adds	r7, #64	; 0x40
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08c      	sub	sp, #48	; 0x30
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80087d0:	2300      	movs	r3, #0
 80087d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10a      	bne.n	80087f4 <xQueueReceive+0x30>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	623b      	str	r3, [r7, #32]
}
 80087f0:	bf00      	nop
 80087f2:	e7fe      	b.n	80087f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <xQueueReceive+0x3e>
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <xQueueReceive+0x42>
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <xQueueReceive+0x44>
 8008806:	2300      	movs	r3, #0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10a      	bne.n	8008822 <xQueueReceive+0x5e>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	61fb      	str	r3, [r7, #28]
}
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008822:	f001 f83b 	bl	800989c <xTaskGetSchedulerState>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d102      	bne.n	8008832 <xQueueReceive+0x6e>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <xQueueReceive+0x72>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <xQueueReceive+0x74>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10a      	bne.n	8008852 <xQueueReceive+0x8e>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	61bb      	str	r3, [r7, #24]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008852:	f7ff fbf7 	bl	8008044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01f      	beq.n	80088a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008866:	f000 f8f7 	bl	8008a58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	1e5a      	subs	r2, r3, #1
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00f      	beq.n	800889a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	3310      	adds	r3, #16
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fe4e 	bl	8009520 <xTaskRemoveFromEventList>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d007      	beq.n	800889a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800888a:	4b3d      	ldr	r3, [pc, #244]	; (8008980 <xQueueReceive+0x1bc>)
 800888c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800889a:	f7ff fc03 	bl	80080a4 <vPortExitCritical>
				return pdPASS;
 800889e:	2301      	movs	r3, #1
 80088a0:	e069      	b.n	8008976 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088a8:	f7ff fbfc 	bl	80080a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088ac:	2300      	movs	r3, #0
 80088ae:	e062      	b.n	8008976 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088b6:	f107 0310 	add.w	r3, r7, #16
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fe94 	bl	80095e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088c0:	2301      	movs	r3, #1
 80088c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088c4:	f7ff fbee 	bl	80080a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088c8:	f000 fc06 	bl	80090d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088cc:	f7ff fbba 	bl	8008044 <vPortEnterCritical>
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088d6:	b25b      	sxtb	r3, r3
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088dc:	d103      	bne.n	80088e6 <xQueueReceive+0x122>
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ec:	b25b      	sxtb	r3, r3
 80088ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f2:	d103      	bne.n	80088fc <xQueueReceive+0x138>
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088fc:	f7ff fbd2 	bl	80080a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008900:	1d3a      	adds	r2, r7, #4
 8008902:	f107 0310 	add.w	r3, r7, #16
 8008906:	4611      	mov	r1, r2
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fe83 	bl	8009614 <xTaskCheckForTimeOut>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d123      	bne.n	800895c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008916:	f000 f917 	bl	8008b48 <prvIsQueueEmpty>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d017      	beq.n	8008950 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	3324      	adds	r3, #36	; 0x24
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fda9 	bl	8009480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800892e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008930:	f000 f8b8 	bl	8008aa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008934:	f000 fbde 	bl	80090f4 <xTaskResumeAll>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d189      	bne.n	8008852 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800893e:	4b10      	ldr	r3, [pc, #64]	; (8008980 <xQueueReceive+0x1bc>)
 8008940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	e780      	b.n	8008852 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008952:	f000 f8a7 	bl	8008aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008956:	f000 fbcd 	bl	80090f4 <xTaskResumeAll>
 800895a:	e77a      	b.n	8008852 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800895c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800895e:	f000 f8a1 	bl	8008aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008962:	f000 fbc7 	bl	80090f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008968:	f000 f8ee 	bl	8008b48 <prvIsQueueEmpty>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	f43f af6f 	beq.w	8008852 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008976:	4618      	mov	r0, r3
 8008978:	3730      	adds	r7, #48	; 0x30
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	e000ed04 	.word	0xe000ed04

08008984 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008990:	2300      	movs	r3, #0
 8008992:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008998:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10d      	bne.n	80089be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d14d      	bne.n	8008a46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 ff92 	bl	80098d8 <xTaskPriorityDisinherit>
 80089b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	609a      	str	r2, [r3, #8]
 80089bc:	e043      	b.n	8008a46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d119      	bne.n	80089f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6858      	ldr	r0, [r3, #4]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089cc:	461a      	mov	r2, r3
 80089ce:	68b9      	ldr	r1, [r7, #8]
 80089d0:	f001 fbb6 	bl	800a140 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	441a      	add	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d32b      	bcc.n	8008a46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	605a      	str	r2, [r3, #4]
 80089f6:	e026      	b.n	8008a46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	68d8      	ldr	r0, [r3, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	461a      	mov	r2, r3
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	f001 fb9c 	bl	800a140 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a10:	425b      	negs	r3, r3
 8008a12:	441a      	add	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d207      	bcs.n	8008a34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2c:	425b      	negs	r3, r3
 8008a2e:	441a      	add	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d105      	bne.n	8008a46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a4e:	697b      	ldr	r3, [r7, #20]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d018      	beq.n	8008a9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a72:	441a      	add	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d303      	bcc.n	8008a8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68d9      	ldr	r1, [r3, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	461a      	mov	r2, r3
 8008a96:	6838      	ldr	r0, [r7, #0]
 8008a98:	f001 fb52 	bl	800a140 <memcpy>
	}
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008aac:	f7ff faca 	bl	8008044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ab6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ab8:	e011      	b.n	8008ade <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d012      	beq.n	8008ae8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3324      	adds	r3, #36	; 0x24
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fd2a 	bl	8009520 <xTaskRemoveFromEventList>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ad2:	f000 fe01 	bl	80096d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	dce9      	bgt.n	8008aba <prvUnlockQueue+0x16>
 8008ae6:	e000      	b.n	8008aea <prvUnlockQueue+0x46>
					break;
 8008ae8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	22ff      	movs	r2, #255	; 0xff
 8008aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008af2:	f7ff fad7 	bl	80080a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008af6:	f7ff faa5 	bl	8008044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b02:	e011      	b.n	8008b28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d012      	beq.n	8008b32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3310      	adds	r3, #16
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fd05 	bl	8009520 <xTaskRemoveFromEventList>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b1c:	f000 fddc 	bl	80096d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dce9      	bgt.n	8008b04 <prvUnlockQueue+0x60>
 8008b30:	e000      	b.n	8008b34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	22ff      	movs	r2, #255	; 0xff
 8008b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b3c:	f7ff fab2 	bl	80080a4 <vPortExitCritical>
}
 8008b40:	bf00      	nop
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b50:	f7ff fa78 	bl	8008044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d102      	bne.n	8008b62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]
 8008b60:	e001      	b.n	8008b66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b66:	f7ff fa9d 	bl	80080a4 <vPortExitCritical>

	return xReturn;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b7c:	f7ff fa62 	bl	8008044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d102      	bne.n	8008b92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	e001      	b.n	8008b96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b96:	f7ff fa85 	bl	80080a4 <vPortExitCritical>

	return xReturn;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e014      	b.n	8008bde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008bb4:	4a0f      	ldr	r2, [pc, #60]	; (8008bf4 <vQueueAddToRegistry+0x50>)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10b      	bne.n	8008bd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008bc0:	490c      	ldr	r1, [pc, #48]	; (8008bf4 <vQueueAddToRegistry+0x50>)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008bca:	4a0a      	ldr	r2, [pc, #40]	; (8008bf4 <vQueueAddToRegistry+0x50>)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	4413      	add	r3, r2
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008bd6:	e006      	b.n	8008be6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	60fb      	str	r3, [r7, #12]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2b07      	cmp	r3, #7
 8008be2:	d9e7      	bls.n	8008bb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	20001b3c 	.word	0x20001b3c

08008bf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c08:	f7ff fa1c 	bl	8008044 <vPortEnterCritical>
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c12:	b25b      	sxtb	r3, r3
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c18:	d103      	bne.n	8008c22 <vQueueWaitForMessageRestricted+0x2a>
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c28:	b25b      	sxtb	r3, r3
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2e:	d103      	bne.n	8008c38 <vQueueWaitForMessageRestricted+0x40>
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c38:	f7ff fa34 	bl	80080a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d106      	bne.n	8008c52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	3324      	adds	r3, #36	; 0x24
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	68b9      	ldr	r1, [r7, #8]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fc3b 	bl	80094c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c52:	6978      	ldr	r0, [r7, #20]
 8008c54:	f7ff ff26 	bl	8008aa4 <prvUnlockQueue>
	}
 8008c58:	bf00      	nop
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08e      	sub	sp, #56	; 0x38
 8008c64:	af04      	add	r7, sp, #16
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	623b      	str	r3, [r7, #32]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10a      	bne.n	8008ca6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	61fb      	str	r3, [r7, #28]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ca6:	235c      	movs	r3, #92	; 0x5c
 8008ca8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	2b5c      	cmp	r3, #92	; 0x5c
 8008cae:	d00a      	beq.n	8008cc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	61bb      	str	r3, [r7, #24]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008cc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d01e      	beq.n	8008d0c <xTaskCreateStatic+0xac>
 8008cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d01b      	beq.n	8008d0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	9302      	str	r3, [sp, #8]
 8008cee:	f107 0314 	add.w	r3, r7, #20
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 f850 	bl	8008da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d06:	f000 f8dd 	bl	8008ec4 <prvAddNewTaskToReadyList>
 8008d0a:	e001      	b.n	8008d10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d10:	697b      	ldr	r3, [r7, #20]
	}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3728      	adds	r7, #40	; 0x28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b08c      	sub	sp, #48	; 0x30
 8008d1e:	af04      	add	r7, sp, #16
 8008d20:	60f8      	str	r0, [r7, #12]
 8008d22:	60b9      	str	r1, [r7, #8]
 8008d24:	603b      	str	r3, [r7, #0]
 8008d26:	4613      	mov	r3, r2
 8008d28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d2a:	88fb      	ldrh	r3, [r7, #6]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe fdbe 	bl	80078b0 <pvPortMalloc>
 8008d34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00e      	beq.n	8008d5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d3c:	205c      	movs	r0, #92	; 0x5c
 8008d3e:	f7fe fdb7 	bl	80078b0 <pvPortMalloc>
 8008d42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8008d50:	e005      	b.n	8008d5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f7fe fe78 	bl	8007a48 <vPortFree>
 8008d58:	e001      	b.n	8008d5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d017      	beq.n	8008d94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d6c:	88fa      	ldrh	r2, [r7, #6]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	9303      	str	r3, [sp, #12]
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	9302      	str	r3, [sp, #8]
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f80e 	bl	8008da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d88:	69f8      	ldr	r0, [r7, #28]
 8008d8a:	f000 f89b 	bl	8008ec4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	e002      	b.n	8008d9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d94:	f04f 33ff 	mov.w	r3, #4294967295
 8008d98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d9a:	69bb      	ldr	r3, [r7, #24]
	}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3720      	adds	r7, #32
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	461a      	mov	r2, r3
 8008dbc:	21a5      	movs	r1, #165	; 0xa5
 8008dbe:	f001 f9cd 	bl	800a15c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	f023 0307 	bic.w	r3, r3, #7
 8008dda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <prvInitialiseNewTask+0x58>
	__asm volatile
 8008de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	617b      	str	r3, [r7, #20]
}
 8008df8:	bf00      	nop
 8008dfa:	e7fe      	b.n	8008dfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01f      	beq.n	8008e42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e02:	2300      	movs	r3, #0
 8008e04:	61fb      	str	r3, [r7, #28]
 8008e06:	e012      	b.n	8008e2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	7819      	ldrb	r1, [r3, #0]
 8008e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	4413      	add	r3, r2
 8008e16:	3334      	adds	r3, #52	; 0x34
 8008e18:	460a      	mov	r2, r1
 8008e1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	4413      	add	r3, r2
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d006      	beq.n	8008e36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	61fb      	str	r3, [r7, #28]
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	2b0f      	cmp	r3, #15
 8008e32:	d9e9      	bls.n	8008e08 <prvInitialiseNewTask+0x64>
 8008e34:	e000      	b.n	8008e38 <prvInitialiseNewTask+0x94>
			{
				break;
 8008e36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e40:	e003      	b.n	8008e4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	2b37      	cmp	r3, #55	; 0x37
 8008e4e:	d901      	bls.n	8008e54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e50:	2337      	movs	r3, #55	; 0x37
 8008e52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	2200      	movs	r2, #0
 8008e64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	3304      	adds	r3, #4
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe ff2a 	bl	8007cc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	3318      	adds	r3, #24
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe ff25 	bl	8007cc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	2200      	movs	r2, #0
 8008e94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	68f9      	ldr	r1, [r7, #12]
 8008ea2:	69b8      	ldr	r0, [r7, #24]
 8008ea4:	f7fe ffa2 	bl	8007dec <pxPortInitialiseStack>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eba:	bf00      	nop
 8008ebc:	3720      	adds	r7, #32
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ecc:	f7ff f8ba 	bl	8008044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ed0:	4b2d      	ldr	r3, [pc, #180]	; (8008f88 <prvAddNewTaskToReadyList+0xc4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	4a2c      	ldr	r2, [pc, #176]	; (8008f88 <prvAddNewTaskToReadyList+0xc4>)
 8008ed8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008eda:	4b2c      	ldr	r3, [pc, #176]	; (8008f8c <prvAddNewTaskToReadyList+0xc8>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d109      	bne.n	8008ef6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ee2:	4a2a      	ldr	r2, [pc, #168]	; (8008f8c <prvAddNewTaskToReadyList+0xc8>)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ee8:	4b27      	ldr	r3, [pc, #156]	; (8008f88 <prvAddNewTaskToReadyList+0xc4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d110      	bne.n	8008f12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ef0:	f000 fc16 	bl	8009720 <prvInitialiseTaskLists>
 8008ef4:	e00d      	b.n	8008f12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ef6:	4b26      	ldr	r3, [pc, #152]	; (8008f90 <prvAddNewTaskToReadyList+0xcc>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d109      	bne.n	8008f12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008efe:	4b23      	ldr	r3, [pc, #140]	; (8008f8c <prvAddNewTaskToReadyList+0xc8>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d802      	bhi.n	8008f12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f0c:	4a1f      	ldr	r2, [pc, #124]	; (8008f8c <prvAddNewTaskToReadyList+0xc8>)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f12:	4b20      	ldr	r3, [pc, #128]	; (8008f94 <prvAddNewTaskToReadyList+0xd0>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3301      	adds	r3, #1
 8008f18:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <prvAddNewTaskToReadyList+0xd0>)
 8008f1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f1c:	4b1d      	ldr	r3, [pc, #116]	; (8008f94 <prvAddNewTaskToReadyList+0xd0>)
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f28:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <prvAddNewTaskToReadyList+0xd4>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d903      	bls.n	8008f38 <prvAddNewTaskToReadyList+0x74>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	4a18      	ldr	r2, [pc, #96]	; (8008f98 <prvAddNewTaskToReadyList+0xd4>)
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4a15      	ldr	r2, [pc, #84]	; (8008f9c <prvAddNewTaskToReadyList+0xd8>)
 8008f46:	441a      	add	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	f7fe fec5 	bl	8007cde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f54:	f7ff f8a6 	bl	80080a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f58:	4b0d      	ldr	r3, [pc, #52]	; (8008f90 <prvAddNewTaskToReadyList+0xcc>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00e      	beq.n	8008f7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <prvAddNewTaskToReadyList+0xc8>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d207      	bcs.n	8008f7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f6e:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <prvAddNewTaskToReadyList+0xdc>)
 8008f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20001994 	.word	0x20001994
 8008f8c:	200014c0 	.word	0x200014c0
 8008f90:	200019a0 	.word	0x200019a0
 8008f94:	200019b0 	.word	0x200019b0
 8008f98:	2000199c 	.word	0x2000199c
 8008f9c:	200014c4 	.word	0x200014c4
 8008fa0:	e000ed04 	.word	0xe000ed04

08008fa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d017      	beq.n	8008fe6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fb6:	4b13      	ldr	r3, [pc, #76]	; (8009004 <vTaskDelay+0x60>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <vTaskDelay+0x30>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	60bb      	str	r3, [r7, #8]
}
 8008fd0:	bf00      	nop
 8008fd2:	e7fe      	b.n	8008fd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fd4:	f000 f880 	bl	80090d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fd8:	2100      	movs	r1, #0
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fcea 	bl	80099b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fe0:	f000 f888 	bl	80090f4 <xTaskResumeAll>
 8008fe4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d107      	bne.n	8008ffc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008fec:	4b06      	ldr	r3, [pc, #24]	; (8009008 <vTaskDelay+0x64>)
 8008fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ffc:	bf00      	nop
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	200019bc 	.word	0x200019bc
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08a      	sub	sp, #40	; 0x28
 8009010:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009012:	2300      	movs	r3, #0
 8009014:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009016:	2300      	movs	r3, #0
 8009018:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800901a:	463a      	mov	r2, r7
 800901c:	1d39      	adds	r1, r7, #4
 800901e:	f107 0308 	add.w	r3, r7, #8
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fc10 	bl	8007848 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	9202      	str	r2, [sp, #8]
 8009030:	9301      	str	r3, [sp, #4]
 8009032:	2300      	movs	r3, #0
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	2300      	movs	r3, #0
 8009038:	460a      	mov	r2, r1
 800903a:	4921      	ldr	r1, [pc, #132]	; (80090c0 <vTaskStartScheduler+0xb4>)
 800903c:	4821      	ldr	r0, [pc, #132]	; (80090c4 <vTaskStartScheduler+0xb8>)
 800903e:	f7ff fe0f 	bl	8008c60 <xTaskCreateStatic>
 8009042:	4603      	mov	r3, r0
 8009044:	4a20      	ldr	r2, [pc, #128]	; (80090c8 <vTaskStartScheduler+0xbc>)
 8009046:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009048:	4b1f      	ldr	r3, [pc, #124]	; (80090c8 <vTaskStartScheduler+0xbc>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d002      	beq.n	8009056 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009050:	2301      	movs	r3, #1
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	e001      	b.n	800905a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009056:	2300      	movs	r3, #0
 8009058:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d102      	bne.n	8009066 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009060:	f000 fcfc 	bl	8009a5c <xTimerCreateTimerTask>
 8009064:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d116      	bne.n	800909a <vTaskStartScheduler+0x8e>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	613b      	str	r3, [r7, #16]
}
 800907e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009080:	4b12      	ldr	r3, [pc, #72]	; (80090cc <vTaskStartScheduler+0xc0>)
 8009082:	f04f 32ff 	mov.w	r2, #4294967295
 8009086:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009088:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <vTaskStartScheduler+0xc4>)
 800908a:	2201      	movs	r2, #1
 800908c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800908e:	4b11      	ldr	r3, [pc, #68]	; (80090d4 <vTaskStartScheduler+0xc8>)
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009094:	f7fe ff34 	bl	8007f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009098:	e00e      	b.n	80090b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a0:	d10a      	bne.n	80090b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	60fb      	str	r3, [r7, #12]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <vTaskStartScheduler+0xaa>
}
 80090b8:	bf00      	nop
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	0800a1b8 	.word	0x0800a1b8
 80090c4:	080096f1 	.word	0x080096f1
 80090c8:	200019b8 	.word	0x200019b8
 80090cc:	200019b4 	.word	0x200019b4
 80090d0:	200019a0 	.word	0x200019a0
 80090d4:	20001998 	.word	0x20001998

080090d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090d8:	b480      	push	{r7}
 80090da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090dc:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <vTaskSuspendAll+0x18>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3301      	adds	r3, #1
 80090e2:	4a03      	ldr	r2, [pc, #12]	; (80090f0 <vTaskSuspendAll+0x18>)
 80090e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090e6:	bf00      	nop
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	200019bc 	.word	0x200019bc

080090f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090fe:	2300      	movs	r3, #0
 8009100:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009102:	4b42      	ldr	r3, [pc, #264]	; (800920c <xTaskResumeAll+0x118>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10a      	bne.n	8009120 <xTaskResumeAll+0x2c>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	603b      	str	r3, [r7, #0]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009120:	f7fe ff90 	bl	8008044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009124:	4b39      	ldr	r3, [pc, #228]	; (800920c <xTaskResumeAll+0x118>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3b01      	subs	r3, #1
 800912a:	4a38      	ldr	r2, [pc, #224]	; (800920c <xTaskResumeAll+0x118>)
 800912c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800912e:	4b37      	ldr	r3, [pc, #220]	; (800920c <xTaskResumeAll+0x118>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d162      	bne.n	80091fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009136:	4b36      	ldr	r3, [pc, #216]	; (8009210 <xTaskResumeAll+0x11c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d05e      	beq.n	80091fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800913e:	e02f      	b.n	80091a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009140:	4b34      	ldr	r3, [pc, #208]	; (8009214 <xTaskResumeAll+0x120>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3318      	adds	r3, #24
 800914c:	4618      	mov	r0, r3
 800914e:	f7fe fe23 	bl	8007d98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3304      	adds	r3, #4
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe fe1e 	bl	8007d98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009160:	4b2d      	ldr	r3, [pc, #180]	; (8009218 <xTaskResumeAll+0x124>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d903      	bls.n	8009170 <xTaskResumeAll+0x7c>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	4a2a      	ldr	r2, [pc, #168]	; (8009218 <xTaskResumeAll+0x124>)
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4a27      	ldr	r2, [pc, #156]	; (800921c <xTaskResumeAll+0x128>)
 800917e:	441a      	add	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3304      	adds	r3, #4
 8009184:	4619      	mov	r1, r3
 8009186:	4610      	mov	r0, r2
 8009188:	f7fe fda9 	bl	8007cde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009190:	4b23      	ldr	r3, [pc, #140]	; (8009220 <xTaskResumeAll+0x12c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009196:	429a      	cmp	r2, r3
 8009198:	d302      	bcc.n	80091a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800919a:	4b22      	ldr	r3, [pc, #136]	; (8009224 <xTaskResumeAll+0x130>)
 800919c:	2201      	movs	r2, #1
 800919e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091a0:	4b1c      	ldr	r3, [pc, #112]	; (8009214 <xTaskResumeAll+0x120>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1cb      	bne.n	8009140 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091ae:	f000 fb55 	bl	800985c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091b2:	4b1d      	ldr	r3, [pc, #116]	; (8009228 <xTaskResumeAll+0x134>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d010      	beq.n	80091e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091be:	f000 f847 	bl	8009250 <xTaskIncrementTick>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80091c8:	4b16      	ldr	r3, [pc, #88]	; (8009224 <xTaskResumeAll+0x130>)
 80091ca:	2201      	movs	r2, #1
 80091cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	3b01      	subs	r3, #1
 80091d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1f1      	bne.n	80091be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80091da:	4b13      	ldr	r3, [pc, #76]	; (8009228 <xTaskResumeAll+0x134>)
 80091dc:	2200      	movs	r2, #0
 80091de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091e0:	4b10      	ldr	r3, [pc, #64]	; (8009224 <xTaskResumeAll+0x130>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d009      	beq.n	80091fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091e8:	2301      	movs	r3, #1
 80091ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091ec:	4b0f      	ldr	r3, [pc, #60]	; (800922c <xTaskResumeAll+0x138>)
 80091ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091fc:	f7fe ff52 	bl	80080a4 <vPortExitCritical>

	return xAlreadyYielded;
 8009200:	68bb      	ldr	r3, [r7, #8]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	200019bc 	.word	0x200019bc
 8009210:	20001994 	.word	0x20001994
 8009214:	20001954 	.word	0x20001954
 8009218:	2000199c 	.word	0x2000199c
 800921c:	200014c4 	.word	0x200014c4
 8009220:	200014c0 	.word	0x200014c0
 8009224:	200019a8 	.word	0x200019a8
 8009228:	200019a4 	.word	0x200019a4
 800922c:	e000ed04 	.word	0xe000ed04

08009230 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009236:	4b05      	ldr	r3, [pc, #20]	; (800924c <xTaskGetTickCount+0x1c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800923c:	687b      	ldr	r3, [r7, #4]
}
 800923e:	4618      	mov	r0, r3
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	20001998 	.word	0x20001998

08009250 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009256:	2300      	movs	r3, #0
 8009258:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800925a:	4b4f      	ldr	r3, [pc, #316]	; (8009398 <xTaskIncrementTick+0x148>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	f040 808f 	bne.w	8009382 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009264:	4b4d      	ldr	r3, [pc, #308]	; (800939c <xTaskIncrementTick+0x14c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3301      	adds	r3, #1
 800926a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800926c:	4a4b      	ldr	r2, [pc, #300]	; (800939c <xTaskIncrementTick+0x14c>)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d120      	bne.n	80092ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009278:	4b49      	ldr	r3, [pc, #292]	; (80093a0 <xTaskIncrementTick+0x150>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <xTaskIncrementTick+0x48>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	603b      	str	r3, [r7, #0]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <xTaskIncrementTick+0x46>
 8009298:	4b41      	ldr	r3, [pc, #260]	; (80093a0 <xTaskIncrementTick+0x150>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	4b41      	ldr	r3, [pc, #260]	; (80093a4 <xTaskIncrementTick+0x154>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a3f      	ldr	r2, [pc, #252]	; (80093a0 <xTaskIncrementTick+0x150>)
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	4a3f      	ldr	r2, [pc, #252]	; (80093a4 <xTaskIncrementTick+0x154>)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	4b3e      	ldr	r3, [pc, #248]	; (80093a8 <xTaskIncrementTick+0x158>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3301      	adds	r3, #1
 80092b2:	4a3d      	ldr	r2, [pc, #244]	; (80093a8 <xTaskIncrementTick+0x158>)
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	f000 fad1 	bl	800985c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092ba:	4b3c      	ldr	r3, [pc, #240]	; (80093ac <xTaskIncrementTick+0x15c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d349      	bcc.n	8009358 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092c4:	4b36      	ldr	r3, [pc, #216]	; (80093a0 <xTaskIncrementTick+0x150>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d104      	bne.n	80092d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ce:	4b37      	ldr	r3, [pc, #220]	; (80093ac <xTaskIncrementTick+0x15c>)
 80092d0:	f04f 32ff 	mov.w	r2, #4294967295
 80092d4:	601a      	str	r2, [r3, #0]
					break;
 80092d6:	e03f      	b.n	8009358 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092d8:	4b31      	ldr	r3, [pc, #196]	; (80093a0 <xTaskIncrementTick+0x150>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d203      	bcs.n	80092f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092f0:	4a2e      	ldr	r2, [pc, #184]	; (80093ac <xTaskIncrementTick+0x15c>)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092f6:	e02f      	b.n	8009358 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	3304      	adds	r3, #4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fd4b 	bl	8007d98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	3318      	adds	r3, #24
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe fd42 	bl	8007d98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009318:	4b25      	ldr	r3, [pc, #148]	; (80093b0 <xTaskIncrementTick+0x160>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	429a      	cmp	r2, r3
 800931e:	d903      	bls.n	8009328 <xTaskIncrementTick+0xd8>
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	4a22      	ldr	r2, [pc, #136]	; (80093b0 <xTaskIncrementTick+0x160>)
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4a1f      	ldr	r2, [pc, #124]	; (80093b4 <xTaskIncrementTick+0x164>)
 8009336:	441a      	add	r2, r3
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	3304      	adds	r3, #4
 800933c:	4619      	mov	r1, r3
 800933e:	4610      	mov	r0, r2
 8009340:	f7fe fccd 	bl	8007cde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009348:	4b1b      	ldr	r3, [pc, #108]	; (80093b8 <xTaskIncrementTick+0x168>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	429a      	cmp	r2, r3
 8009350:	d3b8      	bcc.n	80092c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009356:	e7b5      	b.n	80092c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009358:	4b17      	ldr	r3, [pc, #92]	; (80093b8 <xTaskIncrementTick+0x168>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935e:	4915      	ldr	r1, [pc, #84]	; (80093b4 <xTaskIncrementTick+0x164>)
 8009360:	4613      	mov	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	440b      	add	r3, r1
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d901      	bls.n	8009374 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009370:	2301      	movs	r3, #1
 8009372:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009374:	4b11      	ldr	r3, [pc, #68]	; (80093bc <xTaskIncrementTick+0x16c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d007      	beq.n	800938c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800937c:	2301      	movs	r3, #1
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	e004      	b.n	800938c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009382:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <xTaskIncrementTick+0x170>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3301      	adds	r3, #1
 8009388:	4a0d      	ldr	r2, [pc, #52]	; (80093c0 <xTaskIncrementTick+0x170>)
 800938a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800938c:	697b      	ldr	r3, [r7, #20]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	200019bc 	.word	0x200019bc
 800939c:	20001998 	.word	0x20001998
 80093a0:	2000194c 	.word	0x2000194c
 80093a4:	20001950 	.word	0x20001950
 80093a8:	200019ac 	.word	0x200019ac
 80093ac:	200019b4 	.word	0x200019b4
 80093b0:	2000199c 	.word	0x2000199c
 80093b4:	200014c4 	.word	0x200014c4
 80093b8:	200014c0 	.word	0x200014c0
 80093bc:	200019a8 	.word	0x200019a8
 80093c0:	200019a4 	.word	0x200019a4

080093c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093ca:	4b28      	ldr	r3, [pc, #160]	; (800946c <vTaskSwitchContext+0xa8>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093d2:	4b27      	ldr	r3, [pc, #156]	; (8009470 <vTaskSwitchContext+0xac>)
 80093d4:	2201      	movs	r2, #1
 80093d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093d8:	e041      	b.n	800945e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80093da:	4b25      	ldr	r3, [pc, #148]	; (8009470 <vTaskSwitchContext+0xac>)
 80093dc:	2200      	movs	r2, #0
 80093de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093e0:	4b24      	ldr	r3, [pc, #144]	; (8009474 <vTaskSwitchContext+0xb0>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60fb      	str	r3, [r7, #12]
 80093e6:	e010      	b.n	800940a <vTaskSwitchContext+0x46>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10a      	bne.n	8009404 <vTaskSwitchContext+0x40>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	607b      	str	r3, [r7, #4]
}
 8009400:	bf00      	nop
 8009402:	e7fe      	b.n	8009402 <vTaskSwitchContext+0x3e>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3b01      	subs	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]
 800940a:	491b      	ldr	r1, [pc, #108]	; (8009478 <vTaskSwitchContext+0xb4>)
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0e4      	beq.n	80093e8 <vTaskSwitchContext+0x24>
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4a13      	ldr	r2, [pc, #76]	; (8009478 <vTaskSwitchContext+0xb4>)
 800942a:	4413      	add	r3, r2
 800942c:	60bb      	str	r3, [r7, #8]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	605a      	str	r2, [r3, #4]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	3308      	adds	r3, #8
 8009440:	429a      	cmp	r2, r3
 8009442:	d104      	bne.n	800944e <vTaskSwitchContext+0x8a>
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	605a      	str	r2, [r3, #4]
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	4a09      	ldr	r2, [pc, #36]	; (800947c <vTaskSwitchContext+0xb8>)
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	4a06      	ldr	r2, [pc, #24]	; (8009474 <vTaskSwitchContext+0xb0>)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6013      	str	r3, [r2, #0]
}
 800945e:	bf00      	nop
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	200019bc 	.word	0x200019bc
 8009470:	200019a8 	.word	0x200019a8
 8009474:	2000199c 	.word	0x2000199c
 8009478:	200014c4 	.word	0x200014c4
 800947c:	200014c0 	.word	0x200014c0

08009480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	60fb      	str	r3, [r7, #12]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094a6:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <vTaskPlaceOnEventList+0x44>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3318      	adds	r3, #24
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7fe fc39 	bl	8007d26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094b4:	2101      	movs	r1, #1
 80094b6:	6838      	ldr	r0, [r7, #0]
 80094b8:	f000 fa7c 	bl	80099b4 <prvAddCurrentTaskToDelayedList>
}
 80094bc:	bf00      	nop
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	200014c0 	.word	0x200014c0

080094c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10a      	bne.n	80094f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	617b      	str	r3, [r7, #20]
}
 80094ec:	bf00      	nop
 80094ee:	e7fe      	b.n	80094ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <vTaskPlaceOnEventListRestricted+0x54>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3318      	adds	r3, #24
 80094f6:	4619      	mov	r1, r3
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7fe fbf0 	bl	8007cde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d002      	beq.n	800950a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009504:	f04f 33ff 	mov.w	r3, #4294967295
 8009508:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	68b8      	ldr	r0, [r7, #8]
 800950e:	f000 fa51 	bl	80099b4 <prvAddCurrentTaskToDelayedList>
	}
 8009512:	bf00      	nop
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	200014c0 	.word	0x200014c0

08009520 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10a      	bne.n	800954c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	60fb      	str	r3, [r7, #12]
}
 8009548:	bf00      	nop
 800954a:	e7fe      	b.n	800954a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	3318      	adds	r3, #24
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe fc21 	bl	8007d98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009556:	4b1e      	ldr	r3, [pc, #120]	; (80095d0 <xTaskRemoveFromEventList+0xb0>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d11d      	bne.n	800959a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	3304      	adds	r3, #4
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe fc18 	bl	8007d98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956c:	4b19      	ldr	r3, [pc, #100]	; (80095d4 <xTaskRemoveFromEventList+0xb4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d903      	bls.n	800957c <xTaskRemoveFromEventList+0x5c>
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	4a16      	ldr	r2, [pc, #88]	; (80095d4 <xTaskRemoveFromEventList+0xb4>)
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4a13      	ldr	r2, [pc, #76]	; (80095d8 <xTaskRemoveFromEventList+0xb8>)
 800958a:	441a      	add	r2, r3
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	3304      	adds	r3, #4
 8009590:	4619      	mov	r1, r3
 8009592:	4610      	mov	r0, r2
 8009594:	f7fe fba3 	bl	8007cde <vListInsertEnd>
 8009598:	e005      	b.n	80095a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	3318      	adds	r3, #24
 800959e:	4619      	mov	r1, r3
 80095a0:	480e      	ldr	r0, [pc, #56]	; (80095dc <xTaskRemoveFromEventList+0xbc>)
 80095a2:	f7fe fb9c 	bl	8007cde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095aa:	4b0d      	ldr	r3, [pc, #52]	; (80095e0 <xTaskRemoveFromEventList+0xc0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d905      	bls.n	80095c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095b4:	2301      	movs	r3, #1
 80095b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095b8:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <xTaskRemoveFromEventList+0xc4>)
 80095ba:	2201      	movs	r2, #1
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	e001      	b.n	80095c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80095c0:	2300      	movs	r3, #0
 80095c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095c4:	697b      	ldr	r3, [r7, #20]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	200019bc 	.word	0x200019bc
 80095d4:	2000199c 	.word	0x2000199c
 80095d8:	200014c4 	.word	0x200014c4
 80095dc:	20001954 	.word	0x20001954
 80095e0:	200014c0 	.word	0x200014c0
 80095e4:	200019a8 	.word	0x200019a8

080095e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095f0:	4b06      	ldr	r3, [pc, #24]	; (800960c <vTaskInternalSetTimeOutState+0x24>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095f8:	4b05      	ldr	r3, [pc, #20]	; (8009610 <vTaskInternalSetTimeOutState+0x28>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	605a      	str	r2, [r3, #4]
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	200019ac 	.word	0x200019ac
 8009610:	20001998 	.word	0x20001998

08009614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b088      	sub	sp, #32
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	613b      	str	r3, [r7, #16]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	60fb      	str	r3, [r7, #12]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009656:	f7fe fcf5 	bl	8008044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800965a:	4b1d      	ldr	r3, [pc, #116]	; (80096d0 <xTaskCheckForTimeOut+0xbc>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	69ba      	ldr	r2, [r7, #24]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009672:	d102      	bne.n	800967a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009674:	2300      	movs	r3, #0
 8009676:	61fb      	str	r3, [r7, #28]
 8009678:	e023      	b.n	80096c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	4b15      	ldr	r3, [pc, #84]	; (80096d4 <xTaskCheckForTimeOut+0xc0>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d007      	beq.n	8009696 <xTaskCheckForTimeOut+0x82>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	429a      	cmp	r2, r3
 800968e:	d302      	bcc.n	8009696 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009690:	2301      	movs	r3, #1
 8009692:	61fb      	str	r3, [r7, #28]
 8009694:	e015      	b.n	80096c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	429a      	cmp	r2, r3
 800969e:	d20b      	bcs.n	80096b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	1ad2      	subs	r2, r2, r3
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff ff9b 	bl	80095e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61fb      	str	r3, [r7, #28]
 80096b6:	e004      	b.n	80096c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096be:	2301      	movs	r3, #1
 80096c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096c2:	f7fe fcef 	bl	80080a4 <vPortExitCritical>

	return xReturn;
 80096c6:	69fb      	ldr	r3, [r7, #28]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3720      	adds	r7, #32
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20001998 	.word	0x20001998
 80096d4:	200019ac 	.word	0x200019ac

080096d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096d8:	b480      	push	{r7}
 80096da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096dc:	4b03      	ldr	r3, [pc, #12]	; (80096ec <vTaskMissedYield+0x14>)
 80096de:	2201      	movs	r2, #1
 80096e0:	601a      	str	r2, [r3, #0]
}
 80096e2:	bf00      	nop
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	200019a8 	.word	0x200019a8

080096f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096f8:	f000 f852 	bl	80097a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096fc:	4b06      	ldr	r3, [pc, #24]	; (8009718 <prvIdleTask+0x28>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d9f9      	bls.n	80096f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009704:	4b05      	ldr	r3, [pc, #20]	; (800971c <prvIdleTask+0x2c>)
 8009706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009714:	e7f0      	b.n	80096f8 <prvIdleTask+0x8>
 8009716:	bf00      	nop
 8009718:	200014c4 	.word	0x200014c4
 800971c:	e000ed04 	.word	0xe000ed04

08009720 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009726:	2300      	movs	r3, #0
 8009728:	607b      	str	r3, [r7, #4]
 800972a:	e00c      	b.n	8009746 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4a12      	ldr	r2, [pc, #72]	; (8009780 <prvInitialiseTaskLists+0x60>)
 8009738:	4413      	add	r3, r2
 800973a:	4618      	mov	r0, r3
 800973c:	f7fe faa2 	bl	8007c84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3301      	adds	r3, #1
 8009744:	607b      	str	r3, [r7, #4]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b37      	cmp	r3, #55	; 0x37
 800974a:	d9ef      	bls.n	800972c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800974c:	480d      	ldr	r0, [pc, #52]	; (8009784 <prvInitialiseTaskLists+0x64>)
 800974e:	f7fe fa99 	bl	8007c84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009752:	480d      	ldr	r0, [pc, #52]	; (8009788 <prvInitialiseTaskLists+0x68>)
 8009754:	f7fe fa96 	bl	8007c84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009758:	480c      	ldr	r0, [pc, #48]	; (800978c <prvInitialiseTaskLists+0x6c>)
 800975a:	f7fe fa93 	bl	8007c84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800975e:	480c      	ldr	r0, [pc, #48]	; (8009790 <prvInitialiseTaskLists+0x70>)
 8009760:	f7fe fa90 	bl	8007c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009764:	480b      	ldr	r0, [pc, #44]	; (8009794 <prvInitialiseTaskLists+0x74>)
 8009766:	f7fe fa8d 	bl	8007c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800976a:	4b0b      	ldr	r3, [pc, #44]	; (8009798 <prvInitialiseTaskLists+0x78>)
 800976c:	4a05      	ldr	r2, [pc, #20]	; (8009784 <prvInitialiseTaskLists+0x64>)
 800976e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009770:	4b0a      	ldr	r3, [pc, #40]	; (800979c <prvInitialiseTaskLists+0x7c>)
 8009772:	4a05      	ldr	r2, [pc, #20]	; (8009788 <prvInitialiseTaskLists+0x68>)
 8009774:	601a      	str	r2, [r3, #0]
}
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	200014c4 	.word	0x200014c4
 8009784:	20001924 	.word	0x20001924
 8009788:	20001938 	.word	0x20001938
 800978c:	20001954 	.word	0x20001954
 8009790:	20001968 	.word	0x20001968
 8009794:	20001980 	.word	0x20001980
 8009798:	2000194c 	.word	0x2000194c
 800979c:	20001950 	.word	0x20001950

080097a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097a6:	e019      	b.n	80097dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097a8:	f7fe fc4c 	bl	8008044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ac:	4b10      	ldr	r3, [pc, #64]	; (80097f0 <prvCheckTasksWaitingTermination+0x50>)
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3304      	adds	r3, #4
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe faed 	bl	8007d98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <prvCheckTasksWaitingTermination+0x54>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	4a0b      	ldr	r2, [pc, #44]	; (80097f4 <prvCheckTasksWaitingTermination+0x54>)
 80097c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097c8:	4b0b      	ldr	r3, [pc, #44]	; (80097f8 <prvCheckTasksWaitingTermination+0x58>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	4a0a      	ldr	r2, [pc, #40]	; (80097f8 <prvCheckTasksWaitingTermination+0x58>)
 80097d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097d2:	f7fe fc67 	bl	80080a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f810 	bl	80097fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097dc:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <prvCheckTasksWaitingTermination+0x58>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e1      	bne.n	80097a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */

}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20001968 	.word	0x20001968
 80097f4:	20001994 	.word	0x20001994
 80097f8:	2000197c 	.word	0x2000197c

080097fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800980a:	2b00      	cmp	r3, #0
 800980c:	d108      	bne.n	8009820 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe f918 	bl	8007a48 <vPortFree>
				vPortFree( pxTCB );
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7fe f915 	bl	8007a48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800981e:	e018      	b.n	8009852 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009826:	2b01      	cmp	r3, #1
 8009828:	d103      	bne.n	8009832 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fe f90c 	bl	8007a48 <vPortFree>
	}
 8009830:	e00f      	b.n	8009852 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009838:	2b02      	cmp	r3, #2
 800983a:	d00a      	beq.n	8009852 <prvDeleteTCB+0x56>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	60fb      	str	r3, [r7, #12]
}
 800984e:	bf00      	nop
 8009850:	e7fe      	b.n	8009850 <prvDeleteTCB+0x54>
	}
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009862:	4b0c      	ldr	r3, [pc, #48]	; (8009894 <prvResetNextTaskUnblockTime+0x38>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d104      	bne.n	8009876 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800986c:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <prvResetNextTaskUnblockTime+0x3c>)
 800986e:	f04f 32ff 	mov.w	r2, #4294967295
 8009872:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009874:	e008      	b.n	8009888 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009876:	4b07      	ldr	r3, [pc, #28]	; (8009894 <prvResetNextTaskUnblockTime+0x38>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	4a04      	ldr	r2, [pc, #16]	; (8009898 <prvResetNextTaskUnblockTime+0x3c>)
 8009886:	6013      	str	r3, [r2, #0]
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	2000194c 	.word	0x2000194c
 8009898:	200019b4 	.word	0x200019b4

0800989c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098a2:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <xTaskGetSchedulerState+0x34>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d102      	bne.n	80098b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098aa:	2301      	movs	r3, #1
 80098ac:	607b      	str	r3, [r7, #4]
 80098ae:	e008      	b.n	80098c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098b0:	4b08      	ldr	r3, [pc, #32]	; (80098d4 <xTaskGetSchedulerState+0x38>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d102      	bne.n	80098be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098b8:	2302      	movs	r3, #2
 80098ba:	607b      	str	r3, [r7, #4]
 80098bc:	e001      	b.n	80098c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098be:	2300      	movs	r3, #0
 80098c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098c2:	687b      	ldr	r3, [r7, #4]
	}
 80098c4:	4618      	mov	r0, r3
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	200019a0 	.word	0x200019a0
 80098d4:	200019bc 	.word	0x200019bc

080098d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d056      	beq.n	800999c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098ee:	4b2e      	ldr	r3, [pc, #184]	; (80099a8 <xTaskPriorityDisinherit+0xd0>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d00a      	beq.n	800990e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	60fb      	str	r3, [r7, #12]
}
 800990a:	bf00      	nop
 800990c:	e7fe      	b.n	800990c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	60bb      	str	r3, [r7, #8]
}
 8009928:	bf00      	nop
 800992a:	e7fe      	b.n	800992a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009930:	1e5a      	subs	r2, r3, #1
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800993e:	429a      	cmp	r2, r3
 8009940:	d02c      	beq.n	800999c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009946:	2b00      	cmp	r3, #0
 8009948:	d128      	bne.n	800999c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	3304      	adds	r3, #4
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe fa22 	bl	8007d98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009960:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996c:	4b0f      	ldr	r3, [pc, #60]	; (80099ac <xTaskPriorityDisinherit+0xd4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	429a      	cmp	r2, r3
 8009972:	d903      	bls.n	800997c <xTaskPriorityDisinherit+0xa4>
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009978:	4a0c      	ldr	r2, [pc, #48]	; (80099ac <xTaskPriorityDisinherit+0xd4>)
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009980:	4613      	mov	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4a09      	ldr	r2, [pc, #36]	; (80099b0 <xTaskPriorityDisinherit+0xd8>)
 800998a:	441a      	add	r2, r3
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	3304      	adds	r3, #4
 8009990:	4619      	mov	r1, r3
 8009992:	4610      	mov	r0, r2
 8009994:	f7fe f9a3 	bl	8007cde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009998:	2301      	movs	r3, #1
 800999a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800999c:	697b      	ldr	r3, [r7, #20]
	}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	200014c0 	.word	0x200014c0
 80099ac:	2000199c 	.word	0x2000199c
 80099b0:	200014c4 	.word	0x200014c4

080099b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099be:	4b21      	ldr	r3, [pc, #132]	; (8009a44 <prvAddCurrentTaskToDelayedList+0x90>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099c4:	4b20      	ldr	r3, [pc, #128]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3304      	adds	r3, #4
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe f9e4 	bl	8007d98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d6:	d10a      	bne.n	80099ee <prvAddCurrentTaskToDelayedList+0x3a>
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d007      	beq.n	80099ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099de:	4b1a      	ldr	r3, [pc, #104]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4619      	mov	r1, r3
 80099e6:	4819      	ldr	r0, [pc, #100]	; (8009a4c <prvAddCurrentTaskToDelayedList+0x98>)
 80099e8:	f7fe f979 	bl	8007cde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099ec:	e026      	b.n	8009a3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4413      	add	r3, r2
 80099f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099f6:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d209      	bcs.n	8009a1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a06:	4b12      	ldr	r3, [pc, #72]	; (8009a50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	4b0f      	ldr	r3, [pc, #60]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3304      	adds	r3, #4
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f7fe f987 	bl	8007d26 <vListInsert>
}
 8009a18:	e010      	b.n	8009a3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a1a:	4b0e      	ldr	r3, [pc, #56]	; (8009a54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3304      	adds	r3, #4
 8009a24:	4619      	mov	r1, r3
 8009a26:	4610      	mov	r0, r2
 8009a28:	f7fe f97d 	bl	8007d26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d202      	bcs.n	8009a3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a36:	4a08      	ldr	r2, [pc, #32]	; (8009a58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	6013      	str	r3, [r2, #0]
}
 8009a3c:	bf00      	nop
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20001998 	.word	0x20001998
 8009a48:	200014c0 	.word	0x200014c0
 8009a4c:	20001980 	.word	0x20001980
 8009a50:	20001950 	.word	0x20001950
 8009a54:	2000194c 	.word	0x2000194c
 8009a58:	200019b4 	.word	0x200019b4

08009a5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08a      	sub	sp, #40	; 0x28
 8009a60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a66:	f000 fb07 	bl	800a078 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a6a:	4b1c      	ldr	r3, [pc, #112]	; (8009adc <xTimerCreateTimerTask+0x80>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d021      	beq.n	8009ab6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a7a:	1d3a      	adds	r2, r7, #4
 8009a7c:	f107 0108 	add.w	r1, r7, #8
 8009a80:	f107 030c 	add.w	r3, r7, #12
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fd fef9 	bl	800787c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	9202      	str	r2, [sp, #8]
 8009a92:	9301      	str	r3, [sp, #4]
 8009a94:	2302      	movs	r3, #2
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	460a      	mov	r2, r1
 8009a9c:	4910      	ldr	r1, [pc, #64]	; (8009ae0 <xTimerCreateTimerTask+0x84>)
 8009a9e:	4811      	ldr	r0, [pc, #68]	; (8009ae4 <xTimerCreateTimerTask+0x88>)
 8009aa0:	f7ff f8de 	bl	8008c60 <xTaskCreateStatic>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	4a10      	ldr	r2, [pc, #64]	; (8009ae8 <xTimerCreateTimerTask+0x8c>)
 8009aa8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <xTimerCreateTimerTask+0x8c>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10a      	bne.n	8009ad2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	613b      	str	r3, [r7, #16]
}
 8009ace:	bf00      	nop
 8009ad0:	e7fe      	b.n	8009ad0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ad2:	697b      	ldr	r3, [r7, #20]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	200019f0 	.word	0x200019f0
 8009ae0:	0800a1c0 	.word	0x0800a1c0
 8009ae4:	08009c21 	.word	0x08009c21
 8009ae8:	200019f4 	.word	0x200019f4

08009aec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b08a      	sub	sp, #40	; 0x28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	623b      	str	r3, [r7, #32]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b1a:	4b1a      	ldr	r3, [pc, #104]	; (8009b84 <xTimerGenericCommand+0x98>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d02a      	beq.n	8009b78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b05      	cmp	r3, #5
 8009b32:	dc18      	bgt.n	8009b66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b34:	f7ff feb2 	bl	800989c <xTaskGetSchedulerState>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d109      	bne.n	8009b52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b3e:	4b11      	ldr	r3, [pc, #68]	; (8009b84 <xTimerGenericCommand+0x98>)
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	f107 0110 	add.w	r1, r7, #16
 8009b46:	2300      	movs	r3, #0
 8009b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b4a:	f7fe fca1 	bl	8008490 <xQueueGenericSend>
 8009b4e:	6278      	str	r0, [r7, #36]	; 0x24
 8009b50:	e012      	b.n	8009b78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b52:	4b0c      	ldr	r3, [pc, #48]	; (8009b84 <xTimerGenericCommand+0x98>)
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	f107 0110 	add.w	r1, r7, #16
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f7fe fc97 	bl	8008490 <xQueueGenericSend>
 8009b62:	6278      	str	r0, [r7, #36]	; 0x24
 8009b64:	e008      	b.n	8009b78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b66:	4b07      	ldr	r3, [pc, #28]	; (8009b84 <xTimerGenericCommand+0x98>)
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	f107 0110 	add.w	r1, r7, #16
 8009b6e:	2300      	movs	r3, #0
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	f7fe fd8b 	bl	800868c <xQueueGenericSendFromISR>
 8009b76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3728      	adds	r7, #40	; 0x28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	200019f0 	.word	0x200019f0

08009b88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af02      	add	r7, sp, #8
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b92:	4b22      	ldr	r3, [pc, #136]	; (8009c1c <prvProcessExpiredTimer+0x94>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fe f8f9 	bl	8007d98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d022      	beq.n	8009bfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	699a      	ldr	r2, [r3, #24]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	18d1      	adds	r1, r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	6978      	ldr	r0, [r7, #20]
 8009bc2:	f000 f8d1 	bl	8009d68 <prvInsertTimerInActiveList>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01f      	beq.n	8009c0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	6978      	ldr	r0, [r7, #20]
 8009bd8:	f7ff ff88 	bl	8009aec <xTimerGenericCommand>
 8009bdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d113      	bne.n	8009c0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60fb      	str	r3, [r7, #12]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c00:	f023 0301 	bic.w	r3, r3, #1
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	6978      	ldr	r0, [r7, #20]
 8009c12:	4798      	blx	r3
}
 8009c14:	bf00      	nop
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	200019e8 	.word	0x200019e8

08009c20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c28:	f107 0308 	add.w	r3, r7, #8
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 f857 	bl	8009ce0 <prvGetNextExpireTime>
 8009c32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	4619      	mov	r1, r3
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f803 	bl	8009c44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c3e:	f000 f8d5 	bl	8009dec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c42:	e7f1      	b.n	8009c28 <prvTimerTask+0x8>

08009c44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c4e:	f7ff fa43 	bl	80090d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c52:	f107 0308 	add.w	r3, r7, #8
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 f866 	bl	8009d28 <prvSampleTimeNow>
 8009c5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d130      	bne.n	8009cc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10a      	bne.n	8009c80 <prvProcessTimerOrBlockTask+0x3c>
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d806      	bhi.n	8009c80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c72:	f7ff fa3f 	bl	80090f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c76:	68f9      	ldr	r1, [r7, #12]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f7ff ff85 	bl	8009b88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c7e:	e024      	b.n	8009cca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d008      	beq.n	8009c98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c86:	4b13      	ldr	r3, [pc, #76]	; (8009cd4 <prvProcessTimerOrBlockTask+0x90>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <prvProcessTimerOrBlockTask+0x50>
 8009c90:	2301      	movs	r3, #1
 8009c92:	e000      	b.n	8009c96 <prvProcessTimerOrBlockTask+0x52>
 8009c94:	2300      	movs	r3, #0
 8009c96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c98:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <prvProcessTimerOrBlockTask+0x94>)
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f7fe ffa7 	bl	8008bf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009caa:	f7ff fa23 	bl	80090f4 <xTaskResumeAll>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009cb4:	4b09      	ldr	r3, [pc, #36]	; (8009cdc <prvProcessTimerOrBlockTask+0x98>)
 8009cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	f3bf 8f6f 	isb	sy
}
 8009cc4:	e001      	b.n	8009cca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009cc6:	f7ff fa15 	bl	80090f4 <xTaskResumeAll>
}
 8009cca:	bf00      	nop
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	200019ec 	.word	0x200019ec
 8009cd8:	200019f0 	.word	0x200019f0
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ce8:	4b0e      	ldr	r3, [pc, #56]	; (8009d24 <prvGetNextExpireTime+0x44>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <prvGetNextExpireTime+0x16>
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	e000      	b.n	8009cf8 <prvGetNextExpireTime+0x18>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d105      	bne.n	8009d10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d04:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <prvGetNextExpireTime+0x44>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60fb      	str	r3, [r7, #12]
 8009d0e:	e001      	b.n	8009d14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d14:	68fb      	ldr	r3, [r7, #12]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	200019e8 	.word	0x200019e8

08009d28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d30:	f7ff fa7e 	bl	8009230 <xTaskGetTickCount>
 8009d34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d36:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <prvSampleTimeNow+0x3c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d205      	bcs.n	8009d4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d40:	f000 f936 	bl	8009fb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	e002      	b.n	8009d52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d52:	4a04      	ldr	r2, [pc, #16]	; (8009d64 <prvSampleTimeNow+0x3c>)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d58:	68fb      	ldr	r3, [r7, #12]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	200019f8 	.word	0x200019f8

08009d68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d812      	bhi.n	8009db4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	1ad2      	subs	r2, r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d302      	bcc.n	8009da2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	617b      	str	r3, [r7, #20]
 8009da0:	e01b      	b.n	8009dda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009da2:	4b10      	ldr	r3, [pc, #64]	; (8009de4 <prvInsertTimerInActiveList+0x7c>)
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3304      	adds	r3, #4
 8009daa:	4619      	mov	r1, r3
 8009dac:	4610      	mov	r0, r2
 8009dae:	f7fd ffba 	bl	8007d26 <vListInsert>
 8009db2:	e012      	b.n	8009dda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d206      	bcs.n	8009dca <prvInsertTimerInActiveList+0x62>
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d302      	bcc.n	8009dca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	617b      	str	r3, [r7, #20]
 8009dc8:	e007      	b.n	8009dda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dca:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <prvInsertTimerInActiveList+0x80>)
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	f7fd ffa6 	bl	8007d26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009dda:	697b      	ldr	r3, [r7, #20]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3718      	adds	r7, #24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	200019ec 	.word	0x200019ec
 8009de8:	200019e8 	.word	0x200019e8

08009dec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08e      	sub	sp, #56	; 0x38
 8009df0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009df2:	e0ca      	b.n	8009f8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	da18      	bge.n	8009e2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009dfa:	1d3b      	adds	r3, r7, #4
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10a      	bne.n	8009e1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	61fb      	str	r3, [r7, #28]
}
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e22:	6850      	ldr	r0, [r2, #4]
 8009e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e26:	6892      	ldr	r2, [r2, #8]
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f2c0 80aa 	blt.w	8009f88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d004      	beq.n	8009e4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	3304      	adds	r3, #4
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fd ffa7 	bl	8007d98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff ff6b 	bl	8009d28 <prvSampleTimeNow>
 8009e52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b09      	cmp	r3, #9
 8009e58:	f200 8097 	bhi.w	8009f8a <prvProcessReceivedCommands+0x19e>
 8009e5c:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <prvProcessReceivedCommands+0x78>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009e8d 	.word	0x08009e8d
 8009e68:	08009e8d 	.word	0x08009e8d
 8009e6c:	08009e8d 	.word	0x08009e8d
 8009e70:	08009f01 	.word	0x08009f01
 8009e74:	08009f15 	.word	0x08009f15
 8009e78:	08009f5f 	.word	0x08009f5f
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009e8d 	.word	0x08009e8d
 8009e84:	08009f01 	.word	0x08009f01
 8009e88:	08009f15 	.word	0x08009f15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e92:	f043 0301 	orr.w	r3, r3, #1
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	18d1      	adds	r1, r2, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eac:	f7ff ff5c 	bl	8009d68 <prvInsertTimerInActiveList>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d069      	beq.n	8009f8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ebc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ec4:	f003 0304 	and.w	r3, r3, #4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d05e      	beq.n	8009f8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	441a      	add	r2, r3
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2100      	movs	r1, #0
 8009edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ede:	f7ff fe05 	bl	8009aec <xTimerGenericCommand>
 8009ee2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d14f      	bne.n	8009f8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	61bb      	str	r3, [r7, #24]
}
 8009efc:	bf00      	nop
 8009efe:	e7fe      	b.n	8009efe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f06:	f023 0301 	bic.w	r3, r3, #1
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f12:	e03a      	b.n	8009f8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f1a:	f043 0301 	orr.w	r3, r3, #1
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10a      	bne.n	8009f4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	617b      	str	r3, [r7, #20]
}
 8009f46:	bf00      	nop
 8009f48:	e7fe      	b.n	8009f48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	699a      	ldr	r2, [r3, #24]
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	18d1      	adds	r1, r2, r3
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f58:	f7ff ff06 	bl	8009d68 <prvInsertTimerInActiveList>
					break;
 8009f5c:	e015      	b.n	8009f8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f64:	f003 0302 	and.w	r3, r3, #2
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d103      	bne.n	8009f74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f6e:	f7fd fd6b 	bl	8007a48 <vPortFree>
 8009f72:	e00a      	b.n	8009f8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f7a:	f023 0301 	bic.w	r3, r3, #1
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f86:	e000      	b.n	8009f8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f8a:	4b08      	ldr	r3, [pc, #32]	; (8009fac <prvProcessReceivedCommands+0x1c0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	1d39      	adds	r1, r7, #4
 8009f90:	2200      	movs	r2, #0
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fe fc16 	bl	80087c4 <xQueueReceive>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f47f af2a 	bne.w	8009df4 <prvProcessReceivedCommands+0x8>
	}
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	3730      	adds	r7, #48	; 0x30
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	200019f0 	.word	0x200019f0

08009fb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fb6:	e048      	b.n	800a04a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fb8:	4b2d      	ldr	r3, [pc, #180]	; (800a070 <prvSwitchTimerLists+0xc0>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fc2:	4b2b      	ldr	r3, [pc, #172]	; (800a070 <prvSwitchTimerLists+0xc0>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fd fee1 	bl	8007d98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fe4:	f003 0304 	and.w	r3, r3, #4
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d02e      	beq.n	800a04a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d90e      	bls.n	800a01c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	68ba      	ldr	r2, [r7, #8]
 800a002:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a00a:	4b19      	ldr	r3, [pc, #100]	; (800a070 <prvSwitchTimerLists+0xc0>)
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3304      	adds	r3, #4
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f7fd fe86 	bl	8007d26 <vListInsert>
 800a01a:	e016      	b.n	800a04a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a01c:	2300      	movs	r3, #0
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	2300      	movs	r3, #0
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	2100      	movs	r1, #0
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7ff fd60 	bl	8009aec <xTimerGenericCommand>
 800a02c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	603b      	str	r3, [r7, #0]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a04a:	4b09      	ldr	r3, [pc, #36]	; (800a070 <prvSwitchTimerLists+0xc0>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1b1      	bne.n	8009fb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a054:	4b06      	ldr	r3, [pc, #24]	; (800a070 <prvSwitchTimerLists+0xc0>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a05a:	4b06      	ldr	r3, [pc, #24]	; (800a074 <prvSwitchTimerLists+0xc4>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a04      	ldr	r2, [pc, #16]	; (800a070 <prvSwitchTimerLists+0xc0>)
 800a060:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a062:	4a04      	ldr	r2, [pc, #16]	; (800a074 <prvSwitchTimerLists+0xc4>)
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	6013      	str	r3, [r2, #0]
}
 800a068:	bf00      	nop
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	200019e8 	.word	0x200019e8
 800a074:	200019ec 	.word	0x200019ec

0800a078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a07e:	f7fd ffe1 	bl	8008044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a082:	4b15      	ldr	r3, [pc, #84]	; (800a0d8 <prvCheckForValidListAndQueue+0x60>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d120      	bne.n	800a0cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a08a:	4814      	ldr	r0, [pc, #80]	; (800a0dc <prvCheckForValidListAndQueue+0x64>)
 800a08c:	f7fd fdfa 	bl	8007c84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a090:	4813      	ldr	r0, [pc, #76]	; (800a0e0 <prvCheckForValidListAndQueue+0x68>)
 800a092:	f7fd fdf7 	bl	8007c84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a096:	4b13      	ldr	r3, [pc, #76]	; (800a0e4 <prvCheckForValidListAndQueue+0x6c>)
 800a098:	4a10      	ldr	r2, [pc, #64]	; (800a0dc <prvCheckForValidListAndQueue+0x64>)
 800a09a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a09c:	4b12      	ldr	r3, [pc, #72]	; (800a0e8 <prvCheckForValidListAndQueue+0x70>)
 800a09e:	4a10      	ldr	r2, [pc, #64]	; (800a0e0 <prvCheckForValidListAndQueue+0x68>)
 800a0a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <prvCheckForValidListAndQueue+0x74>)
 800a0a8:	4a11      	ldr	r2, [pc, #68]	; (800a0f0 <prvCheckForValidListAndQueue+0x78>)
 800a0aa:	2110      	movs	r1, #16
 800a0ac:	200a      	movs	r0, #10
 800a0ae:	f7fe f953 	bl	8008358 <xQueueGenericCreateStatic>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	4a08      	ldr	r2, [pc, #32]	; (800a0d8 <prvCheckForValidListAndQueue+0x60>)
 800a0b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0b8:	4b07      	ldr	r3, [pc, #28]	; (800a0d8 <prvCheckForValidListAndQueue+0x60>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d005      	beq.n	800a0cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0c0:	4b05      	ldr	r3, [pc, #20]	; (800a0d8 <prvCheckForValidListAndQueue+0x60>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	490b      	ldr	r1, [pc, #44]	; (800a0f4 <prvCheckForValidListAndQueue+0x7c>)
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fd6c 	bl	8008ba4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0cc:	f7fd ffea 	bl	80080a4 <vPortExitCritical>
}
 800a0d0:	bf00      	nop
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	200019f0 	.word	0x200019f0
 800a0dc:	200019c0 	.word	0x200019c0
 800a0e0:	200019d4 	.word	0x200019d4
 800a0e4:	200019e8 	.word	0x200019e8
 800a0e8:	200019ec 	.word	0x200019ec
 800a0ec:	20001a9c 	.word	0x20001a9c
 800a0f0:	200019fc 	.word	0x200019fc
 800a0f4:	0800a1c8 	.word	0x0800a1c8

0800a0f8 <__libc_init_array>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	4d0d      	ldr	r5, [pc, #52]	; (800a130 <__libc_init_array+0x38>)
 800a0fc:	4c0d      	ldr	r4, [pc, #52]	; (800a134 <__libc_init_array+0x3c>)
 800a0fe:	1b64      	subs	r4, r4, r5
 800a100:	10a4      	asrs	r4, r4, #2
 800a102:	2600      	movs	r6, #0
 800a104:	42a6      	cmp	r6, r4
 800a106:	d109      	bne.n	800a11c <__libc_init_array+0x24>
 800a108:	4d0b      	ldr	r5, [pc, #44]	; (800a138 <__libc_init_array+0x40>)
 800a10a:	4c0c      	ldr	r4, [pc, #48]	; (800a13c <__libc_init_array+0x44>)
 800a10c:	f000 f82e 	bl	800a16c <_init>
 800a110:	1b64      	subs	r4, r4, r5
 800a112:	10a4      	asrs	r4, r4, #2
 800a114:	2600      	movs	r6, #0
 800a116:	42a6      	cmp	r6, r4
 800a118:	d105      	bne.n	800a126 <__libc_init_array+0x2e>
 800a11a:	bd70      	pop	{r4, r5, r6, pc}
 800a11c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a120:	4798      	blx	r3
 800a122:	3601      	adds	r6, #1
 800a124:	e7ee      	b.n	800a104 <__libc_init_array+0xc>
 800a126:	f855 3b04 	ldr.w	r3, [r5], #4
 800a12a:	4798      	blx	r3
 800a12c:	3601      	adds	r6, #1
 800a12e:	e7f2      	b.n	800a116 <__libc_init_array+0x1e>
 800a130:	0800a260 	.word	0x0800a260
 800a134:	0800a260 	.word	0x0800a260
 800a138:	0800a260 	.word	0x0800a260
 800a13c:	0800a264 	.word	0x0800a264

0800a140 <memcpy>:
 800a140:	440a      	add	r2, r1
 800a142:	4291      	cmp	r1, r2
 800a144:	f100 33ff 	add.w	r3, r0, #4294967295
 800a148:	d100      	bne.n	800a14c <memcpy+0xc>
 800a14a:	4770      	bx	lr
 800a14c:	b510      	push	{r4, lr}
 800a14e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a152:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a156:	4291      	cmp	r1, r2
 800a158:	d1f9      	bne.n	800a14e <memcpy+0xe>
 800a15a:	bd10      	pop	{r4, pc}

0800a15c <memset>:
 800a15c:	4402      	add	r2, r0
 800a15e:	4603      	mov	r3, r0
 800a160:	4293      	cmp	r3, r2
 800a162:	d100      	bne.n	800a166 <memset+0xa>
 800a164:	4770      	bx	lr
 800a166:	f803 1b01 	strb.w	r1, [r3], #1
 800a16a:	e7f9      	b.n	800a160 <memset+0x4>

0800a16c <_init>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	bf00      	nop
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr

0800a178 <_fini>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	bf00      	nop
 800a17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17e:	bc08      	pop	{r3}
 800a180:	469e      	mov	lr, r3
 800a182:	4770      	bx	lr
