
data_aqusition_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009210  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080093d0  080093d0  000193d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009544  08009544  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009544  08009544  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009544  08009544  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800954c  0800954c  0001954c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd0  20000180  080096d0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  080096d0  00021150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000438c8  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062c0  00000000  00000000  00063a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002300  00000000  00000000  00069d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002098  00000000  00000000  0006c038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003751f  00000000  00000000  0006e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b438  00000000  00000000  000a55ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b7ef  00000000  00000000  000d0a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021c216  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009304  00000000  00000000  0021c26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000180 	.word	0x20000180
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080093b8 	.word	0x080093b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000184 	.word	0x20000184
 80001fc:	080093b8 	.word	0x080093b8

08000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>:
	 * @param  pBuffer: pointer to data to be read.
	 * @param  RegisterAddr: specifies internal address register to be read.
	 * @param  NumByteToRead: number of bytes to be read.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Read(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4611      	mov	r1, r2
 800020c:	461a      	mov	r2, r3
 800020e:	460b      	mov	r3, r1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4613      	mov	r3, r2
 8000214:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToRead) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f003 fb23 	bl	8003868 <HAL_GPIO_WritePin>
		uint8_t msg = RegisterAddr | 0x80;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000228:	b2db      	uxtb	r3, r3
 800022a:	75fb      	strb	r3, [r7, #23]
		/* Write Reg Address */
		HAL_SPI_Transmit(&hspi1, &msg, 1, 100);
 800022c:	f107 0117 	add.w	r1, r7, #23
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	2201      	movs	r2, #1
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000236:	f005 fc14 	bl	8005a62 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, pBuffer, nBytesToRead, 100);
 800023a:	88ba      	ldrh	r2, [r7, #4]
 800023c:	2364      	movs	r3, #100	; 0x64
 800023e:	68b9      	ldr	r1, [r7, #8]
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000242:	f005 fd7c 	bl	8005d3e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2110      	movs	r1, #16
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f003 fb0b 	bl	8003868 <HAL_GPIO_WritePin>

		return 0;
 8000252:	2300      	movs	r3, #0
	}
 8000254:	4618      	mov	r0, r3
 8000256:	3718      	adds	r7, #24
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20001010 	.word	0x20001010

08000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>:
	 * @param  pBuffer: pointer to data to be written.
	 * @param  RegisterAddr: specifies internal address register to be written.
	 * @param  NumByteToWrite: number of bytes to write.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Write(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	4611      	mov	r1, r2
 800026c:	461a      	mov	r2, r3
 800026e:	460b      	mov	r3, r1
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	4613      	mov	r3, r2
 8000274:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToWrite) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f003 faf3 	bl	8003868 <HAL_GPIO_WritePin>
		/* Write Reg Address */
		uint8_t data[2];
		data[0] = RegisterAddr;  // multibyte write
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	753b      	strb	r3, [r7, #20]
		data[1] = *pBuffer;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	757b      	strb	r3, [r7, #21]

		HAL_SPI_Transmit(&hspi1, data, 2, 100);
 800028c:	f107 0114 	add.w	r1, r7, #20
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2202      	movs	r2, #2
 8000294:	4806      	ldr	r0, [pc, #24]	; (80002b0 <_ZN16ISM330DHCXSensor8IO_WriteEPhht+0x50>)
 8000296:	f005 fbe4 	bl	8005a62 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f003 fae1 	bl	8003868 <HAL_GPIO_WritePin>

		return 0;
 80002a6:	2300      	movs	r3, #0
	}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20001010 	.word	0x20001010

080002b4 <_ZN16ISM330DHCXSensorC1Ev>:
/** Constructor SPI
 *  @param spi object
 *  @param cs_pin the chip select pin
 *  @param spi_speed the SPI speed
 */
ISM330DHCXSensor::ISM330DHCXSensor() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(&hspi1);
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <_ZN16ISM330DHCXSensorC1Ev+0x3c>)
 80002be:	f005 fb2d 	bl	800591c <HAL_SPI_Init>
	reg_ctx.write_reg = ISM330DHCX_io_write;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <_ZN16ISM330DHCXSensorC1Ev+0x40>)
 80002c6:	611a      	str	r2, [r3, #16]
	reg_ctx.read_reg = ISM330DHCX_io_read;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <_ZN16ISM330DHCXSensorC1Ev+0x44>)
 80002cc:	615a      	str	r2, [r3, #20]
	reg_ctx.handle = (void*) this;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	619a      	str	r2, [r3, #24]
	address = 0U;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
	acc_is_enabled = 0U;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	735a      	strb	r2, [r3, #13]
}
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20001010 	.word	0x20001010
 80002f4:	080002fd 	.word	0x080002fd
 80002f8:	08000327 	.word	0x08000327

080002fc <ISM330DHCX_io_write>:

	return ISM330DHCX_OK;
}

int32_t ISM330DHCX_io_write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer,
		uint16_t nBytesToWrite) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	607a      	str	r2, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	460b      	mov	r3, r1
 800030a:	72fb      	strb	r3, [r7, #11]
 800030c:	4613      	mov	r3, r2
 800030e:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Write(pBuffer, WriteAddr,
 8000310:	893b      	ldrh	r3, [r7, #8]
 8000312:	7afa      	ldrb	r2, [r7, #11]
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f7ff ffa2 	bl	8000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>
 800031c:	4603      	mov	r3, r0
			nBytesToWrite);
}
 800031e:	4618      	mov	r0, r3
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <ISM330DHCX_io_read>:

int32_t ISM330DHCX_io_read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer,
		uint16_t nBytesToRead) {
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	60f8      	str	r0, [r7, #12]
 800032e:	607a      	str	r2, [r7, #4]
 8000330:	461a      	mov	r2, r3
 8000332:	460b      	mov	r3, r1
 8000334:	72fb      	strb	r3, [r7, #11]
 8000336:	4613      	mov	r3, r2
 8000338:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Read(pBuffer, ReadAddr,
 800033a:	893b      	ldrh	r3, [r7, #8]
 800033c:	7afa      	ldrb	r2, [r7, #11]
 800033e:	6879      	ldr	r1, [r7, #4]
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f7ff ff5d 	bl	8000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>
 8000346:	4603      	mov	r3, r0
			nBytesToRead);
}
 8000348:	4618      	mov	r0, r3
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08a      	sub	sp, #40	; 0x28
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000356:	f107 031c 	add.w	r3, r7, #28
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
 8000370:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000372:	4b55      	ldr	r3, [pc, #340]	; (80004c8 <MX_ADC1_Init+0x178>)
 8000374:	4a55      	ldr	r2, [pc, #340]	; (80004cc <MX_ADC1_Init+0x17c>)
 8000376:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000378:	4b53      	ldr	r3, [pc, #332]	; (80004c8 <MX_ADC1_Init+0x178>)
 800037a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800037e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000380:	4b51      	ldr	r3, [pc, #324]	; (80004c8 <MX_ADC1_Init+0x178>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000386:	4b50      	ldr	r3, [pc, #320]	; (80004c8 <MX_ADC1_Init+0x178>)
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800038c:	4b4e      	ldr	r3, [pc, #312]	; (80004c8 <MX_ADC1_Init+0x178>)
 800038e:	2201      	movs	r2, #1
 8000390:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000392:	4b4d      	ldr	r3, [pc, #308]	; (80004c8 <MX_ADC1_Init+0x178>)
 8000394:	2204      	movs	r2, #4
 8000396:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000398:	4b4b      	ldr	r3, [pc, #300]	; (80004c8 <MX_ADC1_Init+0x178>)
 800039a:	2200      	movs	r2, #0
 800039c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800039e:	4b4a      	ldr	r3, [pc, #296]	; (80004c8 <MX_ADC1_Init+0x178>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80003a4:	4b48      	ldr	r3, [pc, #288]	; (80004c8 <MX_ADC1_Init+0x178>)
 80003a6:	2206      	movs	r2, #6
 80003a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003aa:	4b47      	ldr	r3, [pc, #284]	; (80004c8 <MX_ADC1_Init+0x178>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b2:	4b45      	ldr	r3, [pc, #276]	; (80004c8 <MX_ADC1_Init+0x178>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b8:	4b43      	ldr	r3, [pc, #268]	; (80004c8 <MX_ADC1_Init+0x178>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003be:	4b42      	ldr	r3, [pc, #264]	; (80004c8 <MX_ADC1_Init+0x178>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003c6:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <MX_ADC1_Init+0x178>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003cc:	4b3e      	ldr	r3, [pc, #248]	; (80004c8 <MX_ADC1_Init+0x178>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003d4:	483c      	ldr	r0, [pc, #240]	; (80004c8 <MX_ADC1_Init+0x178>)
 80003d6:	f001 fa91 	bl	80018fc <HAL_ADC_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80003e0:	f000 fe50 	bl	8001084 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	4619      	mov	r1, r3
 80003ee:	4836      	ldr	r0, [pc, #216]	; (80004c8 <MX_ADC1_Init+0x178>)
 80003f0:	f001 fff8 	bl	80023e4 <HAL_ADCEx_MultiModeConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80003fa:	f000 fe43 	bl	8001084 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003fe:	4b34      	ldr	r3, [pc, #208]	; (80004d0 <MX_ADC1_Init+0x180>)
 8000400:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000402:	2306      	movs	r3, #6
 8000404:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800040a:	237f      	movs	r3, #127	; 0x7f
 800040c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800040e:	2304      	movs	r3, #4
 8000410:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	482b      	ldr	r0, [pc, #172]	; (80004c8 <MX_ADC1_Init+0x178>)
 800041c:	f001 fbc0 	bl	8001ba0 <HAL_ADC_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000426:	f000 fe2d 	bl	8001084 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800042a:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <MX_ADC1_Init+0x184>)
 800042c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800042e:	230c      	movs	r3, #12
 8000430:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4619      	mov	r1, r3
 8000436:	4824      	ldr	r0, [pc, #144]	; (80004c8 <MX_ADC1_Init+0x178>)
 8000438:	f001 fbb2 	bl	8001ba0 <HAL_ADC_ConfigChannel>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000442:	f000 fe1f 	bl	8001084 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000446:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <MX_ADC1_Init+0x188>)
 8000448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800044a:	2312      	movs	r3, #18
 800044c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4619      	mov	r1, r3
 8000452:	481d      	ldr	r0, [pc, #116]	; (80004c8 <MX_ADC1_Init+0x178>)
 8000454:	f001 fba4 	bl	8001ba0 <HAL_ADC_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800045e:	f000 fe11 	bl	8001084 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000462:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <MX_ADC1_Init+0x18c>)
 8000464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000466:	2318      	movs	r3, #24
 8000468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4816      	ldr	r0, [pc, #88]	; (80004c8 <MX_ADC1_Init+0x178>)
 8000470:	f001 fb96 	bl	8001ba0 <HAL_ADC_ConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 800047a:	f000 fe03 	bl	8001084 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800047e:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_ADC1_Init+0x190>)
 8000480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000486:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <MX_ADC1_Init+0x178>)
 8000492:	f001 fb85 	bl	8001ba0 <HAL_ADC_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 800049c:	f000 fdf2 	bl	8001084 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <MX_ADC1_Init+0x194>)
 80004a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80004a4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80004a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4619      	mov	r1, r3
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <MX_ADC1_Init+0x178>)
 80004b0:	f001 fb76 	bl	8001ba0 <HAL_ADC_ConfigChannel>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80004ba:	f000 fde3 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	3728      	adds	r7, #40	; 0x28
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000eec 	.word	0x20000eec
 80004cc:	50040000 	.word	0x50040000
 80004d0:	04300002 	.word	0x04300002
 80004d4:	08600004 	.word	0x08600004
 80004d8:	0c900008 	.word	0x0c900008
 80004dc:	10c00010 	.word	0x10c00010
 80004e0:	36902000 	.word	0x36902000
 80004e4:	3ac04000 	.word	0x3ac04000

080004e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b0b0      	sub	sp, #192	; 0xc0
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	2298      	movs	r2, #152	; 0x98
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f008 ff4d 	bl	80093a8 <memset>
  if(adcHandle->Instance==ADC1)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a3c      	ldr	r2, [pc, #240]	; (8000604 <HAL_ADC_MspInit+0x11c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d171      	bne.n	80005fc <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000518:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800051c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800051e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000522:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000526:	2301      	movs	r3, #1
 8000528:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800052a:	2301      	movs	r3, #1
 800052c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800052e:	2310      	movs	r3, #16
 8000530:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000532:	2302      	movs	r3, #2
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000536:	2302      	movs	r3, #2
 8000538:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800053a:	2302      	movs	r3, #2
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800053e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000542:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	4618      	mov	r0, r3
 800054a:	f004 fa21 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000554:	f000 fd96 	bl	8001084 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000558:	4b2b      	ldr	r3, [pc, #172]	; (8000608 <HAL_ADC_MspInit+0x120>)
 800055a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055c:	4a2a      	ldr	r2, [pc, #168]	; (8000608 <HAL_ADC_MspInit+0x120>)
 800055e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <HAL_ADC_MspInit+0x120>)
 8000566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800056c:	613b      	str	r3, [r7, #16]
 800056e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <HAL_ADC_MspInit+0x120>)
 8000572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000574:	4a24      	ldr	r2, [pc, #144]	; (8000608 <HAL_ADC_MspInit+0x120>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <HAL_ADC_MspInit+0x120>)
 800057e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000580:	f003 0304 	and.w	r3, r3, #4
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 8000588:	233f      	movs	r3, #63	; 0x3f
 800058a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |ADC4_Pin|ADC5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800058e:	230b      	movs	r3, #11
 8000590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800059e:	4619      	mov	r1, r3
 80005a0:	481a      	ldr	r0, [pc, #104]	; (800060c <HAL_ADC_MspInit+0x124>)
 80005a2:	f002 ffcf 	bl	8003544 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005a8:	4a1a      	ldr	r2, [pc, #104]	; (8000614 <HAL_ADC_MspInit+0x12c>)
 80005aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005ae:	2205      	movs	r2, #5
 80005b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005d6:	2220      	movs	r2, #32
 80005d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005e2:	f002 fdf5 	bl	80031d0 <HAL_DMA_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80005ec:	f000 fd4a 	bl	8001084 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005f4:	651a      	str	r2, [r3, #80]	; 0x50
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_ADC_MspInit+0x128>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005fc:	bf00      	nop
 80005fe:	37c0      	adds	r7, #192	; 0xc0
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	50040000 	.word	0x50040000
 8000608:	40021000 	.word	0x40021000
 800060c:	48000800 	.word	0x48000800
 8000610:	20000f54 	.word	0x20000f54
 8000614:	40020008 	.word	0x40020008

08000618 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_CAN1_Init+0x64>)
 800061e:	4a18      	ldr	r2, [pc, #96]	; (8000680 <MX_CAN1_Init+0x68>)
 8000620:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_CAN1_Init+0x64>)
 8000624:	220c      	movs	r2, #12
 8000626:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_CAN1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_CAN1_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_CAN1_Init+0x64>)
 8000636:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800063a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_CAN1_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_CAN1_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_CAN1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_CAN1_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_CAN1_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_CAN1_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_CAN1_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_CAN1_Init+0x64>)
 8000668:	f001 ff60 	bl	800252c <HAL_CAN_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000672:	f000 fd07 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000fb4 	.word	0x20000fb4
 8000680:	40006400 	.word	0x40006400

08000684 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <HAL_CAN_MspInit+0x8c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d130      	bne.n	8000708 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_CAN_MspInit+0x90>)
 80006a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006aa:	4a1a      	ldr	r2, [pc, #104]	; (8000714 <HAL_CAN_MspInit+0x90>)
 80006ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b0:	6593      	str	r3, [r2, #88]	; 0x58
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <HAL_CAN_MspInit+0x90>)
 80006b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_CAN_MspInit+0x90>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_CAN_MspInit+0x90>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_CAN_MspInit+0x90>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e4:	2303      	movs	r3, #3
 80006e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006e8:	2309      	movs	r3, #9
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	4809      	ldr	r0, [pc, #36]	; (8000718 <HAL_CAN_MspInit+0x94>)
 80006f4:	f002 ff26 	bl	8003544 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2105      	movs	r1, #5
 80006fc:	2013      	movs	r0, #19
 80006fe:	f002 fd3d 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000702:	2013      	movs	r0, #19
 8000704:	f002 fd56 	bl	80031b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40006400 	.word	0x40006400
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400

0800071c <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	461a      	mov	r2, r3
 800072c:	2300      	movs	r3, #0
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	6053      	str	r3, [r2, #4]
 8000732:	6093      	str	r3, [r2, #8]
 8000734:	60d3      	str	r3, [r2, #12]
 8000736:	6113      	str	r3, [r2, #16]
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	331c      	adds	r3, #28
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	331c      	adds	r3, #28
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	68b8      	ldr	r0, [r7, #8]
 8000750:	f002 f8f5 	bl	800293e <HAL_CAN_GetRxMessage>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
    this->status =
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791a      	ldrb	r2, [r3, #4]
 8000774:	795b      	ldrb	r3, [r3, #5]
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	4313      	orrs	r3, r2
 800077e:	b29b      	uxth	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &telemetry_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	6938      	ldr	r0, [r7, #16]
 80007a0:	f000 f8a4 	bl	80008ec <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>
 80007a4:	6178      	str	r0, [r7, #20]
 80007a6:	6938      	ldr	r0, [r7, #16]
 80007a8:	f000 f8ac 	bl	8000904 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>
 80007ac:	60f8      	str	r0, [r7, #12]
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d01f      	beq.n	80007f6 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffd2 	bl	8000768 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80007c4:	4602      	mov	r2, r0
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	bf0c      	ite	eq
 80007ce:	2301      	moveq	r3, #1
 80007d0:	2300      	movne	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00a      	beq.n	80007ee <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6839      	ldr	r1, [r7, #0]
 80007e6:	4610      	mov	r0, r2
 80007e8:	4798      	blx	r3
        return true;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e004      	b.n	80007f8 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3304      	adds	r3, #4
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	e7db      	b.n	80007ae <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 80007f6:	2300      	movs	r3, #0
  }
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff83 	bl	800071c <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 8000816:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800081a:	2b00      	cmp	r3, #0
 800081c:	d10d      	bne.n	800083a <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4619      	mov	r1, r3
 8000824:	4807      	ldr	r0, [pc, #28]	; (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000826:	f7ff ffb1 	bl	800078c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
 800082a:	4603      	mov	r3, r0
 800082c:	f083 0301 	eor.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
      // Unknown message
      Error_Handler();
 8000836:	f000 fc25 	bl	8001084 <Error_Handler>
    }
  }
}
 800083a:	bf00      	nop
 800083c:	3730      	adds	r7, #48	; 0x30
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000000 	.word	0x20000000

08000848 <_Z15init_can_filter17CAN_FilterTypeDef>:
#include "can_functions.hpp"
#include <can_interface.hpp>
#include "can.h"
//extern CAN_HandleTypeDef hcan1;

void init_can_filter(CAN_FilterTypeDef sFilterConfig) {
 8000848:	b084      	sub	sp, #16
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
 800084e:	f107 0c08 	add.w	ip, r7, #8
 8000852:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sFilterConfig.FilterBank = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800085e:	2301      	movs	r3, #1
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = 0x0000;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = 0x0000;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 8000876:	2301      	movs	r3, #1
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800087a:	f107 0108 	add.w	r1, r7, #8
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <_Z15init_can_filter17CAN_FilterTypeDef+0x5c>)
 8000880:	f001 ff4f 	bl	8002722 <HAL_CAN_ConfigFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	bf14      	ite	ne
 800088a:	2301      	movne	r3, #1
 800088c:	2300      	moveq	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <_Z15init_can_filter17CAN_FilterTypeDef+0x50>
		Error_Handler();
 8000894:	f000 fbf6 	bl	8001084 <Error_Handler>
	}
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr
 80008a4:	20000fb4 	.word	0x20000fb4

080008a8 <_Z15init_can_configv>:

void init_can_config(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80008ac:	480e      	ldr	r0, [pc, #56]	; (80008e8 <_Z15init_can_configv+0x40>)
 80008ae:	f002 f802 	bl	80028b6 <HAL_CAN_Start>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf14      	ite	ne
 80008b8:	2301      	movne	r3, #1
 80008ba:	2300      	moveq	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <_Z15init_can_configv+0x1e>
		Error_Handler();
 80008c2:	f000 fbdf 	bl	8001084 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1,
 80008c6:	2103      	movs	r1, #3
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <_Z15init_can_configv+0x40>)
 80008ca:	f002 f94a 	bl	8002b62 <HAL_CAN_ActivateNotification>
 80008ce:	4603      	mov	r3, r0
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf14      	ite	ne
 80008d4:	2301      	movne	r3, #1
 80008d6:	2300      	moveq	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
	if (HAL_CAN_ActivateNotification(&hcan1,
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <_Z15init_can_configv+0x3a>
		Error_Handler();
 80008de:	f000 fbd1 	bl	8001084 <Error_Handler>
	}
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000fb4 	.word	0x20000fb4

080008ec <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f812 	bl	800091e <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f000 f806 	bl	800091e <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 8000912:	4603      	mov	r3, r0
 8000914:	335c      	adds	r3, #92	; 0x5c
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f805 	bl	8000938 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>
 800092e:	4603      	mov	r3, r0
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_ZN8PUTM_CAN6DeviceI14Telemetry_MainE8set_dataERKNS_14Can_rx_messageE>:
  explicit constexpr Device(uint32_t ide)
      : Device_base(ide, sizeof(Device_data_type)){};

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	7993      	ldrb	r3, [r2, #6]
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3307      	adds	r3, #7
 8000966:	683a      	ldr	r2, [r7, #0]
 8000968:	321c      	adds	r2, #28
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	701a      	strb	r2, [r3, #0]
  }
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_ZN8PUTM_CAN6DeviceI18TS_rear_suspensionE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	7993      	ldrb	r3, [r2, #6]
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	1dd8      	adds	r0, r3, #7
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	331c      	adds	r3, #28
 8000996:	2208      	movs	r2, #8
 8000998:	4619      	mov	r1, r3
 800099a:	f008 fcf7 	bl	800938c <memcpy>
  }
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_ZN8PUTM_CAN6DeviceI7TS_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
    new_data = true;
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	7993      	ldrb	r3, [r2, #6]
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	1dd8      	adds	r0, r3, #7
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	331c      	adds	r3, #28
 80009c2:	2208      	movs	r2, #8
 80009c4:	4619      	mov	r1, r3
 80009c6:	f008 fce1 	bl	800938c <memcpy>
  }
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_ZN8PUTM_CAN6DeviceI20Steering_Wheel_eventE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
    new_data = true;
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	7993      	ldrb	r3, [r2, #6]
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	1dd8      	adds	r0, r3, #7
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	331c      	adds	r3, #28
 80009ee:	2203      	movs	r2, #3
 80009f0:	4619      	mov	r1, r3
 80009f2:	f008 fccb 	bl	800938c <memcpy>
  }
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_ZN8PUTM_CAN6DeviceI19Steering_Wheel_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	7993      	ldrb	r3, [r2, #6]
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	1dd8      	adds	r0, r3, #7
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	331c      	adds	r3, #28
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f008 fcb5 	bl	800938c <memcpy>
  }
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_ZN8PUTM_CAN6DeviceI7SF_NUCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	7993      	ldrb	r3, [r2, #6]
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3307      	adds	r3, #7
 8000a42:	683a      	ldr	r2, [r7, #0]
 8000a44:	321c      	adds	r2, #28
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	601a      	str	r2, [r3, #0]
  }
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_ZN8PUTM_CAN6DeviceI5SF_WSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	7993      	ldrb	r3, [r2, #6]
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	1dd8      	adds	r0, r3, #7
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	331c      	adds	r3, #28
 8000a72:	2208      	movs	r2, #8
 8000a74:	4619      	mov	r1, r3
 8000a76:	f008 fc89 	bl	800938c <memcpy>
  }
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_ZN8PUTM_CAN6DeviceI5SF_DVE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	7993      	ldrb	r3, [r2, #6]
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	1dd8      	adds	r0, r3, #7
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	331c      	adds	r3, #28
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f008 fc73 	bl	800938c <memcpy>
  }
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_ZN8PUTM_CAN6DeviceI20SF_CoolingAndVSafetyE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	7993      	ldrb	r3, [r2, #6]
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	1dd8      	adds	r0, r3, #7
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	331c      	adds	r3, #28
 8000aca:	2208      	movs	r2, #8
 8000acc:	4619      	mov	r1, r3
 8000ace:	f008 fc5d 	bl	800938c <memcpy>
  }
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_ZN8PUTM_CAN6DeviceI11SF_FrontBoxE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	7993      	ldrb	r3, [r2, #6]
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	1dd8      	adds	r0, r3, #7
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	331c      	adds	r3, #28
 8000af6:	2208      	movs	r2, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	f008 fc47 	bl	800938c <memcpy>
  }
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_ZN8PUTM_CAN6DeviceI7SF_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	7993      	ldrb	r3, [r2, #6]
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	1dd8      	adds	r0, r3, #7
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	331c      	adds	r3, #28
 8000b22:	2203      	movs	r2, #3
 8000b24:	4619      	mov	r1, r3
 8000b26:	f008 fc31 	bl	800938c <memcpy>
  }
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_ZN8PUTM_CAN6DeviceI14Lap_timer_PassE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	7993      	ldrb	r3, [r2, #6]
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3307      	adds	r3, #7
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	321c      	adds	r2, #28
 8000b4e:	8812      	ldrh	r2, [r2, #0]
 8000b50:	b292      	uxth	r2, r2
 8000b52:	801a      	strh	r2, [r3, #0]
  }
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_ZN8PUTM_CAN6DeviceI14Lap_timer_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	7993      	ldrb	r3, [r2, #6]
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3307      	adds	r3, #7
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	321c      	adds	r2, #28
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	701a      	strb	r2, [r3, #0]
  }
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_ZN8PUTM_CAN6DeviceI17Dash_lap_finishedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	7993      	ldrb	r3, [r2, #6]
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3307      	adds	r3, #7
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	321c      	adds	r2, #28
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	601a      	str	r2, [r3, #0]
  }
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_ZN8PUTM_CAN6DeviceI27Dash_steering_wheel_requestE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	7993      	ldrb	r3, [r2, #6]
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3307      	adds	r3, #7
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	321c      	adds	r2, #28
 8000bd4:	7812      	ldrb	r2, [r2, #0]
 8000bd6:	701a      	strb	r2, [r3, #0]
  }
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_ZN8PUTM_CAN6DeviceI26Dash_Smart_Fuses_FAN_speedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	7993      	ldrb	r3, [r2, #6]
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3307      	adds	r3, #7
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	321c      	adds	r2, #28
 8000c00:	8812      	ldrh	r2, [r2, #0]
 8000c02:	b292      	uxth	r2, r2
 8000c04:	801a      	strh	r2, [r3, #0]
  }
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_ZN8PUTM_CAN6DeviceI8Dash_TCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	7993      	ldrb	r3, [r2, #6]
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	1dd8      	adds	r0, r3, #7
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	331c      	adds	r3, #28
 8000c2e:	2208      	movs	r2, #8
 8000c30:	4619      	mov	r1, r3
 8000c32:	f008 fbab 	bl	800938c <memcpy>
  }
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_ZN8PUTM_CAN6DeviceI9Dash_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	7993      	ldrb	r3, [r2, #6]
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3307      	adds	r3, #7
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	321c      	adds	r2, #28
 8000c5a:	7812      	ldrb	r2, [r2, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
  }
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_ZN8PUTM_CAN6DeviceI18BMS_LV_temperatureE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	7993      	ldrb	r3, [r2, #6]
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	1dd8      	adds	r0, r3, #7
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	331c      	adds	r3, #28
 8000c86:	2208      	movs	r2, #8
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f008 fb7f 	bl	800938c <memcpy>
  }
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_ZN8PUTM_CAN6DeviceI11BMS_LV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	7993      	ldrb	r3, [r2, #6]
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	1dd8      	adds	r0, r3, #7
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	331c      	adds	r3, #28
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f008 fb69 	bl	800938c <memcpy>
  }
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_ZN8PUTM_CAN6DeviceI11BMS_HV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	7993      	ldrb	r3, [r2, #6]
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	1dd8      	adds	r0, r3, #7
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	331c      	adds	r3, #28
 8000cde:	2207      	movs	r2, #7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f008 fb53 	bl	800938c <memcpy>
  }
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_ZN8PUTM_CAN6DeviceI7AQ_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	7993      	ldrb	r3, [r2, #6]
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	1dd8      	adds	r0, r3, #7
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	331c      	adds	r3, #28
 8000d0a:	2206      	movs	r2, #6
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f008 fb3d 	bl	800938c <memcpy>
  }
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_ZN8PUTM_CAN6DeviceI9Apps_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	7993      	ldrb	r3, [r2, #6]
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	1dd8      	adds	r0, r3, #7
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	331c      	adds	r3, #28
 8000d36:	2205      	movs	r2, #5
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f008 fb27 	bl	800938c <memcpy>
  }
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d52:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6493      	str	r3, [r2, #72]	; 0x48
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6493      	str	r3, [r2, #72]	; 0x48
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2105      	movs	r1, #5
 8000d82:	200b      	movs	r0, #11
 8000d84:	f002 f9fa 	bl	800317c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d88:	200b      	movs	r0, #11
 8000d8a:	f002 fa13 	bl	80031b4 <HAL_NVIC_EnableIRQ>

}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <MX_GPIO_Init>:
/** Configure pins
     PB10   ------> I2C2_SCL
     PB11   ------> I2C2_SDA
*/
void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <MX_GPIO_Init+0x154>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a4e      	ldr	r2, [pc, #312]	; (8000ef0 <MX_GPIO_Init+0x154>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b4c      	ldr	r3, [pc, #304]	; (8000ef0 <MX_GPIO_Init+0x154>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b49      	ldr	r3, [pc, #292]	; (8000ef0 <MX_GPIO_Init+0x154>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a48      	ldr	r2, [pc, #288]	; (8000ef0 <MX_GPIO_Init+0x154>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b46      	ldr	r3, [pc, #280]	; (8000ef0 <MX_GPIO_Init+0x154>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <MX_GPIO_Init+0x154>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a42      	ldr	r2, [pc, #264]	; (8000ef0 <MX_GPIO_Init+0x154>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b40      	ldr	r3, [pc, #256]	; (8000ef0 <MX_GPIO_Init+0x154>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f002 fd31 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000e06:	2200      	movs	r2, #0
 8000e08:	f24f 0180 	movw	r1, #61568	; 0xf080
 8000e0c:	4839      	ldr	r0, [pc, #228]	; (8000ef4 <MX_GPIO_Init+0x158>)
 8000e0e:	f002 fd2b 	bl	8003868 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000e18:	4837      	ldr	r0, [pc, #220]	; (8000ef8 <MX_GPIO_Init+0x15c>)
 8000e1a:	f002 fd25 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000e1e:	2310      	movs	r3, #16
 8000e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e26:	2302      	movs	r3, #2
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f002 fb84 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8000e3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e42:	2312      	movs	r3, #18
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	4826      	ldr	r0, [pc, #152]	; (8000ef4 <MX_GPIO_Init+0x158>)
 8000e5a:	f002 fb73 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PB7 */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000e5e:	f24f 0380 	movw	r3, #61568	; 0xf080
 8000e62:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <MX_GPIO_Init+0x158>)
 8000e78:	f002 fb64 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e7c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	4619      	mov	r1, r3
 8000e94:	4818      	ldr	r0, [pc, #96]	; (8000ef8 <MX_GPIO_Init+0x15c>)
 8000e96:	f002 fb55 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_GPIO_Init+0x15c>)
 8000eb0:	f002 fb48 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f002 fb3a 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISM_INT1_Pin;
 8000ed0:	2340      	movs	r3, #64	; 0x40
 8000ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ISM_INT1_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_GPIO_Init+0x158>)
 8000ee4:	f002 fb2e 	bl	8003544 <HAL_GPIO_Init>

}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	48000800 	.word	0x48000800

08000efc <_Z41__static_initialization_and_destruction_0ii>:
}

void ism330_read(int32_t *acceleration, int32_t *angular_rate) {
	AccGyr.ACC_GetAxes(acceleration);
	AccGyr.GYRO_GetAxes(angular_rate);
}
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d107      	bne.n	8000f1c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d102      	bne.n	8000f1c <_Z41__static_initialization_and_destruction_0ii+0x20>
ISM330DHCXSensor AccGyr;
 8000f16:	4803      	ldr	r0, [pc, #12]	; (8000f24 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000f18:	f7ff f9cc 	bl	80002b4 <_ZN16ISM330DHCXSensorC1Ev>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000019c 	.word	0x2000019c

08000f28 <_GLOBAL__sub_I_AccGyr>:
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f30:	2001      	movs	r0, #1
 8000f32:	f7ff ffe3 	bl	8000efc <_Z41__static_initialization_and_destruction_0ii>
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f000 fb04 	bl	800154a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f82b 	bl	8000f9c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f46:	f7ff ff29 	bl	8000d9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4a:	f7ff fefd 	bl	8000d48 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f4e:	f7ff f9ff 	bl	8000350 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000f52:	f7ff fb61 	bl	8000618 <MX_CAN1_Init>
  MX_RTC_Init();
 8000f56:	f000 f8af 	bl	80010b8 <MX_RTC_Init>
  MX_SPI1_Init();
 8000f5a:	f000 f94b 	bl	80011f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	init_can_filter(sFilterConfig);
 8000f5e:	4e0d      	ldr	r6, [pc, #52]	; (8000f94 <main+0x5c>)
 8000f60:	466d      	mov	r5, sp
 8000f62:	f106 0410 	add.w	r4, r6, #16
 8000f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f72:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f76:	f7ff fc67 	bl	8000848 <_Z15init_can_filter17CAN_FilterTypeDef>
	init_can_config();
 8000f7a:	f7ff fc95 	bl	80008a8 <_Z15init_can_configv>
	braking_pressure_bar_calculation(as);
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <main+0x60>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f884 	bl	8001090 <_Z32braking_pressure_bar_calculationt>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f88:	f005 fee4 	bl	8006d54 <osKernelInitialize>

  /* Start scheduler */
  osKernelStart();
 8000f8c:	f005 ff06 	bl	8006d9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f90:	e7fe      	b.n	8000f90 <main+0x58>
 8000f92:	bf00      	nop
 8000f94:	200001b8 	.word	0x200001b8
 8000f98:	200001e0 	.word	0x200001e0

08000f9c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b098      	sub	sp, #96	; 0x60
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0318 	add.w	r3, r7, #24
 8000fa6:	2248      	movs	r2, #72	; 0x48
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f008 f9fc 	bl	80093a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f002 fc92 	bl	80038e8 <HAL_PWREx_ControlVoltageScaling>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000fd4:	f000 f856 	bl	8001084 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000fd8:	2318      	movs	r3, #24
 8000fda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fe8:	2360      	movs	r3, #96	; 0x60
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fec:	2302      	movs	r3, #2
 8000fee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ff8:	233c      	movs	r3, #60	; 0x3c
 8000ffa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001000:	2302      	movs	r3, #2
 8001002:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001004:	2302      	movs	r3, #2
 8001006:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	4618      	mov	r0, r3
 800100e:	f002 fd69 	bl	8003ae4 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf14      	ite	ne
 8001018:	2301      	movne	r3, #1
 800101a:	2300      	moveq	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8001022:	f000 f82f 	bl	8001084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2303      	movs	r3, #3
 800102c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2105      	movs	r1, #5
 800103e:	4618      	mov	r0, r3
 8001040:	f003 f9d8 	bl	80043f4 <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	bf14      	ite	ne
 800104a:	2301      	movne	r3, #1
 800104c:	2300      	moveq	r3, #0
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001054:	f000 f816 	bl	8001084 <Error_Handler>
  }
}
 8001058:	bf00      	nop
 800105a:	3760      	adds	r7, #96	; 0x60
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001072:	f000 fa83 	bl	800157c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40001000 	.word	0x40001000

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <_Z32braking_pressure_bar_calculationt>:
 */

#include <meansure_task.hpp>


uint16_t braking_pressure_bar_calculation(uint16_t adc_value){
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
 * 0 --- 5v
 * 0 --- 65 535
 * f2 = 13 107
 * f3 = f2/f1==262
 */
	return adc_value / 262;
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_Z32braking_pressure_bar_calculationt+0x24>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	b29b      	uxth	r3, r3

}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	fa232cf3 	.word	0xfa232cf3

080010b8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <MX_RTC_Init+0xb8>)
 80010d2:	4a28      	ldr	r2, [pc, #160]	; (8001174 <MX_RTC_Init+0xbc>)
 80010d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <MX_RTC_Init+0xb8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <MX_RTC_Init+0xb8>)
 80010de:	227f      	movs	r2, #127	; 0x7f
 80010e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <MX_RTC_Init+0xb8>)
 80010e4:	22ff      	movs	r2, #255	; 0xff
 80010e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MX_RTC_Init+0xb8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <MX_RTC_Init+0xb8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <MX_RTC_Init+0xb8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_RTC_Init+0xb8>)
 80010fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001100:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_RTC_Init+0xb8>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <MX_RTC_Init+0xb8>)
 800110a:	f004 f995 	bl	8005438 <HAL_RTC_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001114:	f7ff ffb6 	bl	8001084 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001118:	2300      	movs	r3, #0
 800111a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800111c:	2300      	movs	r3, #0
 800111e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001120:	2300      	movs	r3, #0
 8001122:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2201      	movs	r2, #1
 8001130:	4619      	mov	r1, r3
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <MX_RTC_Init+0xb8>)
 8001134:	f004 fa10 	bl	8005558 <HAL_RTC_SetTime>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800113e:	f7ff ffa1 	bl	8001084 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001142:	2301      	movs	r3, #1
 8001144:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001146:	2301      	movs	r3, #1
 8001148:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800114a:	2301      	movs	r3, #1
 800114c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800114e:	2300      	movs	r3, #0
 8001150:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_RTC_Init+0xb8>)
 800115a:	f004 fa9d 	bl	8005698 <HAL_RTC_SetDate>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_RTC_Init+0xb0>
  {
    Error_Handler();
 8001164:	f7ff ff8e 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000fdc 	.word	0x20000fdc
 8001174:	40002800 	.word	0x40002800

08001178 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0aa      	sub	sp, #168	; 0xa8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2298      	movs	r2, #152	; 0x98
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f008 f90d 	bl	80093a8 <memset>
  if(rtcHandle->Instance==RTC)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a16      	ldr	r2, [pc, #88]	; (80011ec <HAL_RTC_MspInit+0x74>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d124      	bne.n	80011e2 <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800119e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fbf0 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80011b6:	f7ff ff65 	bl	8001084 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_RTC_MspInit+0x78>)
 80011bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_RTC_MspInit+0x78>)
 80011c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_RTC_MspInit+0x78>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_RTC_MspInit+0x78>)
 80011d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_RTC_MspInit+0x78>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011e2:	bf00      	nop
 80011e4:	37a8      	adds	r7, #168	; 0xa8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40002800 	.word	0x40002800
 80011f0:	40021000 	.word	0x40021000

080011f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_SPI1_Init+0x74>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <MX_SPI1_Init+0x78>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_SPI1_Init+0x74>)
 8001200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_SPI1_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_SPI1_Init+0x74>)
 800120e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001212:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_SPI1_Init+0x74>)
 8001216:	2202      	movs	r2, #2
 8001218:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_SPI1_Init+0x74>)
 800121c:	2201      	movs	r2, #1
 800121e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_SPI1_Init+0x74>)
 8001222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001226:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_SPI1_Init+0x74>)
 800122a:	2230      	movs	r2, #48	; 0x30
 800122c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_SPI1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_SPI1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_SPI1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_SPI1_Init+0x74>)
 8001242:	2207      	movs	r2, #7
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_SPI1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_SPI1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_SPI1_Init+0x74>)
 8001254:	f004 fb62 	bl	800591c <HAL_SPI_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800125e:	f7ff ff11 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20001010 	.word	0x20001010
 800126c:	40013000 	.word	0x40013000

08001270 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_SPI_MspInit+0x7c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d128      	bne.n	80012e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_SPI_MspInit+0x80>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <HAL_SPI_MspInit+0x80>)
 8001298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800129c:	6613      	str	r3, [r2, #96]	; 0x60
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_SPI_MspInit+0x80>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_SPI_MspInit+0x80>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_SPI_MspInit+0x80>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_SPI_MspInit+0x80>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012c2:	23e0      	movs	r3, #224	; 0xe0
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012d2:	2305      	movs	r3, #5
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e0:	f002 f930 	bl	8003544 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012e4:	bf00      	nop
 80012e6:	3728      	adds	r7, #40	; 0x28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40013000 	.word	0x40013000
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_MspInit+0x5c>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fe:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_MspInit+0x5c>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6613      	str	r3, [r2, #96]	; 0x60
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_MspInit+0x5c>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_MspInit+0x5c>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_MspInit+0x5c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6593      	str	r3, [r2, #88]	; 0x58
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_MspInit+0x5c>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	210f      	movs	r1, #15
 800132e:	f06f 0001 	mvn.w	r0, #1
 8001332:	f001 ff23 	bl	800317c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 5, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2105      	movs	r1, #5
 800133a:	2001      	movs	r0, #1
 800133c:	f001 ff1e 	bl	800317c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001340:	2001      	movs	r0, #1
 8001342:	f001 ff37 	bl	80031b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	; 0x30
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	2036      	movs	r0, #54	; 0x36
 800136a:	f001 ff07 	bl	800317c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800136e:	2036      	movs	r0, #54	; 0x36
 8001370:	f001 ff20 	bl	80031b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_InitTick+0x9c>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_InitTick+0x9c>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	6593      	str	r3, [r2, #88]	; 0x58
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_InitTick+0x9c>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800138c:	f107 0210 	add.w	r2, r7, #16
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fa06 	bl	80047a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800139c:	f003 f9ee 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 80013a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <HAL_InitTick+0xa0>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0c9b      	lsrs	r3, r3, #18
 80013ac:	3b01      	subs	r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_InitTick+0xa4>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <HAL_InitTick+0xa8>)
 80013b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_InitTick+0xa4>)
 80013b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_InitTick+0xa4>)
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_InitTick+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_InitTick+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <HAL_InitTick+0xa4>)
 80013d2:	f005 f9b3 	bl	800673c <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d104      	bne.n	80013e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013dc:	4806      	ldr	r0, [pc, #24]	; (80013f8 <HAL_InitTick+0xa4>)
 80013de:	f005 fa05 	bl	80067ec <HAL_TIM_Base_Start_IT>
 80013e2:	4603      	mov	r3, r0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3730      	adds	r7, #48	; 0x30
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	431bde83 	.word	0x431bde83
 80013f8:	20001074 	.word	0x20001074
 80013fc:	40001000 	.word	0x40001000

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8001430:	f002 fafe 	bl	8003a30 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA1_Channel1_IRQHandler+0x10>)
 800143e:	f001 ff6f 	bl	8003320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000f54 	.word	0x20000f54

0800144c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <CAN1_TX_IRQHandler+0x10>)
 8001452:	f001 fbac 	bl	8002bae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000fb4 	.word	0x20000fb4

08001460 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM3_IRQHandler+0x10>)
 8001466:	f005 fa31 	bl	80068cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200010c0 	.word	0x200010c0

08001474 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM6_DAC_IRQHandler+0x10>)
 800147a:	f005 fa27 	bl	80068cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20001074 	.word	0x20001074

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM3_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d113      	bne.n	80014e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2105      	movs	r1, #5
 80014da:	201d      	movs	r0, #29
 80014dc:	f001 fe4e 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014e0:	201d      	movs	r0, #29
 80014e2:	f001 fe67 	bl	80031b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40000400 	.word	0x40000400
 80014f4:	40021000 	.word	0x40021000

080014f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001530 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014fc:	f7ff ffc4 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <LoopForever+0x6>)
  ldr r1, =_edata
 8001502:	490d      	ldr	r1, [pc, #52]	; (8001538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <LoopForever+0xe>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001518:	4c0a      	ldr	r4, [pc, #40]	; (8001544 <LoopForever+0x16>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001526:	f007 ff0d 	bl	8009344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800152a:	f7ff fd05 	bl	8000f38 <main>

0800152e <LoopForever>:

LoopForever:
    b LoopForever
 800152e:	e7fe      	b.n	800152e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001530:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001538:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800153c:	08009550 	.word	0x08009550
  ldr r2, =_sbss
 8001540:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001544:	20001150 	.word	0x20001150

08001548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC1_2_IRQHandler>

0800154a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f001 fe06 	bl	8003166 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155a:	200f      	movs	r0, #15
 800155c:	f7ff fefa 	bl	8001354 <HAL_InitTick>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	e001      	b.n	8001570 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800156c:	f7ff fec2 	bl	80012f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001570:	79fb      	ldrb	r3, [r7, #7]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000178 	.word	0x20000178
 80015a0:	2000110c 	.word	0x2000110c

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000110c 	.word	0x2000110c

080015bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	609a      	str	r2, [r3, #8]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3360      	adds	r3, #96	; 0x60
 8001636:	461a      	mov	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <LL_ADC_SetOffset+0x44>)
 8001646:	4013      	ands	r3, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	4313      	orrs	r3, r2
 8001654:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	03fff000 	.word	0x03fff000

0800166c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3360      	adds	r3, #96	; 0x60
 800167a:	461a      	mov	r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3360      	adds	r3, #96	; 0x60
 80016a8:	461a      	mov	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	615a      	str	r2, [r3, #20]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3330      	adds	r3, #48	; 0x30
 8001704:	461a      	mov	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	4413      	add	r3, r2
 8001712:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	211f      	movs	r1, #31
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	401a      	ands	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0e9b      	lsrs	r3, r3, #26
 800172c:	f003 011f 	and.w	r1, r3, #31
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	431a      	orrs	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001740:	bf00      	nop
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3314      	adds	r3, #20
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0e5b      	lsrs	r3, r3, #25
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	0d1b      	lsrs	r3, r3, #20
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	2107      	movs	r1, #7
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	401a      	ands	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	0d1b      	lsrs	r3, r3, #20
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	431a      	orrs	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017bc:	43db      	mvns	r3, r3
 80017be:	401a      	ands	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0318 	and.w	r3, r3, #24
 80017c6:	4908      	ldr	r1, [pc, #32]	; (80017e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017c8:	40d9      	lsrs	r1, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	400b      	ands	r3, r1
 80017ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d2:	431a      	orrs	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	0007ffff 	.word	0x0007ffff

080017ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6093      	str	r3, [r2, #8]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001824:	d101      	bne.n	800182a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001848:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800184c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001874:	d101      	bne.n	800187a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <LL_ADC_IsEnabled+0x18>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <LL_ADC_IsEnabled+0x1a>
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d101      	bne.n	80018c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d101      	bne.n	80018ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e134      	b.n	8001b80 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7fe fddf 	bl	80004e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff67 	bl	8001810 <LL_ADC_IsDeepPowerDownEnabled>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff4d 	bl	80017ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff82 	bl	8001860 <LL_ADC_IsInternalRegulatorEnabled>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d115      	bne.n	800198e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff66 	bl	8001838 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800196c:	4b86      	ldr	r3, [pc, #536]	; (8001b88 <HAL_ADC_Init+0x28c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	4a86      	ldr	r2, [pc, #536]	; (8001b8c <HAL_ADC_Init+0x290>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	099b      	lsrs	r3, r3, #6
 800197a:	3301      	adds	r3, #1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001980:	e002      	b.n	8001988 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3b01      	subs	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f9      	bne.n	8001982 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff64 	bl	8001860 <LL_ADC_IsInternalRegulatorEnabled>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10d      	bne.n	80019ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	f043 0210 	orr.w	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff75 	bl	80018ae <LL_ADC_REG_IsConversionOngoing>
 80019c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 80cd 	bne.w	8001b6e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 80c9 	bne.w	8001b6e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019e4:	f043 0202 	orr.w	r2, r3, #2
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff49 	bl	8001888 <LL_ADC_IsEnabled>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d110      	bne.n	8001a1e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019fc:	4864      	ldr	r0, [pc, #400]	; (8001b90 <HAL_ADC_Init+0x294>)
 80019fe:	f7ff ff43 	bl	8001888 <LL_ADC_IsEnabled>
 8001a02:	4604      	mov	r4, r0
 8001a04:	4863      	ldr	r0, [pc, #396]	; (8001b94 <HAL_ADC_Init+0x298>)
 8001a06:	f7ff ff3f 	bl	8001888 <LL_ADC_IsEnabled>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4323      	orrs	r3, r4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4619      	mov	r1, r3
 8001a18:	485f      	ldr	r0, [pc, #380]	; (8001b98 <HAL_ADC_Init+0x29c>)
 8001a1a:	f7ff fdcf 	bl	80015bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7e5b      	ldrb	r3, [r3, #25]
 8001a22:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a28:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a2e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a34:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d106      	bne.n	8001a5a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	3b01      	subs	r3, #1
 8001a52:	045b      	lsls	r3, r3, #17
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <HAL_ADC_Init+0x2a0>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	69b9      	ldr	r1, [r7, #24]
 8001a86:	430b      	orrs	r3, r1
 8001a88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff0d 	bl	80018ae <LL_ADC_REG_IsConversionOngoing>
 8001a94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff1a 	bl	80018d4 <LL_ADC_INJ_IsConversionOngoing>
 8001aa0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d140      	bne.n	8001b2a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d13d      	bne.n	8001b2a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7e1b      	ldrb	r3, [r3, #24]
 8001ab6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ab8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ad0:	f023 0306 	bic.w	r3, r3, #6
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	69b9      	ldr	r1, [r7, #24]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d118      	bne.n	8001b1a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001afe:	4311      	orrs	r1, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	e007      	b.n	8001b2a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d10c      	bne.n	8001b4c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f023 010f 	bic.w	r1, r3, #15
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	1e5a      	subs	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
 8001b4a:	e007      	b.n	8001b5c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020f 	bic.w	r2, r2, #15
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	f023 0303 	bic.w	r3, r3, #3
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b6c:	e007      	b.n	8001b7e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	f043 0210 	orr.w	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3724      	adds	r7, #36	; 0x24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}
 8001b88:	20000170 	.word	0x20000170
 8001b8c:	053e2d63 	.word	0x053e2d63
 8001b90:	50040000 	.word	0x50040000
 8001b94:	50040100 	.word	0x50040100
 8001b98:	50040300 	.word	0x50040300
 8001b9c:	fff0c007 	.word	0xfff0c007

08001ba0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0b6      	sub	sp, #216	; 0xd8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x22>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e3d5      	b.n	800236e <HAL_ADC_ConfigChannel+0x7ce>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fe6d 	bl	80018ae <LL_ADC_REG_IsConversionOngoing>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 83ba 	bne.w	8002350 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d824      	bhi.n	8001c2e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	3b02      	subs	r3, #2
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d81b      	bhi.n	8001c26 <HAL_ADC_ConfigChannel+0x86>
 8001bee:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <HAL_ADC_ConfigChannel+0x54>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c05 	.word	0x08001c05
 8001bf8:	08001c0d 	.word	0x08001c0d
 8001bfc:	08001c15 	.word	0x08001c15
 8001c00:	08001c1d 	.word	0x08001c1d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	220c      	movs	r2, #12
 8001c08:	605a      	str	r2, [r3, #4]
          break;
 8001c0a:	e011      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2212      	movs	r2, #18
 8001c10:	605a      	str	r2, [r3, #4]
          break;
 8001c12:	e00d      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2218      	movs	r2, #24
 8001c18:	605a      	str	r2, [r3, #4]
          break;
 8001c1a:	e009      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c22:	605a      	str	r2, [r3, #4]
          break;
 8001c24:	e004      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2206      	movs	r2, #6
 8001c2a:	605a      	str	r2, [r3, #4]
          break;
 8001c2c:	e000      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001c2e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f7ff fd59 	bl	80016f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fe31 	bl	80018ae <LL_ADC_REG_IsConversionOngoing>
 8001c4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fe3d 	bl	80018d4 <LL_ADC_INJ_IsConversionOngoing>
 8001c5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 81c1 	bne.w	8001fea <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f040 81bc 	bne.w	8001fea <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c7a:	d10f      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7ff fd60 	bl	800174c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fd1a 	bl	80016ce <LL_ADC_SetSamplingTimeCommonConfig>
 8001c9a:	e00e      	b.n	8001cba <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	f7ff fd4f 	bl	800174c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fd0a 	bl	80016ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d00a      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6919      	ldr	r1, [r3, #16]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cec:	f7ff fc9a 	bl	8001624 <LL_ADC_SetOffset>
 8001cf0:	e17b      	b.n	8001fea <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fcb7 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x17e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fcac 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	e01e      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x1bc>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fca1 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	e004      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001d50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1d4>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	e018      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x206>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e004      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001d9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d106      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fc70 	bl	8001698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fc54 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10a      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x244>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fc49 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 021f 	and.w	r2, r3, #31
 8001de2:	e01e      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x282>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2101      	movs	r1, #1
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fc3e 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e004      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d105      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x29a>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	0e9b      	lsrs	r3, r3, #26
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	e018      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x2cc>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001e5e:	2320      	movs	r3, #32
 8001e60:	e004      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001e62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d106      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2200      	movs	r2, #0
 8001e76:	2101      	movs	r1, #1
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fc0d 	bl	8001698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2102      	movs	r1, #2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fbf1 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10a      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x30a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2102      	movs	r1, #2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fbe6 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	0e9b      	lsrs	r3, r3, #26
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	e01e      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x348>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2102      	movs	r1, #2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fbdb 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ec8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e004      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x360>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0e9b      	lsrs	r3, r3, #26
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	e016      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x38e>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e004      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d106      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fbac 	bl	8001698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2103      	movs	r1, #3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fb90 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10a      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x3cc>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2103      	movs	r1, #3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fb85 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	0e9b      	lsrs	r3, r3, #26
 8001f66:	f003 021f 	and.w	r2, r3, #31
 8001f6a:	e017      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x3fc>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2103      	movs	r1, #3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fb7a 	bl	800166c <LL_ADC_GetOffsetChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f86:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e003      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x414>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	e011      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x438>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	e003      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d106      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fb57 	bl	8001698 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fc4a 	bl	8001888 <LL_ADC_IsEnabled>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 8140 	bne.w	800227c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6819      	ldr	r1, [r3, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	461a      	mov	r2, r3
 800200a:	f7ff fbcb 	bl	80017a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4a8f      	ldr	r2, [pc, #572]	; (8002250 <HAL_ADC_ConfigChannel+0x6b0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	f040 8131 	bne.w	800227c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10b      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x4a2>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0e9b      	lsrs	r3, r3, #26
 8002030:	3301      	adds	r3, #1
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2b09      	cmp	r3, #9
 8002038:	bf94      	ite	ls
 800203a:	2301      	movls	r3, #1
 800203c:	2300      	movhi	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	e019      	b.n	8002076 <HAL_ADC_ConfigChannel+0x4d6>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002052:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800205a:	2320      	movs	r3, #32
 800205c:	e003      	b.n	8002066 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800205e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2b09      	cmp	r3, #9
 800206e:	bf94      	ite	ls
 8002070:	2301      	movls	r3, #1
 8002072:	2300      	movhi	r3, #0
 8002074:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002076:	2b00      	cmp	r3, #0
 8002078:	d079      	beq.n	800216e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002082:	2b00      	cmp	r3, #0
 8002084:	d107      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x4f6>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	0e9b      	lsrs	r3, r3, #26
 800208c:	3301      	adds	r3, #1
 800208e:	069b      	lsls	r3, r3, #26
 8002090:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002094:	e015      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x522>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80020a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e003      	b.n	80020ba <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80020b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	069b      	lsls	r3, r3, #26
 80020be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x542>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	0e9b      	lsrs	r3, r3, #26
 80020d4:	3301      	adds	r3, #1
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	e017      	b.n	8002112 <HAL_ADC_ConfigChannel+0x572>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80020f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80020f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80020fa:	2320      	movs	r3, #32
 80020fc:	e003      	b.n	8002106 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80020fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	3301      	adds	r3, #1
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2101      	movs	r1, #1
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	ea42 0103 	orr.w	r1, r2, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x598>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	0e9b      	lsrs	r3, r3, #26
 8002128:	3301      	adds	r3, #1
 800212a:	f003 021f 	and.w	r2, r3, #31
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	e018      	b.n	800216a <HAL_ADC_ConfigChannel+0x5ca>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800214a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e003      	b.n	800215c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3301      	adds	r3, #1
 800215e:	f003 021f 	and.w	r2, r3, #31
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800216a:	430b      	orrs	r3, r1
 800216c:	e081      	b.n	8002272 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_ADC_ConfigChannel+0x5ea>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0e9b      	lsrs	r3, r3, #26
 8002180:	3301      	adds	r3, #1
 8002182:	069b      	lsls	r3, r3, #26
 8002184:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002188:	e015      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x616>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e003      	b.n	80021ae <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	069b      	lsls	r3, r3, #26
 80021b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x636>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0e9b      	lsrs	r3, r3, #26
 80021c8:	3301      	adds	r3, #1
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	2101      	movs	r1, #1
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	e017      	b.n	8002206 <HAL_ADC_ConfigChannel+0x666>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	61fb      	str	r3, [r7, #28]
  return result;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e003      	b.n	80021fa <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	ea42 0103 	orr.w	r1, r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x692>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	3b1e      	subs	r3, #30
 800222a:	051b      	lsls	r3, r3, #20
 800222c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002230:	e01e      	b.n	8002270 <HAL_ADC_ConfigChannel+0x6d0>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	613b      	str	r3, [r7, #16]
  return result;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e006      	b.n	800225c <HAL_ADC_ConfigChannel+0x6bc>
 800224e:	bf00      	nop
 8002250:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	3301      	adds	r3, #1
 800225e:	f003 021f 	and.w	r2, r3, #31
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	3b1e      	subs	r3, #30
 800226a:	051b      	lsls	r3, r3, #20
 800226c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002270:	430b      	orrs	r3, r1
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	6892      	ldr	r2, [r2, #8]
 8002276:	4619      	mov	r1, r3
 8002278:	f7ff fa68 	bl	800174c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <HAL_ADC_ConfigChannel+0x7d8>)
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d06c      	beq.n	8002362 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002288:	483c      	ldr	r0, [pc, #240]	; (800237c <HAL_ADC_ConfigChannel+0x7dc>)
 800228a:	f7ff f9bd 	bl	8001608 <LL_ADC_GetCommonPathInternalCh>
 800228e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a3a      	ldr	r2, [pc, #232]	; (8002380 <HAL_ADC_ConfigChannel+0x7e0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d127      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800229c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d121      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a35      	ldr	r2, [pc, #212]	; (8002384 <HAL_ADC_ConfigChannel+0x7e4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d157      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ba:	4619      	mov	r1, r3
 80022bc:	482f      	ldr	r0, [pc, #188]	; (800237c <HAL_ADC_ConfigChannel+0x7dc>)
 80022be:	f7ff f990 	bl	80015e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c2:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_ADC_ConfigChannel+0x7e8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	099b      	lsrs	r3, r3, #6
 80022c8:	4a30      	ldr	r2, [pc, #192]	; (800238c <HAL_ADC_ConfigChannel+0x7ec>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	099b      	lsrs	r3, r3, #6
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f9      	bne.n	80022de <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022ea:	e03a      	b.n	8002362 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a27      	ldr	r2, [pc, #156]	; (8002390 <HAL_ADC_ConfigChannel+0x7f0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d113      	bne.n	800231e <HAL_ADC_ConfigChannel+0x77e>
 80022f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <HAL_ADC_ConfigChannel+0x7e4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d12a      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800230c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002310:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002314:	4619      	mov	r1, r3
 8002316:	4819      	ldr	r0, [pc, #100]	; (800237c <HAL_ADC_ConfigChannel+0x7dc>)
 8002318:	f7ff f963 	bl	80015e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800231c:	e021      	b.n	8002362 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_ADC_ConfigChannel+0x7f4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d11c      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800232c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d116      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a12      	ldr	r2, [pc, #72]	; (8002384 <HAL_ADC_ConfigChannel+0x7e4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d111      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800233e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002342:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002346:	4619      	mov	r1, r3
 8002348:	480c      	ldr	r0, [pc, #48]	; (800237c <HAL_ADC_ConfigChannel+0x7dc>)
 800234a:	f7ff f94a 	bl	80015e2 <LL_ADC_SetCommonPathInternalCh>
 800234e:	e008      	b.n	8002362 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800236a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800236e:	4618      	mov	r0, r3
 8002370:	37d8      	adds	r7, #216	; 0xd8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	80080000 	.word	0x80080000
 800237c:	50040300 	.word	0x50040300
 8002380:	c7520000 	.word	0xc7520000
 8002384:	50040000 	.word	0x50040000
 8002388:	20000170 	.word	0x20000170
 800238c:	053e2d63 	.word	0x053e2d63
 8002390:	cb840000 	.word	0xcb840000
 8002394:	80000001 	.word	0x80000001

08002398 <LL_ADC_IsEnabled>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <LL_ADC_IsEnabled+0x18>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_ADC_IsEnabled+0x1a>
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_REG_IsConversionOngoing>:
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d101      	bne.n	80023d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b0a1      	sub	sp, #132	; 0x84
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023fe:	2302      	movs	r3, #2
 8002400:	e089      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800240a:	2300      	movs	r3, #0
 800240c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800240e:	2300      	movs	r3, #0
 8002410:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a42      	ldr	r2, [pc, #264]	; (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d102      	bne.n	8002422 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800241c:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e001      	b.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e068      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffb9 	bl	80023be <LL_ADC_REG_IsConversionOngoing>
 800244c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ffb3 	bl	80023be <LL_ADC_REG_IsConversionOngoing>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d14a      	bne.n	80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800245e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002460:	2b00      	cmp	r3, #0
 8002462:	d147      	bne.n	80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002466:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d027      	beq.n	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002482:	035b      	lsls	r3, r3, #13
 8002484:	430b      	orrs	r3, r1
 8002486:	431a      	orrs	r2, r3
 8002488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800248c:	4824      	ldr	r0, [pc, #144]	; (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800248e:	f7ff ff83 	bl	8002398 <LL_ADC_IsEnabled>
 8002492:	4604      	mov	r4, r0
 8002494:	4823      	ldr	r0, [pc, #140]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002496:	f7ff ff7f 	bl	8002398 <LL_ADC_IsEnabled>
 800249a:	4603      	mov	r3, r0
 800249c:	4323      	orrs	r3, r4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d132      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024aa:	f023 030f 	bic.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	6811      	ldr	r1, [r2, #0]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	6892      	ldr	r2, [r2, #8]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	431a      	orrs	r2, r3
 80024ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024bc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024be:	e023      	b.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024cc:	4814      	ldr	r0, [pc, #80]	; (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80024ce:	f7ff ff63 	bl	8002398 <LL_ADC_IsEnabled>
 80024d2:	4604      	mov	r4, r0
 80024d4:	4813      	ldr	r0, [pc, #76]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024d6:	f7ff ff5f 	bl	8002398 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	4323      	orrs	r3, r4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d112      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024ea:	f023 030f 	bic.w	r3, r3, #15
 80024ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024f2:	e009      	b.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f043 0220 	orr.w	r2, r3, #32
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002506:	e000      	b.n	800250a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002508:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002512:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002516:	4618      	mov	r0, r3
 8002518:	3784      	adds	r7, #132	; 0x84
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}
 800251e:	bf00      	nop
 8002520:	50040000 	.word	0x50040000
 8002524:	50040100 	.word	0x50040100
 8002528:	50040300 	.word	0x50040300

0800252c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0ed      	b.n	800271a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe f89a 	bl	8000684 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002560:	f7ff f820 	bl	80015a4 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002566:	e012      	b.n	800258e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002568:	f7ff f81c 	bl	80015a4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b0a      	cmp	r3, #10
 8002574:	d90b      	bls.n	800258e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2205      	movs	r2, #5
 8002586:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0c5      	b.n	800271a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0e5      	beq.n	8002568 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0202 	bic.w	r2, r2, #2
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ac:	f7fe fffa 	bl	80015a4 <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025b2:	e012      	b.n	80025da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025b4:	f7fe fff6 	bl	80015a4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b0a      	cmp	r3, #10
 80025c0:	d90b      	bls.n	80025da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2205      	movs	r2, #5
 80025d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e09f      	b.n	800271a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e5      	bne.n	80025b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e1b      	ldrb	r3, [r3, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e007      	b.n	8002612 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7e5b      	ldrb	r3, [r3, #25]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d108      	bne.n	800262c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e007      	b.n	800263c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7e9b      	ldrb	r3, [r3, #26]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d108      	bne.n	8002656 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0220 	orr.w	r2, r2, #32
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e007      	b.n	8002666 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0220 	bic.w	r2, r2, #32
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7edb      	ldrb	r3, [r3, #27]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0210 	bic.w	r2, r2, #16
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e007      	b.n	8002690 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0210 	orr.w	r2, r2, #16
 800268e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7f1b      	ldrb	r3, [r3, #28]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d108      	bne.n	80026aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0208 	orr.w	r2, r2, #8
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e007      	b.n	80026ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0208 	bic.w	r2, r2, #8
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7f5b      	ldrb	r3, [r3, #29]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d108      	bne.n	80026d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0204 	orr.w	r2, r2, #4
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e007      	b.n	80026e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	ea42 0103 	orr.w	r1, r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002722:	b480      	push	{r7}
 8002724:	b087      	sub	sp, #28
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002738:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d003      	beq.n	8002748 <HAL_CAN_ConfigFilter+0x26>
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	2b02      	cmp	r3, #2
 8002744:	f040 80aa 	bne.w	800289c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2201      	movs	r2, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d123      	bne.n	80027ca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	43db      	mvns	r3, r3
 800278c:	401a      	ands	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3248      	adds	r2, #72	; 0x48
 80027aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027c0:	6979      	ldr	r1, [r7, #20]
 80027c2:	3348      	adds	r3, #72	; 0x48
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d122      	bne.n	8002818 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	431a      	orrs	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3248      	adds	r2, #72	; 0x48
 80027f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800280c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800280e:	6979      	ldr	r1, [r7, #20]
 8002810:	3348      	adds	r3, #72	; 0x48
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002832:	e007      	b.n	8002844 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	431a      	orrs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	43db      	mvns	r3, r3
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800285e:	e007      	b.n	8002870 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	431a      	orrs	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	431a      	orrs	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800288e:	f023 0201 	bic.w	r2, r3, #1
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e006      	b.n	80028aa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d12e      	bne.n	8002928 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028e2:	f7fe fe5f 	bl	80015a4 <HAL_GetTick>
 80028e6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028e8:	e012      	b.n	8002910 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028ea:	f7fe fe5b 	bl	80015a4 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b0a      	cmp	r3, #10
 80028f6:	d90b      	bls.n	8002910 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2205      	movs	r2, #5
 8002908:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e012      	b.n	8002936 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1e5      	bne.n	80028ea <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	e006      	b.n	8002936 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
  }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800293e:	b480      	push	{r7}
 8002940:	b087      	sub	sp, #28
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002952:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d003      	beq.n	8002962 <HAL_CAN_GetRxMessage+0x24>
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	2b02      	cmp	r3, #2
 800295e:	f040 80f3 	bne.w	8002b48 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10e      	bne.n	8002986 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0e7      	b.n	8002b56 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0d8      	b.n	8002b56 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	331b      	adds	r3, #27
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	4413      	add	r3, r2
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0204 	and.w	r2, r3, #4
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10c      	bne.n	80029dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	331b      	adds	r3, #27
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0d5b      	lsrs	r3, r3, #21
 80029d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e00b      	b.n	80029f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	331b      	adds	r3, #27
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	4413      	add	r3, r2
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	08db      	lsrs	r3, r3, #3
 80029ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	331b      	adds	r3, #27
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4413      	add	r3, r2
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0202 	and.w	r2, r3, #2
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	331b      	adds	r3, #27
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	4413      	add	r3, r2
 8002a16:	3304      	adds	r3, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	331b      	adds	r3, #27
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3304      	adds	r3, #4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0a1b      	lsrs	r3, r3, #8
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	331b      	adds	r3, #27
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	4413      	add	r3, r2
 8002a46:	3304      	adds	r3, #4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0c1b      	lsrs	r3, r3, #16
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0a1a      	lsrs	r2, r3, #8
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0c1a      	lsrs	r2, r3, #16
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	3302      	adds	r3, #2
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e1a      	lsrs	r2, r3, #24
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	3303      	adds	r3, #3
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0a1a      	lsrs	r2, r3, #8
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3305      	adds	r3, #5
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0c1a      	lsrs	r2, r3, #16
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	3306      	adds	r3, #6
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0e1a      	lsrs	r2, r3, #24
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	3307      	adds	r3, #7
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0220 	orr.w	r2, r2, #32
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	e007      	b.n	8002b44 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0220 	orr.w	r2, r2, #32
 8002b42:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e006      	b.n	8002b56 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b085      	sub	sp, #20
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b72:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d002      	beq.n	8002b80 <HAL_CAN_ActivateNotification+0x1e>
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d109      	bne.n	8002b94 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6959      	ldr	r1, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e006      	b.n	8002ba2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b08a      	sub	sp, #40	; 0x28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d07c      	beq.n	8002cee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d023      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f983 	bl	8002f1c <HAL_CAN_TxMailbox0CompleteCallback>
 8002c16:	e016      	b.n	8002c46 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2a:	e00c      	b.n	8002c46 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d004      	beq.n	8002c40 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3e:	e002      	b.n	8002c46 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f989 	bl	8002f58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d024      	beq.n	8002c9a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f963 	bl	8002f30 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c6a:	e016      	b.n	8002c9a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7e:	e00c      	b.n	8002c9a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	e002      	b.n	8002c9a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f969 	bl	8002f6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d024      	beq.n	8002cee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f943 	bl	8002f44 <HAL_CAN_TxMailbox2CompleteCallback>
 8002cbe:	e016      	b.n	8002cee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd2:	e00c      	b.n	8002cee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce6:	e002      	b.n	8002cee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f949 	bl	8002f80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00c      	beq.n	8002d12 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2210      	movs	r2, #16
 8002d10:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d006      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f930 	bl	8002f94 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7fd fd57 	bl	8000800 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00c      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2210      	movs	r2, #16
 8002d74:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00b      	beq.n	8002d98 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2208      	movs	r2, #8
 8002d90:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f912 	bl	8002fbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f8f9 	bl	8002fa8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d006      	beq.n	8002dd8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2210      	movs	r2, #16
 8002dd0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8fc 	bl	8002fd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d006      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2208      	movs	r2, #8
 8002df2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8f5 	bl	8002fe4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d07b      	beq.n	8002efc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d072      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d043      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d03e      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e7c:	2b60      	cmp	r3, #96	; 0x60
 8002e7e:	d02b      	beq.n	8002ed8 <HAL_CAN_IRQHandler+0x32a>
 8002e80:	2b60      	cmp	r3, #96	; 0x60
 8002e82:	d82e      	bhi.n	8002ee2 <HAL_CAN_IRQHandler+0x334>
 8002e84:	2b50      	cmp	r3, #80	; 0x50
 8002e86:	d022      	beq.n	8002ece <HAL_CAN_IRQHandler+0x320>
 8002e88:	2b50      	cmp	r3, #80	; 0x50
 8002e8a:	d82a      	bhi.n	8002ee2 <HAL_CAN_IRQHandler+0x334>
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d019      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0x316>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d826      	bhi.n	8002ee2 <HAL_CAN_IRQHandler+0x334>
 8002e94:	2b30      	cmp	r3, #48	; 0x30
 8002e96:	d010      	beq.n	8002eba <HAL_CAN_IRQHandler+0x30c>
 8002e98:	2b30      	cmp	r3, #48	; 0x30
 8002e9a:	d822      	bhi.n	8002ee2 <HAL_CAN_IRQHandler+0x334>
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d002      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x2f8>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d005      	beq.n	8002eb0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ea4:	e01d      	b.n	8002ee2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	f043 0308 	orr.w	r3, r3, #8
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002eae:	e019      	b.n	8002ee4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	f043 0310 	orr.w	r3, r3, #16
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002eb8:	e014      	b.n	8002ee4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	f043 0320 	orr.w	r3, r3, #32
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ec2:	e00f      	b.n	8002ee4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ecc:	e00a      	b.n	8002ee4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ed6:	e005      	b.n	8002ee4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ee0:	e000      	b.n	8002ee4 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ee2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ef2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2204      	movs	r2, #4
 8002efa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f872 	bl	8002ff8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f14:	bf00      	nop
 8002f16:	3728      	adds	r7, #40	; 0x28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303e:	4a04      	ldr	r2, [pc, #16]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	60d3      	str	r3, [r2, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <__NVIC_GetPriorityGrouping+0x18>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 0307 	and.w	r3, r3, #7
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	2b00      	cmp	r3, #0
 8003080:	db0b      	blt.n	800309a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4907      	ldr	r1, [pc, #28]	; (80030a8 <__NVIC_EnableIRQ+0x38>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2001      	movs	r0, #1
 8003092:	fa00 f202 	lsl.w	r2, r0, r2
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e100 	.word	0xe000e100

080030ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	db0a      	blt.n	80030d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	490c      	ldr	r1, [pc, #48]	; (80030f8 <__NVIC_SetPriority+0x4c>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	440b      	add	r3, r1
 80030d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d4:	e00a      	b.n	80030ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <__NVIC_SetPriority+0x50>)
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3b04      	subs	r3, #4
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	761a      	strb	r2, [r3, #24]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000e100 	.word	0xe000e100
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f1c3 0307 	rsb	r3, r3, #7
 800311a:	2b04      	cmp	r3, #4
 800311c:	bf28      	it	cs
 800311e:	2304      	movcs	r3, #4
 8003120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3304      	adds	r3, #4
 8003126:	2b06      	cmp	r3, #6
 8003128:	d902      	bls.n	8003130 <NVIC_EncodePriority+0x30>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3b03      	subs	r3, #3
 800312e:	e000      	b.n	8003132 <NVIC_EncodePriority+0x32>
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003148:	f04f 31ff 	mov.w	r1, #4294967295
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43d9      	mvns	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	4313      	orrs	r3, r2
         );
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ff4c 	bl	800300c <__NVIC_SetPriorityGrouping>
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800318e:	f7ff ff61 	bl	8003054 <__NVIC_GetPriorityGrouping>
 8003192:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	6978      	ldr	r0, [r7, #20]
 800319a:	f7ff ffb1 	bl	8003100 <NVIC_EncodePriority>
 800319e:	4602      	mov	r2, r0
 80031a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff80 	bl	80030ac <__NVIC_SetPriority>
}
 80031ac:	bf00      	nop
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff54 	bl	8003070 <__NVIC_EnableIRQ>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e08d      	b.n	80032fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_DMA_Init+0x138>)
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d80f      	bhi.n	800320e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <HAL_DMA_Init+0x13c>)
 80031f6:	4413      	add	r3, r2
 80031f8:	4a45      	ldr	r2, [pc, #276]	; (8003310 <HAL_DMA_Init+0x140>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	009a      	lsls	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a42      	ldr	r2, [pc, #264]	; (8003314 <HAL_DMA_Init+0x144>)
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
 800320c:	e00e      	b.n	800322c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_DMA_Init+0x148>)
 8003216:	4413      	add	r3, r2
 8003218:	4a3d      	ldr	r2, [pc, #244]	; (8003310 <HAL_DMA_Init+0x140>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	009a      	lsls	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a3c      	ldr	r2, [pc, #240]	; (800331c <HAL_DMA_Init+0x14c>)
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f8fe 	bl	8003480 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800328c:	d102      	bne.n	8003294 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032a8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d010      	beq.n	80032d4 <HAL_DMA_Init+0x104>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d80c      	bhi.n	80032d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f91e 	bl	80034fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	e008      	b.n	80032e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40020407 	.word	0x40020407
 800330c:	bffdfff8 	.word	0xbffdfff8
 8003310:	cccccccd 	.word	0xcccccccd
 8003314:	40020000 	.word	0x40020000
 8003318:	bffdfbf8 	.word	0xbffdfbf8
 800331c:	40020400 	.word	0x40020400

08003320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f003 031c 	and.w	r3, r3, #28
 8003340:	2204      	movs	r2, #4
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d026      	beq.n	800339a <HAL_DMA_IRQHandler+0x7a>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d021      	beq.n	800339a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0204 	bic.w	r2, r2, #4
 8003372:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f003 021c 	and.w	r2, r3, #28
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	2104      	movs	r1, #4
 8003382:	fa01 f202 	lsl.w	r2, r1, r2
 8003386:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	2b00      	cmp	r3, #0
 800338e:	d071      	beq.n	8003474 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003398:	e06c      	b.n	8003474 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f003 031c 	and.w	r3, r3, #28
 80033a2:	2202      	movs	r2, #2
 80033a4:	409a      	lsls	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d02e      	beq.n	800340c <HAL_DMA_IRQHandler+0xec>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d029      	beq.n	800340c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10b      	bne.n	80033de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 020a 	bic.w	r2, r2, #10
 80033d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f003 021c 	and.w	r2, r3, #28
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2102      	movs	r1, #2
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d038      	beq.n	8003474 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800340a:	e033      	b.n	8003474 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f003 031c 	and.w	r3, r3, #28
 8003414:	2208      	movs	r2, #8
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d02a      	beq.n	8003476 <HAL_DMA_IRQHandler+0x156>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d025      	beq.n	8003476 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 020e 	bic.w	r2, r2, #14
 8003438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f003 021c 	and.w	r2, r3, #28
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003474:	bf00      	nop
 8003476:	bf00      	nop
}
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003490:	429a      	cmp	r2, r3
 8003492:	d80a      	bhi.n	80034aa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034a0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6493      	str	r3, [r2, #72]	; 0x48
 80034a8:	e007      	b.n	80034ba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	009a      	lsls	r2, r3, #2
 80034b2:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034b4:	4413      	add	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	3b08      	subs	r3, #8
 80034c2:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80034d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40020407 	.word	0x40020407
 80034f0:	4002081c 	.word	0x4002081c
 80034f4:	cccccccd 	.word	0xcccccccd
 80034f8:	40020880 	.word	0x40020880

080034fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	461a      	mov	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a08      	ldr	r2, [pc, #32]	; (8003540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800351e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3b01      	subs	r3, #1
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2201      	movs	r2, #1
 800352a:	409a      	lsls	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	1000823f 	.word	0x1000823f
 8003540:	40020940 	.word	0x40020940

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003552:	e166      	b.n	8003822 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	4013      	ands	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8158 	beq.w	800381c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d005      	beq.n	8003584 <HAL_GPIO_Init+0x40>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d130      	bne.n	80035e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	2203      	movs	r2, #3
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ba:	2201      	movs	r2, #1
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 0201 	and.w	r2, r3, #1
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d017      	beq.n	8003622 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2203      	movs	r2, #3
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d123      	bne.n	8003676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	08da      	lsrs	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3208      	adds	r2, #8
 8003636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	220f      	movs	r2, #15
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	08da      	lsrs	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3208      	adds	r2, #8
 8003670:	6939      	ldr	r1, [r7, #16]
 8003672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0203 	and.w	r2, r3, #3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80b2 	beq.w	800381c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b8:	4b61      	ldr	r3, [pc, #388]	; (8003840 <HAL_GPIO_Init+0x2fc>)
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	4a60      	ldr	r2, [pc, #384]	; (8003840 <HAL_GPIO_Init+0x2fc>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6613      	str	r3, [r2, #96]	; 0x60
 80036c4:	4b5e      	ldr	r3, [pc, #376]	; (8003840 <HAL_GPIO_Init+0x2fc>)
 80036c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036d0:	4a5c      	ldr	r2, [pc, #368]	; (8003844 <HAL_GPIO_Init+0x300>)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	220f      	movs	r2, #15
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036fa:	d02b      	beq.n	8003754 <HAL_GPIO_Init+0x210>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a52      	ldr	r2, [pc, #328]	; (8003848 <HAL_GPIO_Init+0x304>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d025      	beq.n	8003750 <HAL_GPIO_Init+0x20c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a51      	ldr	r2, [pc, #324]	; (800384c <HAL_GPIO_Init+0x308>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d01f      	beq.n	800374c <HAL_GPIO_Init+0x208>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a50      	ldr	r2, [pc, #320]	; (8003850 <HAL_GPIO_Init+0x30c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d019      	beq.n	8003748 <HAL_GPIO_Init+0x204>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_GPIO_Init+0x310>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d013      	beq.n	8003744 <HAL_GPIO_Init+0x200>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a4e      	ldr	r2, [pc, #312]	; (8003858 <HAL_GPIO_Init+0x314>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00d      	beq.n	8003740 <HAL_GPIO_Init+0x1fc>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a4d      	ldr	r2, [pc, #308]	; (800385c <HAL_GPIO_Init+0x318>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d007      	beq.n	800373c <HAL_GPIO_Init+0x1f8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a4c      	ldr	r2, [pc, #304]	; (8003860 <HAL_GPIO_Init+0x31c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d101      	bne.n	8003738 <HAL_GPIO_Init+0x1f4>
 8003734:	2307      	movs	r3, #7
 8003736:	e00e      	b.n	8003756 <HAL_GPIO_Init+0x212>
 8003738:	2308      	movs	r3, #8
 800373a:	e00c      	b.n	8003756 <HAL_GPIO_Init+0x212>
 800373c:	2306      	movs	r3, #6
 800373e:	e00a      	b.n	8003756 <HAL_GPIO_Init+0x212>
 8003740:	2305      	movs	r3, #5
 8003742:	e008      	b.n	8003756 <HAL_GPIO_Init+0x212>
 8003744:	2304      	movs	r3, #4
 8003746:	e006      	b.n	8003756 <HAL_GPIO_Init+0x212>
 8003748:	2303      	movs	r3, #3
 800374a:	e004      	b.n	8003756 <HAL_GPIO_Init+0x212>
 800374c:	2302      	movs	r3, #2
 800374e:	e002      	b.n	8003756 <HAL_GPIO_Init+0x212>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_GPIO_Init+0x212>
 8003754:	2300      	movs	r3, #0
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	f002 0203 	and.w	r2, r2, #3
 800375c:	0092      	lsls	r2, r2, #2
 800375e:	4093      	lsls	r3, r2
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003766:	4937      	ldr	r1, [pc, #220]	; (8003844 <HAL_GPIO_Init+0x300>)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3302      	adds	r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003774:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_GPIO_Init+0x320>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003798:	4a32      	ldr	r2, [pc, #200]	; (8003864 <HAL_GPIO_Init+0x320>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_GPIO_Init+0x320>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037c2:	4a28      	ldr	r2, [pc, #160]	; (8003864 <HAL_GPIO_Init+0x320>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037c8:	4b26      	ldr	r3, [pc, #152]	; (8003864 <HAL_GPIO_Init+0x320>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_GPIO_Init+0x320>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_GPIO_Init+0x320>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <HAL_GPIO_Init+0x320>)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	3301      	adds	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	f47f ae91 	bne.w	8003554 <HAL_GPIO_Init+0x10>
  }
}
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	40021000 	.word	0x40021000
 8003844:	40010000 	.word	0x40010000
 8003848:	48000400 	.word	0x48000400
 800384c:	48000800 	.word	0x48000800
 8003850:	48000c00 	.word	0x48000c00
 8003854:	48001000 	.word	0x48001000
 8003858:	48001400 	.word	0x48001400
 800385c:	48001800 	.word	0x48001800
 8003860:	48001c00 	.word	0x48001c00
 8003864:	40010400 	.word	0x40010400

08003868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	807b      	strh	r3, [r7, #2]
 8003874:	4613      	mov	r3, r2
 8003876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003878:	787b      	ldrb	r3, [r7, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003884:	e002      	b.n	800388c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b8:	d102      	bne.n	80038c0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80038ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038be:	e00b      	b.n	80038d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80038c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ce:	d102      	bne.n	80038d6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80038d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038d4:	e000      	b.n	80038d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80038d6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40007000 	.word	0x40007000

080038e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d141      	bne.n	800397a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038f6:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003902:	d131      	bne.n	8003968 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003904:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800390a:	4a46      	ldr	r2, [pc, #280]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003910:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003914:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800391c:	4a41      	ldr	r2, [pc, #260]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003922:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003924:	4b40      	ldr	r3, [pc, #256]	; (8003a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2232      	movs	r2, #50	; 0x32
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	4a3f      	ldr	r2, [pc, #252]	; (8003a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	0c9b      	lsrs	r3, r3, #18
 8003936:	3301      	adds	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800393a:	e002      	b.n	8003942 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3b01      	subs	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003942:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394e:	d102      	bne.n	8003956 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f2      	bne.n	800393c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003956:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003962:	d158      	bne.n	8003a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e057      	b.n	8003a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003968:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800396e:	4a2d      	ldr	r2, [pc, #180]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003974:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003978:	e04d      	b.n	8003a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003980:	d141      	bne.n	8003a06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003982:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800398a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398e:	d131      	bne.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003996:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039a8:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80039b0:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2232      	movs	r2, #50	; 0x32
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	0c9b      	lsrs	r3, r3, #18
 80039c2:	3301      	adds	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c6:	e002      	b.n	80039ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ce:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039da:	d102      	bne.n	80039e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f2      	bne.n	80039c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ee:	d112      	bne.n	8003a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e011      	b.n	8003a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fa:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a04:	e007      	b.n	8003a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a0e:	4a05      	ldr	r2, [pc, #20]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a14:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40007000 	.word	0x40007000
 8003a28:	20000170 	.word	0x20000170
 8003a2c:	431bde83 	.word	0x431bde83

08003a30 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8003a34:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003a40:	f7ff ff2a 	bl	8003898 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003a44:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003a46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a4a:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d004      	beq.n	8003a62 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8003a58:	f000 f828 	bl	8003aac <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8003a5c:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003a5e:	2208      	movs	r2, #8
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8003a62:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8003a6e:	f000 f824 	bl	8003aba <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003a74:	2210      	movs	r2, #16
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8003a84:	f000 f820 	bl	8003ac8 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8003a88:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8003a9a:	f000 f81c 	bl	8003ad6 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8003a9e:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003aa0:	2240      	movs	r2, #64	; 0x40
 8003aa2:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40010400 	.word	0x40010400

08003aac <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f000 bc76 	b.w	80043e4 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af8:	4ba1      	ldr	r3, [pc, #644]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b02:	4b9f      	ldr	r3, [pc, #636]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80e6 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4c>
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	f040 808d 	bne.w	8003c42 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	f040 8089 	bne.w	8003c42 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b30:	4b93      	ldr	r3, [pc, #588]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d006      	beq.n	8003b4a <HAL_RCC_OscConfig+0x66>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f000 bc4d 	b.w	80043e4 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4e:	4b8c      	ldr	r3, [pc, #560]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <HAL_RCC_OscConfig+0x80>
 8003b5a:	4b89      	ldr	r3, [pc, #548]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b62:	e005      	b.n	8003b70 <HAL_RCC_OscConfig+0x8c>
 8003b64:	4b86      	ldr	r3, [pc, #536]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d224      	bcs.n	8003bbe <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fe47 	bl	800480c <RCC_SetFlashLatencyFromMSIRange>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f000 bc2d 	b.w	80043e4 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b8a:	4b7d      	ldr	r3, [pc, #500]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7c      	ldr	r2, [pc, #496]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003b90:	f043 0308 	orr.w	r3, r3, #8
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b7a      	ldr	r3, [pc, #488]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	4977      	ldr	r1, [pc, #476]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ba8:	4b75      	ldr	r3, [pc, #468]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	4972      	ldr	r1, [pc, #456]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
 8003bbc:	e025      	b.n	8003c0a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bbe:	4b70      	ldr	r3, [pc, #448]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6f      	ldr	r2, [pc, #444]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003bc4:	f043 0308 	orr.w	r3, r3, #8
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b6d      	ldr	r3, [pc, #436]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	496a      	ldr	r1, [pc, #424]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bdc:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	4965      	ldr	r1, [pc, #404]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fe06 	bl	800480c <RCC_SetFlashLatencyFromMSIRange>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e3ec      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c0a:	f000 fd1f 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	4b5b      	ldr	r3, [pc, #364]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	495a      	ldr	r1, [pc, #360]	; (8003d84 <HAL_RCC_OscConfig+0x2a0>)
 8003c1c:	5ccb      	ldrb	r3, [r1, r3]
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	fa22 f303 	lsr.w	r3, r2, r3
 8003c26:	4a58      	ldr	r2, [pc, #352]	; (8003d88 <HAL_RCC_OscConfig+0x2a4>)
 8003c28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c2a:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <HAL_RCC_OscConfig+0x2a8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd fb90 	bl	8001354 <HAL_InitTick>
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d052      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	e3d0      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d032      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c4a:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a4c      	ldr	r2, [pc, #304]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c56:	f7fd fca5 	bl	80015a4 <HAL_GetTick>
 8003c5a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c5e:	f7fd fca1 	bl	80015a4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e3b9      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c7c:	4b40      	ldr	r3, [pc, #256]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3f      	ldr	r2, [pc, #252]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003c82:	f043 0308 	orr.w	r3, r3, #8
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	493a      	ldr	r1, [pc, #232]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	4935      	ldr	r1, [pc, #212]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]
 8003cae:	e01a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cb0:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a32      	ldr	r2, [pc, #200]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fc72 	bl	80015a4 <HAL_GetTick>
 8003cc0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cc4:	f7fd fc6e 	bl	80015a4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e386      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x1e0>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d073      	beq.n	8003dda <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_OscConfig+0x220>
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2b0c      	cmp	r3, #12
 8003cfc:	d10e      	bne.n	8003d1c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d10b      	bne.n	8003d1c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d063      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x2f4>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d15f      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e363      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d106      	bne.n	8003d34 <HAL_RCC_OscConfig+0x250>
 8003d26:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e01d      	b.n	8003d70 <HAL_RCC_OscConfig+0x28c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x274>
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0x28c>
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <HAL_RCC_OscConfig+0x29c>)
 8003d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01b      	beq.n	8003db0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fd fc14 	bl	80015a4 <HAL_GetTick>
 8003d7c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d7e:	e010      	b.n	8003da2 <HAL_RCC_OscConfig+0x2be>
 8003d80:	40021000 	.word	0x40021000
 8003d84:	080094fc 	.word	0x080094fc
 8003d88:	20000170 	.word	0x20000170
 8003d8c:	20000174 	.word	0x20000174
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d90:	f7fd fc08 	bl	80015a4 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	; 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e320      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da2:	4ba0      	ldr	r3, [pc, #640]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x2ac>
 8003dae:	e014      	b.n	8003dda <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fd fbf8 	bl	80015a4 <HAL_GetTick>
 8003db4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db8:	f7fd fbf4 	bl	80015a4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e30c      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dca:	4b96      	ldr	r3, [pc, #600]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x2d4>
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d060      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_OscConfig+0x314>
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d119      	bne.n	8003e26 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d116      	bne.n	8003e26 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df8:	4b8a      	ldr	r3, [pc, #552]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_OscConfig+0x32c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e2e9      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b84      	ldr	r3, [pc, #528]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	4981      	ldr	r1, [pc, #516]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e24:	e040      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d023      	beq.n	8003e76 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e2e:	4b7d      	ldr	r3, [pc, #500]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7c      	ldr	r2, [pc, #496]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fd fbb3 	bl	80015a4 <HAL_GetTick>
 8003e3e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fd fbaf 	bl	80015a4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e2c7      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e54:	4b73      	ldr	r3, [pc, #460]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	4b70      	ldr	r3, [pc, #448]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	496d      	ldr	r1, [pc, #436]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
 8003e74:	e018      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e76:	4b6b      	ldr	r3, [pc, #428]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a6a      	ldr	r2, [pc, #424]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fd fb8f 	bl	80015a4 <HAL_GetTick>
 8003e86:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fd fb8b 	bl	80015a4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e2a3      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e9c:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d07f      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05f      	beq.n	8003f7c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec2:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d037      	beq.n	8003f42 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d006      	beq.n	8003eea <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e27c      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01b      	beq.n	8003f2c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efa:	4a4a      	ldr	r2, [pc, #296]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f04:	f7fd fb4e 	bl	80015a4 <HAL_GetTick>
 8003f08:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fd fb4a 	bl	80015a4 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b11      	cmp	r3, #17
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e262      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ef      	bne.n	8003f0c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003f2c:	4b3d      	ldr	r3, [pc, #244]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f32:	f023 0210 	bic.w	r2, r3, #16
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	493a      	ldr	r1, [pc, #232]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f42:	4b38      	ldr	r3, [pc, #224]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f48:	4a36      	ldr	r2, [pc, #216]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f52:	f7fd fb27 	bl	80015a4 <HAL_GetTick>
 8003f56:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fd fb23 	bl	80015a4 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b11      	cmp	r3, #17
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e23b      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f6c:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ef      	beq.n	8003f5a <HAL_RCC_OscConfig+0x476>
 8003f7a:	e01b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7c:	4b29      	ldr	r3, [pc, #164]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f82:	4a28      	ldr	r2, [pc, #160]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8c:	f7fd fb0a 	bl	80015a4 <HAL_GetTick>
 8003f90:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f94:	f7fd fb06 	bl	80015a4 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b11      	cmp	r3, #17
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e21e      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fa6:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1ef      	bne.n	8003f94 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80c1 	beq.w	8004144 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fc8:	4b16      	ldr	r3, [pc, #88]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10e      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	4a12      	ldr	r2, [pc, #72]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fde:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe0:	4b10      	ldr	r3, [pc, #64]	; (8004024 <HAL_RCC_OscConfig+0x540>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <HAL_RCC_OscConfig+0x544>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11c      	bne.n	8004038 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <HAL_RCC_OscConfig+0x544>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a09      	ldr	r2, [pc, #36]	; (8004028 <HAL_RCC_OscConfig+0x544>)
 8004004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400a:	f7fd facb 	bl	80015a4 <HAL_GetTick>
 800400e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004010:	e00c      	b.n	800402c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004012:	f7fd fac7 	bl	80015a4 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d905      	bls.n	800402c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e1df      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
 8004024:	40021000 	.word	0x40021000
 8004028:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402c:	4b99      	ldr	r3, [pc, #612]	; (8004294 <HAL_RCC_OscConfig+0x7b0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ec      	beq.n	8004012 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02c      	beq.n	800409e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004044:	4b94      	ldr	r3, [pc, #592]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004056:	4990      	ldr	r1, [pc, #576]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d010      	beq.n	800408c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800406a:	4b8b      	ldr	r3, [pc, #556]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	4a89      	ldr	r2, [pc, #548]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800407a:	4b87      	ldr	r3, [pc, #540]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	4a85      	ldr	r2, [pc, #532]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800408a:	e018      	b.n	80040be <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800408c:	4b82      	ldr	r3, [pc, #520]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	4a81      	ldr	r2, [pc, #516]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800409c:	e00f      	b.n	80040be <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800409e:	4b7e      	ldr	r3, [pc, #504]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	4a7c      	ldr	r2, [pc, #496]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040ae:	4b7a      	ldr	r3, [pc, #488]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	4a78      	ldr	r2, [pc, #480]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 80040b6:	f023 0304 	bic.w	r3, r3, #4
 80040ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fd fa6d 	bl	80015a4 <HAL_GetTick>
 80040ca:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fd fa69 	bl	80015a4 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e17f      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e4:	4b6c      	ldr	r3, [pc, #432]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0ed      	beq.n	80040ce <HAL_RCC_OscConfig+0x5ea>
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fd fa56 	bl	80015a4 <HAL_GetTick>
 80040f8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fd fa52 	bl	80015a4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e168      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004112:	4b61      	ldr	r3, [pc, #388]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ed      	bne.n	80040fc <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004120:	4b5d      	ldr	r3, [pc, #372]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	4a5c      	ldr	r2, [pc, #368]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800412c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004138:	4b57      	ldr	r3, [pc, #348]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	4a56      	ldr	r2, [pc, #344]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 800413e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004142:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d03c      	beq.n	80041ca <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01c      	beq.n	8004192 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004158:	4b4f      	ldr	r3, [pc, #316]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 800415a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800415e:	4a4e      	ldr	r2, [pc, #312]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004168:	f7fd fa1c 	bl	80015a4 <HAL_GetTick>
 800416c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004170:	f7fd fa18 	bl	80015a4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e130      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004182:	4b45      	ldr	r3, [pc, #276]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0ef      	beq.n	8004170 <HAL_RCC_OscConfig+0x68c>
 8004190:	e01b      	b.n	80041ca <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004192:	4b41      	ldr	r3, [pc, #260]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004198:	4a3f      	ldr	r2, [pc, #252]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 800419a:	f023 0301 	bic.w	r3, r3, #1
 800419e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a2:	f7fd f9ff 	bl	80015a4 <HAL_GetTick>
 80041a6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041aa:	f7fd f9fb 	bl	80015a4 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e113      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041bc:	4b36      	ldr	r3, [pc, #216]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 80041be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1ef      	bne.n	80041aa <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8107 	beq.w	80043e2 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	2b02      	cmp	r3, #2
 80041da:	f040 80cf 	bne.w	800437c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0203 	and.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d12c      	bne.n	800424c <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	3b01      	subs	r3, #1
 80041fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d123      	bne.n	800424c <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d11b      	bne.n	800424c <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d113      	bne.n	800424c <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	3b01      	subs	r3, #1
 8004232:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d109      	bne.n	800424c <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	3b01      	subs	r3, #1
 8004246:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d071      	beq.n	8004330 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d06c      	beq.n	800432c <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d105      	bne.n	800426a <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0ba      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a09      	ldr	r2, [pc, #36]	; (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004278:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800427a:	f7fd f993 	bl	80015a4 <HAL_GetTick>
 800427e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004280:	e00c      	b.n	800429c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004282:	f7fd f98f 	bl	80015a4 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d905      	bls.n	800429c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e0a7      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
 8004294:	40007000 	.word	0x40007000
 8004298:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429c:	4b53      	ldr	r3, [pc, #332]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ec      	bne.n	8004282 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a8:	4b50      	ldr	r3, [pc, #320]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <HAL_RCC_OscConfig+0x90c>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042b8:	3a01      	subs	r2, #1
 80042ba:	0112      	lsls	r2, r2, #4
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042c2:	0212      	lsls	r2, r2, #8
 80042c4:	4311      	orrs	r1, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042ca:	0852      	lsrs	r2, r2, #1
 80042cc:	3a01      	subs	r2, #1
 80042ce:	0552      	lsls	r2, r2, #21
 80042d0:	4311      	orrs	r1, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042d6:	0852      	lsrs	r2, r2, #1
 80042d8:	3a01      	subs	r2, #1
 80042da:	0652      	lsls	r2, r2, #25
 80042dc:	4311      	orrs	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042e2:	06d2      	lsls	r2, r2, #27
 80042e4:	430a      	orrs	r2, r1
 80042e6:	4941      	ldr	r1, [pc, #260]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042ec:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3e      	ldr	r2, [pc, #248]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 80042f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f8:	4b3c      	ldr	r3, [pc, #240]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a3b      	ldr	r2, [pc, #236]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 80042fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004302:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004304:	f7fd f94e 	bl	80015a4 <HAL_GetTick>
 8004308:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fd f94a 	bl	80015a4 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e062      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431e:	4b33      	ldr	r3, [pc, #204]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800432a:	e05a      	b.n	80043e2 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e059      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004330:	4b2e      	ldr	r3, [pc, #184]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d152      	bne.n	80043e2 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800433c:	4b2b      	ldr	r3, [pc, #172]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2a      	ldr	r2, [pc, #168]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 8004342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004346:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004348:	4b28      	ldr	r3, [pc, #160]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4a27      	ldr	r2, [pc, #156]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 800434e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004352:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004354:	f7fd f926 	bl	80015a4 <HAL_GetTick>
 8004358:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435c:	f7fd f922 	bl	80015a4 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e03a      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436e:	4b1f      	ldr	r3, [pc, #124]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x878>
 800437a:	e032      	b.n	80043e2 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d02d      	beq.n	80043de <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a19      	ldr	r2, [pc, #100]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 8004388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800438c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800438e:	4b17      	ldr	r3, [pc, #92]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800439a:	4b14      	ldr	r3, [pc, #80]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4a13      	ldr	r2, [pc, #76]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 80043a0:	f023 0303 	bic.w	r3, r3, #3
 80043a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043a6:	4b11      	ldr	r3, [pc, #68]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	4a10      	ldr	r2, [pc, #64]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 80043ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b6:	f7fd f8f5 	bl	80015a4 <HAL_GetTick>
 80043ba:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043be:	f7fd f8f1 	bl	80015a4 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e009      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_RCC_OscConfig+0x908>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f0      	bne.n	80043be <HAL_RCC_OscConfig+0x8da>
 80043dc:	e001      	b.n	80043e2 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	019d800c 	.word	0x019d800c

080043f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e10f      	b.n	800462c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b89      	ldr	r3, [pc, #548]	; (8004634 <HAL_RCC_ClockConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d910      	bls.n	800443c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b86      	ldr	r3, [pc, #536]	; (8004634 <HAL_RCC_ClockConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 020f 	bic.w	r2, r3, #15
 8004422:	4984      	ldr	r1, [pc, #528]	; (8004634 <HAL_RCC_ClockConfig+0x240>)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b82      	ldr	r3, [pc, #520]	; (8004634 <HAL_RCC_ClockConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0f7      	b.n	800462c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8089 	beq.w	800455c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b03      	cmp	r3, #3
 8004450:	d133      	bne.n	80044ba <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004452:	4b79      	ldr	r3, [pc, #484]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e0e4      	b.n	800462c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004462:	f000 fa2d 	bl	80048c0 <RCC_GetSysClockFreqFromPLLSource>
 8004466:	4603      	mov	r3, r0
 8004468:	4a74      	ldr	r2, [pc, #464]	; (800463c <HAL_RCC_ClockConfig+0x248>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d955      	bls.n	800451a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800446e:	4b72      	ldr	r3, [pc, #456]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800447a:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004482:	4a6d      	ldr	r2, [pc, #436]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004488:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	e044      	b.n	800451a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d03e      	beq.n	800451a <HAL_RCC_ClockConfig+0x126>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d13a      	bne.n	800451a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044a4:	4b64      	ldr	r3, [pc, #400]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ac:	4a62      	ldr	r2, [pc, #392]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 80044ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e02f      	b.n	800451a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d107      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044c2:	4b5d      	ldr	r3, [pc, #372]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d115      	bne.n	80044fa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e0ac      	b.n	800462c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044da:	4b57      	ldr	r3, [pc, #348]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e0a0      	b.n	800462c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ea:	4b53      	ldr	r3, [pc, #332]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e098      	b.n	800462c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80044fa:	f000 f8a7 	bl	800464c <HAL_RCC_GetSysClockFreq>
 80044fe:	4603      	mov	r3, r0
 8004500:	4a4e      	ldr	r2, [pc, #312]	; (800463c <HAL_RCC_ClockConfig+0x248>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d909      	bls.n	800451a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004506:	4b4c      	ldr	r3, [pc, #304]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800450e:	4a4a      	ldr	r2, [pc, #296]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004514:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800451a:	4b47      	ldr	r3, [pc, #284]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 0203 	bic.w	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4944      	ldr	r1, [pc, #272]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004528:	4313      	orrs	r3, r2
 800452a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fd f83a 	bl	80015a4 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	e00a      	b.n	800454a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004534:	f7fd f836 	bl	80015a4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e070      	b.n	800462c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 020c 	and.w	r2, r3, #12
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	429a      	cmp	r2, r3
 800455a:	d1eb      	bne.n	8004534 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b33      	ldr	r3, [pc, #204]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4930      	ldr	r1, [pc, #192]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
 800457a:	e008      	b.n	800458e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b80      	cmp	r3, #128	; 0x80
 8004580:	d105      	bne.n	800458e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004582:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	4a2c      	ldr	r2, [pc, #176]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800458c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800458e:	4b29      	ldr	r3, [pc, #164]	; (8004634 <HAL_RCC_ClockConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d210      	bcs.n	80045be <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459c:	4b25      	ldr	r3, [pc, #148]	; (8004634 <HAL_RCC_ClockConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f023 020f 	bic.w	r2, r3, #15
 80045a4:	4923      	ldr	r1, [pc, #140]	; (8004634 <HAL_RCC_ClockConfig+0x240>)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ac:	4b21      	ldr	r3, [pc, #132]	; (8004634 <HAL_RCC_ClockConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d001      	beq.n	80045be <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e036      	b.n	800462c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ca:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4918      	ldr	r1, [pc, #96]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e8:	4b13      	ldr	r3, [pc, #76]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4910      	ldr	r1, [pc, #64]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045fc:	f000 f826 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <HAL_RCC_ClockConfig+0x244>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	490c      	ldr	r1, [pc, #48]	; (8004640 <HAL_RCC_ClockConfig+0x24c>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
 8004618:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <HAL_RCC_ClockConfig+0x250>)
 800461a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7fc fe97 	bl	8001354 <HAL_InitTick>
 8004626:	4603      	mov	r3, r0
 8004628:	73fb      	strb	r3, [r7, #15]

  return status;
 800462a:	7bfb      	ldrb	r3, [r7, #15]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40022000 	.word	0x40022000
 8004638:	40021000 	.word	0x40021000
 800463c:	04c4b400 	.word	0x04c4b400
 8004640:	080094fc 	.word	0x080094fc
 8004644:	20000170 	.word	0x20000170
 8004648:	20000174 	.word	0x20000174

0800464c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	; 0x24
 8004650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465a:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004664:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x34>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d121      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d11e      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004680:	4b34      	ldr	r3, [pc, #208]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800468c:	4b31      	ldr	r3, [pc, #196]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e005      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046a8:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d102      	bne.n	80046ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e004      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046d0:	4b23      	ldr	r3, [pc, #140]	; (8004760 <HAL_RCC_GetSysClockFreq+0x114>)
 80046d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d134      	bne.n	8004744 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046da:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d003      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d003      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0xac>
 80046f0:	e005      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046f2:	4b1a      	ldr	r3, [pc, #104]	; (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046f4:	617b      	str	r3, [r7, #20]
      break;
 80046f6:	e005      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046f8:	4b19      	ldr	r3, [pc, #100]	; (8004760 <HAL_RCC_GetSysClockFreq+0x114>)
 80046fa:	617b      	str	r3, [r7, #20]
      break;
 80046fc:	e002      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	617b      	str	r3, [r7, #20]
      break;
 8004702:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	3301      	adds	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	fb02 f203 	mul.w	r2, r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	0e5b      	lsrs	r3, r3, #25
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	3301      	adds	r3, #1
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004744:	69bb      	ldr	r3, [r7, #24]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	08009514 	.word	0x08009514
 800475c:	00f42400 	.word	0x00f42400
 8004760:	007a1200 	.word	0x007a1200

08004764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <HAL_RCC_GetHCLKFreq+0x14>)
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000170 	.word	0x20000170

0800477c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004780:	f7ff fff0 	bl	8004764 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	0800950c 	.word	0x0800950c

080047a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	220f      	movs	r2, #15
 80047b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0203 	and.w	r2, r3, #3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	08db      	lsrs	r3, r3, #3
 80047e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <HAL_RCC_GetClockConfig+0x60>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 020f 	and.w	r2, r3, #15
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	601a      	str	r2, [r3, #0]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	40022000 	.word	0x40022000

0800480c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004818:	4b27      	ldr	r3, [pc, #156]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004824:	f7ff f840 	bl	80038a8 <HAL_PWREx_GetVoltageRange>
 8004828:	6178      	str	r0, [r7, #20]
 800482a:	e014      	b.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800482c:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	6593      	str	r3, [r2, #88]	; 0x58
 8004838:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004844:	f7ff f830 	bl	80038a8 <HAL_PWREx_GetVoltageRange>
 8004848:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d10b      	bne.n	8004876 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d913      	bls.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2ba0      	cmp	r3, #160	; 0xa0
 8004868:	d902      	bls.n	8004870 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800486a:	2302      	movs	r3, #2
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	e00d      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004870:	2301      	movs	r3, #1
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	e00a      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b7f      	cmp	r3, #127	; 0x7f
 800487a:	d902      	bls.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800487c:	2302      	movs	r3, #2
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	e004      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b70      	cmp	r3, #112	; 0x70
 8004886:	d101      	bne.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004888:	2301      	movs	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 020f 	bic.w	r2, r3, #15
 8004894:	4909      	ldr	r1, [pc, #36]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d001      	beq.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40022000 	.word	0x40022000

080048c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80048ca:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d118      	bne.n	8004908 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048d6:	4b2a      	ldr	r3, [pc, #168]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d107      	bne.n	80048f2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048e2:	4b27      	ldr	r3, [pc, #156]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e005      	b.n	80048fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048f2:	4b23      	ldr	r3, [pc, #140]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048fe:	4a21      	ldr	r2, [pc, #132]	; (8004984 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004906:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004908:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d003      	beq.n	8004920 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d003      	beq.n	8004926 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800491e:	e005      	b.n	800492c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004922:	613b      	str	r3, [r7, #16]
    break;
 8004924:	e005      	b.n	8004932 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004926:	4b19      	ldr	r3, [pc, #100]	; (800498c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004928:	613b      	str	r3, [r7, #16]
    break;
 800492a:	e002      	b.n	8004932 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	613b      	str	r3, [r7, #16]
    break;
 8004930:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004932:	4b13      	ldr	r3, [pc, #76]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	3301      	adds	r3, #1
 800493e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	fb02 f203 	mul.w	r2, r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	fbb2 f3f3 	udiv	r3, r2, r3
 8004956:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004958:	4b09      	ldr	r3, [pc, #36]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	0e5b      	lsrs	r3, r3, #25
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	3301      	adds	r3, #1
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004972:	683b      	ldr	r3, [r7, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40021000 	.word	0x40021000
 8004984:	08009514 	.word	0x08009514
 8004988:	00f42400 	.word	0x00f42400
 800498c:	007a1200 	.word	0x007a1200

08004990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004998:	2300      	movs	r3, #0
 800499a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800499c:	2300      	movs	r3, #0
 800499e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d040      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b0:	2b80      	cmp	r3, #128	; 0x80
 80049b2:	d02a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d825      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049b8:	2b60      	cmp	r3, #96	; 0x60
 80049ba:	d026      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049bc:	2b60      	cmp	r3, #96	; 0x60
 80049be:	d821      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d006      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d81d      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d010      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80049d0:	e018      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049d2:	4b89      	ldr	r3, [pc, #548]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	4a88      	ldr	r2, [pc, #544]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049dc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049de:	e015      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fb3e 	bl	8005068 <RCCEx_PLLSAI1_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f0:	e00c      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3320      	adds	r3, #32
 80049f6:	2100      	movs	r1, #0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fc29 	bl	8005250 <RCCEx_PLLSAI2_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a02:	e003      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	74fb      	strb	r3, [r7, #19]
      break;
 8004a08:	e000      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a12:	4b79      	ldr	r3, [pc, #484]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a18:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a20:	4975      	ldr	r1, [pc, #468]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a28:	e001      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d047      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a42:	d030      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a48:	d82a      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4e:	d02a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a54:	d824      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a60:	d81e      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6a:	d010      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a6c:	e018      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a6e:	4b62      	ldr	r3, [pc, #392]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	4a61      	ldr	r2, [pc, #388]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a78:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a7a:	e015      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	2100      	movs	r1, #0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 faf0 	bl	8005068 <RCCEx_PLLSAI1_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a8c:	e00c      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3320      	adds	r3, #32
 8004a92:	2100      	movs	r1, #0
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fbdb 	bl	8005250 <RCCEx_PLLSAI2_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a9e:	e003      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	74fb      	strb	r3, [r7, #19]
      break;
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa8:	7cfb      	ldrb	r3, [r7, #19]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10b      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aae:	4b52      	ldr	r3, [pc, #328]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	494e      	ldr	r1, [pc, #312]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ac4:	e001      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac6:	7cfb      	ldrb	r3, [r7, #19]
 8004ac8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 809f 	beq.w	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004adc:	4b46      	ldr	r3, [pc, #280]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004aec:	2300      	movs	r3, #0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00d      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af2:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	4a40      	ldr	r2, [pc, #256]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afc:	6593      	str	r3, [r2, #88]	; 0x58
 8004afe:	4b3e      	ldr	r3, [pc, #248]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b0e:	4b3b      	ldr	r3, [pc, #236]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3a      	ldr	r2, [pc, #232]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b1a:	f7fc fd43 	bl	80015a4 <HAL_GetTick>
 8004b1e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b20:	e009      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b22:	f7fc fd3f 	bl	80015a4 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d902      	bls.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	74fb      	strb	r3, [r7, #19]
        break;
 8004b34:	e005      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b36:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0ef      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d15b      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b48:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b52:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01f      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d019      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b66:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b70:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b72:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	4a1f      	ldr	r2, [pc, #124]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b82:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b88:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b92:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d016      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fc fcfe 	bl	80015a4 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004baa:	e00b      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bac:	f7fc fcfa 	bl	80015a4 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d902      	bls.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	74fb      	strb	r3, [r7, #19]
            break;
 8004bc2:	e006      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0ec      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004bd2:	7cfb      	ldrb	r3, [r7, #19]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10c      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bd8:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be8:	4903      	ldr	r1, [pc, #12]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bf0:	e008      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf2:	7cfb      	ldrb	r3, [r7, #19]
 8004bf4:	74bb      	strb	r3, [r7, #18]
 8004bf6:	e005      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c04:	7c7b      	ldrb	r3, [r7, #17]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d105      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c0a:	4ba0      	ldr	r3, [pc, #640]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	4a9f      	ldr	r2, [pc, #636]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c22:	4b9a      	ldr	r3, [pc, #616]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f023 0203 	bic.w	r2, r3, #3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	4996      	ldr	r1, [pc, #600]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c44:	4b91      	ldr	r3, [pc, #580]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f023 020c 	bic.w	r2, r3, #12
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	498e      	ldr	r1, [pc, #568]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c66:	4b89      	ldr	r3, [pc, #548]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	4985      	ldr	r1, [pc, #532]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c88:	4b80      	ldr	r3, [pc, #512]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c96:	497d      	ldr	r1, [pc, #500]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004caa:	4b78      	ldr	r3, [pc, #480]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb8:	4974      	ldr	r1, [pc, #464]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ccc:	4b6f      	ldr	r3, [pc, #444]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	496c      	ldr	r1, [pc, #432]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cee:	4b67      	ldr	r3, [pc, #412]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cfc:	4963      	ldr	r1, [pc, #396]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d10:	4b5e      	ldr	r3, [pc, #376]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d1e:	495b      	ldr	r1, [pc, #364]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d32:	4b56      	ldr	r3, [pc, #344]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d40:	4952      	ldr	r1, [pc, #328]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d54:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	494a      	ldr	r1, [pc, #296]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d76:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	4941      	ldr	r1, [pc, #260]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d98:	4b3c      	ldr	r3, [pc, #240]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d9e:	f023 0203 	bic.w	r2, r3, #3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	4939      	ldr	r1, [pc, #228]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d028      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dba:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc8:	4930      	ldr	r1, [pc, #192]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd8:	d106      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dda:	4b2c      	ldr	r3, [pc, #176]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	4a2b      	ldr	r2, [pc, #172]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de4:	60d3      	str	r3, [r2, #12]
 8004de6:	e011      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3304      	adds	r3, #4
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f935 	bl	8005068 <RCCEx_PLLSAI1_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d04d      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e20:	d108      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e22:	4b1a      	ldr	r3, [pc, #104]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e32:	e012      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e3a:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e40:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e44:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e52:	490e      	ldr	r1, [pc, #56]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e62:	d106      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e64:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6e:	60d3      	str	r3, [r2, #12]
 8004e70:	e020      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e7a:	d109      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4a02      	ldr	r2, [pc, #8]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e86:	60d3      	str	r3, [r2, #12]
 8004e88:	e014      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f8e1 	bl	8005068 <RCCEx_PLLSAI1_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d028      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ec0:	4b68      	ldr	r3, [pc, #416]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ece:	4965      	ldr	r1, [pc, #404]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ede:	d106      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee0:	4b60      	ldr	r3, [pc, #384]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a5f      	ldr	r2, [pc, #380]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eea:	60d3      	str	r3, [r2, #12]
 8004eec:	e011      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef6:	d10c      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	2101      	movs	r1, #1
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f8b2 	bl	8005068 <RCCEx_PLLSAI1_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f0e:	7cfb      	ldrb	r3, [r7, #19]
 8004f10:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01e      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f1e:	4b51      	ldr	r3, [pc, #324]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f2e:	494d      	ldr	r1, [pc, #308]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
 8004f46:	2102      	movs	r1, #2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 f88d 	bl	8005068 <RCCEx_PLLSAI1_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f52:	7cfb      	ldrb	r3, [r7, #19]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00b      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f68:	4b3e      	ldr	r3, [pc, #248]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f6e:	f023 0204 	bic.w	r2, r3, #4
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f78:	493a      	ldr	r1, [pc, #232]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f8c:	4b35      	ldr	r3, [pc, #212]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f92:	f023 0218 	bic.w	r2, r3, #24
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	4931      	ldr	r1, [pc, #196]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d035      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fb0:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2b      	ldr	r2, [pc, #172]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fbc:	f7fc faf2 	bl	80015a4 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fc2:	e009      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fc4:	f7fc faee 	bl	80015a4 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d902      	bls.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	74fb      	strb	r3, [r7, #19]
        break;
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fd8:	4b22      	ldr	r3, [pc, #136]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ef      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d113      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004fea:	4b1e      	ldr	r3, [pc, #120]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ffa:	491a      	ldr	r1, [pc, #104]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3320      	adds	r3, #32
 8005006:	2102      	movs	r1, #2
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f921 	bl	8005250 <RCCEx_PLLSAI2_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005012:	7cfb      	ldrb	r3, [r7, #19]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005018:	7cfb      	ldrb	r3, [r7, #19]
 800501a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d017      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005028:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800502a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800502e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005038:	490a      	ldr	r1, [pc, #40]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800504a:	d105      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4a04      	ldr	r2, [pc, #16]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005056:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005058:	7cbb      	ldrb	r3, [r7, #18]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000

08005068 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005076:	4b72      	ldr	r3, [pc, #456]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00e      	beq.n	80050a0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005082:	4b6f      	ldr	r3, [pc, #444]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0203 	and.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d103      	bne.n	800509a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
       ||
 8005096:	2b00      	cmp	r3, #0
 8005098:	d142      	bne.n	8005120 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
 800509e:	e03f      	b.n	8005120 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d018      	beq.n	80050da <RCCEx_PLLSAI1_Config+0x72>
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d825      	bhi.n	80050f8 <RCCEx_PLLSAI1_Config+0x90>
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d002      	beq.n	80050b6 <RCCEx_PLLSAI1_Config+0x4e>
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d009      	beq.n	80050c8 <RCCEx_PLLSAI1_Config+0x60>
 80050b4:	e020      	b.n	80050f8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050b6:	4b62      	ldr	r3, [pc, #392]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d11d      	bne.n	80050fe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c6:	e01a      	b.n	80050fe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050c8:	4b5d      	ldr	r3, [pc, #372]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d116      	bne.n	8005102 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d8:	e013      	b.n	8005102 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050da:	4b59      	ldr	r3, [pc, #356]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10f      	bne.n	8005106 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050e6:	4b56      	ldr	r3, [pc, #344]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050f6:	e006      	b.n	8005106 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
      break;
 80050fc:	e004      	b.n	8005108 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050fe:	bf00      	nop
 8005100:	e002      	b.n	8005108 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005102:	bf00      	nop
 8005104:	e000      	b.n	8005108 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005106:	bf00      	nop
    }

    if(status == HAL_OK)
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d108      	bne.n	8005120 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800510e:	4b4c      	ldr	r3, [pc, #304]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f023 0203 	bic.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4949      	ldr	r1, [pc, #292]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 800511c:	4313      	orrs	r3, r2
 800511e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 8086 	bne.w	8005234 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005128:	4b45      	ldr	r3, [pc, #276]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a44      	ldr	r2, [pc, #272]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 800512e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005134:	f7fc fa36 	bl	80015a4 <HAL_GetTick>
 8005138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800513a:	e009      	b.n	8005150 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800513c:	f7fc fa32 	bl	80015a4 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d902      	bls.n	8005150 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	73fb      	strb	r3, [r7, #15]
        break;
 800514e:	e005      	b.n	800515c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005150:	4b3b      	ldr	r3, [pc, #236]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ef      	bne.n	800513c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d168      	bne.n	8005234 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d113      	bne.n	8005190 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005168:	4b35      	ldr	r3, [pc, #212]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	4b35      	ldr	r3, [pc, #212]	; (8005244 <RCCEx_PLLSAI1_Config+0x1dc>)
 800516e:	4013      	ands	r3, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6892      	ldr	r2, [r2, #8]
 8005174:	0211      	lsls	r1, r2, #8
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	68d2      	ldr	r2, [r2, #12]
 800517a:	06d2      	lsls	r2, r2, #27
 800517c:	4311      	orrs	r1, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6852      	ldr	r2, [r2, #4]
 8005182:	3a01      	subs	r2, #1
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	430a      	orrs	r2, r1
 8005188:	492d      	ldr	r1, [pc, #180]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 800518a:	4313      	orrs	r3, r2
 800518c:	610b      	str	r3, [r1, #16]
 800518e:	e02d      	b.n	80051ec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d115      	bne.n	80051c2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005196:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	4b2b      	ldr	r3, [pc, #172]	; (8005248 <RCCEx_PLLSAI1_Config+0x1e0>)
 800519c:	4013      	ands	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6892      	ldr	r2, [r2, #8]
 80051a2:	0211      	lsls	r1, r2, #8
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6912      	ldr	r2, [r2, #16]
 80051a8:	0852      	lsrs	r2, r2, #1
 80051aa:	3a01      	subs	r2, #1
 80051ac:	0552      	lsls	r2, r2, #21
 80051ae:	4311      	orrs	r1, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6852      	ldr	r2, [r2, #4]
 80051b4:	3a01      	subs	r2, #1
 80051b6:	0112      	lsls	r2, r2, #4
 80051b8:	430a      	orrs	r2, r1
 80051ba:	4921      	ldr	r1, [pc, #132]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	610b      	str	r3, [r1, #16]
 80051c0:	e014      	b.n	80051ec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051c2:	4b1f      	ldr	r3, [pc, #124]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	4b21      	ldr	r3, [pc, #132]	; (800524c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6892      	ldr	r2, [r2, #8]
 80051ce:	0211      	lsls	r1, r2, #8
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6952      	ldr	r2, [r2, #20]
 80051d4:	0852      	lsrs	r2, r2, #1
 80051d6:	3a01      	subs	r2, #1
 80051d8:	0652      	lsls	r2, r2, #25
 80051da:	4311      	orrs	r1, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6852      	ldr	r2, [r2, #4]
 80051e0:	3a01      	subs	r2, #1
 80051e2:	0112      	lsls	r2, r2, #4
 80051e4:	430a      	orrs	r2, r1
 80051e6:	4916      	ldr	r1, [pc, #88]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051ec:	4b14      	ldr	r3, [pc, #80]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fc f9d4 	bl	80015a4 <HAL_GetTick>
 80051fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051fe:	e009      	b.n	8005214 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005200:	f7fc f9d0 	bl	80015a4 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d902      	bls.n	8005214 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	73fb      	strb	r3, [r7, #15]
          break;
 8005212:	e005      	b.n	8005220 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0ef      	beq.n	8005200 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005226:	4b06      	ldr	r3, [pc, #24]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	4904      	ldr	r1, [pc, #16]	; (8005240 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005230:	4313      	orrs	r3, r2
 8005232:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005234:	7bfb      	ldrb	r3, [r7, #15]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40021000 	.word	0x40021000
 8005244:	07ff800f 	.word	0x07ff800f
 8005248:	ff9f800f 	.word	0xff9f800f
 800524c:	f9ff800f 	.word	0xf9ff800f

08005250 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800525e:	4b72      	ldr	r3, [pc, #456]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00e      	beq.n	8005288 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800526a:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f003 0203 	and.w	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d103      	bne.n	8005282 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
       ||
 800527e:	2b00      	cmp	r3, #0
 8005280:	d142      	bne.n	8005308 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
 8005286:	e03f      	b.n	8005308 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b03      	cmp	r3, #3
 800528e:	d018      	beq.n	80052c2 <RCCEx_PLLSAI2_Config+0x72>
 8005290:	2b03      	cmp	r3, #3
 8005292:	d825      	bhi.n	80052e0 <RCCEx_PLLSAI2_Config+0x90>
 8005294:	2b01      	cmp	r3, #1
 8005296:	d002      	beq.n	800529e <RCCEx_PLLSAI2_Config+0x4e>
 8005298:	2b02      	cmp	r3, #2
 800529a:	d009      	beq.n	80052b0 <RCCEx_PLLSAI2_Config+0x60>
 800529c:	e020      	b.n	80052e0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800529e:	4b62      	ldr	r3, [pc, #392]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d11d      	bne.n	80052e6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ae:	e01a      	b.n	80052e6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052b0:	4b5d      	ldr	r3, [pc, #372]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d116      	bne.n	80052ea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052c0:	e013      	b.n	80052ea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052c2:	4b59      	ldr	r3, [pc, #356]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10f      	bne.n	80052ee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052ce:	4b56      	ldr	r3, [pc, #344]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052de:	e006      	b.n	80052ee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
      break;
 80052e4:	e004      	b.n	80052f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052e6:	bf00      	nop
 80052e8:	e002      	b.n	80052f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052ea:	bf00      	nop
 80052ec:	e000      	b.n	80052f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d108      	bne.n	8005308 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80052f6:	4b4c      	ldr	r3, [pc, #304]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f023 0203 	bic.w	r2, r3, #3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4949      	ldr	r1, [pc, #292]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005304:	4313      	orrs	r3, r2
 8005306:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f040 8086 	bne.w	800541c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005310:	4b45      	ldr	r3, [pc, #276]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a44      	ldr	r2, [pc, #272]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531c:	f7fc f942 	bl	80015a4 <HAL_GetTick>
 8005320:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005322:	e009      	b.n	8005338 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005324:	f7fc f93e 	bl	80015a4 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d902      	bls.n	8005338 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	73fb      	strb	r3, [r7, #15]
        break;
 8005336:	e005      	b.n	8005344 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005338:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ef      	bne.n	8005324 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d168      	bne.n	800541c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d113      	bne.n	8005378 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005350:	4b35      	ldr	r3, [pc, #212]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	4b35      	ldr	r3, [pc, #212]	; (800542c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005356:	4013      	ands	r3, r2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6892      	ldr	r2, [r2, #8]
 800535c:	0211      	lsls	r1, r2, #8
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68d2      	ldr	r2, [r2, #12]
 8005362:	06d2      	lsls	r2, r2, #27
 8005364:	4311      	orrs	r1, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6852      	ldr	r2, [r2, #4]
 800536a:	3a01      	subs	r2, #1
 800536c:	0112      	lsls	r2, r2, #4
 800536e:	430a      	orrs	r2, r1
 8005370:	492d      	ldr	r1, [pc, #180]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005372:	4313      	orrs	r3, r2
 8005374:	614b      	str	r3, [r1, #20]
 8005376:	e02d      	b.n	80053d4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d115      	bne.n	80053aa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800537e:	4b2a      	ldr	r3, [pc, #168]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005380:	695a      	ldr	r2, [r3, #20]
 8005382:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005384:	4013      	ands	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6892      	ldr	r2, [r2, #8]
 800538a:	0211      	lsls	r1, r2, #8
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6912      	ldr	r2, [r2, #16]
 8005390:	0852      	lsrs	r2, r2, #1
 8005392:	3a01      	subs	r2, #1
 8005394:	0552      	lsls	r2, r2, #21
 8005396:	4311      	orrs	r1, r2
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6852      	ldr	r2, [r2, #4]
 800539c:	3a01      	subs	r2, #1
 800539e:	0112      	lsls	r2, r2, #4
 80053a0:	430a      	orrs	r2, r1
 80053a2:	4921      	ldr	r1, [pc, #132]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	614b      	str	r3, [r1, #20]
 80053a8:	e014      	b.n	80053d4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053aa:	4b1f      	ldr	r3, [pc, #124]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	4b21      	ldr	r3, [pc, #132]	; (8005434 <RCCEx_PLLSAI2_Config+0x1e4>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6892      	ldr	r2, [r2, #8]
 80053b6:	0211      	lsls	r1, r2, #8
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6952      	ldr	r2, [r2, #20]
 80053bc:	0852      	lsrs	r2, r2, #1
 80053be:	3a01      	subs	r2, #1
 80053c0:	0652      	lsls	r2, r2, #25
 80053c2:	4311      	orrs	r1, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6852      	ldr	r2, [r2, #4]
 80053c8:	3a01      	subs	r2, #1
 80053ca:	0112      	lsls	r2, r2, #4
 80053cc:	430a      	orrs	r2, r1
 80053ce:	4916      	ldr	r1, [pc, #88]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80053d4:	4b14      	ldr	r3, [pc, #80]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a13      	ldr	r2, [pc, #76]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e0:	f7fc f8e0 	bl	80015a4 <HAL_GetTick>
 80053e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053e6:	e009      	b.n	80053fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053e8:	f7fc f8dc 	bl	80015a4 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d902      	bls.n	80053fc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	73fb      	strb	r3, [r7, #15]
          break;
 80053fa:	e005      	b.n	8005408 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053fc:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0ef      	beq.n	80053e8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	4904      	ldr	r1, [pc, #16]	; (8005428 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005418:	4313      	orrs	r3, r2
 800541a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	07ff800f 	.word	0x07ff800f
 8005430:	ff9f800f 	.word	0xff9f800f
 8005434:	f9ff800f 	.word	0xf9ff800f

08005438 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d07f      	beq.n	800554a <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fb fe8a 	bl	8001178 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800546a:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	22ca      	movs	r2, #202	; 0xca
 800547a:	625a      	str	r2, [r3, #36]	; 0x24
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2253      	movs	r2, #83	; 0x53
 8005482:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f9b5 	bl	80057f4 <RTC_EnterInitMode>
 800548a:	4603      	mov	r3, r0
 800548c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d15a      	bne.n	800554a <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80054a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a6:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6999      	ldr	r1, [r3, #24]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6912      	ldr	r2, [r2, #16]
 80054ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6919      	ldr	r1, [r3, #16]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	041a      	lsls	r2, r3, #16
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80054e4:	4b1b      	ldr	r3, [pc, #108]	; (8005554 <HAL_RTC_Init+0x11c>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	430b      	orrs	r3, r1
 80054f6:	4917      	ldr	r1, [pc, #92]	; (8005554 <HAL_RTC_Init+0x11c>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f9af 	bl	8005860 <RTC_ExitInitMode>
 8005502:	4603      	mov	r3, r0
 8005504:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d11e      	bne.n	800554a <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800551a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6999      	ldr	r1, [r3, #24]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	22ff      	movs	r2, #255	; 0xff
 8005540:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800554a:	7bfb      	ldrb	r3, [r7, #15]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40002800 	.word	0x40002800

08005558 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_RTC_SetTime+0x1a>
 800556e:	2302      	movs	r3, #2
 8005570:	e08b      	b.n	800568a <HAL_RTC_SetTime+0x132>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	22ca      	movs	r2, #202	; 0xca
 8005588:	625a      	str	r2, [r3, #36]	; 0x24
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2253      	movs	r2, #83	; 0x53
 8005590:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f92e 	bl	80057f4 <RTC_EnterInitMode>
 8005598:	4603      	mov	r3, r0
 800559a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d15e      	bne.n	8005660 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80055a2:	4b3c      	ldr	r3, [pc, #240]	; (8005694 <HAL_RTC_SetTime+0x13c>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ae:	d057      	beq.n	8005660 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d125      	bne.n	8005602 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80055b6:	4b37      	ldr	r3, [pc, #220]	; (8005694 <HAL_RTC_SetTime+0x13c>)
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2200      	movs	r2, #0
 80055c6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 f985 	bl	80058dc <RTC_ByteToBcd2>
 80055d2:	4603      	mov	r3, r0
 80055d4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f97e 	bl	80058dc <RTC_ByteToBcd2>
 80055e0:	4603      	mov	r3, r0
 80055e2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055e4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	789b      	ldrb	r3, [r3, #2]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f976 	bl	80058dc <RTC_ByteToBcd2>
 80055f0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055f2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	78db      	ldrb	r3, [r3, #3]
 80055fa:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e017      	b.n	8005632 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005602:	4b24      	ldr	r3, [pc, #144]	; (8005694 <HAL_RTC_SetTime+0x13c>)
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2200      	movs	r2, #0
 8005612:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005620:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005626:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	78db      	ldrb	r3, [r3, #3]
 800562c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005632:	4a18      	ldr	r2, [pc, #96]	; (8005694 <HAL_RTC_SetTime+0x13c>)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800563a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800563e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005640:	4b14      	ldr	r3, [pc, #80]	; (8005694 <HAL_RTC_SetTime+0x13c>)
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	4a13      	ldr	r2, [pc, #76]	; (8005694 <HAL_RTC_SetTime+0x13c>)
 8005646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800564c:	4b11      	ldr	r3, [pc, #68]	; (8005694 <HAL_RTC_SetTime+0x13c>)
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	68d9      	ldr	r1, [r3, #12]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	430b      	orrs	r3, r1
 800565a:	490e      	ldr	r1, [pc, #56]	; (8005694 <HAL_RTC_SetTime+0x13c>)
 800565c:	4313      	orrs	r3, r2
 800565e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f8fd 	bl	8005860 <RTC_ExitInitMode>
 8005666:	4603      	mov	r3, r0
 8005668:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	22ff      	movs	r2, #255	; 0xff
 8005670:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005672:	7cfb      	ldrb	r3, [r7, #19]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005688:	7cfb      	ldrb	r3, [r7, #19]
}
 800568a:	4618      	mov	r0, r3
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	bd90      	pop	{r4, r7, pc}
 8005692:	bf00      	nop
 8005694:	40002800 	.word	0x40002800

08005698 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005698:	b590      	push	{r4, r7, lr}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_RTC_SetDate+0x1a>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e074      	b.n	800579c <HAL_RTC_SetDate+0x104>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10e      	bne.n	80056e6 <HAL_RTC_SetDate+0x4e>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	f023 0310 	bic.w	r3, r3, #16
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	330a      	adds	r3, #10
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11c      	bne.n	8005726 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	78db      	ldrb	r3, [r3, #3]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 f8f3 	bl	80058dc <RTC_ByteToBcd2>
 80056f6:	4603      	mov	r3, r0
 80056f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f8ec 	bl	80058dc <RTC_ByteToBcd2>
 8005704:	4603      	mov	r3, r0
 8005706:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005708:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	789b      	ldrb	r3, [r3, #2]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f8e4 	bl	80058dc <RTC_ByteToBcd2>
 8005714:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005716:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	e00e      	b.n	8005744 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	78db      	ldrb	r3, [r3, #3]
 800572a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005732:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005738:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	22ca      	movs	r2, #202	; 0xca
 800574a:	625a      	str	r2, [r3, #36]	; 0x24
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2253      	movs	r2, #83	; 0x53
 8005752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f84d 	bl	80057f4 <RTC_EnterInitMode>
 800575a:	4603      	mov	r3, r0
 800575c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800575e:	7cfb      	ldrb	r3, [r7, #19]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10b      	bne.n	800577c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005764:	4a0f      	ldr	r2, [pc, #60]	; (80057a4 <HAL_RTC_SetDate+0x10c>)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800576c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005770:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f874 	bl	8005860 <RTC_ExitInitMode>
 8005778:	4603      	mov	r3, r0
 800577a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	22ff      	movs	r2, #255	; 0xff
 8005782:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005784:	7cfb      	ldrb	r3, [r7, #19]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800579a:	7cfb      	ldrb	r3, [r7, #19]
}
 800579c:	4618      	mov	r0, r3
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd90      	pop	{r4, r7, pc}
 80057a4:	40002800 	.word	0x40002800

080057a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057be:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 80057c0:	f7fb fef0 	bl	80015a4 <HAL_GetTick>
 80057c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80057c6:	e009      	b.n	80057dc <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057c8:	f7fb feec 	bl	80015a4 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057d6:	d901      	bls.n	80057dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e007      	b.n	80057ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0ee      	beq.n	80057c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d123      	bne.n	8005856 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800581c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800581e:	f7fb fec1 	bl	80015a4 <HAL_GetTick>
 8005822:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005824:	e00d      	b.n	8005842 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005826:	f7fb febd 	bl	80015a4 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005834:	d905      	bls.n	8005842 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2203      	movs	r2, #3
 800583e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <RTC_EnterInitMode+0x62>
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	2b03      	cmp	r3, #3
 8005854:	d1e7      	bne.n	8005826 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800586c:	4b1a      	ldr	r3, [pc, #104]	; (80058d8 <RTC_ExitInitMode+0x78>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4a19      	ldr	r2, [pc, #100]	; (80058d8 <RTC_ExitInitMode+0x78>)
 8005872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005876:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005878:	4b17      	ldr	r3, [pc, #92]	; (80058d8 <RTC_ExitInitMode+0x78>)
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10c      	bne.n	800589e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff ff8f 	bl	80057a8 <HAL_RTC_WaitForSynchro>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01e      	beq.n	80058ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2203      	movs	r2, #3
 8005894:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	73fb      	strb	r3, [r7, #15]
 800589c:	e017      	b.n	80058ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800589e:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <RTC_ExitInitMode+0x78>)
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <RTC_ExitInitMode+0x78>)
 80058a4:	f023 0320 	bic.w	r3, r3, #32
 80058a8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff ff7c 	bl	80057a8 <HAL_RTC_WaitForSynchro>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2203      	movs	r2, #3
 80058ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <RTC_ExitInitMode+0x78>)
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <RTC_ExitInitMode+0x78>)
 80058c8:	f043 0320 	orr.w	r3, r3, #32
 80058cc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40002800 	.word	0x40002800

080058dc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80058ee:	e005      	b.n	80058fc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80058f6:	7afb      	ldrb	r3, [r7, #11]
 80058f8:	3b0a      	subs	r3, #10
 80058fa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80058fc:	7afb      	ldrb	r3, [r7, #11]
 80058fe:	2b09      	cmp	r3, #9
 8005900:	d8f6      	bhi.n	80058f0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	b2da      	uxtb	r2, r3
 800590a:	7afb      	ldrb	r3, [r7, #11]
 800590c:	4313      	orrs	r3, r2
 800590e:	b2db      	uxtb	r3, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e095      	b.n	8005a5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	d108      	bne.n	8005948 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593e:	d009      	beq.n	8005954 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	61da      	str	r2, [r3, #28]
 8005946:	e005      	b.n	8005954 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fb fc7e 	bl	8001270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005994:	d902      	bls.n	800599c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e002      	b.n	80059a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800599c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059aa:	d007      	beq.n	80059bc <HAL_SPI_Init+0xa0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059b4:	d002      	beq.n	80059bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	ea42 0103 	orr.w	r1, r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	f003 0204 	and.w	r2, r3, #4
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a38:	ea42 0103 	orr.w	r1, r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b088      	sub	sp, #32
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_SPI_Transmit+0x22>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e158      	b.n	8005d36 <HAL_SPI_Transmit+0x2d4>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a8c:	f7fb fd8a 	bl	80015a4 <HAL_GetTick>
 8005a90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d002      	beq.n	8005aa8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005aa6:	e13d      	b.n	8005d24 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_SPI_Transmit+0x52>
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ab8:	e134      	b.n	8005d24 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2203      	movs	r2, #3
 8005abe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	88fa      	ldrh	r2, [r7, #6]
 8005ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b04:	d10f      	bne.n	8005b26 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d007      	beq.n	8005b44 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b4c:	d94b      	bls.n	8005be6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_Transmit+0xfa>
 8005b56:	8afb      	ldrh	r3, [r7, #22]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d13e      	bne.n	8005bda <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	1c9a      	adds	r2, r3, #2
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b80:	e02b      	b.n	8005bda <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d112      	bne.n	8005bb6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	881a      	ldrh	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	1c9a      	adds	r2, r3, #2
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bb4:	e011      	b.n	8005bda <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb6:	f7fb fcf5 	bl	80015a4 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d803      	bhi.n	8005bce <HAL_SPI_Transmit+0x16c>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d102      	bne.n	8005bd4 <HAL_SPI_Transmit+0x172>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bd8:	e0a4      	b.n	8005d24 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ce      	bne.n	8005b82 <HAL_SPI_Transmit+0x120>
 8005be4:	e07c      	b.n	8005ce0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_SPI_Transmit+0x192>
 8005bee:	8afb      	ldrh	r3, [r7, #22]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d170      	bne.n	8005cd6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d912      	bls.n	8005c24 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	881a      	ldrh	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	1c9a      	adds	r2, r3, #2
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b02      	subs	r3, #2
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c22:	e058      	b.n	8005cd6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c4a:	e044      	b.n	8005cd6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d12b      	bne.n	8005cb2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d912      	bls.n	8005c8a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	881a      	ldrh	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	1c9a      	adds	r2, r3, #2
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b02      	subs	r3, #2
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c88:	e025      	b.n	8005cd6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	7812      	ldrb	r2, [r2, #0]
 8005c96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cb0:	e011      	b.n	8005cd6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cb2:	f7fb fc77 	bl	80015a4 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d803      	bhi.n	8005cca <HAL_SPI_Transmit+0x268>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d102      	bne.n	8005cd0 <HAL_SPI_Transmit+0x26e>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cd4:	e026      	b.n	8005d24 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1b5      	bne.n	8005c4c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fce3 	bl	80066b0 <SPI_EndRxTxTransaction>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	77fb      	strb	r3, [r7, #31]
 8005d20:	e000      	b.n	8005d24 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005d22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d34:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3720      	adds	r7, #32
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b088      	sub	sp, #32
 8005d42:	af02      	add	r7, sp, #8
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	603b      	str	r3, [r7, #0]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d5a:	d112      	bne.n	8005d82 <HAL_SPI_Receive+0x44>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10e      	bne.n	8005d82 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2204      	movs	r2, #4
 8005d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	4613      	mov	r3, r2
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f910 	bl	8005f9e <HAL_SPI_TransmitReceive>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	e109      	b.n	8005f96 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_SPI_Receive+0x52>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e102      	b.n	8005f96 <HAL_SPI_Receive+0x258>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d98:	f7fb fc04 	bl	80015a4 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d002      	beq.n	8005db0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005daa:	2302      	movs	r3, #2
 8005dac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dae:	e0e9      	b.n	8005f84 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <HAL_SPI_Receive+0x7e>
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dc0:	e0e0      	b.n	8005f84 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	88fa      	ldrh	r2, [r7, #6]
 8005dda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e0c:	d908      	bls.n	8005e20 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	e007      	b.n	8005e30 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e2e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e38:	d10f      	bne.n	8005e5a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b40      	cmp	r3, #64	; 0x40
 8005e66:	d007      	beq.n	8005e78 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e80:	d867      	bhi.n	8005f52 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e82:	e030      	b.n	8005ee6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d117      	bne.n	8005ec2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f103 020c 	add.w	r2, r3, #12
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ec0:	e011      	b.n	8005ee6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ec2:	f7fb fb6f 	bl	80015a4 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d803      	bhi.n	8005eda <HAL_SPI_Receive+0x19c>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d102      	bne.n	8005ee0 <HAL_SPI_Receive+0x1a2>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ee4:	e04e      	b.n	8005f84 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1c8      	bne.n	8005e84 <HAL_SPI_Receive+0x146>
 8005ef2:	e034      	b.n	8005f5e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d115      	bne.n	8005f2e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	b292      	uxth	r2, r2
 8005f0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	1c9a      	adds	r2, r3, #2
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f2c:	e011      	b.n	8005f52 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f2e:	f7fb fb39 	bl	80015a4 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d803      	bhi.n	8005f46 <HAL_SPI_Receive+0x208>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d102      	bne.n	8005f4c <HAL_SPI_Receive+0x20e>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f50:	e018      	b.n	8005f84 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1ca      	bne.n	8005ef4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fb4c 	bl	8006600 <SPI_EndRxTransaction>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	75fb      	strb	r3, [r7, #23]
 8005f80:	e000      	b.n	8005f84 <HAL_SPI_Receive+0x246>
  }

error :
 8005f82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b08a      	sub	sp, #40	; 0x28
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fac:	2301      	movs	r3, #1
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x26>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e1fb      	b.n	80063bc <HAL_SPI_TransmitReceive+0x41e>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fcc:	f7fb faea 	bl	80015a4 <HAL_GetTick>
 8005fd0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fd8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005fe0:	887b      	ldrh	r3, [r7, #2]
 8005fe2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005fe4:	887b      	ldrh	r3, [r7, #2]
 8005fe6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fe8:	7efb      	ldrb	r3, [r7, #27]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d00e      	beq.n	800600c <HAL_SPI_TransmitReceive+0x6e>
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff4:	d106      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x66>
 8005ffe:	7efb      	ldrb	r3, [r7, #27]
 8006000:	2b04      	cmp	r3, #4
 8006002:	d003      	beq.n	800600c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006004:	2302      	movs	r3, #2
 8006006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800600a:	e1cd      	b.n	80063a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_SPI_TransmitReceive+0x80>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_SPI_TransmitReceive+0x80>
 8006018:	887b      	ldrh	r3, [r7, #2]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006024:	e1c0      	b.n	80063a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b04      	cmp	r3, #4
 8006030:	d003      	beq.n	800603a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2205      	movs	r2, #5
 8006036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	887a      	ldrh	r2, [r7, #2]
 800604a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	887a      	ldrh	r2, [r7, #2]
 8006052:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	887a      	ldrh	r2, [r7, #2]
 8006060:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	887a      	ldrh	r2, [r7, #2]
 8006066:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800607c:	d802      	bhi.n	8006084 <HAL_SPI_TransmitReceive+0xe6>
 800607e:	8a3b      	ldrh	r3, [r7, #16]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d908      	bls.n	8006096 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006092:	605a      	str	r2, [r3, #4]
 8006094:	e007      	b.n	80060a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d007      	beq.n	80060c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060cc:	d97c      	bls.n	80061c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_SPI_TransmitReceive+0x13e>
 80060d6:	8a7b      	ldrh	r3, [r7, #18]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d169      	bne.n	80061b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	881a      	ldrh	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	1c9a      	adds	r2, r3, #2
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006100:	e056      	b.n	80061b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b02      	cmp	r3, #2
 800610e:	d11b      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x1aa>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d016      	beq.n	8006148 <HAL_SPI_TransmitReceive+0x1aa>
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	2b01      	cmp	r3, #1
 800611e:	d113      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	881a      	ldrh	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	1c9a      	adds	r2, r3, #2
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b01      	cmp	r3, #1
 8006154:	d11c      	bne.n	8006190 <HAL_SPI_TransmitReceive+0x1f2>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	b292      	uxth	r2, r2
 800616e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	1c9a      	adds	r2, r3, #2
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800618c:	2301      	movs	r3, #1
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006190:	f7fb fa08 	bl	80015a4 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800619c:	429a      	cmp	r2, r3
 800619e:	d807      	bhi.n	80061b0 <HAL_SPI_TransmitReceive+0x212>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d003      	beq.n	80061b0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061ae:	e0fb      	b.n	80063a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1a3      	bne.n	8006102 <HAL_SPI_TransmitReceive+0x164>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d19d      	bne.n	8006102 <HAL_SPI_TransmitReceive+0x164>
 80061c6:	e0df      	b.n	8006388 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_SPI_TransmitReceive+0x23a>
 80061d0:	8a7b      	ldrh	r3, [r7, #18]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	f040 80cb 	bne.w	800636e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d912      	bls.n	8006208 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	881a      	ldrh	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	1c9a      	adds	r2, r3, #2
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b02      	subs	r3, #2
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006206:	e0b2      	b.n	800636e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	330c      	adds	r3, #12
 8006212:	7812      	ldrb	r2, [r2, #0]
 8006214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800622e:	e09e      	b.n	800636e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b02      	cmp	r3, #2
 800623c:	d134      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x30a>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d02f      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x30a>
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	2b01      	cmp	r3, #1
 800624c:	d12c      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006252:	b29b      	uxth	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	d912      	bls.n	800627e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	881a      	ldrh	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	1c9a      	adds	r2, r3, #2
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b02      	subs	r3, #2
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800627c:	e012      	b.n	80062a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	7812      	ldrb	r2, [r2, #0]
 800628a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d148      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x3aa>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d042      	beq.n	8006348 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d923      	bls.n	8006316 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	b292      	uxth	r2, r2
 80062da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	1c9a      	adds	r2, r3, #2
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b02      	subs	r3, #2
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	d81f      	bhi.n	8006344 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006312:	605a      	str	r2, [r3, #4]
 8006314:	e016      	b.n	8006344 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f103 020c 	add.w	r2, r3, #12
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	7812      	ldrb	r2, [r2, #0]
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006344:	2301      	movs	r3, #1
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006348:	f7fb f92c 	bl	80015a4 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006354:	429a      	cmp	r2, r3
 8006356:	d803      	bhi.n	8006360 <HAL_SPI_TransmitReceive+0x3c2>
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d102      	bne.n	8006366 <HAL_SPI_TransmitReceive+0x3c8>
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800636c:	e01c      	b.n	80063a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	f47f af5b 	bne.w	8006230 <HAL_SPI_TransmitReceive+0x292>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	f47f af54 	bne.w	8006230 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f98f 	bl	80066b0 <SPI_EndRxTxTransaction>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d006      	beq.n	80063a6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	661a      	str	r2, [r3, #96]	; 0x60
 80063a4:	e000      	b.n	80063a8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80063a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3728      	adds	r7, #40	; 0x28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	4613      	mov	r3, r2
 80063d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063d4:	f7fb f8e6 	bl	80015a4 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	1a9b      	subs	r3, r3, r2
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	4413      	add	r3, r2
 80063e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063e4:	f7fb f8de 	bl	80015a4 <HAL_GetTick>
 80063e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063ea:	4b39      	ldr	r3, [pc, #228]	; (80064d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	015b      	lsls	r3, r3, #5
 80063f0:	0d1b      	lsrs	r3, r3, #20
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063fa:	e054      	b.n	80064a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d050      	beq.n	80064a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006404:	f7fb f8ce 	bl	80015a4 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	429a      	cmp	r2, r3
 8006412:	d902      	bls.n	800641a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d13d      	bne.n	8006496 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006428:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006432:	d111      	bne.n	8006458 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643c:	d004      	beq.n	8006448 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006446:	d107      	bne.n	8006458 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006456:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006460:	d10f      	bne.n	8006482 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006480:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e017      	b.n	80064c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4013      	ands	r3, r2
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	bf0c      	ite	eq
 80064b6:	2301      	moveq	r3, #1
 80064b8:	2300      	movne	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d19b      	bne.n	80063fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000170 	.word	0x20000170

080064d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	; 0x28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064e6:	f7fb f85d 	bl	80015a4 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	4413      	add	r3, r2
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80064f6:	f7fb f855 	bl	80015a4 <HAL_GetTick>
 80064fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006504:	4b3d      	ldr	r3, [pc, #244]	; (80065fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	00da      	lsls	r2, r3, #3
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	0d1b      	lsrs	r3, r3, #20
 8006514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006516:	fb02 f303 	mul.w	r3, r2, r3
 800651a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800651c:	e060      	b.n	80065e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006524:	d107      	bne.n	8006536 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006534:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d050      	beq.n	80065e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800653e:	f7fb f831 	bl	80015a4 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654a:	429a      	cmp	r2, r3
 800654c:	d902      	bls.n	8006554 <SPI_WaitFifoStateUntilTimeout+0x80>
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	2b00      	cmp	r3, #0
 8006552:	d13d      	bne.n	80065d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006562:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800656c:	d111      	bne.n	8006592 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006576:	d004      	beq.n	8006582 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006580:	d107      	bne.n	8006592 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006590:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659a:	d10f      	bne.n	80065bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e010      	b.n	80065f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	3b01      	subs	r3, #1
 80065de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	4013      	ands	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d196      	bne.n	800651e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3728      	adds	r7, #40	; 0x28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000170 	.word	0x20000170

08006600 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006614:	d111      	bne.n	800663a <SPI_EndRxTransaction+0x3a>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800661e:	d004      	beq.n	800662a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006628:	d107      	bne.n	800663a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006638:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2200      	movs	r2, #0
 8006642:	2180      	movs	r1, #128	; 0x80
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff febd 	bl	80063c4 <SPI_WaitFlagStateUntilTimeout>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006654:	f043 0220 	orr.w	r2, r3, #32
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e023      	b.n	80066a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006668:	d11d      	bne.n	80066a6 <SPI_EndRxTransaction+0xa6>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006672:	d004      	beq.n	800667e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667c:	d113      	bne.n	80066a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2200      	movs	r2, #0
 8006686:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7ff ff22 	bl	80064d4 <SPI_WaitFifoStateUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669a:	f043 0220 	orr.w	r2, r3, #32
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e000      	b.n	80066a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff ff03 	bl	80064d4 <SPI_WaitFifoStateUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d8:	f043 0220 	orr.w	r2, r3, #32
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e027      	b.n	8006734 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2200      	movs	r2, #0
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff fe68 	bl	80063c4 <SPI_WaitFlagStateUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e014      	b.n	8006734 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff fedc 	bl	80064d4 <SPI_WaitFifoStateUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	f043 0220 	orr.w	r2, r3, #32
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e000      	b.n	8006734 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e049      	b.n	80067e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fa fea2 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3304      	adds	r3, #4
 8006778:	4619      	mov	r1, r3
 800677a:	4610      	mov	r0, r2
 800677c:	f000 f9ee 	bl	8006b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d001      	beq.n	8006804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e04f      	b.n	80068a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a23      	ldr	r2, [pc, #140]	; (80068b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01d      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0x76>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682e:	d018      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0x76>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1f      	ldr	r2, [pc, #124]	; (80068b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0x76>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1e      	ldr	r2, [pc, #120]	; (80068b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00e      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0x76>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <HAL_TIM_Base_Start_IT+0xd0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d009      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0x76>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d004      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0x76>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a19      	ldr	r2, [pc, #100]	; (80068c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d115      	bne.n	800688e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	4b17      	ldr	r3, [pc, #92]	; (80068c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800686a:	4013      	ands	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b06      	cmp	r3, #6
 8006872:	d015      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0xb4>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687a:	d011      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688c:	e008      	b.n	80068a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	e000      	b.n	80068a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40013400 	.word	0x40013400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	00010007 	.word	0x00010007

080068cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d122      	bne.n	8006928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d11b      	bne.n	8006928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0202 	mvn.w	r2, #2
 80068f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f905 	bl	8006b1e <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8f7 	bl	8006b0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f908 	bl	8006b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b04      	cmp	r3, #4
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b04      	cmp	r3, #4
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0204 	mvn.w	r2, #4
 800694c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2202      	movs	r2, #2
 8006952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f8db 	bl	8006b1e <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f8cd 	bl	8006b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f8de 	bl	8006b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b08      	cmp	r3, #8
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b08      	cmp	r3, #8
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0208 	mvn.w	r2, #8
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2204      	movs	r2, #4
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f8b1 	bl	8006b1e <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f8a3 	bl	8006b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f8b4 	bl	8006b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0310 	and.w	r3, r3, #16
 80069da:	2b10      	cmp	r3, #16
 80069dc:	d122      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	2b10      	cmp	r3, #16
 80069ea:	d11b      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0210 	mvn.w	r2, #16
 80069f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2208      	movs	r2, #8
 80069fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f887 	bl	8006b1e <HAL_TIM_IC_CaptureCallback>
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f879 	bl	8006b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f88a 	bl	8006b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d10e      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d107      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0201 	mvn.w	r2, #1
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fa fb08 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5a:	2b80      	cmp	r3, #128	; 0x80
 8006a5c:	d10e      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a68:	2b80      	cmp	r3, #128	; 0x80
 8006a6a:	d107      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f914 	bl	8006ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8a:	d10e      	bne.n	8006aaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	d107      	bne.n	8006aaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f907 	bl	8006cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d10e      	bne.n	8006ad6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d107      	bne.n	8006ad6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f838 	bl	8006b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d10e      	bne.n	8006b02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d107      	bne.n	8006b02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f06f 0220 	mvn.w	r2, #32
 8006afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f8c7 	bl	8006c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b02:	bf00      	nop
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a40      	ldr	r2, [pc, #256]	; (8006c70 <TIM_Base_SetConfig+0x114>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7a:	d00f      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a3d      	ldr	r2, [pc, #244]	; (8006c74 <TIM_Base_SetConfig+0x118>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00b      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3c      	ldr	r2, [pc, #240]	; (8006c78 <TIM_Base_SetConfig+0x11c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3b      	ldr	r2, [pc, #236]	; (8006c7c <TIM_Base_SetConfig+0x120>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3a      	ldr	r2, [pc, #232]	; (8006c80 <TIM_Base_SetConfig+0x124>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d108      	bne.n	8006bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a2f      	ldr	r2, [pc, #188]	; (8006c70 <TIM_Base_SetConfig+0x114>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01f      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbc:	d01b      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a2c      	ldr	r2, [pc, #176]	; (8006c74 <TIM_Base_SetConfig+0x118>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d017      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2b      	ldr	r2, [pc, #172]	; (8006c78 <TIM_Base_SetConfig+0x11c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d013      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2a      	ldr	r2, [pc, #168]	; (8006c7c <TIM_Base_SetConfig+0x120>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00f      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a29      	ldr	r2, [pc, #164]	; (8006c80 <TIM_Base_SetConfig+0x124>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00b      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a28      	ldr	r2, [pc, #160]	; (8006c84 <TIM_Base_SetConfig+0x128>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d007      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a27      	ldr	r2, [pc, #156]	; (8006c88 <TIM_Base_SetConfig+0x12c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a26      	ldr	r2, [pc, #152]	; (8006c8c <TIM_Base_SetConfig+0x130>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d108      	bne.n	8006c08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a10      	ldr	r2, [pc, #64]	; (8006c70 <TIM_Base_SetConfig+0x114>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00f      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <TIM_Base_SetConfig+0x124>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00b      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a11      	ldr	r2, [pc, #68]	; (8006c84 <TIM_Base_SetConfig+0x128>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d007      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a10      	ldr	r2, [pc, #64]	; (8006c88 <TIM_Base_SetConfig+0x12c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a0f      	ldr	r2, [pc, #60]	; (8006c8c <TIM_Base_SetConfig+0x130>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d103      	bne.n	8006c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	615a      	str	r2, [r3, #20]
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40013400 	.word	0x40013400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800

08006c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <__NVIC_SetPriority>:
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	6039      	str	r1, [r7, #0]
 8006cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	db0a      	blt.n	8006cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	490c      	ldr	r1, [pc, #48]	; (8006d18 <__NVIC_SetPriority+0x4c>)
 8006ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cea:	0112      	lsls	r2, r2, #4
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	440b      	add	r3, r1
 8006cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006cf4:	e00a      	b.n	8006d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	4908      	ldr	r1, [pc, #32]	; (8006d1c <__NVIC_SetPriority+0x50>)
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	3b04      	subs	r3, #4
 8006d04:	0112      	lsls	r2, r2, #4
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	440b      	add	r3, r1
 8006d0a:	761a      	strb	r2, [r3, #24]
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	e000e100 	.word	0xe000e100
 8006d1c:	e000ed00 	.word	0xe000ed00

08006d20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <SysTick_Handler+0x1c>)
 8006d26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006d28:	f001 fede 	bl	8008ae8 <xTaskGetSchedulerState>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d001      	beq.n	8006d36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006d32:	f000 fbb9 	bl	80074a8 <xPortSysTickHandler>
  }
}
 8006d36:	bf00      	nop
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	e000e010 	.word	0xe000e010

08006d40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d44:	2100      	movs	r1, #0
 8006d46:	f06f 0004 	mvn.w	r0, #4
 8006d4a:	f7ff ffbf 	bl	8006ccc <__NVIC_SetPriority>
#endif
}
 8006d4e:	bf00      	nop
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d5a:	f3ef 8305 	mrs	r3, IPSR
 8006d5e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d66:	f06f 0305 	mvn.w	r3, #5
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	e00c      	b.n	8006d88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d6e:	4b0a      	ldr	r3, [pc, #40]	; (8006d98 <osKernelInitialize+0x44>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d105      	bne.n	8006d82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d76:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <osKernelInitialize+0x44>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	e002      	b.n	8006d88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295
 8006d86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d88:	687b      	ldr	r3, [r7, #4]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	200001e4 	.word	0x200001e4

08006d9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da2:	f3ef 8305 	mrs	r3, IPSR
 8006da6:	603b      	str	r3, [r7, #0]
  return(result);
 8006da8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006dae:	f06f 0305 	mvn.w	r3, #5
 8006db2:	607b      	str	r3, [r7, #4]
 8006db4:	e010      	b.n	8006dd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006db6:	4b0b      	ldr	r3, [pc, #44]	; (8006de4 <osKernelStart+0x48>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d109      	bne.n	8006dd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006dbe:	f7ff ffbf 	bl	8006d40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006dc2:	4b08      	ldr	r3, [pc, #32]	; (8006de4 <osKernelStart+0x48>)
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006dc8:	f001 fa46 	bl	8008258 <vTaskStartScheduler>
      stat = osOK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	e002      	b.n	8006dd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006dd8:	687b      	ldr	r3, [r7, #4]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	200001e4 	.word	0x200001e4

08006de8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4a07      	ldr	r2, [pc, #28]	; (8006e14 <vApplicationGetIdleTaskMemory+0x2c>)
 8006df8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4a06      	ldr	r2, [pc, #24]	; (8006e18 <vApplicationGetIdleTaskMemory+0x30>)
 8006dfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2280      	movs	r2, #128	; 0x80
 8006e04:	601a      	str	r2, [r3, #0]
}
 8006e06:	bf00      	nop
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	200001e8 	.word	0x200001e8
 8006e18:	20000244 	.word	0x20000244

08006e1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4a07      	ldr	r2, [pc, #28]	; (8006e48 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4a06      	ldr	r2, [pc, #24]	; (8006e4c <vApplicationGetTimerTaskMemory+0x30>)
 8006e32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e3a:	601a      	str	r2, [r3, #0]
}
 8006e3c:	bf00      	nop
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	20000444 	.word	0x20000444
 8006e4c:	200004a0 	.word	0x200004a0

08006e50 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d04d      	beq.n	8006efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e62:	2308      	movs	r3, #8
 8006e64:	425b      	negs	r3, r3
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4413      	add	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	4b24      	ldr	r3, [pc, #144]	; (8006f08 <vPortFree+0xb8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <vPortFree+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <vPortFree+0x62>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60bb      	str	r3, [r7, #8]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <vPortFree+0xb8>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01e      	beq.n	8006efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d11a      	bne.n	8006efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <vPortFree+0xb8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	401a      	ands	r2, r3
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ed8:	f001 fa24 	bl	8008324 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <vPortFree+0xbc>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	4a09      	ldr	r2, [pc, #36]	; (8006f0c <vPortFree+0xbc>)
 8006ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eea:	6938      	ldr	r0, [r7, #16]
 8006eec:	f000 f812 	bl	8006f14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <vPortFree+0xc0>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	4a06      	ldr	r2, [pc, #24]	; (8006f10 <vPortFree+0xc0>)
 8006ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006efa:	f001 fa21 	bl	8008340 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006efe:	bf00      	nop
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	200008b4 	.word	0x200008b4
 8006f0c:	200008ac 	.word	0x200008ac
 8006f10:	200008b0 	.word	0x200008b0

08006f14 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f1c:	4b28      	ldr	r3, [pc, #160]	; (8006fc0 <prvInsertBlockIntoFreeList+0xac>)
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	e002      	b.n	8006f28 <prvInsertBlockIntoFreeList+0x14>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d8f7      	bhi.n	8006f22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d108      	bne.n	8006f56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	441a      	add	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	441a      	add	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d118      	bne.n	8006f9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4b15      	ldr	r3, [pc, #84]	; (8006fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d00d      	beq.n	8006f92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	441a      	add	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	e008      	b.n	8006fa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f92:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	e003      	b.n	8006fa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d002      	beq.n	8006fb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	200008a0 	.word	0x200008a0
 8006fc4:	200008a8 	.word	0x200008a8

08006fc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f103 0208 	add.w	r2, r3, #8
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f103 0208 	add.w	r2, r3, #8
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f103 0208 	add.w	r2, r3, #8
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007016:	bf00      	nop
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007022:	b480      	push	{r7}
 8007024:	b085      	sub	sp, #20
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]
}
 800705e:	bf00      	nop
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800706a:	b480      	push	{r7}
 800706c:	b085      	sub	sp, #20
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d103      	bne.n	800708a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	e00c      	b.n	80070a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3308      	adds	r3, #8
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e002      	b.n	8007098 <vListInsert+0x2e>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d2f6      	bcs.n	8007092 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	601a      	str	r2, [r3, #0]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6892      	ldr	r2, [r2, #8]
 80070f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6852      	ldr	r2, [r2, #4]
 80070fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	429a      	cmp	r2, r3
 8007106:	d103      	bne.n	8007110 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	1e5a      	subs	r2, r3, #1
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3b04      	subs	r3, #4
 8007140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3b04      	subs	r3, #4
 800714e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f023 0201 	bic.w	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3b04      	subs	r3, #4
 800715e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007160:	4a0c      	ldr	r2, [pc, #48]	; (8007194 <pxPortInitialiseStack+0x64>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b14      	subs	r3, #20
 800716a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3b04      	subs	r3, #4
 8007176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f06f 0202 	mvn.w	r2, #2
 800717e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3b20      	subs	r3, #32
 8007184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007186:	68fb      	ldr	r3, [r7, #12]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	08007199 	.word	0x08007199

08007198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071a2:	4b12      	ldr	r3, [pc, #72]	; (80071ec <prvTaskExitError+0x54>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d00a      	beq.n	80071c2 <prvTaskExitError+0x2a>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	60fb      	str	r3, [r7, #12]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <prvTaskExitError+0x28>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	60bb      	str	r3, [r7, #8]
}
 80071d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071d6:	bf00      	nop
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0fc      	beq.n	80071d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	2000017c 	.word	0x2000017c

080071f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <pxCurrentTCBConst2>)
 80071f2:	6819      	ldr	r1, [r3, #0]
 80071f4:	6808      	ldr	r0, [r1, #0]
 80071f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	f380 8809 	msr	PSP, r0
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f04f 0000 	mov.w	r0, #0
 8007206:	f380 8811 	msr	BASEPRI, r0
 800720a:	4770      	bx	lr
 800720c:	f3af 8000 	nop.w

08007210 <pxCurrentTCBConst2>:
 8007210:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop

08007218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007218:	4808      	ldr	r0, [pc, #32]	; (800723c <prvPortStartFirstTask+0x24>)
 800721a:	6800      	ldr	r0, [r0, #0]
 800721c:	6800      	ldr	r0, [r0, #0]
 800721e:	f380 8808 	msr	MSP, r0
 8007222:	f04f 0000 	mov.w	r0, #0
 8007226:	f380 8814 	msr	CONTROL, r0
 800722a:	b662      	cpsie	i
 800722c:	b661      	cpsie	f
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	df00      	svc	0
 8007238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800723a:	bf00      	nop
 800723c:	e000ed08 	.word	0xe000ed08

08007240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007246:	4b46      	ldr	r3, [pc, #280]	; (8007360 <xPortStartScheduler+0x120>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a46      	ldr	r2, [pc, #280]	; (8007364 <xPortStartScheduler+0x124>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d10a      	bne.n	8007266 <xPortStartScheduler+0x26>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	613b      	str	r3, [r7, #16]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007266:	4b3e      	ldr	r3, [pc, #248]	; (8007360 <xPortStartScheduler+0x120>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a3f      	ldr	r2, [pc, #252]	; (8007368 <xPortStartScheduler+0x128>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10a      	bne.n	8007286 <xPortStartScheduler+0x46>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60fb      	str	r3, [r7, #12]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007286:	4b39      	ldr	r3, [pc, #228]	; (800736c <xPortStartScheduler+0x12c>)
 8007288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	22ff      	movs	r2, #255	; 0xff
 8007296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	4b31      	ldr	r3, [pc, #196]	; (8007370 <xPortStartScheduler+0x130>)
 80072ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072ae:	4b31      	ldr	r3, [pc, #196]	; (8007374 <xPortStartScheduler+0x134>)
 80072b0:	2207      	movs	r2, #7
 80072b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072b4:	e009      	b.n	80072ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80072b6:	4b2f      	ldr	r3, [pc, #188]	; (8007374 <xPortStartScheduler+0x134>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	4a2d      	ldr	r2, [pc, #180]	; (8007374 <xPortStartScheduler+0x134>)
 80072be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d2:	2b80      	cmp	r3, #128	; 0x80
 80072d4:	d0ef      	beq.n	80072b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072d6:	4b27      	ldr	r3, [pc, #156]	; (8007374 <xPortStartScheduler+0x134>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f1c3 0307 	rsb	r3, r3, #7
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d00a      	beq.n	80072f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	60bb      	str	r3, [r7, #8]
}
 80072f4:	bf00      	nop
 80072f6:	e7fe      	b.n	80072f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072f8:	4b1e      	ldr	r3, [pc, #120]	; (8007374 <xPortStartScheduler+0x134>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	4a1d      	ldr	r2, [pc, #116]	; (8007374 <xPortStartScheduler+0x134>)
 8007300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007302:	4b1c      	ldr	r3, [pc, #112]	; (8007374 <xPortStartScheduler+0x134>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800730a:	4a1a      	ldr	r2, [pc, #104]	; (8007374 <xPortStartScheduler+0x134>)
 800730c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	b2da      	uxtb	r2, r3
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007316:	4b18      	ldr	r3, [pc, #96]	; (8007378 <xPortStartScheduler+0x138>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a17      	ldr	r2, [pc, #92]	; (8007378 <xPortStartScheduler+0x138>)
 800731c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007322:	4b15      	ldr	r3, [pc, #84]	; (8007378 <xPortStartScheduler+0x138>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a14      	ldr	r2, [pc, #80]	; (8007378 <xPortStartScheduler+0x138>)
 8007328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800732c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800732e:	f000 f8dd 	bl	80074ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007332:	4b12      	ldr	r3, [pc, #72]	; (800737c <xPortStartScheduler+0x13c>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007338:	f000 f8fc 	bl	8007534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800733c:	4b10      	ldr	r3, [pc, #64]	; (8007380 <xPortStartScheduler+0x140>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a0f      	ldr	r2, [pc, #60]	; (8007380 <xPortStartScheduler+0x140>)
 8007342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007348:	f7ff ff66 	bl	8007218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800734c:	f001 f960 	bl	8008610 <vTaskSwitchContext>
	prvTaskExitError();
 8007350:	f7ff ff22 	bl	8007198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	e000ed00 	.word	0xe000ed00
 8007364:	410fc271 	.word	0x410fc271
 8007368:	410fc270 	.word	0x410fc270
 800736c:	e000e400 	.word	0xe000e400
 8007370:	200008b8 	.word	0x200008b8
 8007374:	200008bc 	.word	0x200008bc
 8007378:	e000ed20 	.word	0xe000ed20
 800737c:	2000017c 	.word	0x2000017c
 8007380:	e000ef34 	.word	0xe000ef34

08007384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	607b      	str	r3, [r7, #4]
}
 800739c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <vPortEnterCritical+0x58>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3301      	adds	r3, #1
 80073a4:	4a0d      	ldr	r2, [pc, #52]	; (80073dc <vPortEnterCritical+0x58>)
 80073a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073a8:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <vPortEnterCritical+0x58>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d10f      	bne.n	80073d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073b0:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <vPortEnterCritical+0x5c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	603b      	str	r3, [r7, #0]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <vPortEnterCritical+0x4a>
	}
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	2000017c 	.word	0x2000017c
 80073e0:	e000ed04 	.word	0xe000ed04

080073e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073ea:	4b12      	ldr	r3, [pc, #72]	; (8007434 <vPortExitCritical+0x50>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <vPortExitCritical+0x24>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	607b      	str	r3, [r7, #4]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <vPortExitCritical+0x50>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3b01      	subs	r3, #1
 800740e:	4a09      	ldr	r2, [pc, #36]	; (8007434 <vPortExitCritical+0x50>)
 8007410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007412:	4b08      	ldr	r3, [pc, #32]	; (8007434 <vPortExitCritical+0x50>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <vPortExitCritical+0x42>
 800741a:	2300      	movs	r3, #0
 800741c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	2000017c 	.word	0x2000017c
	...

08007440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007440:	f3ef 8009 	mrs	r0, PSP
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <pxCurrentTCBConst>)
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	f01e 0f10 	tst.w	lr, #16
 8007450:	bf08      	it	eq
 8007452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745a:	6010      	str	r0, [r2, #0]
 800745c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007464:	f380 8811 	msr	BASEPRI, r0
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f001 f8ce 	bl	8008610 <vTaskSwitchContext>
 8007474:	f04f 0000 	mov.w	r0, #0
 8007478:	f380 8811 	msr	BASEPRI, r0
 800747c:	bc09      	pop	{r0, r3}
 800747e:	6819      	ldr	r1, [r3, #0]
 8007480:	6808      	ldr	r0, [r1, #0]
 8007482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007486:	f01e 0f10 	tst.w	lr, #16
 800748a:	bf08      	it	eq
 800748c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007490:	f380 8809 	msr	PSP, r0
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	f3af 8000 	nop.w

080074a0 <pxCurrentTCBConst>:
 80074a0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop

080074a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	607b      	str	r3, [r7, #4]
}
 80074c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074c2:	f000 ffeb 	bl	800849c <xTaskIncrementTick>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <xPortSysTickHandler+0x40>)
 80074ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	2300      	movs	r3, #0
 80074d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f383 8811 	msr	BASEPRI, r3
}
 80074de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074e0:	bf00      	nop
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <vPortSetupTimerInterrupt+0x34>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <vPortSetupTimerInterrupt+0x38>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <vPortSetupTimerInterrupt+0x3c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0a      	ldr	r2, [pc, #40]	; (800752c <vPortSetupTimerInterrupt+0x40>)
 8007502:	fba2 2303 	umull	r2, r3, r2, r3
 8007506:	099b      	lsrs	r3, r3, #6
 8007508:	4a09      	ldr	r2, [pc, #36]	; (8007530 <vPortSetupTimerInterrupt+0x44>)
 800750a:	3b01      	subs	r3, #1
 800750c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800750e:	4b04      	ldr	r3, [pc, #16]	; (8007520 <vPortSetupTimerInterrupt+0x34>)
 8007510:	2207      	movs	r2, #7
 8007512:	601a      	str	r2, [r3, #0]
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	e000e010 	.word	0xe000e010
 8007524:	e000e018 	.word	0xe000e018
 8007528:	20000170 	.word	0x20000170
 800752c:	10624dd3 	.word	0x10624dd3
 8007530:	e000e014 	.word	0xe000e014

08007534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007544 <vPortEnableVFP+0x10>
 8007538:	6801      	ldr	r1, [r0, #0]
 800753a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800753e:	6001      	str	r1, [r0, #0]
 8007540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007542:	bf00      	nop
 8007544:	e000ed88 	.word	0xe000ed88

08007548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800754e:	f3ef 8305 	mrs	r3, IPSR
 8007552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b0f      	cmp	r3, #15
 8007558:	d914      	bls.n	8007584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <vPortValidateInterruptPriority+0x70>)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007564:	4b15      	ldr	r3, [pc, #84]	; (80075bc <vPortValidateInterruptPriority+0x74>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	7afa      	ldrb	r2, [r7, #11]
 800756a:	429a      	cmp	r2, r3
 800756c:	d20a      	bcs.n	8007584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	607b      	str	r3, [r7, #4]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007584:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <vPortValidateInterruptPriority+0x78>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800758c:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <vPortValidateInterruptPriority+0x7c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d90a      	bls.n	80075aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	603b      	str	r3, [r7, #0]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <vPortValidateInterruptPriority+0x60>
	}
 80075aa:	bf00      	nop
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	e000e3f0 	.word	0xe000e3f0
 80075bc:	200008b8 	.word	0x200008b8
 80075c0:	e000ed0c 	.word	0xe000ed0c
 80075c4:	200008bc 	.word	0x200008bc

080075c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <xQueueGenericReset+0x2a>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	60bb      	str	r3, [r7, #8]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075f2:	f7ff fec7 	bl	8007384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	441a      	add	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007622:	3b01      	subs	r3, #1
 8007624:	68f9      	ldr	r1, [r7, #12]
 8007626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	441a      	add	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	22ff      	movs	r2, #255	; 0xff
 8007636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	22ff      	movs	r2, #255	; 0xff
 800763e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d114      	bne.n	8007672 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01a      	beq.n	8007686 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3310      	adds	r3, #16
 8007654:	4618      	mov	r0, r3
 8007656:	f001 f889 	bl	800876c <xTaskRemoveFromEventList>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d012      	beq.n	8007686 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007660:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <xQueueGenericReset+0xcc>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	e009      	b.n	8007686 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3310      	adds	r3, #16
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff fca6 	bl	8006fc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3324      	adds	r3, #36	; 0x24
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff fca1 	bl	8006fc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007686:	f7ff fead 	bl	80073e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800768a:	2301      	movs	r3, #1
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08e      	sub	sp, #56	; 0x38
 800769c:	af02      	add	r7, sp, #8
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10a      	bne.n	80076c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076da:	bf00      	nop
 80076dc:	e7fe      	b.n	80076dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <xQueueGenericCreateStatic+0x52>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <xQueueGenericCreateStatic+0x56>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <xQueueGenericCreateStatic+0x58>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	623b      	str	r3, [r7, #32]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <xQueueGenericCreateStatic+0x7e>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <xQueueGenericCreateStatic+0x82>
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <xQueueGenericCreateStatic+0x84>
 800771a:	2300      	movs	r3, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	61fb      	str	r3, [r7, #28]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007736:	2350      	movs	r3, #80	; 0x50
 8007738:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b50      	cmp	r3, #80	; 0x50
 800773e:	d00a      	beq.n	8007756 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	61bb      	str	r3, [r7, #24]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007756:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00d      	beq.n	800777e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800776a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f805 	bl	8007788 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007780:	4618      	mov	r0, r3
 8007782:	3730      	adds	r7, #48	; 0x30
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e002      	b.n	80077aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077b6:	2101      	movs	r1, #1
 80077b8:	69b8      	ldr	r0, [r7, #24]
 80077ba:	f7ff ff05 	bl	80075c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	78fa      	ldrb	r2, [r7, #3]
 80077c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08e      	sub	sp, #56	; 0x38
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077de:	2300      	movs	r3, #0
 80077e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xQueueGenericSend+0x32>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <xQueueGenericSend+0x40>
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <xQueueGenericSend+0x44>
 8007810:	2301      	movs	r3, #1
 8007812:	e000      	b.n	8007816 <xQueueGenericSend+0x46>
 8007814:	2300      	movs	r3, #0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <xQueueGenericSend+0x60>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d103      	bne.n	800783e <xQueueGenericSend+0x6e>
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <xQueueGenericSend+0x72>
 800783e:	2301      	movs	r3, #1
 8007840:	e000      	b.n	8007844 <xQueueGenericSend+0x74>
 8007842:	2300      	movs	r3, #0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <xQueueGenericSend+0x8e>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	623b      	str	r3, [r7, #32]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800785e:	f001 f943 	bl	8008ae8 <xTaskGetSchedulerState>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <xQueueGenericSend+0x9e>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <xQueueGenericSend+0xa2>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <xQueueGenericSend+0xa4>
 8007872:	2300      	movs	r3, #0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10a      	bne.n	800788e <xQueueGenericSend+0xbe>
	__asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	61fb      	str	r3, [r7, #28]
}
 800788a:	bf00      	nop
 800788c:	e7fe      	b.n	800788c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800788e:	f7ff fd79 	bl	8007384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	429a      	cmp	r2, r3
 800789c:	d302      	bcc.n	80078a4 <xQueueGenericSend+0xd4>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d129      	bne.n	80078f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078aa:	f000 fa0b 	bl	8007cc4 <prvCopyDataToQueue>
 80078ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d010      	beq.n	80078da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	3324      	adds	r3, #36	; 0x24
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 ff55 	bl	800876c <xTaskRemoveFromEventList>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d013      	beq.n	80078f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078c8:	4b3f      	ldr	r3, [pc, #252]	; (80079c8 <xQueueGenericSend+0x1f8>)
 80078ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	e00a      	b.n	80078f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078e0:	4b39      	ldr	r3, [pc, #228]	; (80079c8 <xQueueGenericSend+0x1f8>)
 80078e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078f0:	f7ff fd78 	bl	80073e4 <vPortExitCritical>
				return pdPASS;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e063      	b.n	80079c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d103      	bne.n	8007906 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078fe:	f7ff fd71 	bl	80073e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007902:	2300      	movs	r3, #0
 8007904:	e05c      	b.n	80079c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800790c:	f107 0314 	add.w	r3, r7, #20
 8007910:	4618      	mov	r0, r3
 8007912:	f000 ff8f 	bl	8008834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007916:	2301      	movs	r3, #1
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800791a:	f7ff fd63 	bl	80073e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800791e:	f000 fd01 	bl	8008324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007922:	f7ff fd2f 	bl	8007384 <vPortEnterCritical>
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800792c:	b25b      	sxtb	r3, r3
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d103      	bne.n	800793c <xQueueGenericSend+0x16c>
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007942:	b25b      	sxtb	r3, r3
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d103      	bne.n	8007952 <xQueueGenericSend+0x182>
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007952:	f7ff fd47 	bl	80073e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007956:	1d3a      	adds	r2, r7, #4
 8007958:	f107 0314 	add.w	r3, r7, #20
 800795c:	4611      	mov	r1, r2
 800795e:	4618      	mov	r0, r3
 8007960:	f000 ff7e 	bl	8008860 <xTaskCheckForTimeOut>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d124      	bne.n	80079b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800796a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800796c:	f000 faa2 	bl	8007eb4 <prvIsQueueFull>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d018      	beq.n	80079a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	3310      	adds	r3, #16
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fea4 	bl	80086cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007986:	f000 fa2d 	bl	8007de4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800798a:	f000 fcd9 	bl	8008340 <xTaskResumeAll>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	f47f af7c 	bne.w	800788e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007996:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <xQueueGenericSend+0x1f8>)
 8007998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	e772      	b.n	800788e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079aa:	f000 fa1b 	bl	8007de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079ae:	f000 fcc7 	bl	8008340 <xTaskResumeAll>
 80079b2:	e76c      	b.n	800788e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b6:	f000 fa15 	bl	8007de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079ba:	f000 fcc1 	bl	8008340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3738      	adds	r7, #56	; 0x38
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	e000ed04 	.word	0xe000ed04

080079cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b090      	sub	sp, #64	; 0x40
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079f6:	bf00      	nop
 80079f8:	e7fe      	b.n	80079f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d103      	bne.n	8007a08 <xQueueGenericSendFromISR+0x3c>
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <xQueueGenericSendFromISR+0x40>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <xQueueGenericSendFromISR+0x42>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d103      	bne.n	8007a36 <xQueueGenericSendFromISR+0x6a>
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <xQueueGenericSendFromISR+0x6e>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <xQueueGenericSendFromISR+0x70>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	623b      	str	r3, [r7, #32]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a56:	f7ff fd77 	bl	8007548 <vPortValidateInterruptPriority>
	__asm volatile
 8007a5a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	61fa      	str	r2, [r7, #28]
 8007a70:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007a72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d302      	bcc.n	8007a88 <xQueueGenericSendFromISR+0xbc>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d12f      	bne.n	8007ae8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a9e:	f000 f911 	bl	8007cc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007aa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d112      	bne.n	8007ad2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d016      	beq.n	8007ae2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	3324      	adds	r3, #36	; 0x24
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fe57 	bl	800876c <xTaskRemoveFromEventList>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00e      	beq.n	8007ae2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e007      	b.n	8007ae2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	b25a      	sxtb	r2, r3
 8007adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007ae6:	e001      	b.n	8007aec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f383 8811 	msr	BASEPRI, r3
}
 8007af6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3740      	adds	r7, #64	; 0x40
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08c      	sub	sp, #48	; 0x30
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b10:	2300      	movs	r3, #0
 8007b12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <xQueueReceive+0x30>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	623b      	str	r3, [r7, #32]
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d103      	bne.n	8007b42 <xQueueReceive+0x3e>
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <xQueueReceive+0x42>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <xQueueReceive+0x44>
 8007b46:	2300      	movs	r3, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <xQueueReceive+0x5e>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	61fb      	str	r3, [r7, #28]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b62:	f000 ffc1 	bl	8008ae8 <xTaskGetSchedulerState>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <xQueueReceive+0x6e>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <xQueueReceive+0x72>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <xQueueReceive+0x74>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <xQueueReceive+0x8e>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	61bb      	str	r3, [r7, #24]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b92:	f7ff fbf7 	bl	8007384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d01f      	beq.n	8007be2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ba6:	f000 f8f7 	bl	8007d98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	1e5a      	subs	r2, r3, #1
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00f      	beq.n	8007bda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	3310      	adds	r3, #16
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fdd4 	bl	800876c <xTaskRemoveFromEventList>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bca:	4b3d      	ldr	r3, [pc, #244]	; (8007cc0 <xQueueReceive+0x1bc>)
 8007bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bda:	f7ff fc03 	bl	80073e4 <vPortExitCritical>
				return pdPASS;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e069      	b.n	8007cb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d103      	bne.n	8007bf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007be8:	f7ff fbfc 	bl	80073e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bec:	2300      	movs	r3, #0
 8007bee:	e062      	b.n	8007cb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bf6:	f107 0310 	add.w	r3, r7, #16
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fe1a 	bl	8008834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c04:	f7ff fbee 	bl	80073e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c08:	f000 fb8c 	bl	8008324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c0c:	f7ff fbba 	bl	8007384 <vPortEnterCritical>
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c16:	b25b      	sxtb	r3, r3
 8007c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1c:	d103      	bne.n	8007c26 <xQueueReceive+0x122>
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c2c:	b25b      	sxtb	r3, r3
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d103      	bne.n	8007c3c <xQueueReceive+0x138>
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c3c:	f7ff fbd2 	bl	80073e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c40:	1d3a      	adds	r2, r7, #4
 8007c42:	f107 0310 	add.w	r3, r7, #16
 8007c46:	4611      	mov	r1, r2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fe09 	bl	8008860 <xTaskCheckForTimeOut>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d123      	bne.n	8007c9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c56:	f000 f917 	bl	8007e88 <prvIsQueueEmpty>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d017      	beq.n	8007c90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	3324      	adds	r3, #36	; 0x24
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	4611      	mov	r1, r2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fd2f 	bl	80086cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c70:	f000 f8b8 	bl	8007de4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c74:	f000 fb64 	bl	8008340 <xTaskResumeAll>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d189      	bne.n	8007b92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007c7e:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <xQueueReceive+0x1bc>)
 8007c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	e780      	b.n	8007b92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c92:	f000 f8a7 	bl	8007de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c96:	f000 fb53 	bl	8008340 <xTaskResumeAll>
 8007c9a:	e77a      	b.n	8007b92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c9e:	f000 f8a1 	bl	8007de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ca2:	f000 fb4d 	bl	8008340 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca8:	f000 f8ee 	bl	8007e88 <prvIsQueueEmpty>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f43f af6f 	beq.w	8007b92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3730      	adds	r7, #48	; 0x30
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	e000ed04 	.word	0xe000ed04

08007cc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10d      	bne.n	8007cfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d14d      	bne.n	8007d86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 ff18 	bl	8008b24 <xTaskPriorityDisinherit>
 8007cf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	609a      	str	r2, [r3, #8]
 8007cfc:	e043      	b.n	8007d86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d119      	bne.n	8007d38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6858      	ldr	r0, [r3, #4]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	f001 fb3c 	bl	800938c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1c:	441a      	add	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d32b      	bcc.n	8007d86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	605a      	str	r2, [r3, #4]
 8007d36:	e026      	b.n	8007d86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68d8      	ldr	r0, [r3, #12]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	461a      	mov	r2, r3
 8007d42:	68b9      	ldr	r1, [r7, #8]
 8007d44:	f001 fb22 	bl	800938c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	425b      	negs	r3, r3
 8007d52:	441a      	add	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d207      	bcs.n	8007d74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	425b      	negs	r3, r3
 8007d6e:	441a      	add	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d105      	bne.n	8007d86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d8e:	697b      	ldr	r3, [r7, #20]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d018      	beq.n	8007ddc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	441a      	add	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d303      	bcc.n	8007dcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68d9      	ldr	r1, [r3, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6838      	ldr	r0, [r7, #0]
 8007dd8:	f001 fad8 	bl	800938c <memcpy>
	}
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dec:	f7ff faca 	bl	8007384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007df6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007df8:	e011      	b.n	8007e1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d012      	beq.n	8007e28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3324      	adds	r3, #36	; 0x24
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fcb0 	bl	800876c <xTaskRemoveFromEventList>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e12:	f000 fd87 	bl	8008924 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	dce9      	bgt.n	8007dfa <prvUnlockQueue+0x16>
 8007e26:	e000      	b.n	8007e2a <prvUnlockQueue+0x46>
					break;
 8007e28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	22ff      	movs	r2, #255	; 0xff
 8007e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e32:	f7ff fad7 	bl	80073e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e36:	f7ff faa5 	bl	8007384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e42:	e011      	b.n	8007e68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d012      	beq.n	8007e72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3310      	adds	r3, #16
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fc8b 	bl	800876c <xTaskRemoveFromEventList>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e5c:	f000 fd62 	bl	8008924 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dce9      	bgt.n	8007e44 <prvUnlockQueue+0x60>
 8007e70:	e000      	b.n	8007e74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	22ff      	movs	r2, #255	; 0xff
 8007e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e7c:	f7ff fab2 	bl	80073e4 <vPortExitCritical>
}
 8007e80:	bf00      	nop
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e90:	f7ff fa78 	bl	8007384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e001      	b.n	8007ea6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ea6:	f7ff fa9d 	bl	80073e4 <vPortExitCritical>

	return xReturn;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ebc:	f7ff fa62 	bl	8007384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d102      	bne.n	8007ed2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e001      	b.n	8007ed6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ed6:	f7ff fa85 	bl	80073e4 <vPortExitCritical>

	return xReturn;
 8007eda:	68fb      	ldr	r3, [r7, #12]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	e014      	b.n	8007f1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ef4:	4a0f      	ldr	r2, [pc, #60]	; (8007f34 <vQueueAddToRegistry+0x50>)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f00:	490c      	ldr	r1, [pc, #48]	; (8007f34 <vQueueAddToRegistry+0x50>)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f0a:	4a0a      	ldr	r2, [pc, #40]	; (8007f34 <vQueueAddToRegistry+0x50>)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	4413      	add	r3, r2
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f16:	e006      	b.n	8007f26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b07      	cmp	r3, #7
 8007f22:	d9e7      	bls.n	8007ef4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	20001110 	.word	0x20001110

08007f38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f48:	f7ff fa1c 	bl	8007384 <vPortEnterCritical>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f52:	b25b      	sxtb	r3, r3
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f58:	d103      	bne.n	8007f62 <vQueueWaitForMessageRestricted+0x2a>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f68:	b25b      	sxtb	r3, r3
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6e:	d103      	bne.n	8007f78 <vQueueWaitForMessageRestricted+0x40>
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f78:	f7ff fa34 	bl	80073e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	3324      	adds	r3, #36	; 0x24
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fbc1 	bl	8008714 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f92:	6978      	ldr	r0, [r7, #20]
 8007f94:	f7ff ff26 	bl	8007de4 <prvUnlockQueue>
	}
 8007f98:	bf00      	nop
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08e      	sub	sp, #56	; 0x38
 8007fa4:	af04      	add	r7, sp, #16
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10a      	bne.n	8007fca <xTaskCreateStatic+0x2a>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	623b      	str	r3, [r7, #32]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	61fb      	str	r3, [r7, #28]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fe6:	235c      	movs	r3, #92	; 0x5c
 8007fe8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b5c      	cmp	r3, #92	; 0x5c
 8007fee:	d00a      	beq.n	8008006 <xTaskCreateStatic+0x66>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	61bb      	str	r3, [r7, #24]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008006:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	2b00      	cmp	r3, #0
 800800c:	d01e      	beq.n	800804c <xTaskCreateStatic+0xac>
 800800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01b      	beq.n	800804c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800801c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	2202      	movs	r2, #2
 8008022:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008026:	2300      	movs	r3, #0
 8008028:	9303      	str	r3, [sp, #12]
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	9302      	str	r3, [sp, #8]
 800802e:	f107 0314 	add.w	r3, r7, #20
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f80b 	bl	800805a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008046:	f000 f897 	bl	8008178 <prvAddNewTaskToReadyList>
 800804a:	e001      	b.n	8008050 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008050:	697b      	ldr	r3, [r7, #20]
	}
 8008052:	4618      	mov	r0, r3
 8008054:	3728      	adds	r7, #40	; 0x28
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b088      	sub	sp, #32
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	461a      	mov	r2, r3
 8008072:	21a5      	movs	r1, #165	; 0xa5
 8008074:	f001 f998 	bl	80093a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008082:	3b01      	subs	r3, #1
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	f023 0307 	bic.w	r3, r3, #7
 8008090:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <prvInitialiseNewTask+0x58>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	617b      	str	r3, [r7, #20]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01f      	beq.n	80080f8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080b8:	2300      	movs	r3, #0
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	e012      	b.n	80080e4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	7819      	ldrb	r1, [r3, #0]
 80080c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	4413      	add	r3, r2
 80080cc:	3334      	adds	r3, #52	; 0x34
 80080ce:	460a      	mov	r2, r1
 80080d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d006      	beq.n	80080ec <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	3301      	adds	r3, #1
 80080e2:	61fb      	str	r3, [r7, #28]
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	2b0f      	cmp	r3, #15
 80080e8:	d9e9      	bls.n	80080be <prvInitialiseNewTask+0x64>
 80080ea:	e000      	b.n	80080ee <prvInitialiseNewTask+0x94>
			{
				break;
 80080ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080f6:	e003      	b.n	8008100 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	2b37      	cmp	r3, #55	; 0x37
 8008104:	d901      	bls.n	800810a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008106:	2337      	movs	r3, #55	; 0x37
 8008108:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800810e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008114:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	2200      	movs	r2, #0
 800811a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe ff71 	bl	8007008 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	3318      	adds	r3, #24
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe ff6c 	bl	8007008 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008134:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008138:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008144:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	2200      	movs	r2, #0
 800814a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	69b8      	ldr	r0, [r7, #24]
 800815a:	f7fe ffe9 	bl	8007130 <pxPortInitialiseStack>
 800815e:	4602      	mov	r2, r0
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800816a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800816e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008170:	bf00      	nop
 8008172:	3720      	adds	r7, #32
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008180:	f7ff f900 	bl	8007384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008184:	4b2d      	ldr	r3, [pc, #180]	; (800823c <prvAddNewTaskToReadyList+0xc4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3301      	adds	r3, #1
 800818a:	4a2c      	ldr	r2, [pc, #176]	; (800823c <prvAddNewTaskToReadyList+0xc4>)
 800818c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800818e:	4b2c      	ldr	r3, [pc, #176]	; (8008240 <prvAddNewTaskToReadyList+0xc8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008196:	4a2a      	ldr	r2, [pc, #168]	; (8008240 <prvAddNewTaskToReadyList+0xc8>)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800819c:	4b27      	ldr	r3, [pc, #156]	; (800823c <prvAddNewTaskToReadyList+0xc4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d110      	bne.n	80081c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081a4:	f000 fbe2 	bl	800896c <prvInitialiseTaskLists>
 80081a8:	e00d      	b.n	80081c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081aa:	4b26      	ldr	r3, [pc, #152]	; (8008244 <prvAddNewTaskToReadyList+0xcc>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d109      	bne.n	80081c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081b2:	4b23      	ldr	r3, [pc, #140]	; (8008240 <prvAddNewTaskToReadyList+0xc8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	429a      	cmp	r2, r3
 80081be:	d802      	bhi.n	80081c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081c0:	4a1f      	ldr	r2, [pc, #124]	; (8008240 <prvAddNewTaskToReadyList+0xc8>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081c6:	4b20      	ldr	r3, [pc, #128]	; (8008248 <prvAddNewTaskToReadyList+0xd0>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3301      	adds	r3, #1
 80081cc:	4a1e      	ldr	r2, [pc, #120]	; (8008248 <prvAddNewTaskToReadyList+0xd0>)
 80081ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081d0:	4b1d      	ldr	r3, [pc, #116]	; (8008248 <prvAddNewTaskToReadyList+0xd0>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081dc:	4b1b      	ldr	r3, [pc, #108]	; (800824c <prvAddNewTaskToReadyList+0xd4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d903      	bls.n	80081ec <prvAddNewTaskToReadyList+0x74>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	4a18      	ldr	r2, [pc, #96]	; (800824c <prvAddNewTaskToReadyList+0xd4>)
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4a15      	ldr	r2, [pc, #84]	; (8008250 <prvAddNewTaskToReadyList+0xd8>)
 80081fa:	441a      	add	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f7fe ff0d 	bl	8007022 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008208:	f7ff f8ec 	bl	80073e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800820c:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <prvAddNewTaskToReadyList+0xcc>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00e      	beq.n	8008232 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008214:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <prvAddNewTaskToReadyList+0xc8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	429a      	cmp	r2, r3
 8008220:	d207      	bcs.n	8008232 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008222:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <prvAddNewTaskToReadyList+0xdc>)
 8008224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000d94 	.word	0x20000d94
 8008240:	200008c0 	.word	0x200008c0
 8008244:	20000da0 	.word	0x20000da0
 8008248:	20000db0 	.word	0x20000db0
 800824c:	20000d9c 	.word	0x20000d9c
 8008250:	200008c4 	.word	0x200008c4
 8008254:	e000ed04 	.word	0xe000ed04

08008258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08a      	sub	sp, #40	; 0x28
 800825c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800825e:	2300      	movs	r3, #0
 8008260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008262:	2300      	movs	r3, #0
 8008264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008266:	463a      	mov	r2, r7
 8008268:	1d39      	adds	r1, r7, #4
 800826a:	f107 0308 	add.w	r3, r7, #8
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe fdba 	bl	8006de8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	9202      	str	r2, [sp, #8]
 800827c:	9301      	str	r3, [sp, #4]
 800827e:	2300      	movs	r3, #0
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	2300      	movs	r3, #0
 8008284:	460a      	mov	r2, r1
 8008286:	4921      	ldr	r1, [pc, #132]	; (800830c <vTaskStartScheduler+0xb4>)
 8008288:	4821      	ldr	r0, [pc, #132]	; (8008310 <vTaskStartScheduler+0xb8>)
 800828a:	f7ff fe89 	bl	8007fa0 <xTaskCreateStatic>
 800828e:	4603      	mov	r3, r0
 8008290:	4a20      	ldr	r2, [pc, #128]	; (8008314 <vTaskStartScheduler+0xbc>)
 8008292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008294:	4b1f      	ldr	r3, [pc, #124]	; (8008314 <vTaskStartScheduler+0xbc>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800829c:	2301      	movs	r3, #1
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	e001      	b.n	80082a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d102      	bne.n	80082b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082ac:	f000 fcfc 	bl	8008ca8 <xTimerCreateTimerTask>
 80082b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d116      	bne.n	80082e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	613b      	str	r3, [r7, #16]
}
 80082ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082cc:	4b12      	ldr	r3, [pc, #72]	; (8008318 <vTaskStartScheduler+0xc0>)
 80082ce:	f04f 32ff 	mov.w	r2, #4294967295
 80082d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082d4:	4b11      	ldr	r3, [pc, #68]	; (800831c <vTaskStartScheduler+0xc4>)
 80082d6:	2201      	movs	r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082da:	4b11      	ldr	r3, [pc, #68]	; (8008320 <vTaskStartScheduler+0xc8>)
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082e0:	f7fe ffae 	bl	8007240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082e4:	e00e      	b.n	8008304 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ec:	d10a      	bne.n	8008304 <vTaskStartScheduler+0xac>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	60fb      	str	r3, [r7, #12]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <vTaskStartScheduler+0xaa>
}
 8008304:	bf00      	nop
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	080093d0 	.word	0x080093d0
 8008310:	0800893d 	.word	0x0800893d
 8008314:	20000db8 	.word	0x20000db8
 8008318:	20000db4 	.word	0x20000db4
 800831c:	20000da0 	.word	0x20000da0
 8008320:	20000d98 	.word	0x20000d98

08008324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008328:	4b04      	ldr	r3, [pc, #16]	; (800833c <vTaskSuspendAll+0x18>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3301      	adds	r3, #1
 800832e:	4a03      	ldr	r2, [pc, #12]	; (800833c <vTaskSuspendAll+0x18>)
 8008330:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008332:	bf00      	nop
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	20000dbc 	.word	0x20000dbc

08008340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800834a:	2300      	movs	r3, #0
 800834c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800834e:	4b42      	ldr	r3, [pc, #264]	; (8008458 <xTaskResumeAll+0x118>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <xTaskResumeAll+0x2c>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	603b      	str	r3, [r7, #0]
}
 8008368:	bf00      	nop
 800836a:	e7fe      	b.n	800836a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800836c:	f7ff f80a 	bl	8007384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008370:	4b39      	ldr	r3, [pc, #228]	; (8008458 <xTaskResumeAll+0x118>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3b01      	subs	r3, #1
 8008376:	4a38      	ldr	r2, [pc, #224]	; (8008458 <xTaskResumeAll+0x118>)
 8008378:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800837a:	4b37      	ldr	r3, [pc, #220]	; (8008458 <xTaskResumeAll+0x118>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d162      	bne.n	8008448 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008382:	4b36      	ldr	r3, [pc, #216]	; (800845c <xTaskResumeAll+0x11c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d05e      	beq.n	8008448 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800838a:	e02f      	b.n	80083ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800838c:	4b34      	ldr	r3, [pc, #208]	; (8008460 <xTaskResumeAll+0x120>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3318      	adds	r3, #24
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fe9f 	bl	80070dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3304      	adds	r3, #4
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe fe9a 	bl	80070dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ac:	4b2d      	ldr	r3, [pc, #180]	; (8008464 <xTaskResumeAll+0x124>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d903      	bls.n	80083bc <xTaskResumeAll+0x7c>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	4a2a      	ldr	r2, [pc, #168]	; (8008464 <xTaskResumeAll+0x124>)
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4a27      	ldr	r2, [pc, #156]	; (8008468 <xTaskResumeAll+0x128>)
 80083ca:	441a      	add	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f7fe fe25 	bl	8007022 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083dc:	4b23      	ldr	r3, [pc, #140]	; (800846c <xTaskResumeAll+0x12c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d302      	bcc.n	80083ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80083e6:	4b22      	ldr	r3, [pc, #136]	; (8008470 <xTaskResumeAll+0x130>)
 80083e8:	2201      	movs	r2, #1
 80083ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083ec:	4b1c      	ldr	r3, [pc, #112]	; (8008460 <xTaskResumeAll+0x120>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1cb      	bne.n	800838c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083fa:	f000 fb55 	bl	8008aa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80083fe:	4b1d      	ldr	r3, [pc, #116]	; (8008474 <xTaskResumeAll+0x134>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d010      	beq.n	800842c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800840a:	f000 f847 	bl	800849c <xTaskIncrementTick>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008414:	4b16      	ldr	r3, [pc, #88]	; (8008470 <xTaskResumeAll+0x130>)
 8008416:	2201      	movs	r2, #1
 8008418:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3b01      	subs	r3, #1
 800841e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1f1      	bne.n	800840a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008426:	4b13      	ldr	r3, [pc, #76]	; (8008474 <xTaskResumeAll+0x134>)
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800842c:	4b10      	ldr	r3, [pc, #64]	; (8008470 <xTaskResumeAll+0x130>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d009      	beq.n	8008448 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008434:	2301      	movs	r3, #1
 8008436:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008438:	4b0f      	ldr	r3, [pc, #60]	; (8008478 <xTaskResumeAll+0x138>)
 800843a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008448:	f7fe ffcc 	bl	80073e4 <vPortExitCritical>

	return xAlreadyYielded;
 800844c:	68bb      	ldr	r3, [r7, #8]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000dbc 	.word	0x20000dbc
 800845c:	20000d94 	.word	0x20000d94
 8008460:	20000d54 	.word	0x20000d54
 8008464:	20000d9c 	.word	0x20000d9c
 8008468:	200008c4 	.word	0x200008c4
 800846c:	200008c0 	.word	0x200008c0
 8008470:	20000da8 	.word	0x20000da8
 8008474:	20000da4 	.word	0x20000da4
 8008478:	e000ed04 	.word	0xe000ed04

0800847c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008482:	4b05      	ldr	r3, [pc, #20]	; (8008498 <xTaskGetTickCount+0x1c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008488:	687b      	ldr	r3, [r7, #4]
}
 800848a:	4618      	mov	r0, r3
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20000d98 	.word	0x20000d98

0800849c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084a6:	4b4f      	ldr	r3, [pc, #316]	; (80085e4 <xTaskIncrementTick+0x148>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f040 808f 	bne.w	80085ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084b0:	4b4d      	ldr	r3, [pc, #308]	; (80085e8 <xTaskIncrementTick+0x14c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3301      	adds	r3, #1
 80084b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084b8:	4a4b      	ldr	r2, [pc, #300]	; (80085e8 <xTaskIncrementTick+0x14c>)
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d120      	bne.n	8008506 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80084c4:	4b49      	ldr	r3, [pc, #292]	; (80085ec <xTaskIncrementTick+0x150>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	603b      	str	r3, [r7, #0]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <xTaskIncrementTick+0x46>
 80084e4:	4b41      	ldr	r3, [pc, #260]	; (80085ec <xTaskIncrementTick+0x150>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	4b41      	ldr	r3, [pc, #260]	; (80085f0 <xTaskIncrementTick+0x154>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a3f      	ldr	r2, [pc, #252]	; (80085ec <xTaskIncrementTick+0x150>)
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	4a3f      	ldr	r2, [pc, #252]	; (80085f0 <xTaskIncrementTick+0x154>)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	4b3e      	ldr	r3, [pc, #248]	; (80085f4 <xTaskIncrementTick+0x158>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3301      	adds	r3, #1
 80084fe:	4a3d      	ldr	r2, [pc, #244]	; (80085f4 <xTaskIncrementTick+0x158>)
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	f000 fad1 	bl	8008aa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008506:	4b3c      	ldr	r3, [pc, #240]	; (80085f8 <xTaskIncrementTick+0x15c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	429a      	cmp	r2, r3
 800850e:	d349      	bcc.n	80085a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008510:	4b36      	ldr	r3, [pc, #216]	; (80085ec <xTaskIncrementTick+0x150>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d104      	bne.n	8008524 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800851a:	4b37      	ldr	r3, [pc, #220]	; (80085f8 <xTaskIncrementTick+0x15c>)
 800851c:	f04f 32ff 	mov.w	r2, #4294967295
 8008520:	601a      	str	r2, [r3, #0]
					break;
 8008522:	e03f      	b.n	80085a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008524:	4b31      	ldr	r3, [pc, #196]	; (80085ec <xTaskIncrementTick+0x150>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	429a      	cmp	r2, r3
 800853a:	d203      	bcs.n	8008544 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800853c:	4a2e      	ldr	r2, [pc, #184]	; (80085f8 <xTaskIncrementTick+0x15c>)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008542:	e02f      	b.n	80085a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	3304      	adds	r3, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fdc7 	bl	80070dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d004      	beq.n	8008560 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	3318      	adds	r3, #24
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fdbe 	bl	80070dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008564:	4b25      	ldr	r3, [pc, #148]	; (80085fc <xTaskIncrementTick+0x160>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d903      	bls.n	8008574 <xTaskIncrementTick+0xd8>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	4a22      	ldr	r2, [pc, #136]	; (80085fc <xTaskIncrementTick+0x160>)
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4a1f      	ldr	r2, [pc, #124]	; (8008600 <xTaskIncrementTick+0x164>)
 8008582:	441a      	add	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f7fe fd49 	bl	8007022 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008594:	4b1b      	ldr	r3, [pc, #108]	; (8008604 <xTaskIncrementTick+0x168>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859a:	429a      	cmp	r2, r3
 800859c:	d3b8      	bcc.n	8008510 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800859e:	2301      	movs	r3, #1
 80085a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a2:	e7b5      	b.n	8008510 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085a4:	4b17      	ldr	r3, [pc, #92]	; (8008604 <xTaskIncrementTick+0x168>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	4915      	ldr	r1, [pc, #84]	; (8008600 <xTaskIncrementTick+0x164>)
 80085ac:	4613      	mov	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	440b      	add	r3, r1
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d901      	bls.n	80085c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085c0:	4b11      	ldr	r3, [pc, #68]	; (8008608 <xTaskIncrementTick+0x16c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80085c8:	2301      	movs	r3, #1
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	e004      	b.n	80085d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085ce:	4b0f      	ldr	r3, [pc, #60]	; (800860c <xTaskIncrementTick+0x170>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3301      	adds	r3, #1
 80085d4:	4a0d      	ldr	r2, [pc, #52]	; (800860c <xTaskIncrementTick+0x170>)
 80085d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085d8:	697b      	ldr	r3, [r7, #20]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000dbc 	.word	0x20000dbc
 80085e8:	20000d98 	.word	0x20000d98
 80085ec:	20000d4c 	.word	0x20000d4c
 80085f0:	20000d50 	.word	0x20000d50
 80085f4:	20000dac 	.word	0x20000dac
 80085f8:	20000db4 	.word	0x20000db4
 80085fc:	20000d9c 	.word	0x20000d9c
 8008600:	200008c4 	.word	0x200008c4
 8008604:	200008c0 	.word	0x200008c0
 8008608:	20000da8 	.word	0x20000da8
 800860c:	20000da4 	.word	0x20000da4

08008610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008616:	4b28      	ldr	r3, [pc, #160]	; (80086b8 <vTaskSwitchContext+0xa8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800861e:	4b27      	ldr	r3, [pc, #156]	; (80086bc <vTaskSwitchContext+0xac>)
 8008620:	2201      	movs	r2, #1
 8008622:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008624:	e041      	b.n	80086aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008626:	4b25      	ldr	r3, [pc, #148]	; (80086bc <vTaskSwitchContext+0xac>)
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862c:	4b24      	ldr	r3, [pc, #144]	; (80086c0 <vTaskSwitchContext+0xb0>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	e010      	b.n	8008656 <vTaskSwitchContext+0x46>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10a      	bne.n	8008650 <vTaskSwitchContext+0x40>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	607b      	str	r3, [r7, #4]
}
 800864c:	bf00      	nop
 800864e:	e7fe      	b.n	800864e <vTaskSwitchContext+0x3e>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3b01      	subs	r3, #1
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	491b      	ldr	r1, [pc, #108]	; (80086c4 <vTaskSwitchContext+0xb4>)
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0e4      	beq.n	8008634 <vTaskSwitchContext+0x24>
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	4613      	mov	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4a13      	ldr	r2, [pc, #76]	; (80086c4 <vTaskSwitchContext+0xb4>)
 8008676:	4413      	add	r3, r2
 8008678:	60bb      	str	r3, [r7, #8]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	605a      	str	r2, [r3, #4]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	3308      	adds	r3, #8
 800868c:	429a      	cmp	r2, r3
 800868e:	d104      	bne.n	800869a <vTaskSwitchContext+0x8a>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	605a      	str	r2, [r3, #4]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	4a09      	ldr	r2, [pc, #36]	; (80086c8 <vTaskSwitchContext+0xb8>)
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	4a06      	ldr	r2, [pc, #24]	; (80086c0 <vTaskSwitchContext+0xb0>)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6013      	str	r3, [r2, #0]
}
 80086aa:	bf00      	nop
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20000dbc 	.word	0x20000dbc
 80086bc:	20000da8 	.word	0x20000da8
 80086c0:	20000d9c 	.word	0x20000d9c
 80086c4:	200008c4 	.word	0x200008c4
 80086c8:	200008c0 	.word	0x200008c0

080086cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10a      	bne.n	80086f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60fb      	str	r3, [r7, #12]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086f2:	4b07      	ldr	r3, [pc, #28]	; (8008710 <vTaskPlaceOnEventList+0x44>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3318      	adds	r3, #24
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7fe fcb5 	bl	800706a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008700:	2101      	movs	r1, #1
 8008702:	6838      	ldr	r0, [r7, #0]
 8008704:	f000 fa7c 	bl	8008c00 <prvAddCurrentTaskToDelayedList>
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	200008c0 	.word	0x200008c0

08008714 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10a      	bne.n	800873c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	617b      	str	r3, [r7, #20]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800873c:	4b0a      	ldr	r3, [pc, #40]	; (8008768 <vTaskPlaceOnEventListRestricted+0x54>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3318      	adds	r3, #24
 8008742:	4619      	mov	r1, r3
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f7fe fc6c 	bl	8007022 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008750:	f04f 33ff 	mov.w	r3, #4294967295
 8008754:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	68b8      	ldr	r0, [r7, #8]
 800875a:	f000 fa51 	bl	8008c00 <prvAddCurrentTaskToDelayedList>
	}
 800875e:	bf00      	nop
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200008c0 	.word	0x200008c0

0800876c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10a      	bne.n	8008798 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	60fb      	str	r3, [r7, #12]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	3318      	adds	r3, #24
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fc9d 	bl	80070dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087a2:	4b1e      	ldr	r3, [pc, #120]	; (800881c <xTaskRemoveFromEventList+0xb0>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d11d      	bne.n	80087e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe fc94 	bl	80070dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	4b19      	ldr	r3, [pc, #100]	; (8008820 <xTaskRemoveFromEventList+0xb4>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d903      	bls.n	80087c8 <xTaskRemoveFromEventList+0x5c>
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	4a16      	ldr	r2, [pc, #88]	; (8008820 <xTaskRemoveFromEventList+0xb4>)
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4a13      	ldr	r2, [pc, #76]	; (8008824 <xTaskRemoveFromEventList+0xb8>)
 80087d6:	441a      	add	r2, r3
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	3304      	adds	r3, #4
 80087dc:	4619      	mov	r1, r3
 80087de:	4610      	mov	r0, r2
 80087e0:	f7fe fc1f 	bl	8007022 <vListInsertEnd>
 80087e4:	e005      	b.n	80087f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	3318      	adds	r3, #24
 80087ea:	4619      	mov	r1, r3
 80087ec:	480e      	ldr	r0, [pc, #56]	; (8008828 <xTaskRemoveFromEventList+0xbc>)
 80087ee:	f7fe fc18 	bl	8007022 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f6:	4b0d      	ldr	r3, [pc, #52]	; (800882c <xTaskRemoveFromEventList+0xc0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d905      	bls.n	800880c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008800:	2301      	movs	r3, #1
 8008802:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008804:	4b0a      	ldr	r3, [pc, #40]	; (8008830 <xTaskRemoveFromEventList+0xc4>)
 8008806:	2201      	movs	r2, #1
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	e001      	b.n	8008810 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800880c:	2300      	movs	r3, #0
 800880e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008810:	697b      	ldr	r3, [r7, #20]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000dbc 	.word	0x20000dbc
 8008820:	20000d9c 	.word	0x20000d9c
 8008824:	200008c4 	.word	0x200008c4
 8008828:	20000d54 	.word	0x20000d54
 800882c:	200008c0 	.word	0x200008c0
 8008830:	20000da8 	.word	0x20000da8

08008834 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800883c:	4b06      	ldr	r3, [pc, #24]	; (8008858 <vTaskInternalSetTimeOutState+0x24>)
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <vTaskInternalSetTimeOutState+0x28>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	605a      	str	r2, [r3, #4]
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	20000dac 	.word	0x20000dac
 800885c:	20000d98 	.word	0x20000d98

08008860 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	613b      	str	r3, [r7, #16]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	60fb      	str	r3, [r7, #12]
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80088a2:	f7fe fd6f 	bl	8007384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088a6:	4b1d      	ldr	r3, [pc, #116]	; (800891c <xTaskCheckForTimeOut+0xbc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d102      	bne.n	80088c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088c0:	2300      	movs	r3, #0
 80088c2:	61fb      	str	r3, [r7, #28]
 80088c4:	e023      	b.n	800890e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4b15      	ldr	r3, [pc, #84]	; (8008920 <xTaskCheckForTimeOut+0xc0>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d007      	beq.n	80088e2 <xTaskCheckForTimeOut+0x82>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d302      	bcc.n	80088e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088dc:	2301      	movs	r3, #1
 80088de:	61fb      	str	r3, [r7, #28]
 80088e0:	e015      	b.n	800890e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d20b      	bcs.n	8008904 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	1ad2      	subs	r2, r2, r3
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff ff9b 	bl	8008834 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
 8008902:	e004      	b.n	800890e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800890a:	2301      	movs	r3, #1
 800890c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800890e:	f7fe fd69 	bl	80073e4 <vPortExitCritical>

	return xReturn;
 8008912:	69fb      	ldr	r3, [r7, #28]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	20000d98 	.word	0x20000d98
 8008920:	20000dac 	.word	0x20000dac

08008924 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008928:	4b03      	ldr	r3, [pc, #12]	; (8008938 <vTaskMissedYield+0x14>)
 800892a:	2201      	movs	r2, #1
 800892c:	601a      	str	r2, [r3, #0]
}
 800892e:	bf00      	nop
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	20000da8 	.word	0x20000da8

0800893c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008944:	f000 f852 	bl	80089ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008948:	4b06      	ldr	r3, [pc, #24]	; (8008964 <prvIdleTask+0x28>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d9f9      	bls.n	8008944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <prvIdleTask+0x2c>)
 8008952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008960:	e7f0      	b.n	8008944 <prvIdleTask+0x8>
 8008962:	bf00      	nop
 8008964:	200008c4 	.word	0x200008c4
 8008968:	e000ed04 	.word	0xe000ed04

0800896c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008972:	2300      	movs	r3, #0
 8008974:	607b      	str	r3, [r7, #4]
 8008976:	e00c      	b.n	8008992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4a12      	ldr	r2, [pc, #72]	; (80089cc <prvInitialiseTaskLists+0x60>)
 8008984:	4413      	add	r3, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f7fe fb1e 	bl	8006fc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3301      	adds	r3, #1
 8008990:	607b      	str	r3, [r7, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b37      	cmp	r3, #55	; 0x37
 8008996:	d9ef      	bls.n	8008978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008998:	480d      	ldr	r0, [pc, #52]	; (80089d0 <prvInitialiseTaskLists+0x64>)
 800899a:	f7fe fb15 	bl	8006fc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800899e:	480d      	ldr	r0, [pc, #52]	; (80089d4 <prvInitialiseTaskLists+0x68>)
 80089a0:	f7fe fb12 	bl	8006fc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089a4:	480c      	ldr	r0, [pc, #48]	; (80089d8 <prvInitialiseTaskLists+0x6c>)
 80089a6:	f7fe fb0f 	bl	8006fc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089aa:	480c      	ldr	r0, [pc, #48]	; (80089dc <prvInitialiseTaskLists+0x70>)
 80089ac:	f7fe fb0c 	bl	8006fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089b0:	480b      	ldr	r0, [pc, #44]	; (80089e0 <prvInitialiseTaskLists+0x74>)
 80089b2:	f7fe fb09 	bl	8006fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089b6:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <prvInitialiseTaskLists+0x78>)
 80089b8:	4a05      	ldr	r2, [pc, #20]	; (80089d0 <prvInitialiseTaskLists+0x64>)
 80089ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <prvInitialiseTaskLists+0x7c>)
 80089be:	4a05      	ldr	r2, [pc, #20]	; (80089d4 <prvInitialiseTaskLists+0x68>)
 80089c0:	601a      	str	r2, [r3, #0]
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200008c4 	.word	0x200008c4
 80089d0:	20000d24 	.word	0x20000d24
 80089d4:	20000d38 	.word	0x20000d38
 80089d8:	20000d54 	.word	0x20000d54
 80089dc:	20000d68 	.word	0x20000d68
 80089e0:	20000d80 	.word	0x20000d80
 80089e4:	20000d4c 	.word	0x20000d4c
 80089e8:	20000d50 	.word	0x20000d50

080089ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089f2:	e019      	b.n	8008a28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089f4:	f7fe fcc6 	bl	8007384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f8:	4b10      	ldr	r3, [pc, #64]	; (8008a3c <prvCheckTasksWaitingTermination+0x50>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fe fb69 	bl	80070dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <prvCheckTasksWaitingTermination+0x54>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	4a0b      	ldr	r2, [pc, #44]	; (8008a40 <prvCheckTasksWaitingTermination+0x54>)
 8008a12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a14:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <prvCheckTasksWaitingTermination+0x58>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	4a0a      	ldr	r2, [pc, #40]	; (8008a44 <prvCheckTasksWaitingTermination+0x58>)
 8008a1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a1e:	f7fe fce1 	bl	80073e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f810 	bl	8008a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a28:	4b06      	ldr	r3, [pc, #24]	; (8008a44 <prvCheckTasksWaitingTermination+0x58>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e1      	bne.n	80089f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */

}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20000d68 	.word	0x20000d68
 8008a40:	20000d94 	.word	0x20000d94
 8008a44:	20000d7c 	.word	0x20000d7c

08008a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d108      	bne.n	8008a6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe f9f6 	bl	8006e50 <vPortFree>
				vPortFree( pxTCB );
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7fe f9f3 	bl	8006e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a6a:	e018      	b.n	8008a9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d103      	bne.n	8008a7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fe f9ea 	bl	8006e50 <vPortFree>
	}
 8008a7c:	e00f      	b.n	8008a9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d00a      	beq.n	8008a9e <prvDeleteTCB+0x56>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	60fb      	str	r3, [r7, #12]
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <prvDeleteTCB+0x54>
	}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aae:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <prvResetNextTaskUnblockTime+0x38>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d104      	bne.n	8008ac2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8008aba:	f04f 32ff 	mov.w	r2, #4294967295
 8008abe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ac0:	e008      	b.n	8008ad4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac2:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <prvResetNextTaskUnblockTime+0x38>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	4a04      	ldr	r2, [pc, #16]	; (8008ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8008ad2:	6013      	str	r3, [r2, #0]
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	20000d4c 	.word	0x20000d4c
 8008ae4:	20000db4 	.word	0x20000db4

08008ae8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008aee:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <xTaskGetSchedulerState+0x34>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d102      	bne.n	8008afc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008af6:	2301      	movs	r3, #1
 8008af8:	607b      	str	r3, [r7, #4]
 8008afa:	e008      	b.n	8008b0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008afc:	4b08      	ldr	r3, [pc, #32]	; (8008b20 <xTaskGetSchedulerState+0x38>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d102      	bne.n	8008b0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b04:	2302      	movs	r3, #2
 8008b06:	607b      	str	r3, [r7, #4]
 8008b08:	e001      	b.n	8008b0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b0e:	687b      	ldr	r3, [r7, #4]
	}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	20000da0 	.word	0x20000da0
 8008b20:	20000dbc 	.word	0x20000dbc

08008b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b30:	2300      	movs	r3, #0
 8008b32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d056      	beq.n	8008be8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b3a:	4b2e      	ldr	r3, [pc, #184]	; (8008bf4 <xTaskPriorityDisinherit+0xd0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d00a      	beq.n	8008b5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	60fb      	str	r3, [r7, #12]
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	60bb      	str	r3, [r7, #8]
}
 8008b74:	bf00      	nop
 8008b76:	e7fe      	b.n	8008b76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b7c:	1e5a      	subs	r2, r3, #1
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d02c      	beq.n	8008be8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d128      	bne.n	8008be8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fa9e 	bl	80070dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <xTaskPriorityDisinherit+0xd4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d903      	bls.n	8008bc8 <xTaskPriorityDisinherit+0xa4>
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	4a0c      	ldr	r2, [pc, #48]	; (8008bf8 <xTaskPriorityDisinherit+0xd4>)
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4a09      	ldr	r2, [pc, #36]	; (8008bfc <xTaskPriorityDisinherit+0xd8>)
 8008bd6:	441a      	add	r2, r3
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	f7fe fa1f 	bl	8007022 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008be8:	697b      	ldr	r3, [r7, #20]
	}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200008c0 	.word	0x200008c0
 8008bf8:	20000d9c 	.word	0x20000d9c
 8008bfc:	200008c4 	.word	0x200008c4

08008c00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c0a:	4b21      	ldr	r3, [pc, #132]	; (8008c90 <prvAddCurrentTaskToDelayedList+0x90>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c10:	4b20      	ldr	r3, [pc, #128]	; (8008c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3304      	adds	r3, #4
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fe fa60 	bl	80070dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c22:	d10a      	bne.n	8008c3a <prvAddCurrentTaskToDelayedList+0x3a>
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d007      	beq.n	8008c3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c2a:	4b1a      	ldr	r3, [pc, #104]	; (8008c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4619      	mov	r1, r3
 8008c32:	4819      	ldr	r0, [pc, #100]	; (8008c98 <prvAddCurrentTaskToDelayedList+0x98>)
 8008c34:	f7fe f9f5 	bl	8007022 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c38:	e026      	b.n	8008c88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4413      	add	r3, r2
 8008c40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c42:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d209      	bcs.n	8008c66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c52:	4b12      	ldr	r3, [pc, #72]	; (8008c9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4610      	mov	r0, r2
 8008c60:	f7fe fa03 	bl	800706a <vListInsert>
}
 8008c64:	e010      	b.n	8008c88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c66:	4b0e      	ldr	r3, [pc, #56]	; (8008ca0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4619      	mov	r1, r3
 8008c72:	4610      	mov	r0, r2
 8008c74:	f7fe f9f9 	bl	800706a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c78:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d202      	bcs.n	8008c88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c82:	4a08      	ldr	r2, [pc, #32]	; (8008ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	6013      	str	r3, [r2, #0]
}
 8008c88:	bf00      	nop
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20000d98 	.word	0x20000d98
 8008c94:	200008c0 	.word	0x200008c0
 8008c98:	20000d80 	.word	0x20000d80
 8008c9c:	20000d50 	.word	0x20000d50
 8008ca0:	20000d4c 	.word	0x20000d4c
 8008ca4:	20000db4 	.word	0x20000db4

08008ca8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	; 0x28
 8008cac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008cb2:	f000 fb07 	bl	80092c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008cb6:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <xTimerCreateTimerTask+0x80>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d021      	beq.n	8008d02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008cc6:	1d3a      	adds	r2, r7, #4
 8008cc8:	f107 0108 	add.w	r1, r7, #8
 8008ccc:	f107 030c 	add.w	r3, r7, #12
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fe f8a3 	bl	8006e1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	9202      	str	r2, [sp, #8]
 8008cde:	9301      	str	r3, [sp, #4]
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	460a      	mov	r2, r1
 8008ce8:	4910      	ldr	r1, [pc, #64]	; (8008d2c <xTimerCreateTimerTask+0x84>)
 8008cea:	4811      	ldr	r0, [pc, #68]	; (8008d30 <xTimerCreateTimerTask+0x88>)
 8008cec:	f7ff f958 	bl	8007fa0 <xTaskCreateStatic>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	4a10      	ldr	r2, [pc, #64]	; (8008d34 <xTimerCreateTimerTask+0x8c>)
 8008cf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <xTimerCreateTimerTask+0x8c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10a      	bne.n	8008d1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	613b      	str	r3, [r7, #16]
}
 8008d1a:	bf00      	nop
 8008d1c:	e7fe      	b.n	8008d1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008d1e:	697b      	ldr	r3, [r7, #20]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000df0 	.word	0x20000df0
 8008d2c:	080093d8 	.word	0x080093d8
 8008d30:	08008e6d 	.word	0x08008e6d
 8008d34:	20000df4 	.word	0x20000df4

08008d38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08a      	sub	sp, #40	; 0x28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	623b      	str	r3, [r7, #32]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008d66:	4b1a      	ldr	r3, [pc, #104]	; (8008dd0 <xTimerGenericCommand+0x98>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d02a      	beq.n	8008dc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b05      	cmp	r3, #5
 8008d7e:	dc18      	bgt.n	8008db2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d80:	f7ff feb2 	bl	8008ae8 <xTaskGetSchedulerState>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d109      	bne.n	8008d9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d8a:	4b11      	ldr	r3, [pc, #68]	; (8008dd0 <xTimerGenericCommand+0x98>)
 8008d8c:	6818      	ldr	r0, [r3, #0]
 8008d8e:	f107 0110 	add.w	r1, r7, #16
 8008d92:	2300      	movs	r3, #0
 8008d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d96:	f7fe fd1b 	bl	80077d0 <xQueueGenericSend>
 8008d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8008d9c:	e012      	b.n	8008dc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d9e:	4b0c      	ldr	r3, [pc, #48]	; (8008dd0 <xTimerGenericCommand+0x98>)
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	f107 0110 	add.w	r1, r7, #16
 8008da6:	2300      	movs	r3, #0
 8008da8:	2200      	movs	r2, #0
 8008daa:	f7fe fd11 	bl	80077d0 <xQueueGenericSend>
 8008dae:	6278      	str	r0, [r7, #36]	; 0x24
 8008db0:	e008      	b.n	8008dc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008db2:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <xTimerGenericCommand+0x98>)
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	f107 0110 	add.w	r1, r7, #16
 8008dba:	2300      	movs	r3, #0
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	f7fe fe05 	bl	80079cc <xQueueGenericSendFromISR>
 8008dc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3728      	adds	r7, #40	; 0x28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000df0 	.word	0x20000df0

08008dd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af02      	add	r7, sp, #8
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dde:	4b22      	ldr	r3, [pc, #136]	; (8008e68 <prvProcessExpiredTimer+0x94>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe f975 	bl	80070dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008df8:	f003 0304 	and.w	r3, r3, #4
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d022      	beq.n	8008e46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	699a      	ldr	r2, [r3, #24]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	18d1      	adds	r1, r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	6978      	ldr	r0, [r7, #20]
 8008e0e:	f000 f8d1 	bl	8008fb4 <prvInsertTimerInActiveList>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01f      	beq.n	8008e58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e18:	2300      	movs	r3, #0
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	2100      	movs	r1, #0
 8008e22:	6978      	ldr	r0, [r7, #20]
 8008e24:	f7ff ff88 	bl	8008d38 <xTimerGenericCommand>
 8008e28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d113      	bne.n	8008e58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	60fb      	str	r3, [r7, #12]
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e4c:	f023 0301 	bic.w	r3, r3, #1
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	6978      	ldr	r0, [r7, #20]
 8008e5e:	4798      	blx	r3
}
 8008e60:	bf00      	nop
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	20000de8 	.word	0x20000de8

08008e6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e74:	f107 0308 	add.w	r3, r7, #8
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 f857 	bl	8008f2c <prvGetNextExpireTime>
 8008e7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4619      	mov	r1, r3
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 f803 	bl	8008e90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e8a:	f000 f8d5 	bl	8009038 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e8e:	e7f1      	b.n	8008e74 <prvTimerTask+0x8>

08008e90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e9a:	f7ff fa43 	bl	8008324 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e9e:	f107 0308 	add.w	r3, r7, #8
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f866 	bl	8008f74 <prvSampleTimeNow>
 8008ea8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d130      	bne.n	8008f12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10a      	bne.n	8008ecc <prvProcessTimerOrBlockTask+0x3c>
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d806      	bhi.n	8008ecc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ebe:	f7ff fa3f 	bl	8008340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ec2:	68f9      	ldr	r1, [r7, #12]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff ff85 	bl	8008dd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008eca:	e024      	b.n	8008f16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d008      	beq.n	8008ee4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ed2:	4b13      	ldr	r3, [pc, #76]	; (8008f20 <prvProcessTimerOrBlockTask+0x90>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <prvProcessTimerOrBlockTask+0x50>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e000      	b.n	8008ee2 <prvProcessTimerOrBlockTask+0x52>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ee4:	4b0f      	ldr	r3, [pc, #60]	; (8008f24 <prvProcessTimerOrBlockTask+0x94>)
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	f7ff f821 	bl	8007f38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008ef6:	f7ff fa23 	bl	8008340 <xTaskResumeAll>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f00:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <prvProcessTimerOrBlockTask+0x98>)
 8008f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	f3bf 8f6f 	isb	sy
}
 8008f10:	e001      	b.n	8008f16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008f12:	f7ff fa15 	bl	8008340 <xTaskResumeAll>
}
 8008f16:	bf00      	nop
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20000dec 	.word	0x20000dec
 8008f24:	20000df0 	.word	0x20000df0
 8008f28:	e000ed04 	.word	0xe000ed04

08008f2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f34:	4b0e      	ldr	r3, [pc, #56]	; (8008f70 <prvGetNextExpireTime+0x44>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <prvGetNextExpireTime+0x16>
 8008f3e:	2201      	movs	r2, #1
 8008f40:	e000      	b.n	8008f44 <prvGetNextExpireTime+0x18>
 8008f42:	2200      	movs	r2, #0
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d105      	bne.n	8008f5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <prvGetNextExpireTime+0x44>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	e001      	b.n	8008f60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008f60:	68fb      	ldr	r3, [r7, #12]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	20000de8 	.word	0x20000de8

08008f74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f7c:	f7ff fa7e 	bl	800847c <xTaskGetTickCount>
 8008f80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f82:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <prvSampleTimeNow+0x3c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d205      	bcs.n	8008f98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f8c:	f000 f936 	bl	80091fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	e002      	b.n	8008f9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f9e:	4a04      	ldr	r2, [pc, #16]	; (8008fb0 <prvSampleTimeNow+0x3c>)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000df8 	.word	0x20000df8

08008fb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d812      	bhi.n	8009000 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	1ad2      	subs	r2, r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d302      	bcc.n	8008fee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	e01b      	b.n	8009026 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008fee:	4b10      	ldr	r3, [pc, #64]	; (8009030 <prvInsertTimerInActiveList+0x7c>)
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	f7fe f836 	bl	800706a <vListInsert>
 8008ffe:	e012      	b.n	8009026 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d206      	bcs.n	8009016 <prvInsertTimerInActiveList+0x62>
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	d302      	bcc.n	8009016 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009010:	2301      	movs	r3, #1
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	e007      	b.n	8009026 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009016:	4b07      	ldr	r3, [pc, #28]	; (8009034 <prvInsertTimerInActiveList+0x80>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3304      	adds	r3, #4
 800901e:	4619      	mov	r1, r3
 8009020:	4610      	mov	r0, r2
 8009022:	f7fe f822 	bl	800706a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009026:	697b      	ldr	r3, [r7, #20]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000dec 	.word	0x20000dec
 8009034:	20000de8 	.word	0x20000de8

08009038 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08e      	sub	sp, #56	; 0x38
 800903c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800903e:	e0ca      	b.n	80091d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	da18      	bge.n	8009078 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009046:	1d3b      	adds	r3, r7, #4
 8009048:	3304      	adds	r3, #4
 800904a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10a      	bne.n	8009068 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	61fb      	str	r3, [r7, #28]
}
 8009064:	bf00      	nop
 8009066:	e7fe      	b.n	8009066 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800906e:	6850      	ldr	r0, [r2, #4]
 8009070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009072:	6892      	ldr	r2, [r2, #8]
 8009074:	4611      	mov	r1, r2
 8009076:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	f2c0 80aa 	blt.w	80091d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d004      	beq.n	8009096 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	3304      	adds	r3, #4
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe f823 	bl	80070dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009096:	463b      	mov	r3, r7
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff ff6b 	bl	8008f74 <prvSampleTimeNow>
 800909e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b09      	cmp	r3, #9
 80090a4:	f200 8097 	bhi.w	80091d6 <prvProcessReceivedCommands+0x19e>
 80090a8:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <prvProcessReceivedCommands+0x78>)
 80090aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ae:	bf00      	nop
 80090b0:	080090d9 	.word	0x080090d9
 80090b4:	080090d9 	.word	0x080090d9
 80090b8:	080090d9 	.word	0x080090d9
 80090bc:	0800914d 	.word	0x0800914d
 80090c0:	08009161 	.word	0x08009161
 80090c4:	080091ab 	.word	0x080091ab
 80090c8:	080090d9 	.word	0x080090d9
 80090cc:	080090d9 	.word	0x080090d9
 80090d0:	0800914d 	.word	0x0800914d
 80090d4:	08009161 	.word	0x08009161
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090de:	f043 0301 	orr.w	r3, r3, #1
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	18d1      	adds	r1, r2, r3
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090f8:	f7ff ff5c 	bl	8008fb4 <prvInsertTimerInActiveList>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d069      	beq.n	80091d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009108:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800910a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009110:	f003 0304 	and.w	r3, r3, #4
 8009114:	2b00      	cmp	r3, #0
 8009116:	d05e      	beq.n	80091d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	441a      	add	r2, r3
 8009120:	2300      	movs	r3, #0
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	2100      	movs	r1, #0
 8009128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800912a:	f7ff fe05 	bl	8008d38 <xTimerGenericCommand>
 800912e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d14f      	bne.n	80091d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	61bb      	str	r3, [r7, #24]
}
 8009148:	bf00      	nop
 800914a:	e7fe      	b.n	800914a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009152:	f023 0301 	bic.w	r3, r3, #1
 8009156:	b2da      	uxtb	r2, r3
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800915e:	e03a      	b.n	80091d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009166:	f043 0301 	orr.w	r3, r3, #1
 800916a:	b2da      	uxtb	r2, r3
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10a      	bne.n	8009196 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	617b      	str	r3, [r7, #20]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	699a      	ldr	r2, [r3, #24]
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	18d1      	adds	r1, r2, r3
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a4:	f7ff ff06 	bl	8008fb4 <prvInsertTimerInActiveList>
					break;
 80091a8:	e015      	b.n	80091d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d103      	bne.n	80091c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80091b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ba:	f7fd fe49 	bl	8006e50 <vPortFree>
 80091be:	e00a      	b.n	80091d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091c6:	f023 0301 	bic.w	r3, r3, #1
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80091d2:	e000      	b.n	80091d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80091d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091d6:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <prvProcessReceivedCommands+0x1c0>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	1d39      	adds	r1, r7, #4
 80091dc:	2200      	movs	r2, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fe fc90 	bl	8007b04 <xQueueReceive>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f47f af2a 	bne.w	8009040 <prvProcessReceivedCommands+0x8>
	}
}
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
 80091f0:	3730      	adds	r7, #48	; 0x30
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20000df0 	.word	0x20000df0

080091fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009202:	e048      	b.n	8009296 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009204:	4b2d      	ldr	r3, [pc, #180]	; (80092bc <prvSwitchTimerLists+0xc0>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920e:	4b2b      	ldr	r3, [pc, #172]	; (80092bc <prvSwitchTimerLists+0xc0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3304      	adds	r3, #4
 800921c:	4618      	mov	r0, r3
 800921e:	f7fd ff5d 	bl	80070dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009230:	f003 0304 	and.w	r3, r3, #4
 8009234:	2b00      	cmp	r3, #0
 8009236:	d02e      	beq.n	8009296 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	4413      	add	r3, r2
 8009240:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	429a      	cmp	r2, r3
 8009248:	d90e      	bls.n	8009268 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009256:	4b19      	ldr	r3, [pc, #100]	; (80092bc <prvSwitchTimerLists+0xc0>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	3304      	adds	r3, #4
 800925e:	4619      	mov	r1, r3
 8009260:	4610      	mov	r0, r2
 8009262:	f7fd ff02 	bl	800706a <vListInsert>
 8009266:	e016      	b.n	8009296 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009268:	2300      	movs	r3, #0
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	2300      	movs	r3, #0
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	2100      	movs	r1, #0
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7ff fd60 	bl	8008d38 <xTimerGenericCommand>
 8009278:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	603b      	str	r3, [r7, #0]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <prvSwitchTimerLists+0xc0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1b1      	bne.n	8009204 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80092a0:	4b06      	ldr	r3, [pc, #24]	; (80092bc <prvSwitchTimerLists+0xc0>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80092a6:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <prvSwitchTimerLists+0xc4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a04      	ldr	r2, [pc, #16]	; (80092bc <prvSwitchTimerLists+0xc0>)
 80092ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80092ae:	4a04      	ldr	r2, [pc, #16]	; (80092c0 <prvSwitchTimerLists+0xc4>)
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	6013      	str	r3, [r2, #0]
}
 80092b4:	bf00      	nop
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20000de8 	.word	0x20000de8
 80092c0:	20000dec 	.word	0x20000dec

080092c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80092ca:	f7fe f85b 	bl	8007384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80092ce:	4b15      	ldr	r3, [pc, #84]	; (8009324 <prvCheckForValidListAndQueue+0x60>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d120      	bne.n	8009318 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80092d6:	4814      	ldr	r0, [pc, #80]	; (8009328 <prvCheckForValidListAndQueue+0x64>)
 80092d8:	f7fd fe76 	bl	8006fc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80092dc:	4813      	ldr	r0, [pc, #76]	; (800932c <prvCheckForValidListAndQueue+0x68>)
 80092de:	f7fd fe73 	bl	8006fc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80092e2:	4b13      	ldr	r3, [pc, #76]	; (8009330 <prvCheckForValidListAndQueue+0x6c>)
 80092e4:	4a10      	ldr	r2, [pc, #64]	; (8009328 <prvCheckForValidListAndQueue+0x64>)
 80092e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80092e8:	4b12      	ldr	r3, [pc, #72]	; (8009334 <prvCheckForValidListAndQueue+0x70>)
 80092ea:	4a10      	ldr	r2, [pc, #64]	; (800932c <prvCheckForValidListAndQueue+0x68>)
 80092ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092ee:	2300      	movs	r3, #0
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	4b11      	ldr	r3, [pc, #68]	; (8009338 <prvCheckForValidListAndQueue+0x74>)
 80092f4:	4a11      	ldr	r2, [pc, #68]	; (800933c <prvCheckForValidListAndQueue+0x78>)
 80092f6:	2110      	movs	r1, #16
 80092f8:	200a      	movs	r0, #10
 80092fa:	f7fe f9cd 	bl	8007698 <xQueueGenericCreateStatic>
 80092fe:	4603      	mov	r3, r0
 8009300:	4a08      	ldr	r2, [pc, #32]	; (8009324 <prvCheckForValidListAndQueue+0x60>)
 8009302:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009304:	4b07      	ldr	r3, [pc, #28]	; (8009324 <prvCheckForValidListAndQueue+0x60>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d005      	beq.n	8009318 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800930c:	4b05      	ldr	r3, [pc, #20]	; (8009324 <prvCheckForValidListAndQueue+0x60>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	490b      	ldr	r1, [pc, #44]	; (8009340 <prvCheckForValidListAndQueue+0x7c>)
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe fde6 	bl	8007ee4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009318:	f7fe f864 	bl	80073e4 <vPortExitCritical>
}
 800931c:	bf00      	nop
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	20000df0 	.word	0x20000df0
 8009328:	20000dc0 	.word	0x20000dc0
 800932c:	20000dd4 	.word	0x20000dd4
 8009330:	20000de8 	.word	0x20000de8
 8009334:	20000dec 	.word	0x20000dec
 8009338:	20000e9c 	.word	0x20000e9c
 800933c:	20000dfc 	.word	0x20000dfc
 8009340:	080093e0 	.word	0x080093e0

08009344 <__libc_init_array>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	4d0d      	ldr	r5, [pc, #52]	; (800937c <__libc_init_array+0x38>)
 8009348:	4c0d      	ldr	r4, [pc, #52]	; (8009380 <__libc_init_array+0x3c>)
 800934a:	1b64      	subs	r4, r4, r5
 800934c:	10a4      	asrs	r4, r4, #2
 800934e:	2600      	movs	r6, #0
 8009350:	42a6      	cmp	r6, r4
 8009352:	d109      	bne.n	8009368 <__libc_init_array+0x24>
 8009354:	4d0b      	ldr	r5, [pc, #44]	; (8009384 <__libc_init_array+0x40>)
 8009356:	4c0c      	ldr	r4, [pc, #48]	; (8009388 <__libc_init_array+0x44>)
 8009358:	f000 f82e 	bl	80093b8 <_init>
 800935c:	1b64      	subs	r4, r4, r5
 800935e:	10a4      	asrs	r4, r4, #2
 8009360:	2600      	movs	r6, #0
 8009362:	42a6      	cmp	r6, r4
 8009364:	d105      	bne.n	8009372 <__libc_init_array+0x2e>
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	f855 3b04 	ldr.w	r3, [r5], #4
 800936c:	4798      	blx	r3
 800936e:	3601      	adds	r6, #1
 8009370:	e7ee      	b.n	8009350 <__libc_init_array+0xc>
 8009372:	f855 3b04 	ldr.w	r3, [r5], #4
 8009376:	4798      	blx	r3
 8009378:	3601      	adds	r6, #1
 800937a:	e7f2      	b.n	8009362 <__libc_init_array+0x1e>
 800937c:	08009544 	.word	0x08009544
 8009380:	08009544 	.word	0x08009544
 8009384:	08009544 	.word	0x08009544
 8009388:	0800954c 	.word	0x0800954c

0800938c <memcpy>:
 800938c:	440a      	add	r2, r1
 800938e:	4291      	cmp	r1, r2
 8009390:	f100 33ff 	add.w	r3, r0, #4294967295
 8009394:	d100      	bne.n	8009398 <memcpy+0xc>
 8009396:	4770      	bx	lr
 8009398:	b510      	push	{r4, lr}
 800939a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093a2:	4291      	cmp	r1, r2
 80093a4:	d1f9      	bne.n	800939a <memcpy+0xe>
 80093a6:	bd10      	pop	{r4, pc}

080093a8 <memset>:
 80093a8:	4402      	add	r2, r0
 80093aa:	4603      	mov	r3, r0
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d100      	bne.n	80093b2 <memset+0xa>
 80093b0:	4770      	bx	lr
 80093b2:	f803 1b01 	strb.w	r1, [r3], #1
 80093b6:	e7f9      	b.n	80093ac <memset+0x4>

080093b8 <_init>:
 80093b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ba:	bf00      	nop
 80093bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093be:	bc08      	pop	{r3}
 80093c0:	469e      	mov	lr, r3
 80093c2:	4770      	bx	lr

080093c4 <_fini>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	bf00      	nop
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr
