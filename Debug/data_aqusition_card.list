
data_aqusition_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008854  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008a14  08008a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad0  08008ad0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008ad0  08008ad0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ad0  08008ad0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008ad0  08008ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ad8  08008ad8  00018ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b6c  20000010  08008aec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b7c  08008aec  00021b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f0bf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000540a  00000000  00000000  0005f0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f8  00000000  00000000  00064510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002020  00000000  00000000  00066708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003387d  00000000  00000000  00068728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025de8  00000000  00000000  0009bfa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b4bf  00000000  00000000  000c1d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020d24c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009188  00000000  00000000  0020d2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080089fc 	.word	0x080089fc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	080089fc 	.word	0x080089fc

08000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>:
	 * @param  pBuffer: pointer to data to be read.
	 * @param  RegisterAddr: specifies internal address register to be read.
	 * @param  NumByteToRead: number of bytes to be read.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Read(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4611      	mov	r1, r2
 800020c:	461a      	mov	r2, r3
 800020e:	460b      	mov	r3, r1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4613      	mov	r3, r2
 8000214:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToRead) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f002 fbcf 	bl	80029c0 <HAL_GPIO_WritePin>
		uint8_t msg = RegisterAddr | 0x80;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000228:	b2db      	uxtb	r3, r3
 800022a:	75fb      	strb	r3, [r7, #23]
		/* Write Reg Address */
		HAL_SPI_Transmit(&hspi1, &msg, 1, 100);
 800022c:	f107 0117 	add.w	r1, r7, #23
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	2201      	movs	r2, #1
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000236:	f004 fcda 	bl	8004bee <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, pBuffer, nBytesToRead, 100);
 800023a:	88ba      	ldrh	r2, [r7, #4]
 800023c:	2364      	movs	r3, #100	; 0x64
 800023e:	68b9      	ldr	r1, [r7, #8]
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000242:	f004 fe42 	bl	8004eca <HAL_SPI_Receive>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2110      	movs	r1, #16
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f002 fbb7 	bl	80029c0 <HAL_GPIO_WritePin>

		return 0;
 8000252:	2300      	movs	r3, #0
	}
 8000254:	4618      	mov	r0, r3
 8000256:	3718      	adds	r7, #24
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000016c 	.word	0x2000016c

08000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>:
	 * @param  pBuffer: pointer to data to be written.
	 * @param  RegisterAddr: specifies internal address register to be written.
	 * @param  NumByteToWrite: number of bytes to write.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Write(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	4611      	mov	r1, r2
 800026c:	461a      	mov	r2, r3
 800026e:	460b      	mov	r3, r1
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	4613      	mov	r3, r2
 8000274:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToWrite) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f002 fb9f 	bl	80029c0 <HAL_GPIO_WritePin>
		/* Write Reg Address */
		uint8_t data[2];
		data[0] = RegisterAddr;  // multibyte write
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	753b      	strb	r3, [r7, #20]
		data[1] = *pBuffer;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	757b      	strb	r3, [r7, #21]

		HAL_SPI_Transmit(&hspi1, data, 2, 100);
 800028c:	f107 0114 	add.w	r1, r7, #20
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2202      	movs	r2, #2
 8000294:	4806      	ldr	r0, [pc, #24]	; (80002b0 <_ZN16ISM330DHCXSensor8IO_WriteEPhht+0x50>)
 8000296:	f004 fcaa 	bl	8004bee <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f002 fb8d 	bl	80029c0 <HAL_GPIO_WritePin>

		return 0;
 80002a6:	2300      	movs	r3, #0
	}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	2000016c 	.word	0x2000016c

080002b4 <_ZN16ISM330DHCXSensorC1Ev>:
/** Constructor SPI
 *  @param spi object
 *  @param cs_pin the chip select pin
 *  @param spi_speed the SPI speed
 */
ISM330DHCXSensor::ISM330DHCXSensor() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(&hspi1);
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <_ZN16ISM330DHCXSensorC1Ev+0x3c>)
 80002be:	f004 fbf3 	bl	8004aa8 <HAL_SPI_Init>
	reg_ctx.write_reg = ISM330DHCX_io_write;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <_ZN16ISM330DHCXSensorC1Ev+0x40>)
 80002c6:	611a      	str	r2, [r3, #16]
	reg_ctx.read_reg = ISM330DHCX_io_read;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <_ZN16ISM330DHCXSensorC1Ev+0x44>)
 80002cc:	615a      	str	r2, [r3, #20]
	reg_ctx.handle = (void*) this;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	619a      	str	r2, [r3, #24]
	address = 0U;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
	acc_is_enabled = 0U;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	735a      	strb	r2, [r3, #13]
}
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000016c 	.word	0x2000016c
 80002f4:	080002fd 	.word	0x080002fd
 80002f8:	08000327 	.word	0x08000327

080002fc <ISM330DHCX_io_write>:

	return ISM330DHCX_OK;
}

int32_t ISM330DHCX_io_write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer,
		uint16_t nBytesToWrite) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	607a      	str	r2, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	460b      	mov	r3, r1
 800030a:	72fb      	strb	r3, [r7, #11]
 800030c:	4613      	mov	r3, r2
 800030e:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Write(pBuffer, WriteAddr,
 8000310:	893b      	ldrh	r3, [r7, #8]
 8000312:	7afa      	ldrb	r2, [r7, #11]
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f7ff ffa2 	bl	8000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>
 800031c:	4603      	mov	r3, r0
			nBytesToWrite);
}
 800031e:	4618      	mov	r0, r3
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <ISM330DHCX_io_read>:

int32_t ISM330DHCX_io_read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer,
		uint16_t nBytesToRead) {
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	60f8      	str	r0, [r7, #12]
 800032e:	607a      	str	r2, [r7, #4]
 8000330:	461a      	mov	r2, r3
 8000332:	460b      	mov	r3, r1
 8000334:	72fb      	strb	r3, [r7, #11]
 8000336:	4613      	mov	r3, r2
 8000338:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Read(pBuffer, ReadAddr,
 800033a:	893b      	ldrh	r3, [r7, #8]
 800033c:	7afa      	ldrb	r2, [r7, #11]
 800033e:	6879      	ldr	r1, [r7, #4]
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f7ff ff5d 	bl	8000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>
 8000346:	4603      	mov	r3, r0
			nBytesToRead);
}
 8000348:	4618      	mov	r0, r3
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <_Z41__static_initialization_and_destruction_0ii>:
}

void ism330_read(int32_t *acceleration, int32_t *angular_rate) {
	AccGyr.ACC_GetAxes(acceleration);
	AccGyr.GYRO_GetAxes(angular_rate);
}
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d107      	bne.n	8000370 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000366:	4293      	cmp	r3, r2
 8000368:	d102      	bne.n	8000370 <_Z41__static_initialization_and_destruction_0ii+0x20>
ISM330DHCXSensor AccGyr;
 800036a:	4803      	ldr	r0, [pc, #12]	; (8000378 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800036c:	f7ff ffa2 	bl	80002b4 <_ZN16ISM330DHCXSensorC1Ev>
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	2000002c 	.word	0x2000002c

0800037c <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
 8000380:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000384:	2001      	movs	r0, #1
 8000386:	f7ff ffe3 	bl	8000350 <_Z41__static_initialization_and_destruction_0ii>
 800038a:	bd80      	pop	{r7, pc}

0800038c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000390:	f000 fdfb 	bl	8000f8a <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000394:	f000 f82e 	bl	80003f4 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000398:	f000 fa9a 	bl	80008d0 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 800039c:	f000 fa6e 	bl	800087c <_ZL11MX_DMA_Initv>
	MX_ADC1_Init();
 80003a0:	f000 f88a 	bl	80004b8 <_ZL12MX_ADC1_Initv>
	MX_CAN1_Init();
 80003a4:	f000 f97c 	bl	80006a0 <_ZL12MX_CAN1_Initv>
	MX_RTC_Init();
 80003a8:	f000 f9b6 	bl	8000718 <_ZL11MX_RTC_Initv>
	MX_SPI1_Init();
 80003ac:	f000 fa24 	bl	80007f8 <_ZL12MX_SPI1_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80003b0:	f005 fd96 	bl	8005ee0 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80003b4:	4a09      	ldr	r2, [pc, #36]	; (80003dc <main+0x50>)
 80003b6:	2100      	movs	r1, #0
 80003b8:	4809      	ldr	r0, [pc, #36]	; (80003e0 <main+0x54>)
 80003ba:	f005 fddb 	bl	8005f74 <osThreadNew>
 80003be:	4603      	mov	r3, r0
 80003c0:	4a08      	ldr	r2, [pc, #32]	; (80003e4 <main+0x58>)
 80003c2:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of blink01 */
	blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80003c4:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <main+0x5c>)
 80003c6:	2100      	movs	r1, #0
 80003c8:	4808      	ldr	r0, [pc, #32]	; (80003ec <main+0x60>)
 80003ca:	f005 fdd3 	bl	8005f74 <osThreadNew>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <main+0x64>)
 80003d2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80003d4:	f005 fda8 	bl	8005f28 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80003d8:	e7fe      	b.n	80003d8 <main+0x4c>
 80003da:	bf00      	nop
 80003dc:	08008a40 	.word	0x08008a40
 80003e0:	08000a31 	.word	0x08000a31
 80003e4:	2000021c 	.word	0x2000021c
 80003e8:	08008a64 	.word	0x08008a64
 80003ec:	08000a41 	.word	0x08000a41
 80003f0:	20000220 	.word	0x20000220

080003f4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b098      	sub	sp, #96	; 0x60
 80003f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003fa:	f107 0318 	add.w	r3, r7, #24
 80003fe:	2248      	movs	r2, #72	; 0x48
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f008 faf2 	bl	80089ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
 8000414:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000416:	2000      	movs	r0, #0
 8000418:	f002 fb2c 	bl	8002a74 <HAL_PWREx_ControlVoltageScaling>
 800041c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800041e:	2b00      	cmp	r3, #0
 8000420:	bf14      	ite	ne
 8000422:	2301      	movne	r3, #1
 8000424:	2300      	moveq	r3, #0
 8000426:	b2db      	uxtb	r3, r3
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <_Z18SystemClock_Configv+0x3c>
		Error_Handler();
 800042c:	f000 fb2a 	bl	8000a84 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000430:	2318      	movs	r3, #24
 8000432:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000434:	2301      	movs	r3, #1
 8000436:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000438:	2301      	movs	r3, #1
 800043a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000440:	2360      	movs	r3, #96	; 0x60
 8000442:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000444:	2302      	movs	r3, #2
 8000446:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000448:	2301      	movs	r3, #1
 800044a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 800044c:	2301      	movs	r3, #1
 800044e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 60;
 8000450:	233c      	movs	r3, #60	; 0x3c
 8000452:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000454:	2302      	movs	r3, #2
 8000456:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000458:	2302      	movs	r3, #2
 800045a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800045c:	2302      	movs	r3, #2
 800045e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	4618      	mov	r0, r3
 8000466:	f002 fc03 	bl	8002c70 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	bf14      	ite	ne
 8000470:	2301      	movne	r3, #1
 8000472:	2300      	moveq	r3, #0
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <_Z18SystemClock_Configv+0x8a>
		Error_Handler();
 800047a:	f000 fb03 	bl	8000a84 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2303      	movs	r3, #3
 8000484:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2105      	movs	r1, #5
 8000496:	4618      	mov	r0, r3
 8000498:	f003 f872 	bl	8003580 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	bf14      	ite	ne
 80004a2:	2301      	movne	r3, #1
 80004a4:	2300      	moveq	r3, #0
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 80004ac:	f000 faea 	bl	8000a84 <Error_Handler>
	}
}
 80004b0:	bf00      	nop
 80004b2:	3760      	adds	r7, #96	; 0x60
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	; 0x28
 80004bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80004da:	4b69      	ldr	r3, [pc, #420]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 80004dc:	4a69      	ldr	r2, [pc, #420]	; (8000684 <_ZL12MX_ADC1_Initv+0x1cc>)
 80004de:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80004e0:	4b67      	ldr	r3, [pc, #412]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 80004e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004e6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b65      	ldr	r3, [pc, #404]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ee:	4b64      	ldr	r3, [pc, #400]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004f4:	4b62      	ldr	r3, [pc, #392]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004fa:	4b61      	ldr	r3, [pc, #388]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 80004fc:	2204      	movs	r2, #4
 80004fe:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000500:	4b5f      	ldr	r3, [pc, #380]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000502:	2200      	movs	r2, #0
 8000504:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000506:	4b5e      	ldr	r3, [pc, #376]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000508:	2201      	movs	r2, #1
 800050a:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 6;
 800050c:	4b5c      	ldr	r3, [pc, #368]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 800050e:	2206      	movs	r2, #6
 8000510:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000512:	4b5b      	ldr	r3, [pc, #364]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000514:	2200      	movs	r2, #0
 8000516:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051a:	4b59      	ldr	r3, [pc, #356]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 800051c:	2200      	movs	r2, #0
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000520:	4b57      	ldr	r3, [pc, #348]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000522:	2200      	movs	r2, #0
 8000524:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000526:	4b56      	ldr	r3, [pc, #344]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000528:	2201      	movs	r2, #1
 800052a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800052e:	4b54      	ldr	r3, [pc, #336]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000530:	2200      	movs	r2, #0
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000534:	4b52      	ldr	r3, [pc, #328]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000536:	2200      	movs	r2, #0
 8000538:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800053c:	4850      	ldr	r0, [pc, #320]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 800053e:	f000 fefd 	bl	800133c <HAL_ADC_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	bf14      	ite	ne
 8000548:	2301      	movne	r3, #1
 800054a:	2300      	moveq	r3, #0
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <_ZL12MX_ADC1_Initv+0x9e>
		Error_Handler();
 8000552:	f000 fa97 	bl	8000a84 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	4619      	mov	r1, r3
 8000560:	4847      	ldr	r0, [pc, #284]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000562:	f001 fc5f 	bl	8001e24 <HAL_ADCEx_MultiModeConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	bf14      	ite	ne
 800056c:	2301      	movne	r3, #1
 800056e:	2300      	moveq	r3, #0
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <_ZL12MX_ADC1_Initv+0xc2>
		Error_Handler();
 8000576:	f000 fa85 	bl	8000a84 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800057a:	4b43      	ldr	r3, [pc, #268]	; (8000688 <_ZL12MX_ADC1_Initv+0x1d0>)
 800057c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800057e:	2306      	movs	r3, #6
 8000580:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000582:	2301      	movs	r3, #1
 8000584:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000586:	237f      	movs	r3, #127	; 0x7f
 8000588:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800058a:	2304      	movs	r3, #4
 800058c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	4619      	mov	r1, r3
 8000596:	483a      	ldr	r0, [pc, #232]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000598:	f001 f822 	bl	80015e0 <HAL_ADC_ConfigChannel>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf14      	ite	ne
 80005a2:	2301      	movne	r3, #1
 80005a4:	2300      	moveq	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <_ZL12MX_ADC1_Initv+0xf8>
		Error_Handler();
 80005ac:	f000 fa6a 	bl	8000a84 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80005b0:	4b36      	ldr	r3, [pc, #216]	; (800068c <_ZL12MX_ADC1_Initv+0x1d4>)
 80005b2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80005b4:	230c      	movs	r3, #12
 80005b6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4619      	mov	r1, r3
 80005bc:	4830      	ldr	r0, [pc, #192]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 80005be:	f001 f80f 	bl	80015e0 <HAL_ADC_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf14      	ite	ne
 80005c8:	2301      	movne	r3, #1
 80005ca:	2300      	moveq	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <_ZL12MX_ADC1_Initv+0x11e>
		Error_Handler();
 80005d2:	f000 fa57 	bl	8000a84 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80005d6:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <_ZL12MX_ADC1_Initv+0x1d8>)
 80005d8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80005da:	2312      	movs	r3, #18
 80005dc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4619      	mov	r1, r3
 80005e2:	4827      	ldr	r0, [pc, #156]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 80005e4:	f000 fffc 	bl	80015e0 <HAL_ADC_ConfigChannel>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf14      	ite	ne
 80005ee:	2301      	movne	r3, #1
 80005f0:	2300      	moveq	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <_ZL12MX_ADC1_Initv+0x144>
		Error_Handler();
 80005f8:	f000 fa44 	bl	8000a84 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <_ZL12MX_ADC1_Initv+0x1dc>)
 80005fe:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000600:	2318      	movs	r3, #24
 8000602:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4619      	mov	r1, r3
 8000608:	481d      	ldr	r0, [pc, #116]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 800060a:	f000 ffe9 	bl	80015e0 <HAL_ADC_ConfigChannel>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <_ZL12MX_ADC1_Initv+0x16a>
		Error_Handler();
 800061e:	f000 fa31 	bl	8000a84 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <_ZL12MX_ADC1_Initv+0x1e0>)
 8000624:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8000626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4619      	mov	r1, r3
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000636:	f000 ffd3 	bl	80015e0 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	bf14      	ite	ne
 8000640:	2301      	movne	r3, #1
 8000642:	2300      	moveq	r3, #0
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <_ZL12MX_ADC1_Initv+0x196>
		Error_Handler();
 800064a:	f000 fa1b 	bl	8000a84 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <_ZL12MX_ADC1_Initv+0x1e4>)
 8000650:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8000652:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000656:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <_ZL12MX_ADC1_Initv+0x1c8>)
 800065e:	f000 ffbf 	bl	80015e0 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	bf14      	ite	ne
 8000668:	2301      	movne	r3, #1
 800066a:	2300      	moveq	r3, #0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <_ZL12MX_ADC1_Initv+0x1be>
		Error_Handler();
 8000672:	f000 fa07 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000048 	.word	0x20000048
 8000684:	50040000 	.word	0x50040000
 8000688:	04300002 	.word	0x04300002
 800068c:	08600004 	.word	0x08600004
 8000690:	0c900008 	.word	0x0c900008
 8000694:	10c00010 	.word	0x10c00010
 8000698:	36902000 	.word	0x36902000
 800069c:	3ac04000 	.word	0x3ac04000

080006a0 <_ZL12MX_CAN1_Initv>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006a6:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <_ZL12MX_CAN1_Initv+0x74>)
 80006a8:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 8;
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006ac:	2208      	movs	r2, #8
 80006ae:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b6:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006c0:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80006c4:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006cc:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006dc:	2200      	movs	r2, #0
 80006de:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80006f2:	4807      	ldr	r0, [pc, #28]	; (8000710 <_ZL12MX_CAN1_Initv+0x70>)
 80006f4:	f001 fc3a 	bl	8001f6c <HAL_CAN_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <_ZL12MX_CAN1_Initv+0x6c>
		Error_Handler();
 8000708:	f000 f9bc 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000110 	.word	0x20000110
 8000714:	40006400 	.word	0x40006400

08000718 <_ZL11MX_RTC_Initv>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000730:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 8000732:	4a30      	ldr	r2, [pc, #192]	; (80007f4 <_ZL11MX_RTC_Initv+0xdc>)
 8000734:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 800073e:	227f      	movs	r2, #127	; 0x7f
 8000740:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 800075c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000760:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000768:	4821      	ldr	r0, [pc, #132]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 800076a:	f003 ff2b 	bl	80045c4 <HAL_RTC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <_ZL11MX_RTC_Initv+0x6a>
		Error_Handler();
 800077e:	f000 f981 	bl	8000a84 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000782:	2300      	movs	r3, #0
 8000784:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8000786:	2300      	movs	r3, #0
 8000788:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800078a:	2300      	movs	r3, #0
 800078c:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2201      	movs	r2, #1
 800079a:	4619      	mov	r1, r3
 800079c:	4814      	ldr	r0, [pc, #80]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 800079e:	f003 ffa1 	bl	80046e4 <HAL_RTC_SetTime>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf14      	ite	ne
 80007a8:	2301      	movne	r3, #1
 80007aa:	2300      	moveq	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <_ZL11MX_RTC_Initv+0x9e>
		Error_Handler();
 80007b2:	f000 f967 	bl	8000a84 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007b6:	2301      	movs	r3, #1
 80007b8:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 80007ba:	2301      	movs	r3, #1
 80007bc:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 80007be:	2301      	movs	r3, #1
 80007c0:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80007c6:	463b      	mov	r3, r7
 80007c8:	2201      	movs	r2, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <_ZL11MX_RTC_Initv+0xd8>)
 80007ce:	f004 f829 	bl	8004824 <HAL_RTC_SetDate>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf14      	ite	ne
 80007d8:	2301      	movne	r3, #1
 80007da:	2300      	moveq	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <_ZL11MX_RTC_Initv+0xce>
		Error_Handler();
 80007e2:	f000 f94f 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000138 	.word	0x20000138
 80007f4:	40002800 	.word	0x40002800

080007f8 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <_ZL12MX_SPI1_Initv+0x80>)
 8000800:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 8000804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000808:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 8000812:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000816:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 800081a:	2202      	movs	r2, #2
 800081c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 8000820:	2201      	movs	r2, #1
 8000822:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 8000826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 800082e:	2230      	movs	r2, #48	; 0x30
 8000830:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 8000846:	2207      	movs	r2, #7
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 8000852:	2200      	movs	r2, #0
 8000854:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <_ZL12MX_SPI1_Initv+0x7c>)
 8000858:	f004 f926 	bl	8004aa8 <HAL_SPI_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	bf14      	ite	ne
 8000862:	2301      	movne	r3, #1
 8000864:	2300      	moveq	r3, #0
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 800086c:	f000 f90a 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000016c 	.word	0x2000016c
 8000878:	40013000 	.word	0x40013000

0800087c <_ZL11MX_DMA_Initv>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <_ZL11MX_DMA_Initv+0x50>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <_ZL11MX_DMA_Initv+0x50>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6493      	str	r3, [r2, #72]	; 0x48
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <_ZL11MX_DMA_Initv+0x50>)
 8000890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <_ZL11MX_DMA_Initv+0x50>)
 800089c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <_ZL11MX_DMA_Initv+0x50>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6493      	str	r3, [r2, #72]	; 0x48
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <_ZL11MX_DMA_Initv+0x50>)
 80008a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2105      	movs	r1, #5
 80008b6:	200b      	movs	r0, #11
 80008b8:	f001 fd0c 	bl	80022d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008bc:	200b      	movs	r0, #11
 80008be:	f001 fd25 	bl	800230c <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b4f      	ldr	r3, [pc, #316]	; (8000a24 <_ZL12MX_GPIO_Initv+0x154>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a4e      	ldr	r2, [pc, #312]	; (8000a24 <_ZL12MX_GPIO_Initv+0x154>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b4c      	ldr	r3, [pc, #304]	; (8000a24 <_ZL12MX_GPIO_Initv+0x154>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b49      	ldr	r3, [pc, #292]	; (8000a24 <_ZL12MX_GPIO_Initv+0x154>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a48      	ldr	r2, [pc, #288]	; (8000a24 <_ZL12MX_GPIO_Initv+0x154>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b46      	ldr	r3, [pc, #280]	; (8000a24 <_ZL12MX_GPIO_Initv+0x154>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <_ZL12MX_GPIO_Initv+0x154>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a42      	ldr	r2, [pc, #264]	; (8000a24 <_ZL12MX_GPIO_Initv+0x154>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b40      	ldr	r3, [pc, #256]	; (8000a24 <_ZL12MX_GPIO_Initv+0x154>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2110      	movs	r1, #16
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f002 f843 	bl	80029c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800093a:	2200      	movs	r2, #0
 800093c:	f24f 0180 	movw	r1, #61568	; 0xf080
 8000940:	4839      	ldr	r0, [pc, #228]	; (8000a28 <_ZL12MX_GPIO_Initv+0x158>)
 8000942:	f002 f83d 	bl	80029c0 <HAL_GPIO_WritePin>
			LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin | GPIO_PIN_7,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8,
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800094c:	4837      	ldr	r0, [pc, #220]	; (8000a2c <_ZL12MX_GPIO_Initv+0x15c>)
 800094e:	f002 f837 	bl	80029c0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000952:	2310      	movs	r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800095a:	2302      	movs	r3, #2
 800095c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f001 fe96 	bl	800269c <HAL_GPIO_Init>

	/*Configure GPIO pins : EEPROM_SCL_Pin EEPROM_SDA_Pin */
	GPIO_InitStruct.Pin = EEPROM_SCL_Pin | EEPROM_SDA_Pin;
 8000970:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000974:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000976:	2312      	movs	r3, #18
 8000978:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000982:	2304      	movs	r3, #4
 8000984:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	4826      	ldr	r0, [pc, #152]	; (8000a28 <_ZL12MX_GPIO_Initv+0x158>)
 800098e:	f001 fe85 	bl	800269c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
	 PB7 */
	GPIO_InitStruct.Pin =
 8000992:	f24f 0380 	movw	r3, #61568	; 0xf080
 8000996:	60fb      	str	r3, [r7, #12]
			LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	481f      	ldr	r0, [pc, #124]	; (8000a28 <_ZL12MX_GPIO_Initv+0x158>)
 80009ac:	f001 fe76 	bl	800269c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 80009b0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80009b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	4818      	ldr	r0, [pc, #96]	; (8000a2c <_ZL12MX_GPIO_Initv+0x15c>)
 80009ca:	f001 fe67 	bl	800269c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <_ZL12MX_GPIO_Initv+0x15c>)
 80009e4:	f001 fe5a 	bl	800269c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80009e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f001 fe4c 	bl	800269c <HAL_GPIO_Init>

	/*Configure GPIO pin : ISM_INT1_Pin */
	GPIO_InitStruct.Pin = ISM_INT1_Pin;
 8000a04:	2340      	movs	r3, #64	; 0x40
 8000a06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ISM_INT1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	4804      	ldr	r0, [pc, #16]	; (8000a28 <_ZL12MX_GPIO_Initv+0x158>)
 8000a18:	f001 fe40 	bl	800269c <HAL_GPIO_Init>

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000400 	.word	0x48000400
 8000a2c:	48000800 	.word	0x48000800

08000a30 <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	for (;;) {
		osDelay(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f005 fb2d 	bl	8006098 <osDelay>
 8000a3e:	e7fb      	b.n	8000a38 <_Z16StartDefaultTaskPv+0x8>

08000a40 <_Z12StartBlink01Pv>:
 * @brief Function implementing the blink01 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlink01 */

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f005 fb25 	bl	8006098 <osDelay>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a52:	4802      	ldr	r0, [pc, #8]	; (8000a5c <_Z12StartBlink01Pv+0x1c>)
 8000a54:	f001 ffcc 	bl	80029f0 <HAL_GPIO_TogglePin>
		osDelay(1);
 8000a58:	e7f6      	b.n	8000a48 <_Z12StartBlink01Pv+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	48000400 	.word	0x48000400

08000a60 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a72:	f000 faa3 	bl	8000fbc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40001000 	.word	0x40001000

08000a84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_MspInit+0x5c>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <HAL_MspInit+0x5c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_MspInit+0x5c>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x5c>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_MspInit+0x5c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x5c>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	210f      	movs	r1, #15
 8000aca:	f06f 0001 	mvn.w	r0, #1
 8000ace:	f001 fc01 	bl	80022d4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 5, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2105      	movs	r1, #5
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f001 fbfc 	bl	80022d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f001 fc15 	bl	800230c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0b0      	sub	sp, #192	; 0xc0
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2298      	movs	r2, #152	; 0x98
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f007 ff6b 	bl	80089ec <memset>
  if(hadc->Instance==ADC1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a3c      	ldr	r2, [pc, #240]	; (8000c0c <HAL_ADC_MspInit+0x11c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d171      	bne.n	8000c04 <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b24:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000b36:	2310      	movs	r3, #16
 8000b38:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 ffe3 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000b5c:	f7ff ff92 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <HAL_ADC_MspInit+0x120>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	4a2a      	ldr	r2, [pc, #168]	; (8000c10 <HAL_ADC_MspInit+0x120>)
 8000b66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <HAL_ADC_MspInit+0x120>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <HAL_ADC_MspInit+0x120>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7c:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <HAL_ADC_MspInit+0x120>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <HAL_ADC_MspInit+0x120>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 8000b90:	233f      	movs	r3, #63	; 0x3f
 8000b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |ADC4_Pin|ADC5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b96:	230b      	movs	r3, #11
 8000b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	481a      	ldr	r0, [pc, #104]	; (8000c14 <HAL_ADC_MspInit+0x124>)
 8000baa:	f001 fd77 	bl	800269c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000bb0:	4a1a      	ldr	r2, [pc, #104]	; (8000c1c <HAL_ADC_MspInit+0x12c>)
 8000bb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000bde:	2220      	movs	r2, #32
 8000be0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000bea:	f001 fb9d 	bl	8002328 <HAL_DMA_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000bf4:	f7ff ff46 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000bfc:	651a      	str	r2, [r3, #80]	; 0x50
 8000bfe:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_ADC_MspInit+0x128>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	37c0      	adds	r7, #192	; 0xc0
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	50040000 	.word	0x50040000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000800 	.word	0x48000800
 8000c18:	200000b0 	.word	0x200000b0
 8000c1c:	40020008 	.word	0x40020008

08000c20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_CAN_MspInit+0x7c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d128      	bne.n	8000c94 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_CAN_MspInit+0x80>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <HAL_CAN_MspInit+0x80>)
 8000c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_CAN_MspInit+0x80>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_CAN_MspInit+0x80>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_CAN_MspInit+0x80>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_CAN_MspInit+0x80>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c84:	2309      	movs	r3, #9
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_CAN_MspInit+0x84>)
 8000c90:	f001 fd04 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40006400 	.word	0x40006400
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0aa      	sub	sp, #168	; 0xa8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	2298      	movs	r2, #152	; 0x98
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f007 fe97 	bl	80089ec <memset>
  if(hrtc->Instance==RTC)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <HAL_RTC_MspInit+0x74>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d124      	bne.n	8000d12 <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ccc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 ff1e 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000ce6:	f7ff fecd 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <HAL_RTC_MspInit+0x78>)
 8000cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_RTC_MspInit+0x78>)
 8000cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_RTC_MspInit+0x78>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_RTC_MspInit+0x78>)
 8000d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_RTC_MspInit+0x78>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	37a8      	adds	r7, #168	; 0xa8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40002800 	.word	0x40002800
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_SPI_MspInit+0x7c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d128      	bne.n	8000d98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d50:	6613      	str	r3, [r2, #96]	; 0x60
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d76:	23e0      	movs	r3, #224	; 0xe0
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d86:	2305      	movs	r3, #5
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f001 fc82 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40013000 	.word	0x40013000
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_TIM_Base_MspInit+0x44>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d113      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_TIM_Base_MspInit+0x48>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <HAL_TIM_Base_MspInit+0x48>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_TIM_Base_MspInit+0x48>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2105      	movs	r1, #5
 8000dd6:	201d      	movs	r0, #29
 8000dd8:	f001 fa7c 	bl	80022d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ddc:	201d      	movs	r0, #29
 8000dde:	f001 fa95 	bl	800230c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40000400 	.word	0x40000400
 8000df0:	40021000 	.word	0x40021000

08000df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2036      	movs	r0, #54	; 0x36
 8000e0a:	f001 fa63 	bl	80022d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e0e:	2036      	movs	r0, #54	; 0x36
 8000e10:	f001 fa7c 	bl	800230c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_InitTick+0x9c>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <HAL_InitTick+0x9c>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_InitTick+0x9c>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e2c:	f107 0210 	add.w	r2, r7, #16
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fd7c 	bl	8003934 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e3c:	f002 fd64 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8000e40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <HAL_InitTick+0xa0>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	0c9b      	lsrs	r3, r3, #18
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_InitTick+0xa8>)
 8000e54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e72:	f004 fd29 	bl	80058c8 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d104      	bne.n	8000e86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e7e:	f004 fd7b 	bl	8005978 <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	431bde83 	.word	0x431bde83
 8000e98:	20001aec 	.word	0x20001aec
 8000e9c:	40001000 	.word	0x40001000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8000ed0:	f001 fe74 	bl	8002bbc <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <DMA1_Channel1_IRQHandler+0x10>)
 8000ede:	f001 facb 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000b0 	.word	0x200000b0

08000eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <TIM3_IRQHandler+0x10>)
 8000ef2:	f004 fdb1 	bl	8005a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001d0 	.word	0x200001d0

08000f00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM6_DAC_IRQHandler+0x10>)
 8000f06:	f004 fda7 	bl	8005a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20001aec 	.word	0x20001aec

08000f14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f3c:	f7ff ffea 	bl	8000f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <LoopForever+0xe>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	; (8000f84 <LoopForever+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f007 fd0f 	bl	8008988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f6a:	f7ff fa0f 	bl	800038c <main>

08000f6e <LoopForever>:

LoopForever:
    b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f7c:	08008adc 	.word	0x08008adc
  ldr r2, =_sbss
 8000f80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f84:	20001b7c 	.word	0x20001b7c

08000f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_2_IRQHandler>

08000f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f001 f992 	bl	80022be <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff ff2a 	bl	8000df4 <HAL_InitTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	e001      	b.n	8000fb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fac:	f7ff fd70 	bl	8000a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20001b38 	.word	0x20001b38

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20001b38 	.word	0x20001b38

08000ffc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	609a      	str	r2, [r3, #8]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	609a      	str	r2, [r3, #8]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3360      	adds	r3, #96	; 0x60
 8001076:	461a      	mov	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <LL_ADC_SetOffset+0x44>)
 8001086:	4013      	ands	r3, r2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	4313      	orrs	r3, r2
 8001094:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	03fff000 	.word	0x03fff000

080010ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3360      	adds	r3, #96	; 0x60
 80010ba:	461a      	mov	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3360      	adds	r3, #96	; 0x60
 80010e8:	461a      	mov	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001102:	bf00      	nop
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	615a      	str	r2, [r3, #20]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3330      	adds	r3, #48	; 0x30
 8001144:	461a      	mov	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	4413      	add	r3, r2
 8001152:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	211f      	movs	r1, #31
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0e9b      	lsrs	r3, r3, #26
 800116c:	f003 011f 	and.w	r1, r3, #31
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f003 031f 	and.w	r3, r3, #31
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	431a      	orrs	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3314      	adds	r3, #20
 800119c:	461a      	mov	r2, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	0e5b      	lsrs	r3, r3, #25
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	0d1b      	lsrs	r3, r3, #20
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	2107      	movs	r1, #7
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	401a      	ands	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	0d1b      	lsrs	r3, r3, #20
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	431a      	orrs	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0318 	and.w	r3, r3, #24
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001208:	40d9      	lsrs	r1, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	400b      	ands	r3, r1
 800120e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001212:	431a      	orrs	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	0007ffff 	.word	0x0007ffff

0800122c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800123c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6093      	str	r3, [r2, #8]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001264:	d101      	bne.n	800126a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800128c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012b4:	d101      	bne.n	80012ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <LL_ADC_IsEnabled+0x18>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <LL_ADC_IsEnabled+0x1a>
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d101      	bne.n	8001306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b08      	cmp	r3, #8
 8001326:	d101      	bne.n	800132c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e134      	b.n	80015c0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fbc3 	bl	8000af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff67 	bl	8001250 <LL_ADC_IsDeepPowerDownEnabled>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff4d 	bl	800122c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff82 	bl	80012a0 <LL_ADC_IsInternalRegulatorEnabled>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d115      	bne.n	80013ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff66 	bl	8001278 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013ac:	4b86      	ldr	r3, [pc, #536]	; (80015c8 <HAL_ADC_Init+0x28c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	4a86      	ldr	r2, [pc, #536]	; (80015cc <HAL_ADC_Init+0x290>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	3301      	adds	r3, #1
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013c0:	e002      	b.n	80013c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f9      	bne.n	80013c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff64 	bl	80012a0 <LL_ADC_IsInternalRegulatorEnabled>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10d      	bne.n	80013fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	f043 0210 	orr.w	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff75 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 8001404:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 80cd 	bne.w	80015ae <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 80c9 	bne.w	80015ae <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001424:	f043 0202 	orr.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff49 	bl	80012c8 <LL_ADC_IsEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d110      	bne.n	800145e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800143c:	4864      	ldr	r0, [pc, #400]	; (80015d0 <HAL_ADC_Init+0x294>)
 800143e:	f7ff ff43 	bl	80012c8 <LL_ADC_IsEnabled>
 8001442:	4604      	mov	r4, r0
 8001444:	4863      	ldr	r0, [pc, #396]	; (80015d4 <HAL_ADC_Init+0x298>)
 8001446:	f7ff ff3f 	bl	80012c8 <LL_ADC_IsEnabled>
 800144a:	4603      	mov	r3, r0
 800144c:	4323      	orrs	r3, r4
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4619      	mov	r1, r3
 8001458:	485f      	ldr	r0, [pc, #380]	; (80015d8 <HAL_ADC_Init+0x29c>)
 800145a:	f7ff fdcf 	bl	8000ffc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7e5b      	ldrb	r3, [r3, #25]
 8001462:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001468:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800146e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001474:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d106      	bne.n	800149a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	3b01      	subs	r3, #1
 8001492:	045b      	lsls	r3, r3, #17
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_ADC_Init+0x2a0>)
 80014be:	4013      	ands	r3, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	69b9      	ldr	r1, [r7, #24]
 80014c6:	430b      	orrs	r3, r1
 80014c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff0d 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 80014d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff1a 	bl	8001314 <LL_ADC_INJ_IsConversionOngoing>
 80014e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d140      	bne.n	800156a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d13d      	bne.n	800156a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7e1b      	ldrb	r3, [r3, #24]
 80014f6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014f8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001500:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001510:	f023 0306 	bic.w	r3, r3, #6
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	69b9      	ldr	r1, [r7, #24]
 800151a:	430b      	orrs	r3, r1
 800151c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001524:	2b01      	cmp	r3, #1
 8001526:	d118      	bne.n	800155a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001532:	f023 0304 	bic.w	r3, r3, #4
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800153e:	4311      	orrs	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001544:	4311      	orrs	r1, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800154a:	430a      	orrs	r2, r1
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	e007      	b.n	800156a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0201 	bic.w	r2, r2, #1
 8001568:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d10c      	bne.n	800158c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f023 010f 	bic.w	r1, r3, #15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	1e5a      	subs	r2, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
 800158a:	e007      	b.n	800159c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 020f 	bic.w	r2, r2, #15
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a0:	f023 0303 	bic.w	r3, r3, #3
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	659a      	str	r2, [r3, #88]	; 0x58
 80015ac:	e007      	b.n	80015be <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	f043 0210 	orr.w	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015be:	7ffb      	ldrb	r3, [r7, #31]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3724      	adds	r7, #36	; 0x24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	053e2d63 	.word	0x053e2d63
 80015d0:	50040000 	.word	0x50040000
 80015d4:	50040100 	.word	0x50040100
 80015d8:	50040300 	.word	0x50040300
 80015dc:	fff0c007 	.word	0xfff0c007

080015e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0b6      	sub	sp, #216	; 0xd8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x22>
 80015fe:	2302      	movs	r3, #2
 8001600:	e3d5      	b.n	8001dae <HAL_ADC_ConfigChannel+0x7ce>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe6d 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 83ba 	bne.w	8001d90 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d824      	bhi.n	800166e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	3b02      	subs	r3, #2
 800162a:	2b03      	cmp	r3, #3
 800162c:	d81b      	bhi.n	8001666 <HAL_ADC_ConfigChannel+0x86>
 800162e:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <HAL_ADC_ConfigChannel+0x54>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	08001645 	.word	0x08001645
 8001638:	0800164d 	.word	0x0800164d
 800163c:	08001655 	.word	0x08001655
 8001640:	0800165d 	.word	0x0800165d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	220c      	movs	r2, #12
 8001648:	605a      	str	r2, [r3, #4]
          break;
 800164a:	e011      	b.n	8001670 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2212      	movs	r2, #18
 8001650:	605a      	str	r2, [r3, #4]
          break;
 8001652:	e00d      	b.n	8001670 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2218      	movs	r2, #24
 8001658:	605a      	str	r2, [r3, #4]
          break;
 800165a:	e009      	b.n	8001670 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001662:	605a      	str	r2, [r3, #4]
          break;
 8001664:	e004      	b.n	8001670 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2206      	movs	r2, #6
 800166a:	605a      	str	r2, [r3, #4]
          break;
 800166c:	e000      	b.n	8001670 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800166e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	f7ff fd59 	bl	8001134 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fe31 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 800168c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fe3d 	bl	8001314 <LL_ADC_INJ_IsConversionOngoing>
 800169a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800169e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 81c1 	bne.w	8001a2a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 81bc 	bne.w	8001a2a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016ba:	d10f      	bne.n	80016dc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff fd60 	bl	800118c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fd1a 	bl	800110e <LL_ADC_SetSamplingTimeCommonConfig>
 80016da:	e00e      	b.n	80016fa <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff fd4f 	bl	800118c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fd0a 	bl	800110e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d00a      	beq.n	8001732 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	6919      	ldr	r1, [r3, #16]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800172c:	f7ff fc9a 	bl	8001064 <LL_ADC_SetOffset>
 8001730:	e17b      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fcb7 	bl	80010ac <LL_ADC_GetOffsetChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10a      	bne.n	800175e <HAL_ADC_ConfigChannel+0x17e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fcac 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	0e9b      	lsrs	r3, r3, #26
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	e01e      	b.n	800179c <HAL_ADC_ConfigChannel+0x1bc>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fca1 	bl	80010ac <LL_ADC_GetOffsetChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800177c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800178c:	2320      	movs	r3, #32
 800178e:	e004      	b.n	800179a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1d4>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0e9b      	lsrs	r3, r3, #26
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	e018      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x206>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80017c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80017d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80017d8:	2320      	movs	r3, #32
 80017da:	e004      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80017dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d106      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fc70 	bl	80010d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fc54 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10a      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x244>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fc49 	bl	80010ac <LL_ADC_GetOffsetChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	0e9b      	lsrs	r3, r3, #26
 800181e:	f003 021f 	and.w	r2, r3, #31
 8001822:	e01e      	b.n	8001862 <HAL_ADC_ConfigChannel+0x282>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc3e 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001846:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800184a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001852:	2320      	movs	r3, #32
 8001854:	e004      	b.n	8001860 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <HAL_ADC_ConfigChannel+0x29a>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0e9b      	lsrs	r3, r3, #26
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	e018      	b.n	80018ac <HAL_ADC_ConfigChannel+0x2cc>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800188e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001896:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800189e:	2320      	movs	r3, #32
 80018a0:	e004      	b.n	80018ac <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80018a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d106      	bne.n	80018be <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	2101      	movs	r1, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fc0d 	bl	80010d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2102      	movs	r1, #2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fbf1 	bl	80010ac <LL_ADC_GetOffsetChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x30a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2102      	movs	r1, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fbe6 	bl	80010ac <LL_ADC_GetOffsetChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	0e9b      	lsrs	r3, r3, #26
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	e01e      	b.n	8001928 <HAL_ADC_ConfigChannel+0x348>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2102      	movs	r1, #2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fbdb 	bl	80010ac <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800190c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001910:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001918:	2320      	movs	r3, #32
 800191a:	e004      	b.n	8001926 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800191c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x360>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0e9b      	lsrs	r3, r3, #26
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	e016      	b.n	800196e <HAL_ADC_ConfigChannel+0x38e>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001960:	2320      	movs	r3, #32
 8001962:	e004      	b.n	800196e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800196e:	429a      	cmp	r2, r3
 8001970:	d106      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	2102      	movs	r1, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fbac 	bl	80010d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2103      	movs	r1, #3
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fb90 	bl	80010ac <LL_ADC_GetOffsetChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10a      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x3cc>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2103      	movs	r1, #3
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fb85 	bl	80010ac <LL_ADC_GetOffsetChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	0e9b      	lsrs	r3, r3, #26
 80019a6:	f003 021f 	and.w	r2, r3, #31
 80019aa:	e017      	b.n	80019dc <HAL_ADC_ConfigChannel+0x3fc>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2103      	movs	r1, #3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fb7a 	bl	80010ac <LL_ADC_GetOffsetChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80019c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80019c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80019ce:	2320      	movs	r3, #32
 80019d0:	e003      	b.n	80019da <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80019d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x414>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e9b      	lsrs	r3, r3, #26
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	e011      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x438>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a04:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	e003      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d106      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	2103      	movs	r1, #3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fb57 	bl	80010d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc4a 	bl	80012c8 <LL_ADC_IsEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 8140 	bne.w	8001cbc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f7ff fbcb 	bl	80011e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	4a8f      	ldr	r2, [pc, #572]	; (8001c90 <HAL_ADC_ConfigChannel+0x6b0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	f040 8131 	bne.w	8001cbc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10b      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x4a2>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0e9b      	lsrs	r3, r3, #26
 8001a70:	3301      	adds	r3, #1
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	2b09      	cmp	r3, #9
 8001a78:	bf94      	ite	ls
 8001a7a:	2301      	movls	r3, #1
 8001a7c:	2300      	movhi	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	e019      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x4d6>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a92:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	e003      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2b09      	cmp	r3, #9
 8001aae:	bf94      	ite	ls
 8001ab0:	2301      	movls	r3, #1
 8001ab2:	2300      	movhi	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d079      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d107      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x4f6>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0e9b      	lsrs	r3, r3, #26
 8001acc:	3301      	adds	r3, #1
 8001ace:	069b      	lsls	r3, r3, #26
 8001ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ad4:	e015      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x522>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001aee:	2320      	movs	r3, #32
 8001af0:	e003      	b.n	8001afa <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	069b      	lsls	r3, r3, #26
 8001afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x542>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0e9b      	lsrs	r3, r3, #26
 8001b14:	3301      	adds	r3, #1
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	e017      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x572>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e003      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	ea42 0103 	orr.w	r1, r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x598>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0e9b      	lsrs	r3, r3, #26
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f003 021f 	and.w	r2, r3, #31
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	051b      	lsls	r3, r3, #20
 8001b76:	e018      	b.n	8001baa <HAL_ADC_ConfigChannel+0x5ca>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001b90:	2320      	movs	r3, #32
 8001b92:	e003      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f003 021f 	and.w	r2, r3, #31
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001baa:	430b      	orrs	r3, r1
 8001bac:	e081      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d107      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x5ea>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0e9b      	lsrs	r3, r3, #26
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	069b      	lsls	r3, r3, #26
 8001bc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bc8:	e015      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x616>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001be2:	2320      	movs	r3, #32
 8001be4:	e003      	b.n	8001bee <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	069b      	lsls	r3, r3, #26
 8001bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x636>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	e017      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x666>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	61fb      	str	r3, [r7, #28]
  return result;
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e003      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	ea42 0103 	orr.w	r1, r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x692>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0e9b      	lsrs	r3, r3, #26
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f003 021f 	and.w	r2, r3, #31
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	3b1e      	subs	r3, #30
 8001c6a:	051b      	lsls	r3, r3, #20
 8001c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c70:	e01e      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x6d0>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	613b      	str	r3, [r7, #16]
  return result;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d104      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e006      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x6bc>
 8001c8e:	bf00      	nop
 8001c90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f003 021f 	and.w	r2, r3, #31
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b1e      	subs	r3, #30
 8001caa:	051b      	lsls	r3, r3, #20
 8001cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	6892      	ldr	r2, [r2, #8]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7ff fa68 	bl	800118c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d06c      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cc8:	483c      	ldr	r0, [pc, #240]	; (8001dbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001cca:	f7ff f9bd 	bl	8001048 <LL_ADC_GetCommonPathInternalCh>
 8001cce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a3a      	ldr	r2, [pc, #232]	; (8001dc0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d127      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d121      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a35      	ldr	r2, [pc, #212]	; (8001dc4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d157      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	482f      	ldr	r0, [pc, #188]	; (8001dbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001cfe:	f7ff f990 	bl	8001022 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_ADC_ConfigChannel+0x7e8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	099b      	lsrs	r3, r3, #6
 8001d08:	4a30      	ldr	r2, [pc, #192]	; (8001dcc <HAL_ADC_ConfigChannel+0x7ec>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f9      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d2a:	e03a      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <HAL_ADC_ConfigChannel+0x7f0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d113      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x77e>
 8001d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10d      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d12a      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d54:	4619      	mov	r1, r3
 8001d56:	4819      	ldr	r0, [pc, #100]	; (8001dbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001d58:	f7ff f963 	bl	8001022 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d5c:	e021      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d11c      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d116      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d111      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d86:	4619      	mov	r1, r3
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001d8a:	f7ff f94a 	bl	8001022 <LL_ADC_SetCommonPathInternalCh>
 8001d8e:	e008      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001daa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	37d8      	adds	r7, #216	; 0xd8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	80080000 	.word	0x80080000
 8001dbc:	50040300 	.word	0x50040300
 8001dc0:	c7520000 	.word	0xc7520000
 8001dc4:	50040000 	.word	0x50040000
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	053e2d63 	.word	0x053e2d63
 8001dd0:	cb840000 	.word	0xcb840000
 8001dd4:	80000001 	.word	0x80000001

08001dd8 <LL_ADC_IsEnabled>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <LL_ADC_IsEnabled+0x18>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <LL_ADC_IsEnabled+0x1a>
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_ADC_REG_IsConversionOngoing>:
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d101      	bne.n	8001e16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b0a1      	sub	sp, #132	; 0x84
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e089      	b.n	8001f56 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a42      	ldr	r2, [pc, #264]	; (8001f60 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d102      	bne.n	8001e62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e5c:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e001      	b.n	8001e66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	f043 0220 	orr.w	r2, r3, #32
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e068      	b.n	8001f56 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ffb9 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 8001e8c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ffb3 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d14a      	bne.n	8001f34 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d147      	bne.n	8001f34 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ea4:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001ea6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d027      	beq.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec2:	035b      	lsls	r3, r3, #13
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ecc:	4824      	ldr	r0, [pc, #144]	; (8001f60 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001ece:	f7ff ff83 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	4823      	ldr	r0, [pc, #140]	; (8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001ed6:	f7ff ff7f 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4323      	orrs	r3, r4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d132      	bne.n	8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001eea:	f023 030f 	bic.w	r3, r3, #15
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	6811      	ldr	r1, [r2, #0]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	6892      	ldr	r2, [r2, #8]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001efc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001efe:	e023      	b.n	8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f0c:	4814      	ldr	r0, [pc, #80]	; (8001f60 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001f0e:	f7ff ff63 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001f12:	4604      	mov	r4, r0
 8001f14:	4813      	ldr	r0, [pc, #76]	; (8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f16:	f7ff ff5f 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4323      	orrs	r3, r4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d112      	bne.n	8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f2a:	f023 030f 	bic.w	r3, r3, #15
 8001f2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f30:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f32:	e009      	b.n	8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	f043 0220 	orr.w	r2, r3, #32
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001f46:	e000      	b.n	8001f4a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3784      	adds	r7, #132	; 0x84
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd90      	pop	{r4, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	50040000 	.word	0x50040000
 8001f64:	50040100 	.word	0x50040100
 8001f68:	50040300 	.word	0x50040300

08001f6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0ed      	b.n	800215a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fe48 	bl	8000c20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa0:	f7ff f820 	bl	8000fe4 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fa6:	e012      	b.n	8001fce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fa8:	f7ff f81c 	bl	8000fe4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b0a      	cmp	r3, #10
 8001fb4:	d90b      	bls.n	8001fce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2205      	movs	r2, #5
 8001fc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0c5      	b.n	800215a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0e5      	beq.n	8001fa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0202 	bic.w	r2, r2, #2
 8001fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fec:	f7fe fffa 	bl	8000fe4 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ff2:	e012      	b.n	800201a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ff4:	f7fe fff6 	bl	8000fe4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b0a      	cmp	r3, #10
 8002000:	d90b      	bls.n	800201a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2205      	movs	r2, #5
 8002012:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e09f      	b.n	800215a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e5      	bne.n	8001ff4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7e1b      	ldrb	r3, [r3, #24]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d108      	bne.n	8002042 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e007      	b.n	8002052 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7e5b      	ldrb	r3, [r3, #25]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d108      	bne.n	800206c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e007      	b.n	800207c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7e9b      	ldrb	r3, [r3, #26]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d108      	bne.n	8002096 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0220 	orr.w	r2, r2, #32
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e007      	b.n	80020a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0220 	bic.w	r2, r2, #32
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7edb      	ldrb	r3, [r3, #27]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d108      	bne.n	80020c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0210 	bic.w	r2, r2, #16
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e007      	b.n	80020d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0210 	orr.w	r2, r2, #16
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7f1b      	ldrb	r3, [r3, #28]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d108      	bne.n	80020ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0208 	orr.w	r2, r2, #8
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e007      	b.n	80020fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0208 	bic.w	r2, r2, #8
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7f5b      	ldrb	r3, [r3, #29]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d108      	bne.n	8002114 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0204 	orr.w	r2, r2, #4
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e007      	b.n	8002124 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0204 	bic.w	r2, r2, #4
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	ea42 0103 	orr.w	r1, r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800218c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <__NVIC_GetPriorityGrouping+0x18>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0307 	and.w	r3, r3, #7
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db0b      	blt.n	80021f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	4907      	ldr	r1, [pc, #28]	; (8002200 <__NVIC_EnableIRQ+0x38>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2001      	movs	r0, #1
 80021ea:	fa00 f202 	lsl.w	r2, r0, r2
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ff4c 	bl	8002164 <__NVIC_SetPriorityGrouping>
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e6:	f7ff ff61 	bl	80021ac <__NVIC_GetPriorityGrouping>
 80022ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	6978      	ldr	r0, [r7, #20]
 80022f2:	f7ff ffb1 	bl	8002258 <NVIC_EncodePriority>
 80022f6:	4602      	mov	r2, r0
 80022f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ff80 	bl	8002204 <__NVIC_SetPriority>
}
 8002304:	bf00      	nop
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff54 	bl	80021c8 <__NVIC_EnableIRQ>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e08d      	b.n	8002456 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_DMA_Init+0x138>)
 8002342:	429a      	cmp	r2, r3
 8002344:	d80f      	bhi.n	8002366 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	4b45      	ldr	r3, [pc, #276]	; (8002464 <HAL_DMA_Init+0x13c>)
 800234e:	4413      	add	r3, r2
 8002350:	4a45      	ldr	r2, [pc, #276]	; (8002468 <HAL_DMA_Init+0x140>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	009a      	lsls	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a42      	ldr	r2, [pc, #264]	; (800246c <HAL_DMA_Init+0x144>)
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
 8002364:	e00e      	b.n	8002384 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <HAL_DMA_Init+0x148>)
 800236e:	4413      	add	r3, r2
 8002370:	4a3d      	ldr	r2, [pc, #244]	; (8002468 <HAL_DMA_Init+0x140>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	009a      	lsls	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <HAL_DMA_Init+0x14c>)
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800239a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f8fe 	bl	80025d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023e4:	d102      	bne.n	80023ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002400:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d010      	beq.n	800242c <HAL_DMA_Init+0x104>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b04      	cmp	r3, #4
 8002410:	d80c      	bhi.n	800242c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f91e 	bl	8002654 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	e008      	b.n	800243e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40020407 	.word	0x40020407
 8002464:	bffdfff8 	.word	0xbffdfff8
 8002468:	cccccccd 	.word	0xcccccccd
 800246c:	40020000 	.word	0x40020000
 8002470:	bffdfbf8 	.word	0xbffdfbf8
 8002474:	40020400 	.word	0x40020400

08002478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	f003 031c 	and.w	r3, r3, #28
 8002498:	2204      	movs	r2, #4
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d026      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x7a>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d021      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d107      	bne.n	80024cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	f003 021c 	and.w	r2, r3, #28
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	2104      	movs	r1, #4
 80024da:	fa01 f202 	lsl.w	r2, r1, r2
 80024de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d071      	beq.n	80025cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80024f0:	e06c      	b.n	80025cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f003 031c 	and.w	r3, r3, #28
 80024fa:	2202      	movs	r2, #2
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d02e      	beq.n	8002564 <HAL_DMA_IRQHandler+0xec>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d029      	beq.n	8002564 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10b      	bne.n	8002536 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 020a 	bic.w	r2, r2, #10
 800252c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f003 021c 	and.w	r2, r3, #28
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2102      	movs	r1, #2
 8002544:	fa01 f202 	lsl.w	r2, r1, r2
 8002548:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d038      	beq.n	80025cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002562:	e033      	b.n	80025cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f003 031c 	and.w	r3, r3, #28
 800256c:	2208      	movs	r2, #8
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d02a      	beq.n	80025ce <HAL_DMA_IRQHandler+0x156>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d025      	beq.n	80025ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 020e 	bic.w	r2, r2, #14
 8002590:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f003 021c 	and.w	r2, r3, #28
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d004      	beq.n	80025ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
}
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b17      	ldr	r3, [pc, #92]	; (8002644 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d80a      	bhi.n	8002602 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025f8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6493      	str	r3, [r2, #72]	; 0x48
 8002600:	e007      	b.n	8002612 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	009a      	lsls	r2, r3, #2
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800260c:	4413      	add	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3b08      	subs	r3, #8
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002628:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2201      	movs	r2, #1
 8002632:	409a      	lsls	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	40020407 	.word	0x40020407
 8002648:	4002081c 	.word	0x4002081c
 800264c:	cccccccd 	.word	0xcccccccd
 8002650:	40020880 	.word	0x40020880

08002654 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	461a      	mov	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a08      	ldr	r2, [pc, #32]	; (8002698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002676:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3b01      	subs	r3, #1
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2201      	movs	r2, #1
 8002682:	409a      	lsls	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	1000823f 	.word	0x1000823f
 8002698:	40020940 	.word	0x40020940

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026aa:	e166      	b.n	800297a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8158 	beq.w	8002974 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d005      	beq.n	80026dc <HAL_GPIO_Init+0x40>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d130      	bne.n	800273e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002712:	2201      	movs	r2, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 0201 	and.w	r2, r3, #1
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b03      	cmp	r3, #3
 8002748:	d017      	beq.n	800277a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d123      	bne.n	80027ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3208      	adds	r2, #8
 80027c8:	6939      	ldr	r1, [r7, #16]
 80027ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0203 	and.w	r2, r3, #3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80b2 	beq.w	8002974 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002810:	4b61      	ldr	r3, [pc, #388]	; (8002998 <HAL_GPIO_Init+0x2fc>)
 8002812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002814:	4a60      	ldr	r2, [pc, #384]	; (8002998 <HAL_GPIO_Init+0x2fc>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6613      	str	r3, [r2, #96]	; 0x60
 800281c:	4b5e      	ldr	r3, [pc, #376]	; (8002998 <HAL_GPIO_Init+0x2fc>)
 800281e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002828:	4a5c      	ldr	r2, [pc, #368]	; (800299c <HAL_GPIO_Init+0x300>)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002852:	d02b      	beq.n	80028ac <HAL_GPIO_Init+0x210>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_GPIO_Init+0x304>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d025      	beq.n	80028a8 <HAL_GPIO_Init+0x20c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a51      	ldr	r2, [pc, #324]	; (80029a4 <HAL_GPIO_Init+0x308>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d01f      	beq.n	80028a4 <HAL_GPIO_Init+0x208>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <HAL_GPIO_Init+0x30c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d019      	beq.n	80028a0 <HAL_GPIO_Init+0x204>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <HAL_GPIO_Init+0x310>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_GPIO_Init+0x200>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <HAL_GPIO_Init+0x314>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00d      	beq.n	8002898 <HAL_GPIO_Init+0x1fc>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a4d      	ldr	r2, [pc, #308]	; (80029b4 <HAL_GPIO_Init+0x318>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <HAL_GPIO_Init+0x1f8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_GPIO_Init+0x31c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d101      	bne.n	8002890 <HAL_GPIO_Init+0x1f4>
 800288c:	2307      	movs	r3, #7
 800288e:	e00e      	b.n	80028ae <HAL_GPIO_Init+0x212>
 8002890:	2308      	movs	r3, #8
 8002892:	e00c      	b.n	80028ae <HAL_GPIO_Init+0x212>
 8002894:	2306      	movs	r3, #6
 8002896:	e00a      	b.n	80028ae <HAL_GPIO_Init+0x212>
 8002898:	2305      	movs	r3, #5
 800289a:	e008      	b.n	80028ae <HAL_GPIO_Init+0x212>
 800289c:	2304      	movs	r3, #4
 800289e:	e006      	b.n	80028ae <HAL_GPIO_Init+0x212>
 80028a0:	2303      	movs	r3, #3
 80028a2:	e004      	b.n	80028ae <HAL_GPIO_Init+0x212>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x212>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_GPIO_Init+0x212>
 80028ac:	2300      	movs	r3, #0
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	f002 0203 	and.w	r2, r2, #3
 80028b4:	0092      	lsls	r2, r2, #2
 80028b6:	4093      	lsls	r3, r2
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028be:	4937      	ldr	r1, [pc, #220]	; (800299c <HAL_GPIO_Init+0x300>)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_GPIO_Init+0x320>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028f0:	4a32      	ldr	r2, [pc, #200]	; (80029bc <HAL_GPIO_Init+0x320>)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_GPIO_Init+0x320>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800291a:	4a28      	ldr	r2, [pc, #160]	; (80029bc <HAL_GPIO_Init+0x320>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_GPIO_Init+0x320>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002944:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_GPIO_Init+0x320>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_GPIO_Init+0x320>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800296e:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_GPIO_Init+0x320>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f ae91 	bne.w	80026ac <HAL_GPIO_Init+0x10>
  }
}
 800298a:	bf00      	nop
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40021000 	.word	0x40021000
 800299c:	40010000 	.word	0x40010000
 80029a0:	48000400 	.word	0x48000400
 80029a4:	48000800 	.word	0x48000800
 80029a8:	48000c00 	.word	0x48000c00
 80029ac:	48001000 	.word	0x48001000
 80029b0:	48001400 	.word	0x48001400
 80029b4:	48001800 	.word	0x48001800
 80029b8:	48001c00 	.word	0x48001c00
 80029bc:	40010400 	.word	0x40010400

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4013      	ands	r3, r2
 8002a08:	041a      	lsls	r2, r3, #16
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43d9      	mvns	r1, r3
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	400b      	ands	r3, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a44:	d102      	bne.n	8002a4c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a4a:	e00b      	b.n	8002a64 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5a:	d102      	bne.n	8002a62 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a60:	e000      	b.n	8002a64 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002a62:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40007000 	.word	0x40007000

08002a74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d141      	bne.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a82:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8e:	d131      	bne.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a90:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a96:	4a46      	ldr	r2, [pc, #280]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aa8:	4a41      	ldr	r2, [pc, #260]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ab0:	4b40      	ldr	r3, [pc, #256]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2232      	movs	r2, #50	; 0x32
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	4a3f      	ldr	r2, [pc, #252]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	0c9b      	lsrs	r3, r3, #18
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ac6:	e002      	b.n	8002ace <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ada:	d102      	bne.n	8002ae2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f2      	bne.n	8002ac8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ae2:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	d158      	bne.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e057      	b.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002af4:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b04:	e04d      	b.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0c:	d141      	bne.n	8002b92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1a:	d131      	bne.n	8002b80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b22:	4a23      	ldr	r2, [pc, #140]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b34:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2232      	movs	r2, #50	; 0x32
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	4a1c      	ldr	r2, [pc, #112]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	0c9b      	lsrs	r3, r3, #18
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b52:	e002      	b.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d102      	bne.n	8002b6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f2      	bne.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d112      	bne.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e011      	b.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b90:	e007      	b.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	431bde83 	.word	0x431bde83

08002bbc <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002bcc:	f7ff ff2a 	bl	8002a24 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002bd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bd6:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8002bd8:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8002be4:	f000 f828 	bl	8002c38 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002bea:	2208      	movs	r2, #8
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8002bfa:	f000 f824 	bl	8002c46 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c00:	2210      	movs	r2, #16
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8002c10:	f000 f820 	bl	8002c54 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c16:	2220      	movs	r2, #32
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d004      	beq.n	8002c30 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8002c26:	f000 f81c 	bl	8002c62 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8002c2a:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40010400 	.word	0x40010400

08002c38 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f000 bc76 	b.w	8003570 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c84:	4ba1      	ldr	r3, [pc, #644]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c8e:	4b9f      	ldr	r3, [pc, #636]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80e6 	beq.w	8002e72 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4c>
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	f040 808d 	bne.w	8002dce <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	f040 8089 	bne.w	8002dce <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cbc:	4b93      	ldr	r3, [pc, #588]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x66>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f000 bc4d 	b.w	8003570 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cda:	4b8c      	ldr	r3, [pc, #560]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x80>
 8002ce6:	4b89      	ldr	r3, [pc, #548]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cee:	e005      	b.n	8002cfc <HAL_RCC_OscConfig+0x8c>
 8002cf0:	4b86      	ldr	r3, [pc, #536]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d224      	bcs.n	8002d4a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fe47 	bl	8003998 <RCC_SetFlashLatencyFromMSIRange>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f000 bc2d 	b.w	8003570 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d16:	4b7d      	ldr	r3, [pc, #500]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a7c      	ldr	r2, [pc, #496]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b7a      	ldr	r3, [pc, #488]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	4977      	ldr	r1, [pc, #476]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d34:	4b75      	ldr	r3, [pc, #468]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	4972      	ldr	r1, [pc, #456]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
 8002d48:	e025      	b.n	8002d96 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d4a:	4b70      	ldr	r3, [pc, #448]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6f      	ldr	r2, [pc, #444]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	496a      	ldr	r1, [pc, #424]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d68:	4b68      	ldr	r3, [pc, #416]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	4965      	ldr	r1, [pc, #404]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fe06 	bl	8003998 <RCC_SetFlashLatencyFromMSIRange>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e3ec      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d96:	f000 fd1f 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b5b      	ldr	r3, [pc, #364]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	495a      	ldr	r1, [pc, #360]	; (8002f10 <HAL_RCC_OscConfig+0x2a0>)
 8002da8:	5ccb      	ldrb	r3, [r1, r3]
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	fa22 f303 	lsr.w	r3, r2, r3
 8002db2:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_RCC_OscConfig+0x2a4>)
 8002db4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002db6:	4b58      	ldr	r3, [pc, #352]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe f81a 	bl	8000df4 <HAL_InitTick>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d052      	beq.n	8002e70 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	e3d0      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d032      	beq.n	8002e3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dd6:	4b4d      	ldr	r3, [pc, #308]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a4c      	ldr	r2, [pc, #304]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002de2:	f7fe f8ff 	bl	8000fe4 <HAL_GetTick>
 8002de6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dea:	f7fe f8fb 	bl	8000fe4 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e3b9      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dfc:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e08:	4b40      	ldr	r3, [pc, #256]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3f      	ldr	r2, [pc, #252]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002e0e:	f043 0308 	orr.w	r3, r3, #8
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	493a      	ldr	r1, [pc, #232]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e26:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	4935      	ldr	r1, [pc, #212]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
 8002e3a:	e01a      	b.n	8002e72 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e3c:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a32      	ldr	r2, [pc, #200]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e48:	f7fe f8cc 	bl	8000fe4 <HAL_GetTick>
 8002e4c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e50:	f7fe f8c8 	bl	8000fe4 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e386      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x1e0>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d073      	beq.n	8002f66 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_OscConfig+0x220>
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d10e      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d063      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2f4>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d15f      	bne.n	8002f64 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e363      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x250>
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e01d      	b.n	8002efc <HAL_RCC_OscConfig+0x28c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x274>
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a0f      	ldr	r2, [pc, #60]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a0c      	ldr	r2, [pc, #48]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0x28c>
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe f86e 	bl	8000fe4 <HAL_GetTick>
 8002f08:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0a:	e010      	b.n	8002f2e <HAL_RCC_OscConfig+0x2be>
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08008a88 	.word	0x08008a88
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe f862 	bl	8000fe4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e320      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2e:	4ba0      	ldr	r3, [pc, #640]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x2ac>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe f852 	bl	8000fe4 <HAL_GetTick>
 8002f40:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe f84e 	bl	8000fe4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e30c      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f56:	4b96      	ldr	r3, [pc, #600]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x2d4>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d060      	beq.n	8003034 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_OscConfig+0x314>
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d119      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d116      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f84:	4b8a      	ldr	r3, [pc, #552]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_OscConfig+0x32c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e2e9      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9c:	4b84      	ldr	r3, [pc, #528]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	4981      	ldr	r1, [pc, #516]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb0:	e040      	b.n	8003034 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d023      	beq.n	8003002 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fba:	4b7d      	ldr	r3, [pc, #500]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a7c      	ldr	r2, [pc, #496]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe f80d 	bl	8000fe4 <HAL_GetTick>
 8002fca:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fce:	f7fe f809 	bl	8000fe4 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e2c7      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe0:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	496d      	ldr	r1, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
 8003000:	e018      	b.n	8003034 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003002:	4b6b      	ldr	r3, [pc, #428]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6a      	ldr	r2, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8003008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800300c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fd ffe9 	bl	8000fe4 <HAL_GetTick>
 8003012:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003016:	f7fd ffe5 	bl	8000fe4 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e2a3      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003028:	4b61      	ldr	r3, [pc, #388]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d07f      	beq.n	8003140 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d05f      	beq.n	8003108 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003048:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 800304a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	429a      	cmp	r2, r3
 800305c:	d037      	beq.n	80030ce <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e27c      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01b      	beq.n	80030b8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003080:	4b4b      	ldr	r3, [pc, #300]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8003082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003086:	4a4a      	ldr	r2, [pc, #296]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003090:	f7fd ffa8 	bl	8000fe4 <HAL_GetTick>
 8003094:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003098:	f7fd ffa4 	bl	8000fe4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b11      	cmp	r3, #17
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e262      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030aa:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ef      	bne.n	8003098 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80030b8:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030be:	f023 0210 	bic.w	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	493a      	ldr	r1, [pc, #232]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ce:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d4:	4a36      	ldr	r2, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fd ff81 	bl	8000fe4 <HAL_GetTick>
 80030e2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e6:	f7fd ff7d 	bl	8000fe4 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b11      	cmp	r3, #17
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e23b      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f8:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ef      	beq.n	80030e6 <HAL_RCC_OscConfig+0x476>
 8003106:	e01b      	b.n	8003140 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310e:	4a28      	ldr	r2, [pc, #160]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7fd ff64 	bl	8000fe4 <HAL_GetTick>
 800311c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003120:	f7fd ff60 	bl	8000fe4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b11      	cmp	r3, #17
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e21e      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003132:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8003134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ef      	bne.n	8003120 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80c1 	beq.w	80032d0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10e      	bne.n	800317e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316a:	6593      	str	r3, [r2, #88]	; 0x58
 800316c:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_RCC_OscConfig+0x540>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <HAL_RCC_OscConfig+0x544>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_RCC_OscConfig+0x544>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <HAL_RCC_OscConfig+0x544>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003196:	f7fd ff25 	bl	8000fe4 <HAL_GetTick>
 800319a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319c:	e00c      	b.n	80031b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319e:	f7fd ff21 	bl	8000fe4 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d905      	bls.n	80031b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1df      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	4b99      	ldr	r3, [pc, #612]	; (8003420 <HAL_RCC_OscConfig+0x7b0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ec      	beq.n	800319e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d02c      	beq.n	800322a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80031d0:	4b94      	ldr	r3, [pc, #592]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e2:	4990      	ldr	r1, [pc, #576]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031f6:	4b8b      	ldr	r3, [pc, #556]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	4a89      	ldr	r2, [pc, #548]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80031fe:	f043 0304 	orr.w	r3, r3, #4
 8003202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003206:	4b87      	ldr	r3, [pc, #540]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	4a85      	ldr	r2, [pc, #532]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003216:	e018      	b.n	800324a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003218:	4b82      	ldr	r3, [pc, #520]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	4a81      	ldr	r2, [pc, #516]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003228:	e00f      	b.n	800324a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800322a:	4b7e      	ldr	r3, [pc, #504]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	4a7c      	ldr	r2, [pc, #496]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800323a:	4b7a      	ldr	r3, [pc, #488]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	4a78      	ldr	r2, [pc, #480]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 8003242:	f023 0304 	bic.w	r3, r3, #4
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d016      	beq.n	8003280 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fd fec7 	bl	8000fe4 <HAL_GetTick>
 8003256:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fd fec3 	bl	8000fe4 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e17f      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003270:	4b6c      	ldr	r3, [pc, #432]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0ed      	beq.n	800325a <HAL_RCC_OscConfig+0x5ea>
 800327e:	e01d      	b.n	80032bc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fd feb0 	bl	8000fe4 <HAL_GetTick>
 8003284:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fd feac 	bl	8000fe4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e168      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800329e:	4b61      	ldr	r3, [pc, #388]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ed      	bne.n	8003288 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80032ac:	4b5d      	ldr	r3, [pc, #372]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	4a5c      	ldr	r2, [pc, #368]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80032b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b57      	ldr	r3, [pc, #348]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80032c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c8:	4a56      	ldr	r2, [pc, #344]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d03c      	beq.n	8003356 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01c      	beq.n	800331e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032e4:	4b4f      	ldr	r3, [pc, #316]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80032e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ea:	4a4e      	ldr	r2, [pc, #312]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fd fe76 	bl	8000fe4 <HAL_GetTick>
 80032f8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032fc:	f7fd fe72 	bl	8000fe4 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e130      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800330e:	4b45      	ldr	r3, [pc, #276]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 8003310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ef      	beq.n	80032fc <HAL_RCC_OscConfig+0x68c>
 800331c:	e01b      	b.n	8003356 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800331e:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 8003320:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003324:	4a3f      	ldr	r2, [pc, #252]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332e:	f7fd fe59 	bl	8000fe4 <HAL_GetTick>
 8003332:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003336:	f7fd fe55 	bl	8000fe4 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e113      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003348:	4b36      	ldr	r3, [pc, #216]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 800334a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ef      	bne.n	8003336 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8107 	beq.w	800356e <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	2b02      	cmp	r3, #2
 8003366:	f040 80cf 	bne.w	8003508 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800336a:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0203 	and.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	429a      	cmp	r2, r3
 800337c:	d12c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003388:	3b01      	subs	r3, #1
 800338a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d123      	bne.n	80033d8 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d11b      	bne.n	80033d8 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d113      	bne.n	80033d8 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	3b01      	subs	r3, #1
 80033be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d109      	bne.n	80033d8 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	3b01      	subs	r3, #1
 80033d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d071      	beq.n	80034bc <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d06c      	beq.n	80034b8 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d105      	bne.n	80033f6 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e0ba      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_RCC_OscConfig+0x7b4>)
 8003400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003404:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003406:	f7fd fded 	bl	8000fe4 <HAL_GetTick>
 800340a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340c:	e00c      	b.n	8003428 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fd fde9 	bl	8000fe4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d905      	bls.n	8003428 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0a7      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
 8003420:	40007000 	.word	0x40007000
 8003424:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1ec      	bne.n	800340e <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003434:	4b50      	ldr	r3, [pc, #320]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_OscConfig+0x90c>)
 800343a:	4013      	ands	r3, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003444:	3a01      	subs	r2, #1
 8003446:	0112      	lsls	r2, r2, #4
 8003448:	4311      	orrs	r1, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800344e:	0212      	lsls	r2, r2, #8
 8003450:	4311      	orrs	r1, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003456:	0852      	lsrs	r2, r2, #1
 8003458:	3a01      	subs	r2, #1
 800345a:	0552      	lsls	r2, r2, #21
 800345c:	4311      	orrs	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003462:	0852      	lsrs	r2, r2, #1
 8003464:	3a01      	subs	r2, #1
 8003466:	0652      	lsls	r2, r2, #25
 8003468:	4311      	orrs	r1, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800346e:	06d2      	lsls	r2, r2, #27
 8003470:	430a      	orrs	r2, r1
 8003472:	4941      	ldr	r1, [pc, #260]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 8003474:	4313      	orrs	r3, r2
 8003476:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003478:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3e      	ldr	r2, [pc, #248]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003484:	4b3c      	ldr	r3, [pc, #240]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a3b      	ldr	r2, [pc, #236]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 800348a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003490:	f7fd fda8 	bl	8000fe4 <HAL_GetTick>
 8003494:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fd fda4 	bl	8000fe4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e062      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034aa:	4b33      	ldr	r3, [pc, #204]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034b6:	e05a      	b.n	800356e <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e059      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034bc:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d152      	bne.n	800356e <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d4:	4b28      	ldr	r3, [pc, #160]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a27      	ldr	r2, [pc, #156]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034e0:	f7fd fd80 	bl	8000fe4 <HAL_GetTick>
 80034e4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fd fd7c 	bl	8000fe4 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e03a      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	4b1f      	ldr	r3, [pc, #124]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x878>
 8003506:	e032      	b.n	800356e <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	2b0c      	cmp	r3, #12
 800350c:	d02d      	beq.n	800356a <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a19      	ldr	r2, [pc, #100]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 8003514:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003518:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800351a:	4b17      	ldr	r3, [pc, #92]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d105      	bne.n	8003532 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003526:	4b14      	ldr	r3, [pc, #80]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4a13      	ldr	r2, [pc, #76]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 800352c:	f023 0303 	bic.w	r3, r3, #3
 8003530:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003532:	4b11      	ldr	r3, [pc, #68]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	4a10      	ldr	r2, [pc, #64]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 8003538:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800353c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003540:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fd fd4f 	bl	8000fe4 <HAL_GetTick>
 8003546:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354a:	f7fd fd4b 	bl	8000fe4 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e009      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_OscConfig+0x908>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x8da>
 8003568:	e001      	b.n	800356e <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3728      	adds	r7, #40	; 0x28
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	019d800c 	.word	0x019d800c

08003580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e10f      	b.n	80037b8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b89      	ldr	r3, [pc, #548]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d910      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b86      	ldr	r3, [pc, #536]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 020f 	bic.w	r2, r3, #15
 80035ae:	4984      	ldr	r1, [pc, #528]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b82      	ldr	r3, [pc, #520]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0f7      	b.n	80037b8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8089 	beq.w	80036e8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d133      	bne.n	8003646 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035de:	4b79      	ldr	r3, [pc, #484]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0e4      	b.n	80037b8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80035ee:	f000 fa2d 	bl	8003a4c <RCC_GetSysClockFreqFromPLLSource>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4a74      	ldr	r2, [pc, #464]	; (80037c8 <HAL_RCC_ClockConfig+0x248>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d955      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035fa:	4b72      	ldr	r3, [pc, #456]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003606:	4b6f      	ldr	r3, [pc, #444]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800360e:	4a6d      	ldr	r2, [pc, #436]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003614:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e044      	b.n	80036a6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d03e      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x126>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d13a      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003630:	4b64      	ldr	r3, [pc, #400]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003638:	4a62      	ldr	r2, [pc, #392]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 800363a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800363e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e02f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	4b5d      	ldr	r3, [pc, #372]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d115      	bne.n	8003686 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0ac      	b.n	80037b8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003666:	4b57      	ldr	r3, [pc, #348]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0a0      	b.n	80037b8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003676:	4b53      	ldr	r3, [pc, #332]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e098      	b.n	80037b8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003686:	f000 f8a7 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800368a:	4603      	mov	r3, r0
 800368c:	4a4e      	ldr	r2, [pc, #312]	; (80037c8 <HAL_RCC_ClockConfig+0x248>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d909      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003692:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800369a:	4a4a      	ldr	r2, [pc, #296]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 800369c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4944      	ldr	r1, [pc, #272]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fd fc94 	bl	8000fe4 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fd fc90 	bl	8000fe4 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e070      	b.n	80037b8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4930      	ldr	r1, [pc, #192]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
 8003706:	e008      	b.n	800371a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d105      	bne.n	800371a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800370e:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003718:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371a:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d210      	bcs.n	800374a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f023 020f 	bic.w	r2, r3, #15
 8003730:	4923      	ldr	r1, [pc, #140]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003738:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d001      	beq.n	800374a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e036      	b.n	80037b8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	4918      	ldr	r1, [pc, #96]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4910      	ldr	r1, [pc, #64]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003788:	f000 f826 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	490c      	ldr	r1, [pc, #48]	; (80037cc <HAL_RCC_ClockConfig+0x24c>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HAL_RCC_ClockConfig+0x250>)
 80037a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_RCC_ClockConfig+0x254>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd fb21 	bl	8000df4 <HAL_InitTick>
 80037b2:	4603      	mov	r3, r0
 80037b4:	73fb      	strb	r3, [r7, #15]

  return status;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40022000 	.word	0x40022000
 80037c4:	40021000 	.word	0x40021000
 80037c8:	04c4b400 	.word	0x04c4b400
 80037cc:	08008a88 	.word	0x08008a88
 80037d0:	20000000 	.word	0x20000000
 80037d4:	20000004 	.word	0x20000004

080037d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	b089      	sub	sp, #36	; 0x24
 80037dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f0:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x34>
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b0c      	cmp	r3, #12
 8003804:	d121      	bne.n	800384a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d11e      	bne.n	800384a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800380c:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d107      	bne.n	8003828 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003818:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800381a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e005      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003828:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003834:	4a2b      	ldr	r2, [pc, #172]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d102      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003850:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	e004      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d101      	bne.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_RCC_GetSysClockFreq+0x114>)
 800385e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d134      	bne.n	80038d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003866:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d003      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0xa6>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d003      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0xac>
 800387c:	e005      	b.n	800388a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003880:	617b      	str	r3, [r7, #20]
      break;
 8003882:	e005      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003886:	617b      	str	r3, [r7, #20]
      break;
 8003888:	e002      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	617b      	str	r3, [r7, #20]
      break;
 800388e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003890:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	3301      	adds	r3, #1
 800389c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	fb02 f203 	mul.w	r2, r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	0e5b      	lsrs	r3, r3, #25
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	3301      	adds	r3, #1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038d0:	69bb      	ldr	r3, [r7, #24]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3724      	adds	r7, #36	; 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08008aa0 	.word	0x08008aa0
 80038e8:	00f42400 	.word	0x00f42400
 80038ec:	007a1200 	.word	0x007a1200

080038f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000000 	.word	0x20000000

08003908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800390c:	f7ff fff0 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4904      	ldr	r1, [pc, #16]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000
 8003930:	08008a98 	.word	0x08008a98

08003934 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	220f      	movs	r2, #15
 8003942:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003944:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_RCC_GetClockConfig+0x5c>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0203 	and.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <HAL_RCC_GetClockConfig+0x5c>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <HAL_RCC_GetClockConfig+0x5c>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_GetClockConfig+0x5c>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	08db      	lsrs	r3, r3, #3
 800396e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <HAL_RCC_GetClockConfig+0x60>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	601a      	str	r2, [r3, #0]
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	40022000 	.word	0x40022000

08003998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039a4:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039b0:	f7ff f840 	bl	8002a34 <HAL_PWREx_GetVoltageRange>
 80039b4:	6178      	str	r0, [r7, #20]
 80039b6:	e014      	b.n	80039e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6593      	str	r3, [r2, #88]	; 0x58
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039d0:	f7ff f830 	bl	8002a34 <HAL_PWREx_GetVoltageRange>
 80039d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d10b      	bne.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b80      	cmp	r3, #128	; 0x80
 80039ee:	d913      	bls.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2ba0      	cmp	r3, #160	; 0xa0
 80039f4:	d902      	bls.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039f6:	2302      	movs	r3, #2
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	e00d      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039fc:	2301      	movs	r3, #1
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e00a      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b7f      	cmp	r3, #127	; 0x7f
 8003a06:	d902      	bls.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003a08:	2302      	movs	r3, #2
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e004      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b70      	cmp	r3, #112	; 0x70
 8003a12:	d101      	bne.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a14:	2301      	movs	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 020f 	bic.w	r2, r3, #15
 8003a20:	4909      	ldr	r1, [pc, #36]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003a56:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d118      	bne.n	8003a94 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a62:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d107      	bne.n	8003a7e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a6e:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e005      	b.n	8003a8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a7e:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a8a:	4a21      	ldr	r2, [pc, #132]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a92:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a94:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d003      	beq.n	8003aac <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d003      	beq.n	8003ab2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003aaa:	e005      	b.n	8003ab8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003aae:	613b      	str	r3, [r7, #16]
    break;
 8003ab0:	e005      	b.n	8003abe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003ab2:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ab4:	613b      	str	r3, [r7, #16]
    break;
 8003ab6:	e002      	b.n	8003abe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	613b      	str	r3, [r7, #16]
    break;
 8003abc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	3301      	adds	r3, #1
 8003aca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	fb02 f203 	mul.w	r2, r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	0e5b      	lsrs	r3, r3, #25
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	3301      	adds	r3, #1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003afe:	683b      	ldr	r3, [r7, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	08008aa0 	.word	0x08008aa0
 8003b14:	00f42400 	.word	0x00f42400
 8003b18:	007a1200 	.word	0x007a1200

08003b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b24:	2300      	movs	r3, #0
 8003b26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b28:	2300      	movs	r3, #0
 8003b2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d040      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	d02a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d825      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b44:	2b60      	cmp	r3, #96	; 0x60
 8003b46:	d026      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b48:	2b60      	cmp	r3, #96	; 0x60
 8003b4a:	d821      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d006      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003b50:	2b40      	cmp	r3, #64	; 0x40
 8003b52:	d81d      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d010      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b5c:	e018      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b5e:	4b89      	ldr	r3, [pc, #548]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	4a88      	ldr	r2, [pc, #544]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b6a:	e015      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fb3e 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b7c:	e00c      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3320      	adds	r3, #32
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fc29 	bl	80043dc <RCCEx_PLLSAI2_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8e:	e003      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	74fb      	strb	r3, [r7, #19]
      break;
 8003b94:	e000      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b9e:	4b79      	ldr	r3, [pc, #484]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ba4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bac:	4975      	ldr	r1, [pc, #468]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003bb4:	e001      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d047      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d030      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd4:	d82a      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bda:	d02a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be0:	d824      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be6:	d008      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bec:	d81e      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003bf8:	e018      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bfa:	4b62      	ldr	r3, [pc, #392]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4a61      	ldr	r2, [pc, #388]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c06:	e015      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 faf0 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c18:	e00c      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3320      	adds	r3, #32
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fbdb 	bl	80043dc <RCCEx_PLLSAI2_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c2a:	e003      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	74fb      	strb	r3, [r7, #19]
      break;
 8003c30:	e000      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c3a:	4b52      	ldr	r3, [pc, #328]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	494e      	ldr	r1, [pc, #312]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c50:	e001      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 809f 	beq.w	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c64:	2300      	movs	r3, #0
 8003c66:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c68:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00d      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	4a40      	ldr	r2, [pc, #256]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c88:	6593      	str	r3, [r2, #88]	; 0x58
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c96:	2301      	movs	r3, #1
 8003c98:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a3a      	ldr	r2, [pc, #232]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca6:	f7fd f99d 	bl	8000fe4 <HAL_GetTick>
 8003caa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cac:	e009      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cae:	f7fd f999 	bl	8000fe4 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d902      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	74fb      	strb	r3, [r7, #19]
        break;
 8003cc0:	e005      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cc2:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0ef      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d15b      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cde:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01f      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d019      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cfe:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d14:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d1e:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d016      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fd f958 	bl	8000fe4 <HAL_GetTick>
 8003d34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d36:	e00b      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fd f954 	bl	8000fe4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d902      	bls.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	74fb      	strb	r3, [r7, #19]
            break;
 8003d4e:	e006      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ec      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10c      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d74:	4903      	ldr	r1, [pc, #12]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d7c:	e008      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	74bb      	strb	r3, [r7, #18]
 8003d82:	e005      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d90:	7c7b      	ldrb	r3, [r7, #17]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d105      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d96:	4ba0      	ldr	r3, [pc, #640]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	4a9f      	ldr	r2, [pc, #636]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dae:	4b9a      	ldr	r3, [pc, #616]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f023 0203 	bic.w	r2, r3, #3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbc:	4996      	ldr	r1, [pc, #600]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd0:	4b91      	ldr	r3, [pc, #580]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f023 020c 	bic.w	r2, r3, #12
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	498e      	ldr	r1, [pc, #568]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df2:	4b89      	ldr	r3, [pc, #548]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	4985      	ldr	r1, [pc, #532]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e14:	4b80      	ldr	r3, [pc, #512]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	497d      	ldr	r1, [pc, #500]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e36:	4b78      	ldr	r3, [pc, #480]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e44:	4974      	ldr	r1, [pc, #464]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e58:	4b6f      	ldr	r3, [pc, #444]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	496c      	ldr	r1, [pc, #432]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e7a:	4b67      	ldr	r3, [pc, #412]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e88:	4963      	ldr	r1, [pc, #396]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e9c:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eaa:	495b      	ldr	r1, [pc, #364]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ebe:	4b56      	ldr	r3, [pc, #344]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	4952      	ldr	r1, [pc, #328]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ee0:	4b4d      	ldr	r3, [pc, #308]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	494a      	ldr	r1, [pc, #296]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f02:	4b45      	ldr	r3, [pc, #276]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	4941      	ldr	r1, [pc, #260]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f24:	4b3c      	ldr	r3, [pc, #240]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f32:	4939      	ldr	r1, [pc, #228]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d028      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f46:	4b34      	ldr	r3, [pc, #208]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f54:	4930      	ldr	r1, [pc, #192]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f64:	d106      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f66:	4b2c      	ldr	r3, [pc, #176]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4a2b      	ldr	r2, [pc, #172]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f70:	60d3      	str	r3, [r2, #12]
 8003f72:	e011      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3304      	adds	r3, #4
 8003f82:	2101      	movs	r1, #1
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 f935 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d04d      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fac:	d108      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003fae:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fb4:	4a18      	ldr	r2, [pc, #96]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003fbe:	e012      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003fc0:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fc6:	4a14      	ldr	r2, [pc, #80]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fcc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fde:	490e      	ldr	r1, [pc, #56]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fee:	d106      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a08      	ldr	r2, [pc, #32]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffa:	60d3      	str	r3, [r2, #12]
 8003ffc:	e020      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004006:	d109      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a02      	ldr	r2, [pc, #8]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004012:	60d3      	str	r3, [r2, #12]
 8004014:	e014      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004016:	bf00      	nop
 8004018:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004024:	d10c      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f8e1 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d028      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800404c:	4b68      	ldr	r3, [pc, #416]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800405a:	4965      	ldr	r1, [pc, #404]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800406a:	d106      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406c:	4b60      	ldr	r3, [pc, #384]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a5f      	ldr	r2, [pc, #380]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004076:	60d3      	str	r3, [r2, #12]
 8004078:	e011      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004082:	d10c      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f8b2 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01e      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040aa:	4b51      	ldr	r3, [pc, #324]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ba:	494d      	ldr	r1, [pc, #308]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 f88d 	bl	80041f4 <RCCEx_PLLSAI1_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040de:	7cfb      	ldrb	r3, [r7, #19]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040f4:	4b3e      	ldr	r3, [pc, #248]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040fa:	f023 0204 	bic.w	r2, r3, #4
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004104:	493a      	ldr	r1, [pc, #232]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004118:	4b35      	ldr	r3, [pc, #212]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800411a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800411e:	f023 0218 	bic.w	r2, r3, #24
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	4931      	ldr	r1, [pc, #196]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d035      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800413c:	4b2c      	ldr	r3, [pc, #176]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004148:	f7fc ff4c 	bl	8000fe4 <HAL_GetTick>
 800414c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800414e:	e009      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004150:	f7fc ff48 	bl	8000fe4 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d902      	bls.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	74fb      	strb	r3, [r7, #19]
        break;
 8004162:	e005      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ef      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d113      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004176:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004178:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800417c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004186:	491a      	ldr	r1, [pc, #104]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3320      	adds	r3, #32
 8004192:	2102      	movs	r1, #2
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f921 	bl	80043dc <RCCEx_PLLSAI2_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d017      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	490a      	ldr	r1, [pc, #40]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000

080041f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004202:	4b72      	ldr	r3, [pc, #456]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00e      	beq.n	800422c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800420e:	4b6f      	ldr	r3, [pc, #444]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0203 	and.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d103      	bne.n	8004226 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
       ||
 8004222:	2b00      	cmp	r3, #0
 8004224:	d142      	bne.n	80042ac <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	e03f      	b.n	80042ac <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d018      	beq.n	8004266 <RCCEx_PLLSAI1_Config+0x72>
 8004234:	2b03      	cmp	r3, #3
 8004236:	d825      	bhi.n	8004284 <RCCEx_PLLSAI1_Config+0x90>
 8004238:	2b01      	cmp	r3, #1
 800423a:	d002      	beq.n	8004242 <RCCEx_PLLSAI1_Config+0x4e>
 800423c:	2b02      	cmp	r3, #2
 800423e:	d009      	beq.n	8004254 <RCCEx_PLLSAI1_Config+0x60>
 8004240:	e020      	b.n	8004284 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004242:	4b62      	ldr	r3, [pc, #392]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11d      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004252:	e01a      	b.n	800428a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004254:	4b5d      	ldr	r3, [pc, #372]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	2b00      	cmp	r3, #0
 800425e:	d116      	bne.n	800428e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004264:	e013      	b.n	800428e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004266:	4b59      	ldr	r3, [pc, #356]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004272:	4b56      	ldr	r3, [pc, #344]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004282:	e006      	b.n	8004292 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      break;
 8004288:	e004      	b.n	8004294 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800428a:	bf00      	nop
 800428c:	e002      	b.n	8004294 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004292:	bf00      	nop
    }

    if(status == HAL_OK)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d108      	bne.n	80042ac <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800429a:	4b4c      	ldr	r3, [pc, #304]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4949      	ldr	r1, [pc, #292]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f040 8086 	bne.w	80043c0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042b4:	4b45      	ldr	r3, [pc, #276]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a44      	ldr	r2, [pc, #272]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80042ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c0:	f7fc fe90 	bl	8000fe4 <HAL_GetTick>
 80042c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042c6:	e009      	b.n	80042dc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c8:	f7fc fe8c 	bl	8000fe4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d902      	bls.n	80042dc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	73fb      	strb	r3, [r7, #15]
        break;
 80042da:	e005      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042dc:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ef      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d168      	bne.n	80043c0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d113      	bne.n	800431c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6892      	ldr	r2, [r2, #8]
 8004300:	0211      	lsls	r1, r2, #8
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68d2      	ldr	r2, [r2, #12]
 8004306:	06d2      	lsls	r2, r2, #27
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6852      	ldr	r2, [r2, #4]
 800430e:	3a01      	subs	r2, #1
 8004310:	0112      	lsls	r2, r2, #4
 8004312:	430a      	orrs	r2, r1
 8004314:	492d      	ldr	r1, [pc, #180]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004316:	4313      	orrs	r3, r2
 8004318:	610b      	str	r3, [r1, #16]
 800431a:	e02d      	b.n	8004378 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d115      	bne.n	800434e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004322:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6892      	ldr	r2, [r2, #8]
 800432e:	0211      	lsls	r1, r2, #8
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6912      	ldr	r2, [r2, #16]
 8004334:	0852      	lsrs	r2, r2, #1
 8004336:	3a01      	subs	r2, #1
 8004338:	0552      	lsls	r2, r2, #21
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6852      	ldr	r2, [r2, #4]
 8004340:	3a01      	subs	r2, #1
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	430a      	orrs	r2, r1
 8004346:	4921      	ldr	r1, [pc, #132]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]
 800434c:	e014      	b.n	8004378 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800434e:	4b1f      	ldr	r3, [pc, #124]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004354:	4013      	ands	r3, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6892      	ldr	r2, [r2, #8]
 800435a:	0211      	lsls	r1, r2, #8
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6952      	ldr	r2, [r2, #20]
 8004360:	0852      	lsrs	r2, r2, #1
 8004362:	3a01      	subs	r2, #1
 8004364:	0652      	lsls	r2, r2, #25
 8004366:	4311      	orrs	r1, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6852      	ldr	r2, [r2, #4]
 800436c:	3a01      	subs	r2, #1
 800436e:	0112      	lsls	r2, r2, #4
 8004370:	430a      	orrs	r2, r1
 8004372:	4916      	ldr	r1, [pc, #88]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004374:	4313      	orrs	r3, r2
 8004376:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a13      	ldr	r2, [pc, #76]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800437e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004382:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fc fe2e 	bl	8000fe4 <HAL_GetTick>
 8004388:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800438a:	e009      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800438c:	f7fc fe2a 	bl	8000fe4 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d902      	bls.n	80043a0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	73fb      	strb	r3, [r7, #15]
          break;
 800439e:	e005      	b.n	80043ac <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ef      	beq.n	800438c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	4904      	ldr	r1, [pc, #16]	; (80043cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	07ff800f 	.word	0x07ff800f
 80043d4:	ff9f800f 	.word	0xff9f800f
 80043d8:	f9ff800f 	.word	0xf9ff800f

080043dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043ea:	4b72      	ldr	r3, [pc, #456]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00e      	beq.n	8004414 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043f6:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0203 	and.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d103      	bne.n	800440e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
       ||
 800440a:	2b00      	cmp	r3, #0
 800440c:	d142      	bne.n	8004494 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
 8004412:	e03f      	b.n	8004494 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d018      	beq.n	800444e <RCCEx_PLLSAI2_Config+0x72>
 800441c:	2b03      	cmp	r3, #3
 800441e:	d825      	bhi.n	800446c <RCCEx_PLLSAI2_Config+0x90>
 8004420:	2b01      	cmp	r3, #1
 8004422:	d002      	beq.n	800442a <RCCEx_PLLSAI2_Config+0x4e>
 8004424:	2b02      	cmp	r3, #2
 8004426:	d009      	beq.n	800443c <RCCEx_PLLSAI2_Config+0x60>
 8004428:	e020      	b.n	800446c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800442a:	4b62      	ldr	r3, [pc, #392]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d11d      	bne.n	8004472 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800443a:	e01a      	b.n	8004472 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800443c:	4b5d      	ldr	r3, [pc, #372]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004444:	2b00      	cmp	r3, #0
 8004446:	d116      	bne.n	8004476 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444c:	e013      	b.n	8004476 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800444e:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800445a:	4b56      	ldr	r3, [pc, #344]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800446a:	e006      	b.n	800447a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
      break;
 8004470:	e004      	b.n	800447c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800447a:	bf00      	nop
    }

    if(status == HAL_OK)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d108      	bne.n	8004494 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004482:	4b4c      	ldr	r3, [pc, #304]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f023 0203 	bic.w	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4949      	ldr	r1, [pc, #292]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f040 8086 	bne.w	80045a8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800449c:	4b45      	ldr	r3, [pc, #276]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a44      	ldr	r2, [pc, #272]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a8:	f7fc fd9c 	bl	8000fe4 <HAL_GetTick>
 80044ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044ae:	e009      	b.n	80044c4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044b0:	f7fc fd98 	bl	8000fe4 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d902      	bls.n	80044c4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	73fb      	strb	r3, [r7, #15]
        break;
 80044c2:	e005      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044c4:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ef      	bne.n	80044b0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d168      	bne.n	80045a8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d113      	bne.n	8004504 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044dc:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6892      	ldr	r2, [r2, #8]
 80044e8:	0211      	lsls	r1, r2, #8
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68d2      	ldr	r2, [r2, #12]
 80044ee:	06d2      	lsls	r2, r2, #27
 80044f0:	4311      	orrs	r1, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6852      	ldr	r2, [r2, #4]
 80044f6:	3a01      	subs	r2, #1
 80044f8:	0112      	lsls	r2, r2, #4
 80044fa:	430a      	orrs	r2, r1
 80044fc:	492d      	ldr	r1, [pc, #180]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	614b      	str	r3, [r1, #20]
 8004502:	e02d      	b.n	8004560 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d115      	bne.n	8004536 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800450a:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6892      	ldr	r2, [r2, #8]
 8004516:	0211      	lsls	r1, r2, #8
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6912      	ldr	r2, [r2, #16]
 800451c:	0852      	lsrs	r2, r2, #1
 800451e:	3a01      	subs	r2, #1
 8004520:	0552      	lsls	r2, r2, #21
 8004522:	4311      	orrs	r1, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6852      	ldr	r2, [r2, #4]
 8004528:	3a01      	subs	r2, #1
 800452a:	0112      	lsls	r2, r2, #4
 800452c:	430a      	orrs	r2, r1
 800452e:	4921      	ldr	r1, [pc, #132]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004530:	4313      	orrs	r3, r2
 8004532:	614b      	str	r3, [r1, #20]
 8004534:	e014      	b.n	8004560 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004536:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004538:	695a      	ldr	r2, [r3, #20]
 800453a:	4b21      	ldr	r3, [pc, #132]	; (80045c0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6892      	ldr	r2, [r2, #8]
 8004542:	0211      	lsls	r1, r2, #8
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6952      	ldr	r2, [r2, #20]
 8004548:	0852      	lsrs	r2, r2, #1
 800454a:	3a01      	subs	r2, #1
 800454c:	0652      	lsls	r2, r2, #25
 800454e:	4311      	orrs	r1, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6852      	ldr	r2, [r2, #4]
 8004554:	3a01      	subs	r2, #1
 8004556:	0112      	lsls	r2, r2, #4
 8004558:	430a      	orrs	r2, r1
 800455a:	4916      	ldr	r1, [pc, #88]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800455c:	4313      	orrs	r3, r2
 800455e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004560:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fc fd3a 	bl	8000fe4 <HAL_GetTick>
 8004570:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004572:	e009      	b.n	8004588 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004574:	f7fc fd36 	bl	8000fe4 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d902      	bls.n	8004588 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	73fb      	strb	r3, [r7, #15]
          break;
 8004586:	e005      	b.n	8004594 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ef      	beq.n	8004574 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	4904      	ldr	r1, [pc, #16]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
 80045b8:	07ff800f 	.word	0x07ff800f
 80045bc:	ff9f800f 	.word	0xff9f800f
 80045c0:	f9ff800f 	.word	0xf9ff800f

080045c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d07f      	beq.n	80046d6 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fb5c 	bl	8000ca8 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80045f6:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	22ca      	movs	r2, #202	; 0xca
 8004606:	625a      	str	r2, [r3, #36]	; 0x24
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2253      	movs	r2, #83	; 0x53
 800460e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f9b5 	bl	8004980 <RTC_EnterInitMode>
 8004616:	4603      	mov	r3, r0
 8004618:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d15a      	bne.n	80046d6 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800462e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004632:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6999      	ldr	r1, [r3, #24]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6912      	ldr	r2, [r2, #16]
 800465a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6919      	ldr	r1, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	041a      	lsls	r2, r3, #16
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RTC_Init+0x11c>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	430b      	orrs	r3, r1
 8004682:	4917      	ldr	r1, [pc, #92]	; (80046e0 <HAL_RTC_Init+0x11c>)
 8004684:	4313      	orrs	r3, r2
 8004686:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f9af 	bl	80049ec <RTC_ExitInitMode>
 800468e:	4603      	mov	r3, r0
 8004690:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11e      	bne.n	80046d6 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80046a6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6999      	ldr	r1, [r3, #24]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	22ff      	movs	r2, #255	; 0xff
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40002800 	.word	0x40002800

080046e4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_RTC_SetTime+0x1a>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e08b      	b.n	8004816 <HAL_RTC_SetTime+0x132>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	22ca      	movs	r2, #202	; 0xca
 8004714:	625a      	str	r2, [r3, #36]	; 0x24
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2253      	movs	r2, #83	; 0x53
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f92e 	bl	8004980 <RTC_EnterInitMode>
 8004724:	4603      	mov	r3, r0
 8004726:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d15e      	bne.n	80047ec <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800472e:	4b3c      	ldr	r3, [pc, #240]	; (8004820 <HAL_RTC_SetTime+0x13c>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473a:	d057      	beq.n	80047ec <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d125      	bne.n	800478e <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004742:	4b37      	ldr	r3, [pc, #220]	; (8004820 <HAL_RTC_SetTime+0x13c>)
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2200      	movs	r2, #0
 8004752:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 f985 	bl	8004a68 <RTC_ByteToBcd2>
 800475e:	4603      	mov	r3, r0
 8004760:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	785b      	ldrb	r3, [r3, #1]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f97e 	bl	8004a68 <RTC_ByteToBcd2>
 800476c:	4603      	mov	r3, r0
 800476e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004770:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	789b      	ldrb	r3, [r3, #2]
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f976 	bl	8004a68 <RTC_ByteToBcd2>
 800477c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800477e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	78db      	ldrb	r3, [r3, #3]
 8004786:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	e017      	b.n	80047be <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800478e:	4b24      	ldr	r3, [pc, #144]	; (8004820 <HAL_RTC_SetTime+0x13c>)
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2200      	movs	r2, #0
 800479e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80047ac:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047b2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	78db      	ldrb	r3, [r3, #3]
 80047b8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80047be:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_RTC_SetTime+0x13c>)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80047c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047ca:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <HAL_RTC_SetTime+0x13c>)
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	4a13      	ldr	r2, [pc, #76]	; (8004820 <HAL_RTC_SetTime+0x13c>)
 80047d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <HAL_RTC_SetTime+0x13c>)
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	68d9      	ldr	r1, [r3, #12]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	490e      	ldr	r1, [pc, #56]	; (8004820 <HAL_RTC_SetTime+0x13c>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f8fd 	bl	80049ec <RTC_ExitInitMode>
 80047f2:	4603      	mov	r3, r0
 80047f4:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	22ff      	movs	r2, #255	; 0xff
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d103      	bne.n	800480c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8004814:	7cfb      	ldrb	r3, [r7, #19]
}
 8004816:	4618      	mov	r0, r3
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}
 800481e:	bf00      	nop
 8004820:	40002800 	.word	0x40002800

08004824 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_RTC_SetDate+0x1a>
 800483a:	2302      	movs	r3, #2
 800483c:	e074      	b.n	8004928 <HAL_RTC_SetDate+0x104>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2202      	movs	r2, #2
 800484a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10e      	bne.n	8004872 <HAL_RTC_SetDate+0x4e>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	785b      	ldrb	r3, [r3, #1]
 8004864:	f023 0310 	bic.w	r3, r3, #16
 8004868:	b2db      	uxtb	r3, r3
 800486a:	330a      	adds	r3, #10
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d11c      	bne.n	80048b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	78db      	ldrb	r3, [r3, #3]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 f8f3 	bl	8004a68 <RTC_ByteToBcd2>
 8004882:	4603      	mov	r3, r0
 8004884:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	785b      	ldrb	r3, [r3, #1]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f8ec 	bl	8004a68 <RTC_ByteToBcd2>
 8004890:	4603      	mov	r3, r0
 8004892:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004894:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	789b      	ldrb	r3, [r3, #2]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f8e4 	bl	8004a68 <RTC_ByteToBcd2>
 80048a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e00e      	b.n	80048d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	78db      	ldrb	r3, [r3, #3]
 80048b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	22ca      	movs	r2, #202	; 0xca
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2253      	movs	r2, #83	; 0x53
 80048de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f84d 	bl	8004980 <RTC_EnterInitMode>
 80048e6:	4603      	mov	r3, r0
 80048e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80048ea:	7cfb      	ldrb	r3, [r7, #19]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80048f0:	4a0f      	ldr	r2, [pc, #60]	; (8004930 <HAL_RTC_SetDate+0x10c>)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f874 	bl	80049ec <RTC_ExitInitMode>
 8004904:	4603      	mov	r3, r0
 8004906:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	22ff      	movs	r2, #255	; 0xff
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004910:	7cfb      	ldrb	r3, [r7, #19]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8004926:	7cfb      	ldrb	r3, [r7, #19]
}
 8004928:	4618      	mov	r0, r3
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd90      	pop	{r4, r7, pc}
 8004930:	40002800 	.word	0x40002800

08004934 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800494a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800494c:	f7fc fb4a 	bl	8000fe4 <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004952:	e009      	b.n	8004968 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004954:	f7fc fb46 	bl	8000fe4 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004962:	d901      	bls.n	8004968 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e007      	b.n	8004978 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0ee      	beq.n	8004954 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d123      	bne.n	80049e2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049a8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80049aa:	f7fc fb1b 	bl	8000fe4 <HAL_GetTick>
 80049ae:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049b0:	e00d      	b.n	80049ce <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049b2:	f7fc fb17 	bl	8000fe4 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049c0:	d905      	bls.n	80049ce <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2203      	movs	r2, #3
 80049ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d102      	bne.n	80049e2 <RTC_EnterInitMode+0x62>
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d1e7      	bne.n	80049b2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80049f8:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <RTC_ExitInitMode+0x78>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <RTC_ExitInitMode+0x78>)
 80049fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a02:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004a04:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <RTC_ExitInitMode+0x78>)
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10c      	bne.n	8004a2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ff8f 	bl	8004934 <HAL_RTC_WaitForSynchro>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01e      	beq.n	8004a5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2203      	movs	r2, #3
 8004a20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	73fb      	strb	r3, [r7, #15]
 8004a28:	e017      	b.n	8004a5a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <RTC_ExitInitMode+0x78>)
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <RTC_ExitInitMode+0x78>)
 8004a30:	f023 0320 	bic.w	r3, r3, #32
 8004a34:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff ff7c 	bl	8004934 <HAL_RTC_WaitForSynchro>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2203      	movs	r2, #3
 8004a46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <RTC_ExitInitMode+0x78>)
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <RTC_ExitInitMode+0x78>)
 8004a54:	f043 0320 	orr.w	r3, r3, #32
 8004a58:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40002800 	.word	0x40002800

08004a68 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004a7a:	e005      	b.n	8004a88 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004a82:	7afb      	ldrb	r3, [r7, #11]
 8004a84:	3b0a      	subs	r3, #10
 8004a86:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	2b09      	cmp	r3, #9
 8004a8c:	d8f6      	bhi.n	8004a7c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	7afb      	ldrb	r3, [r7, #11]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	b2db      	uxtb	r3, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e095      	b.n	8004be6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d108      	bne.n	8004ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aca:	d009      	beq.n	8004ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
 8004ad2:	e005      	b.n	8004ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc f912 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b20:	d902      	bls.n	8004b28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e002      	b.n	8004b2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b36:	d007      	beq.n	8004b48 <HAL_SPI_Init+0xa0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b40:	d002      	beq.n	8004b48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	ea42 0103 	orr.w	r1, r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	0c1b      	lsrs	r3, r3, #16
 8004ba4:	f003 0204 	and.w	r2, r3, #4
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004bc4:	ea42 0103 	orr.w	r1, r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b088      	sub	sp, #32
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_SPI_Transmit+0x22>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e158      	b.n	8004ec2 <HAL_SPI_Transmit+0x2d4>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c18:	f7fc f9e4 	bl	8000fe4 <HAL_GetTick>
 8004c1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c32:	e13d      	b.n	8004eb0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Transmit+0x52>
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c44:	e134      	b.n	8004eb0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2203      	movs	r2, #3
 8004c4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c90:	d10f      	bne.n	8004cb2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d007      	beq.n	8004cd0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cd8:	d94b      	bls.n	8004d72 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_SPI_Transmit+0xfa>
 8004ce2:	8afb      	ldrh	r3, [r7, #22]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d13e      	bne.n	8004d66 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	881a      	ldrh	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	1c9a      	adds	r2, r3, #2
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d0c:	e02b      	b.n	8004d66 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d112      	bne.n	8004d42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	881a      	ldrh	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	1c9a      	adds	r2, r3, #2
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d40:	e011      	b.n	8004d66 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d42:	f7fc f94f 	bl	8000fe4 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d803      	bhi.n	8004d5a <HAL_SPI_Transmit+0x16c>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d102      	bne.n	8004d60 <HAL_SPI_Transmit+0x172>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d64:	e0a4      	b.n	8004eb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ce      	bne.n	8004d0e <HAL_SPI_Transmit+0x120>
 8004d70:	e07c      	b.n	8004e6c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Transmit+0x192>
 8004d7a:	8afb      	ldrh	r3, [r7, #22]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d170      	bne.n	8004e62 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d912      	bls.n	8004db0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b02      	subs	r3, #2
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dae:	e058      	b.n	8004e62 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004dd6:	e044      	b.n	8004e62 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d12b      	bne.n	8004e3e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d912      	bls.n	8004e16 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	881a      	ldrh	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b02      	subs	r3, #2
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e14:	e025      	b.n	8004e62 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	7812      	ldrb	r2, [r2, #0]
 8004e22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e3c:	e011      	b.n	8004e62 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e3e:	f7fc f8d1 	bl	8000fe4 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d803      	bhi.n	8004e56 <HAL_SPI_Transmit+0x268>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d102      	bne.n	8004e5c <HAL_SPI_Transmit+0x26e>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e60:	e026      	b.n	8004eb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1b5      	bne.n	8004dd8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fce3 	bl	800583c <SPI_EndRxTxTransaction>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e000      	b.n	8004eb0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b088      	sub	sp, #32
 8004ece:	af02      	add	r7, sp, #8
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee6:	d112      	bne.n	8004f0e <HAL_SPI_Receive+0x44>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10e      	bne.n	8004f0e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	4613      	mov	r3, r2
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f910 	bl	800512a <HAL_SPI_TransmitReceive>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	e109      	b.n	8005122 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_SPI_Receive+0x52>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e102      	b.n	8005122 <HAL_SPI_Receive+0x258>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f24:	f7fc f85e 	bl	8000fe4 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d002      	beq.n	8004f3c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
 8004f38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f3a:	e0e9      	b.n	8005110 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_Receive+0x7e>
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f4c:	e0e0      	b.n	8005110 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2204      	movs	r2, #4
 8004f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	88fa      	ldrh	r2, [r7, #6]
 8004f66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f98:	d908      	bls.n	8004fac <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	e007      	b.n	8004fbc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fe4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d007      	beq.n	8005004 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005002:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800500c:	d867      	bhi.n	80050de <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800500e:	e030      	b.n	8005072 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b01      	cmp	r3, #1
 800501c:	d117      	bne.n	800504e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f103 020c 	add.w	r2, r3, #12
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800504c:	e011      	b.n	8005072 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800504e:	f7fb ffc9 	bl	8000fe4 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d803      	bhi.n	8005066 <HAL_SPI_Receive+0x19c>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d102      	bne.n	800506c <HAL_SPI_Receive+0x1a2>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005070:	e04e      	b.n	8005110 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1c8      	bne.n	8005010 <HAL_SPI_Receive+0x146>
 800507e:	e034      	b.n	80050ea <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d115      	bne.n	80050ba <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	b292      	uxth	r2, r2
 800509a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	1c9a      	adds	r2, r3, #2
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80050b8:	e011      	b.n	80050de <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ba:	f7fb ff93 	bl	8000fe4 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d803      	bhi.n	80050d2 <HAL_SPI_Receive+0x208>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d102      	bne.n	80050d8 <HAL_SPI_Receive+0x20e>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050dc:	e018      	b.n	8005110 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1ca      	bne.n	8005080 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fb4c 	bl	800578c <SPI_EndRxTransaction>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	75fb      	strb	r3, [r7, #23]
 800510c:	e000      	b.n	8005110 <HAL_SPI_Receive+0x246>
  }

error :
 800510e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b08a      	sub	sp, #40	; 0x28
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005138:	2301      	movs	r3, #1
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x26>
 800514c:	2302      	movs	r3, #2
 800514e:	e1fb      	b.n	8005548 <HAL_SPI_TransmitReceive+0x41e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005158:	f7fb ff44 	bl	8000fe4 <HAL_GetTick>
 800515c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005164:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005170:	887b      	ldrh	r3, [r7, #2]
 8005172:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005174:	7efb      	ldrb	r3, [r7, #27]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d00e      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x6e>
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005180:	d106      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d102      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x66>
 800518a:	7efb      	ldrb	r3, [r7, #27]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d003      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005190:	2302      	movs	r3, #2
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005196:	e1cd      	b.n	8005534 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x80>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x80>
 80051a4:	887b      	ldrh	r3, [r7, #2]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80051b0:	e1c0      	b.n	8005534 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d003      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2205      	movs	r2, #5
 80051c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	887a      	ldrh	r2, [r7, #2]
 80051d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	887a      	ldrh	r2, [r7, #2]
 80051de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	887a      	ldrh	r2, [r7, #2]
 80051ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	887a      	ldrh	r2, [r7, #2]
 80051f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005208:	d802      	bhi.n	8005210 <HAL_SPI_TransmitReceive+0xe6>
 800520a:	8a3b      	ldrh	r3, [r7, #16]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d908      	bls.n	8005222 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	e007      	b.n	8005232 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005230:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d007      	beq.n	8005250 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800524e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005258:	d97c      	bls.n	8005354 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_SPI_TransmitReceive+0x13e>
 8005262:	8a7b      	ldrh	r3, [r7, #18]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d169      	bne.n	800533c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	881a      	ldrh	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	1c9a      	adds	r2, r3, #2
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800528c:	e056      	b.n	800533c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b02      	cmp	r3, #2
 800529a:	d11b      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x1aa>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d016      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x1aa>
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d113      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	881a      	ldrh	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d11c      	bne.n	800531c <HAL_SPI_TransmitReceive+0x1f2>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d016      	beq.n	800531c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	b292      	uxth	r2, r2
 80052fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	1c9a      	adds	r2, r3, #2
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005318:	2301      	movs	r3, #1
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800531c:	f7fb fe62 	bl	8000fe4 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005328:	429a      	cmp	r2, r3
 800532a:	d807      	bhi.n	800533c <HAL_SPI_TransmitReceive+0x212>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d003      	beq.n	800533c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800533a:	e0fb      	b.n	8005534 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1a3      	bne.n	800528e <HAL_SPI_TransmitReceive+0x164>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d19d      	bne.n	800528e <HAL_SPI_TransmitReceive+0x164>
 8005352:	e0df      	b.n	8005514 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_SPI_TransmitReceive+0x23a>
 800535c:	8a7b      	ldrh	r3, [r7, #18]
 800535e:	2b01      	cmp	r3, #1
 8005360:	f040 80cb 	bne.w	80054fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	d912      	bls.n	8005394 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b02      	subs	r3, #2
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005392:	e0b2      	b.n	80054fa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ba:	e09e      	b.n	80054fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d134      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x30a>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d02f      	beq.n	8005434 <HAL_SPI_TransmitReceive+0x30a>
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d12c      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d912      	bls.n	800540a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	881a      	ldrh	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	1c9a      	adds	r2, r3, #2
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b02      	subs	r3, #2
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005408:	e012      	b.n	8005430 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	7812      	ldrb	r2, [r2, #0]
 8005416:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d148      	bne.n	80054d4 <HAL_SPI_TransmitReceive+0x3aa>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d042      	beq.n	80054d4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	d923      	bls.n	80054a2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	b292      	uxth	r2, r2
 8005466:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	1c9a      	adds	r2, r3, #2
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b02      	subs	r3, #2
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	d81f      	bhi.n	80054d0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800549e:	605a      	str	r2, [r3, #4]
 80054a0:	e016      	b.n	80054d0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f103 020c 	add.w	r2, r3, #12
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	7812      	ldrb	r2, [r2, #0]
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054d0:	2301      	movs	r3, #1
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054d4:	f7fb fd86 	bl	8000fe4 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d803      	bhi.n	80054ec <HAL_SPI_TransmitReceive+0x3c2>
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ea:	d102      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x3c8>
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d103      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80054f8:	e01c      	b.n	8005534 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	f47f af5b 	bne.w	80053bc <HAL_SPI_TransmitReceive+0x292>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	f47f af54 	bne.w	80053bc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f98f 	bl	800583c <SPI_EndRxTxTransaction>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2220      	movs	r2, #32
 800552e:	661a      	str	r2, [r3, #96]	; 0x60
 8005530:	e000      	b.n	8005534 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005532:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005548:	4618      	mov	r0, r3
 800554a:	3728      	adds	r7, #40	; 0x28
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005560:	f7fb fd40 	bl	8000fe4 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	4413      	add	r3, r2
 800556e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005570:	f7fb fd38 	bl	8000fe4 <HAL_GetTick>
 8005574:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005576:	4b39      	ldr	r3, [pc, #228]	; (800565c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	015b      	lsls	r3, r3, #5
 800557c:	0d1b      	lsrs	r3, r3, #20
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005586:	e054      	b.n	8005632 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	d050      	beq.n	8005632 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005590:	f7fb fd28 	bl	8000fe4 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	429a      	cmp	r2, r3
 800559e:	d902      	bls.n	80055a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d13d      	bne.n	8005622 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055be:	d111      	bne.n	80055e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c8:	d004      	beq.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d2:	d107      	bne.n	80055e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ec:	d10f      	bne.n	800560e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800560c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e017      	b.n	8005652 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	3b01      	subs	r3, #1
 8005630:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	429a      	cmp	r2, r3
 800564e:	d19b      	bne.n	8005588 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000000 	.word	0x20000000

08005660 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	; 0x28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005672:	f7fb fcb7 	bl	8000fe4 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	4413      	add	r3, r2
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005682:	f7fb fcaf 	bl	8000fe4 <HAL_GetTick>
 8005686:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005690:	4b3d      	ldr	r3, [pc, #244]	; (8005788 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	00da      	lsls	r2, r3, #3
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	0d1b      	lsrs	r3, r3, #20
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80056a8:	e060      	b.n	800576c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056b0:	d107      	bne.n	80056c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d050      	beq.n	800576c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056ca:	f7fb fc8b 	bl	8000fe4 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d902      	bls.n	80056e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d13d      	bne.n	800575c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f8:	d111      	bne.n	800571e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005702:	d004      	beq.n	800570e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570c:	d107      	bne.n	800571e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800571c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005726:	d10f      	bne.n	8005748 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005746:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e010      	b.n	800577e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	3b01      	subs	r3, #1
 800576a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4013      	ands	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d196      	bne.n	80056aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3728      	adds	r7, #40	; 0x28
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000000 	.word	0x20000000

0800578c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057a0:	d111      	bne.n	80057c6 <SPI_EndRxTransaction+0x3a>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057aa:	d004      	beq.n	80057b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b4:	d107      	bne.n	80057c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057c4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2200      	movs	r2, #0
 80057ce:	2180      	movs	r1, #128	; 0x80
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7ff febd 	bl	8005550 <SPI_WaitFlagStateUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e0:	f043 0220 	orr.w	r2, r3, #32
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e023      	b.n	8005834 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f4:	d11d      	bne.n	8005832 <SPI_EndRxTransaction+0xa6>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fe:	d004      	beq.n	800580a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005808:	d113      	bne.n	8005832 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2200      	movs	r2, #0
 8005812:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff ff22 	bl	8005660 <SPI_WaitFifoStateUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e000      	b.n	8005834 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2200      	movs	r2, #0
 8005850:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff ff03 	bl	8005660 <SPI_WaitFifoStateUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e027      	b.n	80058c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	2180      	movs	r1, #128	; 0x80
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff fe68 	bl	8005550 <SPI_WaitFlagStateUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e014      	b.n	80058c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2200      	movs	r2, #0
 800589e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7ff fedc 	bl	8005660 <SPI_WaitFifoStateUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b2:	f043 0220 	orr.w	r2, r3, #32
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e000      	b.n	80058c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e049      	b.n	800596e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fb fa5a 	bl	8000da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f000 f9ee 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d001      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e04f      	b.n	8005a30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <HAL_TIM_Base_Start_IT+0xc4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01d      	beq.n	80059ee <HAL_TIM_Base_Start_IT+0x76>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ba:	d018      	beq.n	80059ee <HAL_TIM_Base_Start_IT+0x76>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <HAL_TIM_Base_Start_IT+0xc8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <HAL_TIM_Base_Start_IT+0x76>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <HAL_TIM_Base_Start_IT+0xcc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00e      	beq.n	80059ee <HAL_TIM_Base_Start_IT+0x76>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <HAL_TIM_Base_Start_IT+0xd0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d009      	beq.n	80059ee <HAL_TIM_Base_Start_IT+0x76>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1b      	ldr	r2, [pc, #108]	; (8005a4c <HAL_TIM_Base_Start_IT+0xd4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d004      	beq.n	80059ee <HAL_TIM_Base_Start_IT+0x76>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <HAL_TIM_Base_Start_IT+0xd8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d115      	bne.n	8005a1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <HAL_TIM_Base_Start_IT+0xdc>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b06      	cmp	r3, #6
 80059fe:	d015      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0xb4>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a06:	d011      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a18:	e008      	b.n	8005a2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e000      	b.n	8005a2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40000c00 	.word	0x40000c00
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	00010007 	.word	0x00010007

08005a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d122      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d11b      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0202 	mvn.w	r2, #2
 8005a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f905 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005aa0:	e005      	b.n	8005aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8f7 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f908 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d122      	bne.n	8005b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d11b      	bne.n	8005b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0204 	mvn.w	r2, #4
 8005ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f8db 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f8cd 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f8de 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d122      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d11b      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0208 	mvn.w	r2, #8
 8005b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2204      	movs	r2, #4
 8005b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8b1 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f8a3 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f8b4 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d122      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b10      	cmp	r3, #16
 8005b76:	d11b      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0210 	mvn.w	r2, #16
 8005b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2208      	movs	r2, #8
 8005b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f887 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005b9c:	e005      	b.n	8005baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f879 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f88a 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d10e      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d107      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0201 	mvn.w	r2, #1
 8005bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fa ff42 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	d10e      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d107      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f914 	bl	8005e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c16:	d10e      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d107      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f907 	bl	8005e44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d10e      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	d107      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f838 	bl	8005cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d10e      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d107      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f06f 0220 	mvn.w	r2, #32
 8005c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f8c7 	bl	8005e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a40      	ldr	r2, [pc, #256]	; (8005dfc <TIM_Base_SetConfig+0x114>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d013      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d06:	d00f      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a3d      	ldr	r2, [pc, #244]	; (8005e00 <TIM_Base_SetConfig+0x118>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a3c      	ldr	r2, [pc, #240]	; (8005e04 <TIM_Base_SetConfig+0x11c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a3b      	ldr	r2, [pc, #236]	; (8005e08 <TIM_Base_SetConfig+0x120>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a3a      	ldr	r2, [pc, #232]	; (8005e0c <TIM_Base_SetConfig+0x124>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d108      	bne.n	8005d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2f      	ldr	r2, [pc, #188]	; (8005dfc <TIM_Base_SetConfig+0x114>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01f      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d01b      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a2c      	ldr	r2, [pc, #176]	; (8005e00 <TIM_Base_SetConfig+0x118>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d017      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2b      	ldr	r2, [pc, #172]	; (8005e04 <TIM_Base_SetConfig+0x11c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2a      	ldr	r2, [pc, #168]	; (8005e08 <TIM_Base_SetConfig+0x120>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00f      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a29      	ldr	r2, [pc, #164]	; (8005e0c <TIM_Base_SetConfig+0x124>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00b      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a28      	ldr	r2, [pc, #160]	; (8005e10 <TIM_Base_SetConfig+0x128>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d007      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <TIM_Base_SetConfig+0x12c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d003      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a26      	ldr	r2, [pc, #152]	; (8005e18 <TIM_Base_SetConfig+0x130>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d108      	bne.n	8005d94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a10      	ldr	r2, [pc, #64]	; (8005dfc <TIM_Base_SetConfig+0x114>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00f      	beq.n	8005de0 <TIM_Base_SetConfig+0xf8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a12      	ldr	r2, [pc, #72]	; (8005e0c <TIM_Base_SetConfig+0x124>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00b      	beq.n	8005de0 <TIM_Base_SetConfig+0xf8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a11      	ldr	r2, [pc, #68]	; (8005e10 <TIM_Base_SetConfig+0x128>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d007      	beq.n	8005de0 <TIM_Base_SetConfig+0xf8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a10      	ldr	r2, [pc, #64]	; (8005e14 <TIM_Base_SetConfig+0x12c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_Base_SetConfig+0xf8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a0f      	ldr	r2, [pc, #60]	; (8005e18 <TIM_Base_SetConfig+0x130>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d103      	bne.n	8005de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	615a      	str	r2, [r3, #20]
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40013400 	.word	0x40013400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800

08005e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <__NVIC_SetPriority>:
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	6039      	str	r1, [r7, #0]
 8005e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	db0a      	blt.n	8005e82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	490c      	ldr	r1, [pc, #48]	; (8005ea4 <__NVIC_SetPriority+0x4c>)
 8005e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e76:	0112      	lsls	r2, r2, #4
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e80:	e00a      	b.n	8005e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	4908      	ldr	r1, [pc, #32]	; (8005ea8 <__NVIC_SetPriority+0x50>)
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	3b04      	subs	r3, #4
 8005e90:	0112      	lsls	r2, r2, #4
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	440b      	add	r3, r1
 8005e96:	761a      	strb	r2, [r3, #24]
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	e000e100 	.word	0xe000e100
 8005ea8:	e000ed00 	.word	0xe000ed00

08005eac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <SysTick_Handler+0x1c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005eb4:	f002 f93a 	bl	800812c <xTaskGetSchedulerState>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d001      	beq.n	8005ec2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ebe:	f000 fd9b 	bl	80069f8 <xPortSysTickHandler>
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	e000e010 	.word	0xe000e010

08005ecc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	f06f 0004 	mvn.w	r0, #4
 8005ed6:	f7ff ffbf 	bl	8005e58 <__NVIC_SetPriority>
#endif
}
 8005eda:	bf00      	nop
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ee6:	f3ef 8305 	mrs	r3, IPSR
 8005eea:	603b      	str	r3, [r7, #0]
  return(result);
 8005eec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005ef2:	f06f 0305 	mvn.w	r3, #5
 8005ef6:	607b      	str	r3, [r7, #4]
 8005ef8:	e00c      	b.n	8005f14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <osKernelInitialize+0x44>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d105      	bne.n	8005f0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f02:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <osKernelInitialize+0x44>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	e002      	b.n	8005f14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f14:	687b      	ldr	r3, [r7, #4]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000224 	.word	0x20000224

08005f28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f2e:	f3ef 8305 	mrs	r3, IPSR
 8005f32:	603b      	str	r3, [r7, #0]
  return(result);
 8005f34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f3a:	f06f 0305 	mvn.w	r3, #5
 8005f3e:	607b      	str	r3, [r7, #4]
 8005f40:	e010      	b.n	8005f64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f42:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <osKernelStart+0x48>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d109      	bne.n	8005f5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f4a:	f7ff ffbf 	bl	8005ecc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f4e:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <osKernelStart+0x48>)
 8005f50:	2202      	movs	r2, #2
 8005f52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f54:	f001 fca2 	bl	800789c <vTaskStartScheduler>
      stat = osOK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	607b      	str	r3, [r7, #4]
 8005f5c:	e002      	b.n	8005f64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f64:	687b      	ldr	r3, [r7, #4]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000224 	.word	0x20000224

08005f74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	; 0x38
 8005f78:	af04      	add	r7, sp, #16
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f84:	f3ef 8305 	mrs	r3, IPSR
 8005f88:	617b      	str	r3, [r7, #20]
  return(result);
 8005f8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d17e      	bne.n	800608e <osThreadNew+0x11a>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d07b      	beq.n	800608e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005f96:	2380      	movs	r3, #128	; 0x80
 8005f98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f9a:	2318      	movs	r3, #24
 8005f9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d045      	beq.n	800603a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <osThreadNew+0x48>
        name = attr->name;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <osThreadNew+0x6e>
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	2b38      	cmp	r3, #56	; 0x38
 8005fd4:	d805      	bhi.n	8005fe2 <osThreadNew+0x6e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <osThreadNew+0x72>
        return (NULL);
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e054      	b.n	8006090 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	089b      	lsrs	r3, r3, #2
 8005ff4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00e      	beq.n	800601c <osThreadNew+0xa8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b5b      	cmp	r3, #91	; 0x5b
 8006004:	d90a      	bls.n	800601c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800600a:	2b00      	cmp	r3, #0
 800600c:	d006      	beq.n	800601c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <osThreadNew+0xa8>
        mem = 1;
 8006016:	2301      	movs	r3, #1
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	e010      	b.n	800603e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10c      	bne.n	800603e <osThreadNew+0xca>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d108      	bne.n	800603e <osThreadNew+0xca>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <osThreadNew+0xca>
          mem = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	e001      	b.n	800603e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d110      	bne.n	8006066 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800604c:	9202      	str	r2, [sp, #8]
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6a3a      	ldr	r2, [r7, #32]
 8006058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f001 fa48 	bl	80074f0 <xTaskCreateStatic>
 8006060:	4603      	mov	r3, r0
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	e013      	b.n	800608e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d110      	bne.n	800608e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	b29a      	uxth	r2, r3
 8006070:	f107 0310 	add.w	r3, r7, #16
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f001 fa93 	bl	80075aa <xTaskCreate>
 8006084:	4603      	mov	r3, r0
 8006086:	2b01      	cmp	r3, #1
 8006088:	d001      	beq.n	800608e <osThreadNew+0x11a>
            hTask = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800608e:	693b      	ldr	r3, [r7, #16]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3728      	adds	r7, #40	; 0x28
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060a0:	f3ef 8305 	mrs	r3, IPSR
 80060a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80060a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <osDelay+0x1c>
    stat = osErrorISR;
 80060ac:	f06f 0305 	mvn.w	r3, #5
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	e007      	b.n	80060c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 fbb8 	bl	8007834 <vTaskDelay>
    }
  }

  return (stat);
 80060c4:	68fb      	ldr	r3, [r7, #12]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a07      	ldr	r2, [pc, #28]	; (80060fc <vApplicationGetIdleTaskMemory+0x2c>)
 80060e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4a06      	ldr	r2, [pc, #24]	; (8006100 <vApplicationGetIdleTaskMemory+0x30>)
 80060e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2280      	movs	r2, #128	; 0x80
 80060ec:	601a      	str	r2, [r3, #0]
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000228 	.word	0x20000228
 8006100:	20000284 	.word	0x20000284

08006104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a07      	ldr	r2, [pc, #28]	; (8006130 <vApplicationGetTimerTaskMemory+0x2c>)
 8006114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4a06      	ldr	r2, [pc, #24]	; (8006134 <vApplicationGetTimerTaskMemory+0x30>)
 800611a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	20000484 	.word	0x20000484
 8006134:	200004e0 	.word	0x200004e0

08006138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006144:	f001 fc10 	bl	8007968 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006148:	4b5b      	ldr	r3, [pc, #364]	; (80062b8 <pvPortMalloc+0x180>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006150:	f000 f920 	bl	8006394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006154:	4b59      	ldr	r3, [pc, #356]	; (80062bc <pvPortMalloc+0x184>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	f040 8093 	bne.w	8006288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01d      	beq.n	80061a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006168:	2208      	movs	r2, #8
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	2b00      	cmp	r3, #0
 8006178:	d014      	beq.n	80061a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f023 0307 	bic.w	r3, r3, #7
 8006180:	3308      	adds	r3, #8
 8006182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d06e      	beq.n	8006288 <pvPortMalloc+0x150>
 80061aa:	4b45      	ldr	r3, [pc, #276]	; (80062c0 <pvPortMalloc+0x188>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d869      	bhi.n	8006288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061b4:	4b43      	ldr	r3, [pc, #268]	; (80062c4 <pvPortMalloc+0x18c>)
 80061b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061b8:	4b42      	ldr	r3, [pc, #264]	; (80062c4 <pvPortMalloc+0x18c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061be:	e004      	b.n	80061ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d903      	bls.n	80061dc <pvPortMalloc+0xa4>
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f1      	bne.n	80061c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061dc:	4b36      	ldr	r3, [pc, #216]	; (80062b8 <pvPortMalloc+0x180>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d050      	beq.n	8006288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2208      	movs	r2, #8
 80061ec:	4413      	add	r3, r2
 80061ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	1ad2      	subs	r2, r2, r3
 8006200:	2308      	movs	r3, #8
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	429a      	cmp	r2, r3
 8006206:	d91f      	bls.n	8006248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4413      	add	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <pvPortMalloc+0xf8>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	613b      	str	r3, [r7, #16]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	1ad2      	subs	r2, r2, r3
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006242:	69b8      	ldr	r0, [r7, #24]
 8006244:	f000 f908 	bl	8006458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006248:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <pvPortMalloc+0x188>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <pvPortMalloc+0x188>)
 8006254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006256:	4b1a      	ldr	r3, [pc, #104]	; (80062c0 <pvPortMalloc+0x188>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <pvPortMalloc+0x190>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d203      	bcs.n	800626a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006262:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <pvPortMalloc+0x188>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <pvPortMalloc+0x190>)
 8006268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <pvPortMalloc+0x184>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	431a      	orrs	r2, r3
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800627e:	4b13      	ldr	r3, [pc, #76]	; (80062cc <pvPortMalloc+0x194>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3301      	adds	r3, #1
 8006284:	4a11      	ldr	r2, [pc, #68]	; (80062cc <pvPortMalloc+0x194>)
 8006286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006288:	f001 fb7c 	bl	8007984 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <pvPortMalloc+0x174>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60fb      	str	r3, [r7, #12]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <pvPortMalloc+0x172>
	return pvReturn;
 80062ac:	69fb      	ldr	r3, [r7, #28]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3728      	adds	r7, #40	; 0x28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	200014a0 	.word	0x200014a0
 80062bc:	200014b4 	.word	0x200014b4
 80062c0:	200014a4 	.word	0x200014a4
 80062c4:	20001498 	.word	0x20001498
 80062c8:	200014a8 	.word	0x200014a8
 80062cc:	200014ac 	.word	0x200014ac

080062d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d04d      	beq.n	800637e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062e2:	2308      	movs	r3, #8
 80062e4:	425b      	negs	r3, r3
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4413      	add	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	4b24      	ldr	r3, [pc, #144]	; (8006388 <vPortFree+0xb8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10a      	bne.n	8006314 <vPortFree+0x44>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	60fb      	str	r3, [r7, #12]
}
 8006310:	bf00      	nop
 8006312:	e7fe      	b.n	8006312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <vPortFree+0x62>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	60bb      	str	r3, [r7, #8]
}
 800632e:	bf00      	nop
 8006330:	e7fe      	b.n	8006330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <vPortFree+0xb8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01e      	beq.n	800637e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d11a      	bne.n	800637e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	4b0e      	ldr	r3, [pc, #56]	; (8006388 <vPortFree+0xb8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	43db      	mvns	r3, r3
 8006352:	401a      	ands	r2, r3
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006358:	f001 fb06 	bl	8007968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <vPortFree+0xbc>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4413      	add	r3, r2
 8006366:	4a09      	ldr	r2, [pc, #36]	; (800638c <vPortFree+0xbc>)
 8006368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800636a:	6938      	ldr	r0, [r7, #16]
 800636c:	f000 f874 	bl	8006458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <vPortFree+0xc0>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3301      	adds	r3, #1
 8006376:	4a06      	ldr	r2, [pc, #24]	; (8006390 <vPortFree+0xc0>)
 8006378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800637a:	f001 fb03 	bl	8007984 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800637e:	bf00      	nop
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200014b4 	.word	0x200014b4
 800638c:	200014a4 	.word	0x200014a4
 8006390:	200014b0 	.word	0x200014b0

08006394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800639a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800639e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063a0:	4b27      	ldr	r3, [pc, #156]	; (8006440 <prvHeapInit+0xac>)
 80063a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00c      	beq.n	80063c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3307      	adds	r3, #7
 80063b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0307 	bic.w	r3, r3, #7
 80063ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	4a1f      	ldr	r2, [pc, #124]	; (8006440 <prvHeapInit+0xac>)
 80063c4:	4413      	add	r3, r2
 80063c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063cc:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <prvHeapInit+0xb0>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063d2:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <prvHeapInit+0xb0>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	4413      	add	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063e0:	2208      	movs	r2, #8
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a15      	ldr	r2, [pc, #84]	; (8006448 <prvHeapInit+0xb4>)
 80063f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063f6:	4b14      	ldr	r3, [pc, #80]	; (8006448 <prvHeapInit+0xb4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2200      	movs	r2, #0
 80063fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <prvHeapInit+0xb4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006414:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <prvHeapInit+0xb4>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4a0a      	ldr	r2, [pc, #40]	; (800644c <prvHeapInit+0xb8>)
 8006422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4a09      	ldr	r2, [pc, #36]	; (8006450 <prvHeapInit+0xbc>)
 800642a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800642c:	4b09      	ldr	r3, [pc, #36]	; (8006454 <prvHeapInit+0xc0>)
 800642e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006432:	601a      	str	r2, [r3, #0]
}
 8006434:	bf00      	nop
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	200008e0 	.word	0x200008e0
 8006444:	20001498 	.word	0x20001498
 8006448:	200014a0 	.word	0x200014a0
 800644c:	200014a8 	.word	0x200014a8
 8006450:	200014a4 	.word	0x200014a4
 8006454:	200014b4 	.word	0x200014b4

08006458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006460:	4b28      	ldr	r3, [pc, #160]	; (8006504 <prvInsertBlockIntoFreeList+0xac>)
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e002      	b.n	800646c <prvInsertBlockIntoFreeList+0x14>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	429a      	cmp	r2, r3
 8006474:	d8f7      	bhi.n	8006466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	4413      	add	r3, r2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	429a      	cmp	r2, r3
 8006486:	d108      	bne.n	800649a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	441a      	add	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	441a      	add	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d118      	bne.n	80064e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b15      	ldr	r3, [pc, #84]	; (8006508 <prvInsertBlockIntoFreeList+0xb0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d00d      	beq.n	80064d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	441a      	add	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e008      	b.n	80064e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064d6:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <prvInsertBlockIntoFreeList+0xb0>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e003      	b.n	80064e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d002      	beq.n	80064f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f6:	bf00      	nop
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20001498 	.word	0x20001498
 8006508:	200014a0 	.word	0x200014a0

0800650c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f103 0208 	add.w	r2, r3, #8
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f04f 32ff 	mov.w	r2, #4294967295
 8006524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f103 0208 	add.w	r2, r3, #8
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f103 0208 	add.w	r2, r3, #8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	601a      	str	r2, [r3, #0]
}
 80065a2:	bf00      	nop
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d103      	bne.n	80065ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e00c      	b.n	80065e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3308      	adds	r3, #8
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e002      	b.n	80065dc <vListInsert+0x2e>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d2f6      	bcs.n	80065d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	601a      	str	r2, [r3, #0]
}
 8006614:	bf00      	nop
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6892      	ldr	r2, [r2, #8]
 8006636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6852      	ldr	r2, [r2, #4]
 8006640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	429a      	cmp	r2, r3
 800664a:	d103      	bne.n	8006654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	1e5a      	subs	r2, r3, #1
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3b04      	subs	r3, #4
 8006684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800668c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3b04      	subs	r3, #4
 8006692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3b04      	subs	r3, #4
 80066a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066a4:	4a0c      	ldr	r2, [pc, #48]	; (80066d8 <pxPortInitialiseStack+0x64>)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3b14      	subs	r3, #20
 80066ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3b04      	subs	r3, #4
 80066ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f06f 0202 	mvn.w	r2, #2
 80066c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3b20      	subs	r3, #32
 80066c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066ca:	68fb      	ldr	r3, [r7, #12]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	080066dd 	.word	0x080066dd

080066dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066e6:	4b12      	ldr	r3, [pc, #72]	; (8006730 <prvTaskExitError+0x54>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d00a      	beq.n	8006706 <prvTaskExitError+0x2a>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	60fb      	str	r3, [r7, #12]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <prvTaskExitError+0x28>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	60bb      	str	r3, [r7, #8]
}
 8006718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800671a:	bf00      	nop
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0fc      	beq.n	800671c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	2000000c 	.word	0x2000000c
	...

08006740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <pxCurrentTCBConst2>)
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	6808      	ldr	r0, [r1, #0]
 8006746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	f380 8809 	msr	PSP, r0
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8811 	msr	BASEPRI, r0
 800675a:	4770      	bx	lr
 800675c:	f3af 8000 	nop.w

08006760 <pxCurrentTCBConst2>:
 8006760:	200014c0 	.word	0x200014c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006768:	4808      	ldr	r0, [pc, #32]	; (800678c <prvPortStartFirstTask+0x24>)
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	6800      	ldr	r0, [r0, #0]
 800676e:	f380 8808 	msr	MSP, r0
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f380 8814 	msr	CONTROL, r0
 800677a:	b662      	cpsie	i
 800677c:	b661      	cpsie	f
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	df00      	svc	0
 8006788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800678a:	bf00      	nop
 800678c:	e000ed08 	.word	0xe000ed08

08006790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006796:	4b46      	ldr	r3, [pc, #280]	; (80068b0 <xPortStartScheduler+0x120>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a46      	ldr	r2, [pc, #280]	; (80068b4 <xPortStartScheduler+0x124>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10a      	bne.n	80067b6 <xPortStartScheduler+0x26>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	613b      	str	r3, [r7, #16]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067b6:	4b3e      	ldr	r3, [pc, #248]	; (80068b0 <xPortStartScheduler+0x120>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a3f      	ldr	r2, [pc, #252]	; (80068b8 <xPortStartScheduler+0x128>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d10a      	bne.n	80067d6 <xPortStartScheduler+0x46>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	60fb      	str	r3, [r7, #12]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067d6:	4b39      	ldr	r3, [pc, #228]	; (80068bc <xPortStartScheduler+0x12c>)
 80067d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	22ff      	movs	r2, #255	; 0xff
 80067e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <xPortStartScheduler+0x130>)
 80067fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <xPortStartScheduler+0x134>)
 8006800:	2207      	movs	r2, #7
 8006802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006804:	e009      	b.n	800681a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006806:	4b2f      	ldr	r3, [pc, #188]	; (80068c4 <xPortStartScheduler+0x134>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3b01      	subs	r3, #1
 800680c:	4a2d      	ldr	r2, [pc, #180]	; (80068c4 <xPortStartScheduler+0x134>)
 800680e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d0ef      	beq.n	8006806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006826:	4b27      	ldr	r3, [pc, #156]	; (80068c4 <xPortStartScheduler+0x134>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1c3 0307 	rsb	r3, r3, #7
 800682e:	2b04      	cmp	r3, #4
 8006830:	d00a      	beq.n	8006848 <xPortStartScheduler+0xb8>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60bb      	str	r3, [r7, #8]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006848:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <xPortStartScheduler+0x134>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <xPortStartScheduler+0x134>)
 8006850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <xPortStartScheduler+0x134>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800685a:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <xPortStartScheduler+0x134>)
 800685c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <xPortStartScheduler+0x138>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <xPortStartScheduler+0x138>)
 800686c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <xPortStartScheduler+0x138>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <xPortStartScheduler+0x138>)
 8006878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800687c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800687e:	f000 f8dd 	bl	8006a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <xPortStartScheduler+0x13c>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006888:	f000 f8fc 	bl	8006a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800688c:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <xPortStartScheduler+0x140>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0f      	ldr	r2, [pc, #60]	; (80068d0 <xPortStartScheduler+0x140>)
 8006892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006898:	f7ff ff66 	bl	8006768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800689c:	f001 f9da 	bl	8007c54 <vTaskSwitchContext>
	prvTaskExitError();
 80068a0:	f7ff ff1c 	bl	80066dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	e000ed00 	.word	0xe000ed00
 80068b4:	410fc271 	.word	0x410fc271
 80068b8:	410fc270 	.word	0x410fc270
 80068bc:	e000e400 	.word	0xe000e400
 80068c0:	200014b8 	.word	0x200014b8
 80068c4:	200014bc 	.word	0x200014bc
 80068c8:	e000ed20 	.word	0xe000ed20
 80068cc:	2000000c 	.word	0x2000000c
 80068d0:	e000ef34 	.word	0xe000ef34

080068d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	607b      	str	r3, [r7, #4]
}
 80068ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ee:	4b0f      	ldr	r3, [pc, #60]	; (800692c <vPortEnterCritical+0x58>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	4a0d      	ldr	r2, [pc, #52]	; (800692c <vPortEnterCritical+0x58>)
 80068f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068f8:	4b0c      	ldr	r3, [pc, #48]	; (800692c <vPortEnterCritical+0x58>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d10f      	bne.n	8006920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <vPortEnterCritical+0x5c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <vPortEnterCritical+0x4c>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	603b      	str	r3, [r7, #0]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <vPortEnterCritical+0x4a>
	}
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	2000000c 	.word	0x2000000c
 8006930:	e000ed04 	.word	0xe000ed04

08006934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <vPortExitCritical+0x50>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <vPortExitCritical+0x24>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	607b      	str	r3, [r7, #4]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <vPortExitCritical+0x50>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3b01      	subs	r3, #1
 800695e:	4a09      	ldr	r2, [pc, #36]	; (8006984 <vPortExitCritical+0x50>)
 8006960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006962:	4b08      	ldr	r3, [pc, #32]	; (8006984 <vPortExitCritical+0x50>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <vPortExitCritical+0x42>
 800696a:	2300      	movs	r3, #0
 800696c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	2000000c 	.word	0x2000000c
	...

08006990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006990:	f3ef 8009 	mrs	r0, PSP
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <pxCurrentTCBConst>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	f01e 0f10 	tst.w	lr, #16
 80069a0:	bf08      	it	eq
 80069a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069b4:	f380 8811 	msr	BASEPRI, r0
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f001 f948 	bl	8007c54 <vTaskSwitchContext>
 80069c4:	f04f 0000 	mov.w	r0, #0
 80069c8:	f380 8811 	msr	BASEPRI, r0
 80069cc:	bc09      	pop	{r0, r3}
 80069ce:	6819      	ldr	r1, [r3, #0]
 80069d0:	6808      	ldr	r0, [r1, #0]
 80069d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d6:	f01e 0f10 	tst.w	lr, #16
 80069da:	bf08      	it	eq
 80069dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069e0:	f380 8809 	msr	PSP, r0
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w

080069f0 <pxCurrentTCBConst>:
 80069f0:	200014c0 	.word	0x200014c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop

080069f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	607b      	str	r3, [r7, #4]
}
 8006a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a12:	f001 f865 	bl	8007ae0 <xTaskIncrementTick>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <xPortSysTickHandler+0x40>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f383 8811 	msr	BASEPRI, r3
}
 8006a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <vPortSetupTimerInterrupt+0x34>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <vPortSetupTimerInterrupt+0x38>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <vPortSetupTimerInterrupt+0x3c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a0a      	ldr	r2, [pc, #40]	; (8006a7c <vPortSetupTimerInterrupt+0x40>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <vPortSetupTimerInterrupt+0x44>)
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a5e:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <vPortSetupTimerInterrupt+0x34>)
 8006a60:	2207      	movs	r2, #7
 8006a62:	601a      	str	r2, [r3, #0]
}
 8006a64:	bf00      	nop
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	e000e010 	.word	0xe000e010
 8006a74:	e000e018 	.word	0xe000e018
 8006a78:	20000000 	.word	0x20000000
 8006a7c:	10624dd3 	.word	0x10624dd3
 8006a80:	e000e014 	.word	0xe000e014

08006a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a94 <vPortEnableVFP+0x10>
 8006a88:	6801      	ldr	r1, [r0, #0]
 8006a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a8e:	6001      	str	r1, [r0, #0]
 8006a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a92:	bf00      	nop
 8006a94:	e000ed88 	.word	0xe000ed88

08006a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a9e:	f3ef 8305 	mrs	r3, IPSR
 8006aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b0f      	cmp	r3, #15
 8006aa8:	d914      	bls.n	8006ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aaa:	4a17      	ldr	r2, [pc, #92]	; (8006b08 <vPortValidateInterruptPriority+0x70>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ab4:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <vPortValidateInterruptPriority+0x74>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	7afa      	ldrb	r2, [r7, #11]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d20a      	bcs.n	8006ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ad4:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <vPortValidateInterruptPriority+0x78>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <vPortValidateInterruptPriority+0x7c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d90a      	bls.n	8006afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	603b      	str	r3, [r7, #0]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <vPortValidateInterruptPriority+0x60>
	}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	e000e3f0 	.word	0xe000e3f0
 8006b0c:	200014b8 	.word	0x200014b8
 8006b10:	e000ed0c 	.word	0xe000ed0c
 8006b14:	200014bc 	.word	0x200014bc

08006b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <xQueueGenericReset+0x2a>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60bb      	str	r3, [r7, #8]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b42:	f7ff fec7 	bl	80068d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	441a      	add	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	3b01      	subs	r3, #1
 8006b74:	68f9      	ldr	r1, [r7, #12]
 8006b76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	22ff      	movs	r2, #255	; 0xff
 8006b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	22ff      	movs	r2, #255	; 0xff
 8006b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d114      	bne.n	8006bc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01a      	beq.n	8006bd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3310      	adds	r3, #16
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 f903 	bl	8007db0 <xTaskRemoveFromEventList>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d012      	beq.n	8006bd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006bb0:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <xQueueGenericReset+0xcc>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	e009      	b.n	8006bd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3310      	adds	r3, #16
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fca0 	bl	800650c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3324      	adds	r3, #36	; 0x24
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff fc9b 	bl	800650c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bd6:	f7ff fead 	bl	8006934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bda:	2301      	movs	r3, #1
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08e      	sub	sp, #56	; 0x38
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c2a:	bf00      	nop
 8006c2c:	e7fe      	b.n	8006c2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <xQueueGenericCreateStatic+0x52>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <xQueueGenericCreateStatic+0x56>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <xQueueGenericCreateStatic+0x58>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	623b      	str	r3, [r7, #32]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <xQueueGenericCreateStatic+0x7e>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <xQueueGenericCreateStatic+0x82>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <xQueueGenericCreateStatic+0x84>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	61fb      	str	r3, [r7, #28]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c86:	2350      	movs	r3, #80	; 0x50
 8006c88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b50      	cmp	r3, #80	; 0x50
 8006c8e:	d00a      	beq.n	8006ca6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	61bb      	str	r3, [r7, #24]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ca6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00d      	beq.n	8006cce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f805 	bl	8006cd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3730      	adds	r7, #48	; 0x30
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	e002      	b.n	8006cfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d06:	2101      	movs	r1, #1
 8006d08:	69b8      	ldr	r0, [r7, #24]
 8006d0a:	f7ff ff05 	bl	8006b18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	78fa      	ldrb	r2, [r7, #3]
 8006d12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08e      	sub	sp, #56	; 0x38
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <xQueueGenericSend+0x32>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d103      	bne.n	8006d60 <xQueueGenericSend+0x40>
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <xQueueGenericSend+0x44>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <xQueueGenericSend+0x46>
 8006d64:	2300      	movs	r3, #0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <xQueueGenericSend+0x60>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d103      	bne.n	8006d8e <xQueueGenericSend+0x6e>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <xQueueGenericSend+0x72>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueGenericSend+0x74>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <xQueueGenericSend+0x8e>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	623b      	str	r3, [r7, #32]
}
 8006daa:	bf00      	nop
 8006dac:	e7fe      	b.n	8006dac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dae:	f001 f9bd 	bl	800812c <xTaskGetSchedulerState>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <xQueueGenericSend+0x9e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <xQueueGenericSend+0xa2>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <xQueueGenericSend+0xa4>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <xQueueGenericSend+0xbe>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	61fb      	str	r3, [r7, #28]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dde:	f7ff fd79 	bl	80068d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d302      	bcc.n	8006df4 <xQueueGenericSend+0xd4>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d129      	bne.n	8006e48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dfa:	f000 fa0b 	bl	8007214 <prvCopyDataToQueue>
 8006dfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	3324      	adds	r3, #36	; 0x24
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 ffcf 	bl	8007db0 <xTaskRemoveFromEventList>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d013      	beq.n	8006e40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e18:	4b3f      	ldr	r3, [pc, #252]	; (8006f18 <xQueueGenericSend+0x1f8>)
 8006e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	e00a      	b.n	8006e40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d007      	beq.n	8006e40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e30:	4b39      	ldr	r3, [pc, #228]	; (8006f18 <xQueueGenericSend+0x1f8>)
 8006e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e40:	f7ff fd78 	bl	8006934 <vPortExitCritical>
				return pdPASS;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e063      	b.n	8006f10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e4e:	f7ff fd71 	bl	8006934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e05c      	b.n	8006f10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e5c:	f107 0314 	add.w	r3, r7, #20
 8006e60:	4618      	mov	r0, r3
 8006e62:	f001 f809 	bl	8007e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e66:	2301      	movs	r3, #1
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e6a:	f7ff fd63 	bl	8006934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e6e:	f000 fd7b 	bl	8007968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e72:	f7ff fd2f 	bl	80068d4 <vPortEnterCritical>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e7c:	b25b      	sxtb	r3, r3
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d103      	bne.n	8006e8c <xQueueGenericSend+0x16c>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e92:	b25b      	sxtb	r3, r3
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e98:	d103      	bne.n	8006ea2 <xQueueGenericSend+0x182>
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea2:	f7ff fd47 	bl	8006934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ea6:	1d3a      	adds	r2, r7, #4
 8006ea8:	f107 0314 	add.w	r3, r7, #20
 8006eac:	4611      	mov	r1, r2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fff8 	bl	8007ea4 <xTaskCheckForTimeOut>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d124      	bne.n	8006f04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ebc:	f000 faa2 	bl	8007404 <prvIsQueueFull>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d018      	beq.n	8006ef8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	3310      	adds	r3, #16
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 ff1e 	bl	8007d10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ed6:	f000 fa2d 	bl	8007334 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006eda:	f000 fd53 	bl	8007984 <xTaskResumeAll>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f47f af7c 	bne.w	8006dde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <xQueueGenericSend+0x1f8>)
 8006ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	e772      	b.n	8006dde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006efa:	f000 fa1b 	bl	8007334 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006efe:	f000 fd41 	bl	8007984 <xTaskResumeAll>
 8006f02:	e76c      	b.n	8006dde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f06:	f000 fa15 	bl	8007334 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f0a:	f000 fd3b 	bl	8007984 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3738      	adds	r7, #56	; 0x38
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b090      	sub	sp, #64	; 0x40
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d103      	bne.n	8006f58 <xQueueGenericSendFromISR+0x3c>
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <xQueueGenericSendFromISR+0x40>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e000      	b.n	8006f5e <xQueueGenericSendFromISR+0x42>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d103      	bne.n	8006f86 <xQueueGenericSendFromISR+0x6a>
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <xQueueGenericSendFromISR+0x6e>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <xQueueGenericSendFromISR+0x70>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	623b      	str	r3, [r7, #32]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fa6:	f7ff fd77 	bl	8006a98 <vPortValidateInterruptPriority>
	__asm volatile
 8006faa:	f3ef 8211 	mrs	r2, BASEPRI
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	61fa      	str	r2, [r7, #28]
 8006fc0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <xQueueGenericSendFromISR+0xbc>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d12f      	bne.n	8007038 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fee:	f000 f911 	bl	8007214 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ff2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffa:	d112      	bne.n	8007022 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	2b00      	cmp	r3, #0
 8007002:	d016      	beq.n	8007032 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	3324      	adds	r3, #36	; 0x24
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fed1 	bl	8007db0 <xTaskRemoveFromEventList>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00e      	beq.n	8007032 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	e007      	b.n	8007032 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007026:	3301      	adds	r3, #1
 8007028:	b2db      	uxtb	r3, r3
 800702a:	b25a      	sxtb	r2, r3
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007032:	2301      	movs	r3, #1
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007036:	e001      	b.n	800703c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007038:	2300      	movs	r3, #0
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800703c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f383 8811 	msr	BASEPRI, r3
}
 8007046:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800704a:	4618      	mov	r0, r3
 800704c:	3740      	adds	r7, #64	; 0x40
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08c      	sub	sp, #48	; 0x30
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007060:	2300      	movs	r3, #0
 8007062:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <xQueueReceive+0x30>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	623b      	str	r3, [r7, #32]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d103      	bne.n	8007092 <xQueueReceive+0x3e>
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <xQueueReceive+0x42>
 8007092:	2301      	movs	r3, #1
 8007094:	e000      	b.n	8007098 <xQueueReceive+0x44>
 8007096:	2300      	movs	r3, #0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <xQueueReceive+0x5e>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	61fb      	str	r3, [r7, #28]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070b2:	f001 f83b 	bl	800812c <xTaskGetSchedulerState>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <xQueueReceive+0x6e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <xQueueReceive+0x72>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <xQueueReceive+0x74>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueReceive+0x8e>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	61bb      	str	r3, [r7, #24]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070e2:	f7ff fbf7 	bl	80068d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d01f      	beq.n	8007132 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f6:	f000 f8f7 	bl	80072e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	1e5a      	subs	r2, r3, #1
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00f      	beq.n	800712a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	3310      	adds	r3, #16
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fe4e 	bl	8007db0 <xTaskRemoveFromEventList>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d007      	beq.n	800712a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800711a:	4b3d      	ldr	r3, [pc, #244]	; (8007210 <xQueueReceive+0x1bc>)
 800711c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800712a:	f7ff fc03 	bl	8006934 <vPortExitCritical>
				return pdPASS;
 800712e:	2301      	movs	r3, #1
 8007130:	e069      	b.n	8007206 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d103      	bne.n	8007140 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007138:	f7ff fbfc 	bl	8006934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800713c:	2300      	movs	r3, #0
 800713e:	e062      	b.n	8007206 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007146:	f107 0310 	add.w	r3, r7, #16
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fe94 	bl	8007e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007150:	2301      	movs	r3, #1
 8007152:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007154:	f7ff fbee 	bl	8006934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007158:	f000 fc06 	bl	8007968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800715c:	f7ff fbba 	bl	80068d4 <vPortEnterCritical>
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007166:	b25b      	sxtb	r3, r3
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d103      	bne.n	8007176 <xQueueReceive+0x122>
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800717c:	b25b      	sxtb	r3, r3
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d103      	bne.n	800718c <xQueueReceive+0x138>
 8007184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800718c:	f7ff fbd2 	bl	8006934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007190:	1d3a      	adds	r2, r7, #4
 8007192:	f107 0310 	add.w	r3, r7, #16
 8007196:	4611      	mov	r1, r2
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fe83 	bl	8007ea4 <xTaskCheckForTimeOut>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d123      	bne.n	80071ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a6:	f000 f917 	bl	80073d8 <prvIsQueueEmpty>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d017      	beq.n	80071e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	3324      	adds	r3, #36	; 0x24
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	4611      	mov	r1, r2
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fda9 	bl	8007d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071c0:	f000 f8b8 	bl	8007334 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071c4:	f000 fbde 	bl	8007984 <xTaskResumeAll>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d189      	bne.n	80070e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071ce:	4b10      	ldr	r3, [pc, #64]	; (8007210 <xQueueReceive+0x1bc>)
 80071d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	e780      	b.n	80070e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071e2:	f000 f8a7 	bl	8007334 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071e6:	f000 fbcd 	bl	8007984 <xTaskResumeAll>
 80071ea:	e77a      	b.n	80070e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ee:	f000 f8a1 	bl	8007334 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071f2:	f000 fbc7 	bl	8007984 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f8:	f000 f8ee 	bl	80073d8 <prvIsQueueEmpty>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f43f af6f 	beq.w	80070e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007204:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007206:	4618      	mov	r0, r3
 8007208:	3730      	adds	r7, #48	; 0x30
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	e000ed04 	.word	0xe000ed04

08007214 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007220:	2300      	movs	r3, #0
 8007222:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007228:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10d      	bne.n	800724e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d14d      	bne.n	80072d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 ff92 	bl	8008168 <xTaskPriorityDisinherit>
 8007244:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	609a      	str	r2, [r3, #8]
 800724c:	e043      	b.n	80072d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d119      	bne.n	8007288 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6858      	ldr	r0, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	461a      	mov	r2, r3
 800725e:	68b9      	ldr	r1, [r7, #8]
 8007260:	f001 fbb6 	bl	80089d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726c:	441a      	add	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	429a      	cmp	r2, r3
 800727c:	d32b      	bcc.n	80072d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	e026      	b.n	80072d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	68d8      	ldr	r0, [r3, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007290:	461a      	mov	r2, r3
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	f001 fb9c 	bl	80089d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	425b      	negs	r3, r3
 80072a2:	441a      	add	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d207      	bcs.n	80072c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	425b      	negs	r3, r3
 80072be:	441a      	add	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d105      	bne.n	80072d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072de:	697b      	ldr	r3, [r7, #20]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d018      	beq.n	800732c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	441a      	add	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	429a      	cmp	r2, r3
 8007312:	d303      	bcc.n	800731c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68d9      	ldr	r1, [r3, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	461a      	mov	r2, r3
 8007326:	6838      	ldr	r0, [r7, #0]
 8007328:	f001 fb52 	bl	80089d0 <memcpy>
	}
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800733c:	f7ff faca 	bl	80068d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007346:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007348:	e011      	b.n	800736e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	2b00      	cmp	r3, #0
 8007350:	d012      	beq.n	8007378 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3324      	adds	r3, #36	; 0x24
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fd2a 	bl	8007db0 <xTaskRemoveFromEventList>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007362:	f000 fe01 	bl	8007f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	3b01      	subs	r3, #1
 800736a:	b2db      	uxtb	r3, r3
 800736c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800736e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007372:	2b00      	cmp	r3, #0
 8007374:	dce9      	bgt.n	800734a <prvUnlockQueue+0x16>
 8007376:	e000      	b.n	800737a <prvUnlockQueue+0x46>
					break;
 8007378:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	22ff      	movs	r2, #255	; 0xff
 800737e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007382:	f7ff fad7 	bl	8006934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007386:	f7ff faa5 	bl	80068d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007390:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007392:	e011      	b.n	80073b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d012      	beq.n	80073c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3310      	adds	r3, #16
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 fd05 	bl	8007db0 <xTaskRemoveFromEventList>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073ac:	f000 fddc 	bl	8007f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	dce9      	bgt.n	8007394 <prvUnlockQueue+0x60>
 80073c0:	e000      	b.n	80073c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	22ff      	movs	r2, #255	; 0xff
 80073c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073cc:	f7ff fab2 	bl	8006934 <vPortExitCritical>
}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073e0:	f7ff fa78 	bl	80068d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073ec:	2301      	movs	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e001      	b.n	80073f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073f6:	f7ff fa9d 	bl	8006934 <vPortExitCritical>

	return xReturn;
 80073fa:	68fb      	ldr	r3, [r7, #12]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800740c:	f7ff fa62 	bl	80068d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007418:	429a      	cmp	r2, r3
 800741a:	d102      	bne.n	8007422 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800741c:	2301      	movs	r3, #1
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	e001      	b.n	8007426 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007426:	f7ff fa85 	bl	8006934 <vPortExitCritical>

	return xReturn;
 800742a:	68fb      	ldr	r3, [r7, #12]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e014      	b.n	800746e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007444:	4a0f      	ldr	r2, [pc, #60]	; (8007484 <vQueueAddToRegistry+0x50>)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10b      	bne.n	8007468 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007450:	490c      	ldr	r1, [pc, #48]	; (8007484 <vQueueAddToRegistry+0x50>)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800745a:	4a0a      	ldr	r2, [pc, #40]	; (8007484 <vQueueAddToRegistry+0x50>)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	4413      	add	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007466:	e006      	b.n	8007476 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b07      	cmp	r3, #7
 8007472:	d9e7      	bls.n	8007444 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20001b3c 	.word	0x20001b3c

08007488 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007498:	f7ff fa1c 	bl	80068d4 <vPortEnterCritical>
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a2:	b25b      	sxtb	r3, r3
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d103      	bne.n	80074b2 <vQueueWaitForMessageRestricted+0x2a>
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074b8:	b25b      	sxtb	r3, r3
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074be:	d103      	bne.n	80074c8 <vQueueWaitForMessageRestricted+0x40>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074c8:	f7ff fa34 	bl	8006934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	3324      	adds	r3, #36	; 0x24
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fc3b 	bl	8007d58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074e2:	6978      	ldr	r0, [r7, #20]
 80074e4:	f7ff ff26 	bl	8007334 <prvUnlockQueue>
	}
 80074e8:	bf00      	nop
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08e      	sub	sp, #56	; 0x38
 80074f4:	af04      	add	r7, sp, #16
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	623b      	str	r3, [r7, #32]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <xTaskCreateStatic+0x46>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	61fb      	str	r3, [r7, #28]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007536:	235c      	movs	r3, #92	; 0x5c
 8007538:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b5c      	cmp	r3, #92	; 0x5c
 800753e:	d00a      	beq.n	8007556 <xTaskCreateStatic+0x66>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	61bb      	str	r3, [r7, #24]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007556:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01e      	beq.n	800759c <xTaskCreateStatic+0xac>
 800755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01b      	beq.n	800759c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800756c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	2202      	movs	r2, #2
 8007572:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007576:	2300      	movs	r3, #0
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	9302      	str	r3, [sp, #8]
 800757e:	f107 0314 	add.w	r3, r7, #20
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f850 	bl	8007634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007596:	f000 f8dd 	bl	8007754 <prvAddNewTaskToReadyList>
 800759a:	e001      	b.n	80075a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075a0:	697b      	ldr	r3, [r7, #20]
	}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3728      	adds	r7, #40	; 0x28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b08c      	sub	sp, #48	; 0x30
 80075ae:	af04      	add	r7, sp, #16
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4613      	mov	r3, r2
 80075b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fdba 	bl	8006138 <pvPortMalloc>
 80075c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00e      	beq.n	80075ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075cc:	205c      	movs	r0, #92	; 0x5c
 80075ce:	f7fe fdb3 	bl	8006138 <pvPortMalloc>
 80075d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
 80075e0:	e005      	b.n	80075ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075e2:	6978      	ldr	r0, [r7, #20]
 80075e4:	f7fe fe74 	bl	80062d0 <vPortFree>
 80075e8:	e001      	b.n	80075ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d017      	beq.n	8007624 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	2300      	movs	r3, #0
 8007600:	9303      	str	r3, [sp, #12]
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	9302      	str	r3, [sp, #8]
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f80e 	bl	8007634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007618:	69f8      	ldr	r0, [r7, #28]
 800761a:	f000 f89b 	bl	8007754 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800761e:	2301      	movs	r3, #1
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	e002      	b.n	800762a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007624:	f04f 33ff 	mov.w	r3, #4294967295
 8007628:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800762a:	69bb      	ldr	r3, [r7, #24]
	}
 800762c:	4618      	mov	r0, r3
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	461a      	mov	r2, r3
 800764c:	21a5      	movs	r1, #165	; 0xa5
 800764e:	f001 f9cd 	bl	80089ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800765c:	3b01      	subs	r3, #1
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	f023 0307 	bic.w	r3, r3, #7
 800766a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	617b      	str	r3, [r7, #20]
}
 8007688:	bf00      	nop
 800768a:	e7fe      	b.n	800768a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01f      	beq.n	80076d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007692:	2300      	movs	r3, #0
 8007694:	61fb      	str	r3, [r7, #28]
 8007696:	e012      	b.n	80076be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	4413      	add	r3, r2
 800769e:	7819      	ldrb	r1, [r3, #0]
 80076a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	3334      	adds	r3, #52	; 0x34
 80076a8:	460a      	mov	r2, r1
 80076aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	4413      	add	r3, r2
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d006      	beq.n	80076c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	2b0f      	cmp	r3, #15
 80076c2:	d9e9      	bls.n	8007698 <prvInitialiseNewTask+0x64>
 80076c4:	e000      	b.n	80076c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80076c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076d0:	e003      	b.n	80076da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	2b37      	cmp	r3, #55	; 0x37
 80076de:	d901      	bls.n	80076e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076e0:	2337      	movs	r3, #55	; 0x37
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	2200      	movs	r2, #0
 80076f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	3304      	adds	r3, #4
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe ff26 	bl	800654c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	3318      	adds	r3, #24
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe ff21 	bl	800654c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800770e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800771e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	2200      	movs	r2, #0
 8007724:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	68f9      	ldr	r1, [r7, #12]
 8007732:	69b8      	ldr	r0, [r7, #24]
 8007734:	f7fe ff9e 	bl	8006674 <pxPortInitialiseStack>
 8007738:	4602      	mov	r2, r0
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800774a:	bf00      	nop
 800774c:	3720      	adds	r7, #32
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800775c:	f7ff f8ba 	bl	80068d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007760:	4b2d      	ldr	r3, [pc, #180]	; (8007818 <prvAddNewTaskToReadyList+0xc4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	4a2c      	ldr	r2, [pc, #176]	; (8007818 <prvAddNewTaskToReadyList+0xc4>)
 8007768:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800776a:	4b2c      	ldr	r3, [pc, #176]	; (800781c <prvAddNewTaskToReadyList+0xc8>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007772:	4a2a      	ldr	r2, [pc, #168]	; (800781c <prvAddNewTaskToReadyList+0xc8>)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007778:	4b27      	ldr	r3, [pc, #156]	; (8007818 <prvAddNewTaskToReadyList+0xc4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d110      	bne.n	80077a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007780:	f000 fc16 	bl	8007fb0 <prvInitialiseTaskLists>
 8007784:	e00d      	b.n	80077a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007786:	4b26      	ldr	r3, [pc, #152]	; (8007820 <prvAddNewTaskToReadyList+0xcc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800778e:	4b23      	ldr	r3, [pc, #140]	; (800781c <prvAddNewTaskToReadyList+0xc8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	429a      	cmp	r2, r3
 800779a:	d802      	bhi.n	80077a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800779c:	4a1f      	ldr	r2, [pc, #124]	; (800781c <prvAddNewTaskToReadyList+0xc8>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077a2:	4b20      	ldr	r3, [pc, #128]	; (8007824 <prvAddNewTaskToReadyList+0xd0>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3301      	adds	r3, #1
 80077a8:	4a1e      	ldr	r2, [pc, #120]	; (8007824 <prvAddNewTaskToReadyList+0xd0>)
 80077aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077ac:	4b1d      	ldr	r3, [pc, #116]	; (8007824 <prvAddNewTaskToReadyList+0xd0>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <prvAddNewTaskToReadyList+0xd4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d903      	bls.n	80077c8 <prvAddNewTaskToReadyList+0x74>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	4a18      	ldr	r2, [pc, #96]	; (8007828 <prvAddNewTaskToReadyList+0xd4>)
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4a15      	ldr	r2, [pc, #84]	; (800782c <prvAddNewTaskToReadyList+0xd8>)
 80077d6:	441a      	add	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4610      	mov	r0, r2
 80077e0:	f7fe fec1 	bl	8006566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077e4:	f7ff f8a6 	bl	8006934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077e8:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <prvAddNewTaskToReadyList+0xcc>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00e      	beq.n	800780e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077f0:	4b0a      	ldr	r3, [pc, #40]	; (800781c <prvAddNewTaskToReadyList+0xc8>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d207      	bcs.n	800780e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077fe:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <prvAddNewTaskToReadyList+0xdc>)
 8007800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20001994 	.word	0x20001994
 800781c:	200014c0 	.word	0x200014c0
 8007820:	200019a0 	.word	0x200019a0
 8007824:	200019b0 	.word	0x200019b0
 8007828:	2000199c 	.word	0x2000199c
 800782c:	200014c4 	.word	0x200014c4
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d017      	beq.n	8007876 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007846:	4b13      	ldr	r3, [pc, #76]	; (8007894 <vTaskDelay+0x60>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <vTaskDelay+0x30>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	60bb      	str	r3, [r7, #8]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007864:	f000 f880 	bl	8007968 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007868:	2100      	movs	r1, #0
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fcea 	bl	8008244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007870:	f000 f888 	bl	8007984 <xTaskResumeAll>
 8007874:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d107      	bne.n	800788c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800787c:	4b06      	ldr	r3, [pc, #24]	; (8007898 <vTaskDelay+0x64>)
 800787e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800788c:	bf00      	nop
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	200019bc 	.word	0x200019bc
 8007898:	e000ed04 	.word	0xe000ed04

0800789c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08a      	sub	sp, #40	; 0x28
 80078a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078aa:	463a      	mov	r2, r7
 80078ac:	1d39      	adds	r1, r7, #4
 80078ae:	f107 0308 	add.w	r3, r7, #8
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fc0c 	bl	80060d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	9202      	str	r2, [sp, #8]
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	2300      	movs	r3, #0
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	2300      	movs	r3, #0
 80078c8:	460a      	mov	r2, r1
 80078ca:	4921      	ldr	r1, [pc, #132]	; (8007950 <vTaskStartScheduler+0xb4>)
 80078cc:	4821      	ldr	r0, [pc, #132]	; (8007954 <vTaskStartScheduler+0xb8>)
 80078ce:	f7ff fe0f 	bl	80074f0 <xTaskCreateStatic>
 80078d2:	4603      	mov	r3, r0
 80078d4:	4a20      	ldr	r2, [pc, #128]	; (8007958 <vTaskStartScheduler+0xbc>)
 80078d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078d8:	4b1f      	ldr	r3, [pc, #124]	; (8007958 <vTaskStartScheduler+0xbc>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078e0:	2301      	movs	r3, #1
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	e001      	b.n	80078ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d102      	bne.n	80078f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078f0:	f000 fcfc 	bl	80082ec <xTimerCreateTimerTask>
 80078f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d116      	bne.n	800792a <vTaskStartScheduler+0x8e>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	613b      	str	r3, [r7, #16]
}
 800790e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007910:	4b12      	ldr	r3, [pc, #72]	; (800795c <vTaskStartScheduler+0xc0>)
 8007912:	f04f 32ff 	mov.w	r2, #4294967295
 8007916:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007918:	4b11      	ldr	r3, [pc, #68]	; (8007960 <vTaskStartScheduler+0xc4>)
 800791a:	2201      	movs	r2, #1
 800791c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800791e:	4b11      	ldr	r3, [pc, #68]	; (8007964 <vTaskStartScheduler+0xc8>)
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007924:	f7fe ff34 	bl	8006790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007928:	e00e      	b.n	8007948 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007930:	d10a      	bne.n	8007948 <vTaskStartScheduler+0xac>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	60fb      	str	r3, [r7, #12]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <vTaskStartScheduler+0xaa>
}
 8007948:	bf00      	nop
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	08008a28 	.word	0x08008a28
 8007954:	08007f81 	.word	0x08007f81
 8007958:	200019b8 	.word	0x200019b8
 800795c:	200019b4 	.word	0x200019b4
 8007960:	200019a0 	.word	0x200019a0
 8007964:	20001998 	.word	0x20001998

08007968 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800796c:	4b04      	ldr	r3, [pc, #16]	; (8007980 <vTaskSuspendAll+0x18>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3301      	adds	r3, #1
 8007972:	4a03      	ldr	r2, [pc, #12]	; (8007980 <vTaskSuspendAll+0x18>)
 8007974:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007976:	bf00      	nop
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	200019bc 	.word	0x200019bc

08007984 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800798e:	2300      	movs	r3, #0
 8007990:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007992:	4b42      	ldr	r3, [pc, #264]	; (8007a9c <xTaskResumeAll+0x118>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	603b      	str	r3, [r7, #0]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079b0:	f7fe ff90 	bl	80068d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079b4:	4b39      	ldr	r3, [pc, #228]	; (8007a9c <xTaskResumeAll+0x118>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3b01      	subs	r3, #1
 80079ba:	4a38      	ldr	r2, [pc, #224]	; (8007a9c <xTaskResumeAll+0x118>)
 80079bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079be:	4b37      	ldr	r3, [pc, #220]	; (8007a9c <xTaskResumeAll+0x118>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d162      	bne.n	8007a8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079c6:	4b36      	ldr	r3, [pc, #216]	; (8007aa0 <xTaskResumeAll+0x11c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d05e      	beq.n	8007a8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079ce:	e02f      	b.n	8007a30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d0:	4b34      	ldr	r3, [pc, #208]	; (8007aa4 <xTaskResumeAll+0x120>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3318      	adds	r3, #24
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe fe1f 	bl	8006620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3304      	adds	r3, #4
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fe1a 	bl	8006620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	4b2d      	ldr	r3, [pc, #180]	; (8007aa8 <xTaskResumeAll+0x124>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d903      	bls.n	8007a00 <xTaskResumeAll+0x7c>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fc:	4a2a      	ldr	r2, [pc, #168]	; (8007aa8 <xTaskResumeAll+0x124>)
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4a27      	ldr	r2, [pc, #156]	; (8007aac <xTaskResumeAll+0x128>)
 8007a0e:	441a      	add	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3304      	adds	r3, #4
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f7fe fda5 	bl	8006566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a20:	4b23      	ldr	r3, [pc, #140]	; (8007ab0 <xTaskResumeAll+0x12c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d302      	bcc.n	8007a30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a2a:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <xTaskResumeAll+0x130>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a30:	4b1c      	ldr	r3, [pc, #112]	; (8007aa4 <xTaskResumeAll+0x120>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1cb      	bne.n	80079d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a3e:	f000 fb55 	bl	80080ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a42:	4b1d      	ldr	r3, [pc, #116]	; (8007ab8 <xTaskResumeAll+0x134>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d010      	beq.n	8007a70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a4e:	f000 f847 	bl	8007ae0 <xTaskIncrementTick>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a58:	4b16      	ldr	r3, [pc, #88]	; (8007ab4 <xTaskResumeAll+0x130>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1f1      	bne.n	8007a4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a6a:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <xTaskResumeAll+0x134>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a70:	4b10      	ldr	r3, [pc, #64]	; (8007ab4 <xTaskResumeAll+0x130>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d009      	beq.n	8007a8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a7c:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <xTaskResumeAll+0x138>)
 8007a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a8c:	f7fe ff52 	bl	8006934 <vPortExitCritical>

	return xAlreadyYielded;
 8007a90:	68bb      	ldr	r3, [r7, #8]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200019bc 	.word	0x200019bc
 8007aa0:	20001994 	.word	0x20001994
 8007aa4:	20001954 	.word	0x20001954
 8007aa8:	2000199c 	.word	0x2000199c
 8007aac:	200014c4 	.word	0x200014c4
 8007ab0:	200014c0 	.word	0x200014c0
 8007ab4:	200019a8 	.word	0x200019a8
 8007ab8:	200019a4 	.word	0x200019a4
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <xTaskGetTickCount+0x1c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007acc:	687b      	ldr	r3, [r7, #4]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20001998 	.word	0x20001998

08007ae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aea:	4b4f      	ldr	r3, [pc, #316]	; (8007c28 <xTaskIncrementTick+0x148>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f040 808f 	bne.w	8007c12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007af4:	4b4d      	ldr	r3, [pc, #308]	; (8007c2c <xTaskIncrementTick+0x14c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3301      	adds	r3, #1
 8007afa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007afc:	4a4b      	ldr	r2, [pc, #300]	; (8007c2c <xTaskIncrementTick+0x14c>)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d120      	bne.n	8007b4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b08:	4b49      	ldr	r3, [pc, #292]	; (8007c30 <xTaskIncrementTick+0x150>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	603b      	str	r3, [r7, #0]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <xTaskIncrementTick+0x46>
 8007b28:	4b41      	ldr	r3, [pc, #260]	; (8007c30 <xTaskIncrementTick+0x150>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	4b41      	ldr	r3, [pc, #260]	; (8007c34 <xTaskIncrementTick+0x154>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a3f      	ldr	r2, [pc, #252]	; (8007c30 <xTaskIncrementTick+0x150>)
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	4a3f      	ldr	r2, [pc, #252]	; (8007c34 <xTaskIncrementTick+0x154>)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	4b3e      	ldr	r3, [pc, #248]	; (8007c38 <xTaskIncrementTick+0x158>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	4a3d      	ldr	r2, [pc, #244]	; (8007c38 <xTaskIncrementTick+0x158>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	f000 fad1 	bl	80080ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b4a:	4b3c      	ldr	r3, [pc, #240]	; (8007c3c <xTaskIncrementTick+0x15c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d349      	bcc.n	8007be8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b54:	4b36      	ldr	r3, [pc, #216]	; (8007c30 <xTaskIncrementTick+0x150>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d104      	bne.n	8007b68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b5e:	4b37      	ldr	r3, [pc, #220]	; (8007c3c <xTaskIncrementTick+0x15c>)
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	601a      	str	r2, [r3, #0]
					break;
 8007b66:	e03f      	b.n	8007be8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b68:	4b31      	ldr	r3, [pc, #196]	; (8007c30 <xTaskIncrementTick+0x150>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d203      	bcs.n	8007b88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b80:	4a2e      	ldr	r2, [pc, #184]	; (8007c3c <xTaskIncrementTick+0x15c>)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b86:	e02f      	b.n	8007be8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fd47 	bl	8006620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d004      	beq.n	8007ba4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	3318      	adds	r3, #24
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fd3e 	bl	8006620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4b25      	ldr	r3, [pc, #148]	; (8007c40 <xTaskIncrementTick+0x160>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d903      	bls.n	8007bb8 <xTaskIncrementTick+0xd8>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	4a22      	ldr	r2, [pc, #136]	; (8007c40 <xTaskIncrementTick+0x160>)
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4a1f      	ldr	r2, [pc, #124]	; (8007c44 <xTaskIncrementTick+0x164>)
 8007bc6:	441a      	add	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f7fe fcc9 	bl	8006566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd8:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <xTaskIncrementTick+0x168>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d3b8      	bcc.n	8007b54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007be2:	2301      	movs	r3, #1
 8007be4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007be6:	e7b5      	b.n	8007b54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007be8:	4b17      	ldr	r3, [pc, #92]	; (8007c48 <xTaskIncrementTick+0x168>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bee:	4915      	ldr	r1, [pc, #84]	; (8007c44 <xTaskIncrementTick+0x164>)
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d901      	bls.n	8007c04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c04:	4b11      	ldr	r3, [pc, #68]	; (8007c4c <xTaskIncrementTick+0x16c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d007      	beq.n	8007c1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	e004      	b.n	8007c1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c12:	4b0f      	ldr	r3, [pc, #60]	; (8007c50 <xTaskIncrementTick+0x170>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3301      	adds	r3, #1
 8007c18:	4a0d      	ldr	r2, [pc, #52]	; (8007c50 <xTaskIncrementTick+0x170>)
 8007c1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c1c:	697b      	ldr	r3, [r7, #20]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	200019bc 	.word	0x200019bc
 8007c2c:	20001998 	.word	0x20001998
 8007c30:	2000194c 	.word	0x2000194c
 8007c34:	20001950 	.word	0x20001950
 8007c38:	200019ac 	.word	0x200019ac
 8007c3c:	200019b4 	.word	0x200019b4
 8007c40:	2000199c 	.word	0x2000199c
 8007c44:	200014c4 	.word	0x200014c4
 8007c48:	200014c0 	.word	0x200014c0
 8007c4c:	200019a8 	.word	0x200019a8
 8007c50:	200019a4 	.word	0x200019a4

08007c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c5a:	4b28      	ldr	r3, [pc, #160]	; (8007cfc <vTaskSwitchContext+0xa8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c62:	4b27      	ldr	r3, [pc, #156]	; (8007d00 <vTaskSwitchContext+0xac>)
 8007c64:	2201      	movs	r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c68:	e041      	b.n	8007cee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007c6a:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <vTaskSwitchContext+0xac>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c70:	4b24      	ldr	r3, [pc, #144]	; (8007d04 <vTaskSwitchContext+0xb0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	e010      	b.n	8007c9a <vTaskSwitchContext+0x46>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	607b      	str	r3, [r7, #4]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <vTaskSwitchContext+0x3e>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	491b      	ldr	r1, [pc, #108]	; (8007d08 <vTaskSwitchContext+0xb4>)
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0e4      	beq.n	8007c78 <vTaskSwitchContext+0x24>
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4a13      	ldr	r2, [pc, #76]	; (8007d08 <vTaskSwitchContext+0xb4>)
 8007cba:	4413      	add	r3, r2
 8007cbc:	60bb      	str	r3, [r7, #8]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	605a      	str	r2, [r3, #4]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	3308      	adds	r3, #8
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d104      	bne.n	8007cde <vTaskSwitchContext+0x8a>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	605a      	str	r2, [r3, #4]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <vTaskSwitchContext+0xb8>)
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	4a06      	ldr	r2, [pc, #24]	; (8007d04 <vTaskSwitchContext+0xb0>)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6013      	str	r3, [r2, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	200019bc 	.word	0x200019bc
 8007d00:	200019a8 	.word	0x200019a8
 8007d04:	2000199c 	.word	0x2000199c
 8007d08:	200014c4 	.word	0x200014c4
 8007d0c:	200014c0 	.word	0x200014c0

08007d10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	60fb      	str	r3, [r7, #12]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d36:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <vTaskPlaceOnEventList+0x44>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3318      	adds	r3, #24
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fe fc35 	bl	80065ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d44:	2101      	movs	r1, #1
 8007d46:	6838      	ldr	r0, [r7, #0]
 8007d48:	f000 fa7c 	bl	8008244 <prvAddCurrentTaskToDelayedList>
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	200014c0 	.word	0x200014c0

08007d58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	617b      	str	r3, [r7, #20]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <vTaskPlaceOnEventListRestricted+0x54>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3318      	adds	r3, #24
 8007d86:	4619      	mov	r1, r3
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7fe fbec 	bl	8006566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295
 8007d98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	68b8      	ldr	r0, [r7, #8]
 8007d9e:	f000 fa51 	bl	8008244 <prvAddCurrentTaskToDelayedList>
	}
 8007da2:	bf00      	nop
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	200014c0 	.word	0x200014c0

08007db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10a      	bne.n	8007ddc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	60fb      	str	r3, [r7, #12]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	3318      	adds	r3, #24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fc1d 	bl	8006620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de6:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <xTaskRemoveFromEventList+0xb0>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d11d      	bne.n	8007e2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe fc14 	bl	8006620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	4b19      	ldr	r3, [pc, #100]	; (8007e64 <xTaskRemoveFromEventList+0xb4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d903      	bls.n	8007e0c <xTaskRemoveFromEventList+0x5c>
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	4a16      	ldr	r2, [pc, #88]	; (8007e64 <xTaskRemoveFromEventList+0xb4>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4a13      	ldr	r2, [pc, #76]	; (8007e68 <xTaskRemoveFromEventList+0xb8>)
 8007e1a:	441a      	add	r2, r3
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe fb9f 	bl	8006566 <vListInsertEnd>
 8007e28:	e005      	b.n	8007e36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	3318      	adds	r3, #24
 8007e2e:	4619      	mov	r1, r3
 8007e30:	480e      	ldr	r0, [pc, #56]	; (8007e6c <xTaskRemoveFromEventList+0xbc>)
 8007e32:	f7fe fb98 	bl	8006566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	; (8007e70 <xTaskRemoveFromEventList+0xc0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d905      	bls.n	8007e50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e44:	2301      	movs	r3, #1
 8007e46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <xTaskRemoveFromEventList+0xc4>)
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	e001      	b.n	8007e54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e54:	697b      	ldr	r3, [r7, #20]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200019bc 	.word	0x200019bc
 8007e64:	2000199c 	.word	0x2000199c
 8007e68:	200014c4 	.word	0x200014c4
 8007e6c:	20001954 	.word	0x20001954
 8007e70:	200014c0 	.word	0x200014c0
 8007e74:	200019a8 	.word	0x200019a8

08007e78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <vTaskInternalSetTimeOutState+0x24>)
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e88:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <vTaskInternalSetTimeOutState+0x28>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	605a      	str	r2, [r3, #4]
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	200019ac 	.word	0x200019ac
 8007ea0:	20001998 	.word	0x20001998

08007ea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10a      	bne.n	8007eca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	613b      	str	r3, [r7, #16]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	60fb      	str	r3, [r7, #12]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ee6:	f7fe fcf5 	bl	80068d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007eea:	4b1d      	ldr	r3, [pc, #116]	; (8007f60 <xTaskCheckForTimeOut+0xbc>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f02:	d102      	bne.n	8007f0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
 8007f08:	e023      	b.n	8007f52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	4b15      	ldr	r3, [pc, #84]	; (8007f64 <xTaskCheckForTimeOut+0xc0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d007      	beq.n	8007f26 <xTaskCheckForTimeOut+0x82>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d302      	bcc.n	8007f26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f20:	2301      	movs	r3, #1
 8007f22:	61fb      	str	r3, [r7, #28]
 8007f24:	e015      	b.n	8007f52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d20b      	bcs.n	8007f48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff ff9b 	bl	8007e78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	e004      	b.n	8007f52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f52:	f7fe fcef 	bl	8006934 <vPortExitCritical>

	return xReturn;
 8007f56:	69fb      	ldr	r3, [r7, #28]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3720      	adds	r7, #32
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20001998 	.word	0x20001998
 8007f64:	200019ac 	.word	0x200019ac

08007f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f6c:	4b03      	ldr	r3, [pc, #12]	; (8007f7c <vTaskMissedYield+0x14>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
}
 8007f72:	bf00      	nop
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	200019a8 	.word	0x200019a8

08007f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f88:	f000 f852 	bl	8008030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f8c:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <prvIdleTask+0x28>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d9f9      	bls.n	8007f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <prvIdleTask+0x2c>)
 8007f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fa4:	e7f0      	b.n	8007f88 <prvIdleTask+0x8>
 8007fa6:	bf00      	nop
 8007fa8:	200014c4 	.word	0x200014c4
 8007fac:	e000ed04 	.word	0xe000ed04

08007fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	e00c      	b.n	8007fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4a12      	ldr	r2, [pc, #72]	; (8008010 <prvInitialiseTaskLists+0x60>)
 8007fc8:	4413      	add	r3, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fa9e 	bl	800650c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	607b      	str	r3, [r7, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b37      	cmp	r3, #55	; 0x37
 8007fda:	d9ef      	bls.n	8007fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fdc:	480d      	ldr	r0, [pc, #52]	; (8008014 <prvInitialiseTaskLists+0x64>)
 8007fde:	f7fe fa95 	bl	800650c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fe2:	480d      	ldr	r0, [pc, #52]	; (8008018 <prvInitialiseTaskLists+0x68>)
 8007fe4:	f7fe fa92 	bl	800650c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fe8:	480c      	ldr	r0, [pc, #48]	; (800801c <prvInitialiseTaskLists+0x6c>)
 8007fea:	f7fe fa8f 	bl	800650c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fee:	480c      	ldr	r0, [pc, #48]	; (8008020 <prvInitialiseTaskLists+0x70>)
 8007ff0:	f7fe fa8c 	bl	800650c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ff4:	480b      	ldr	r0, [pc, #44]	; (8008024 <prvInitialiseTaskLists+0x74>)
 8007ff6:	f7fe fa89 	bl	800650c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ffa:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <prvInitialiseTaskLists+0x78>)
 8007ffc:	4a05      	ldr	r2, [pc, #20]	; (8008014 <prvInitialiseTaskLists+0x64>)
 8007ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008000:	4b0a      	ldr	r3, [pc, #40]	; (800802c <prvInitialiseTaskLists+0x7c>)
 8008002:	4a05      	ldr	r2, [pc, #20]	; (8008018 <prvInitialiseTaskLists+0x68>)
 8008004:	601a      	str	r2, [r3, #0]
}
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	200014c4 	.word	0x200014c4
 8008014:	20001924 	.word	0x20001924
 8008018:	20001938 	.word	0x20001938
 800801c:	20001954 	.word	0x20001954
 8008020:	20001968 	.word	0x20001968
 8008024:	20001980 	.word	0x20001980
 8008028:	2000194c 	.word	0x2000194c
 800802c:	20001950 	.word	0x20001950

08008030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008036:	e019      	b.n	800806c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008038:	f7fe fc4c 	bl	80068d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800803c:	4b10      	ldr	r3, [pc, #64]	; (8008080 <prvCheckTasksWaitingTermination+0x50>)
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3304      	adds	r3, #4
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fae9 	bl	8006620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800804e:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <prvCheckTasksWaitingTermination+0x54>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3b01      	subs	r3, #1
 8008054:	4a0b      	ldr	r2, [pc, #44]	; (8008084 <prvCheckTasksWaitingTermination+0x54>)
 8008056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008058:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <prvCheckTasksWaitingTermination+0x58>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3b01      	subs	r3, #1
 800805e:	4a0a      	ldr	r2, [pc, #40]	; (8008088 <prvCheckTasksWaitingTermination+0x58>)
 8008060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008062:	f7fe fc67 	bl	8006934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f810 	bl	800808c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800806c:	4b06      	ldr	r3, [pc, #24]	; (8008088 <prvCheckTasksWaitingTermination+0x58>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e1      	bne.n	8008038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */

}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20001968 	.word	0x20001968
 8008084:	20001994 	.word	0x20001994
 8008088:	2000197c 	.word	0x2000197c

0800808c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800809a:	2b00      	cmp	r3, #0
 800809c:	d108      	bne.n	80080b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe f914 	bl	80062d0 <vPortFree>
				vPortFree( pxTCB );
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7fe f911 	bl	80062d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080ae:	e018      	b.n	80080e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d103      	bne.n	80080c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fe f908 	bl	80062d0 <vPortFree>
	}
 80080c0:	e00f      	b.n	80080e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d00a      	beq.n	80080e2 <prvDeleteTCB+0x56>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60fb      	str	r3, [r7, #12]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <prvDeleteTCB+0x54>
	}
 80080e2:	bf00      	nop
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080f2:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <prvResetNextTaskUnblockTime+0x38>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080fc:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <prvResetNextTaskUnblockTime+0x3c>)
 80080fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008102:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008104:	e008      	b.n	8008118 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008106:	4b07      	ldr	r3, [pc, #28]	; (8008124 <prvResetNextTaskUnblockTime+0x38>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	4a04      	ldr	r2, [pc, #16]	; (8008128 <prvResetNextTaskUnblockTime+0x3c>)
 8008116:	6013      	str	r3, [r2, #0]
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	2000194c 	.word	0x2000194c
 8008128:	200019b4 	.word	0x200019b4

0800812c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008132:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <xTaskGetSchedulerState+0x34>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800813a:	2301      	movs	r3, #1
 800813c:	607b      	str	r3, [r7, #4]
 800813e:	e008      	b.n	8008152 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008140:	4b08      	ldr	r3, [pc, #32]	; (8008164 <xTaskGetSchedulerState+0x38>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008148:	2302      	movs	r3, #2
 800814a:	607b      	str	r3, [r7, #4]
 800814c:	e001      	b.n	8008152 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800814e:	2300      	movs	r3, #0
 8008150:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008152:	687b      	ldr	r3, [r7, #4]
	}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	200019a0 	.word	0x200019a0
 8008164:	200019bc 	.word	0x200019bc

08008168 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d056      	beq.n	800822c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800817e:	4b2e      	ldr	r3, [pc, #184]	; (8008238 <xTaskPriorityDisinherit+0xd0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	429a      	cmp	r2, r3
 8008186:	d00a      	beq.n	800819e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	60fb      	str	r3, [r7, #12]
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	60bb      	str	r3, [r7, #8]
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c0:	1e5a      	subs	r2, r3, #1
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d02c      	beq.n	800822c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d128      	bne.n	800822c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	3304      	adds	r3, #4
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe fa1e 	bl	8006620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	4b0f      	ldr	r3, [pc, #60]	; (800823c <xTaskPriorityDisinherit+0xd4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d903      	bls.n	800820c <xTaskPriorityDisinherit+0xa4>
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	4a0c      	ldr	r2, [pc, #48]	; (800823c <xTaskPriorityDisinherit+0xd4>)
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <xTaskPriorityDisinherit+0xd8>)
 800821a:	441a      	add	r2, r3
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fe f99f 	bl	8006566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800822c:	697b      	ldr	r3, [r7, #20]
	}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	200014c0 	.word	0x200014c0
 800823c:	2000199c 	.word	0x2000199c
 8008240:	200014c4 	.word	0x200014c4

08008244 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800824e:	4b21      	ldr	r3, [pc, #132]	; (80082d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008254:	4b20      	ldr	r3, [pc, #128]	; (80082d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3304      	adds	r3, #4
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe f9e0 	bl	8006620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008266:	d10a      	bne.n	800827e <prvAddCurrentTaskToDelayedList+0x3a>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d007      	beq.n	800827e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800826e:	4b1a      	ldr	r3, [pc, #104]	; (80082d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4819      	ldr	r0, [pc, #100]	; (80082dc <prvAddCurrentTaskToDelayedList+0x98>)
 8008278:	f7fe f975 	bl	8006566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800827c:	e026      	b.n	80082cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4413      	add	r3, r2
 8008284:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008286:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	429a      	cmp	r2, r3
 8008294:	d209      	bcs.n	80082aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008296:	4b12      	ldr	r3, [pc, #72]	; (80082e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	4b0f      	ldr	r3, [pc, #60]	; (80082d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3304      	adds	r3, #4
 80082a0:	4619      	mov	r1, r3
 80082a2:	4610      	mov	r0, r2
 80082a4:	f7fe f983 	bl	80065ae <vListInsert>
}
 80082a8:	e010      	b.n	80082cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082aa:	4b0e      	ldr	r3, [pc, #56]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3304      	adds	r3, #4
 80082b4:	4619      	mov	r1, r3
 80082b6:	4610      	mov	r0, r2
 80082b8:	f7fe f979 	bl	80065ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082bc:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d202      	bcs.n	80082cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082c6:	4a08      	ldr	r2, [pc, #32]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	6013      	str	r3, [r2, #0]
}
 80082cc:	bf00      	nop
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20001998 	.word	0x20001998
 80082d8:	200014c0 	.word	0x200014c0
 80082dc:	20001980 	.word	0x20001980
 80082e0:	20001950 	.word	0x20001950
 80082e4:	2000194c 	.word	0x2000194c
 80082e8:	200019b4 	.word	0x200019b4

080082ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	; 0x28
 80082f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082f6:	f000 fb07 	bl	8008908 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082fa:	4b1c      	ldr	r3, [pc, #112]	; (800836c <xTimerCreateTimerTask+0x80>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d021      	beq.n	8008346 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800830a:	1d3a      	adds	r2, r7, #4
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	f107 030c 	add.w	r3, r7, #12
 8008314:	4618      	mov	r0, r3
 8008316:	f7fd fef5 	bl	8006104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	9202      	str	r2, [sp, #8]
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	2302      	movs	r3, #2
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	2300      	movs	r3, #0
 800832a:	460a      	mov	r2, r1
 800832c:	4910      	ldr	r1, [pc, #64]	; (8008370 <xTimerCreateTimerTask+0x84>)
 800832e:	4811      	ldr	r0, [pc, #68]	; (8008374 <xTimerCreateTimerTask+0x88>)
 8008330:	f7ff f8de 	bl	80074f0 <xTaskCreateStatic>
 8008334:	4603      	mov	r3, r0
 8008336:	4a10      	ldr	r2, [pc, #64]	; (8008378 <xTimerCreateTimerTask+0x8c>)
 8008338:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800833a:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <xTimerCreateTimerTask+0x8c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008342:	2301      	movs	r3, #1
 8008344:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	613b      	str	r3, [r7, #16]
}
 800835e:	bf00      	nop
 8008360:	e7fe      	b.n	8008360 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008362:	697b      	ldr	r3, [r7, #20]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	200019f0 	.word	0x200019f0
 8008370:	08008a30 	.word	0x08008a30
 8008374:	080084b1 	.word	0x080084b1
 8008378:	200019f4 	.word	0x200019f4

0800837c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08a      	sub	sp, #40	; 0x28
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
 8008388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800838a:	2300      	movs	r3, #0
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	623b      	str	r3, [r7, #32]
}
 80083a6:	bf00      	nop
 80083a8:	e7fe      	b.n	80083a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083aa:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <xTimerGenericCommand+0x98>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d02a      	beq.n	8008408 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b05      	cmp	r3, #5
 80083c2:	dc18      	bgt.n	80083f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083c4:	f7ff feb2 	bl	800812c <xTaskGetSchedulerState>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d109      	bne.n	80083e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083ce:	4b11      	ldr	r3, [pc, #68]	; (8008414 <xTimerGenericCommand+0x98>)
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	f107 0110 	add.w	r1, r7, #16
 80083d6:	2300      	movs	r3, #0
 80083d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083da:	f7fe fca1 	bl	8006d20 <xQueueGenericSend>
 80083de:	6278      	str	r0, [r7, #36]	; 0x24
 80083e0:	e012      	b.n	8008408 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083e2:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <xTimerGenericCommand+0x98>)
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	f107 0110 	add.w	r1, r7, #16
 80083ea:	2300      	movs	r3, #0
 80083ec:	2200      	movs	r2, #0
 80083ee:	f7fe fc97 	bl	8006d20 <xQueueGenericSend>
 80083f2:	6278      	str	r0, [r7, #36]	; 0x24
 80083f4:	e008      	b.n	8008408 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083f6:	4b07      	ldr	r3, [pc, #28]	; (8008414 <xTimerGenericCommand+0x98>)
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	f107 0110 	add.w	r1, r7, #16
 80083fe:	2300      	movs	r3, #0
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	f7fe fd8b 	bl	8006f1c <xQueueGenericSendFromISR>
 8008406:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800840a:	4618      	mov	r0, r3
 800840c:	3728      	adds	r7, #40	; 0x28
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	200019f0 	.word	0x200019f0

08008418 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af02      	add	r7, sp, #8
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008422:	4b22      	ldr	r3, [pc, #136]	; (80084ac <prvProcessExpiredTimer+0x94>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	3304      	adds	r3, #4
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe f8f5 	bl	8006620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d022      	beq.n	800848a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	699a      	ldr	r2, [r3, #24]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	18d1      	adds	r1, r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	6978      	ldr	r0, [r7, #20]
 8008452:	f000 f8d1 	bl	80085f8 <prvInsertTimerInActiveList>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01f      	beq.n	800849c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800845c:	2300      	movs	r3, #0
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	2300      	movs	r3, #0
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	2100      	movs	r1, #0
 8008466:	6978      	ldr	r0, [r7, #20]
 8008468:	f7ff ff88 	bl	800837c <xTimerGenericCommand>
 800846c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d113      	bne.n	800849c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	60fb      	str	r3, [r7, #12]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008490:	f023 0301 	bic.w	r3, r3, #1
 8008494:	b2da      	uxtb	r2, r3
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	6978      	ldr	r0, [r7, #20]
 80084a2:	4798      	blx	r3
}
 80084a4:	bf00      	nop
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	200019e8 	.word	0x200019e8

080084b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084b8:	f107 0308 	add.w	r3, r7, #8
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f857 	bl	8008570 <prvGetNextExpireTime>
 80084c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4619      	mov	r1, r3
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f803 	bl	80084d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084ce:	f000 f8d5 	bl	800867c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084d2:	e7f1      	b.n	80084b8 <prvTimerTask+0x8>

080084d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084de:	f7ff fa43 	bl	8007968 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084e2:	f107 0308 	add.w	r3, r7, #8
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 f866 	bl	80085b8 <prvSampleTimeNow>
 80084ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d130      	bne.n	8008556 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <prvProcessTimerOrBlockTask+0x3c>
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d806      	bhi.n	8008510 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008502:	f7ff fa3f 	bl	8007984 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008506:	68f9      	ldr	r1, [r7, #12]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff ff85 	bl	8008418 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800850e:	e024      	b.n	800855a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d008      	beq.n	8008528 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008516:	4b13      	ldr	r3, [pc, #76]	; (8008564 <prvProcessTimerOrBlockTask+0x90>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <prvProcessTimerOrBlockTask+0x50>
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <prvProcessTimerOrBlockTask+0x52>
 8008524:	2300      	movs	r3, #0
 8008526:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008528:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <prvProcessTimerOrBlockTask+0x94>)
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	4619      	mov	r1, r3
 8008536:	f7fe ffa7 	bl	8007488 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800853a:	f7ff fa23 	bl	8007984 <xTaskResumeAll>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10a      	bne.n	800855a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008544:	4b09      	ldr	r3, [pc, #36]	; (800856c <prvProcessTimerOrBlockTask+0x98>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
}
 8008554:	e001      	b.n	800855a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008556:	f7ff fa15 	bl	8007984 <xTaskResumeAll>
}
 800855a:	bf00      	nop
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	200019ec 	.word	0x200019ec
 8008568:	200019f0 	.word	0x200019f0
 800856c:	e000ed04 	.word	0xe000ed04

08008570 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008578:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <prvGetNextExpireTime+0x44>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <prvGetNextExpireTime+0x16>
 8008582:	2201      	movs	r2, #1
 8008584:	e000      	b.n	8008588 <prvGetNextExpireTime+0x18>
 8008586:	2200      	movs	r2, #0
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008594:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <prvGetNextExpireTime+0x44>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	e001      	b.n	80085a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085a4:	68fb      	ldr	r3, [r7, #12]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	200019e8 	.word	0x200019e8

080085b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085c0:	f7ff fa7e 	bl	8007ac0 <xTaskGetTickCount>
 80085c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085c6:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <prvSampleTimeNow+0x3c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d205      	bcs.n	80085dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085d0:	f000 f936 	bl	8008840 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	e002      	b.n	80085e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085e2:	4a04      	ldr	r2, [pc, #16]	; (80085f4 <prvSampleTimeNow+0x3c>)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085e8:	68fb      	ldr	r3, [r7, #12]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	200019f8 	.word	0x200019f8

080085f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	429a      	cmp	r2, r3
 800861c:	d812      	bhi.n	8008644 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	1ad2      	subs	r2, r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	429a      	cmp	r2, r3
 800862a:	d302      	bcc.n	8008632 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e01b      	b.n	800866a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008632:	4b10      	ldr	r3, [pc, #64]	; (8008674 <prvInsertTimerInActiveList+0x7c>)
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3304      	adds	r3, #4
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f7fd ffb6 	bl	80065ae <vListInsert>
 8008642:	e012      	b.n	800866a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	429a      	cmp	r2, r3
 800864a:	d206      	bcs.n	800865a <prvInsertTimerInActiveList+0x62>
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	429a      	cmp	r2, r3
 8008652:	d302      	bcc.n	800865a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	e007      	b.n	800866a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800865a:	4b07      	ldr	r3, [pc, #28]	; (8008678 <prvInsertTimerInActiveList+0x80>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3304      	adds	r3, #4
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f7fd ffa2 	bl	80065ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800866a:	697b      	ldr	r3, [r7, #20]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	200019ec 	.word	0x200019ec
 8008678:	200019e8 	.word	0x200019e8

0800867c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08e      	sub	sp, #56	; 0x38
 8008680:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008682:	e0ca      	b.n	800881a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	da18      	bge.n	80086bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800868a:	1d3b      	adds	r3, r7, #4
 800868c:	3304      	adds	r3, #4
 800868e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	61fb      	str	r3, [r7, #28]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b2:	6850      	ldr	r0, [r2, #4]
 80086b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b6:	6892      	ldr	r2, [r2, #8]
 80086b8:	4611      	mov	r1, r2
 80086ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f2c0 80aa 	blt.w	8008818 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	3304      	adds	r3, #4
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fd ffa3 	bl	8006620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086da:	463b      	mov	r3, r7
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff ff6b 	bl	80085b8 <prvSampleTimeNow>
 80086e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b09      	cmp	r3, #9
 80086e8:	f200 8097 	bhi.w	800881a <prvProcessReceivedCommands+0x19e>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <prvProcessReceivedCommands+0x78>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	0800871d 	.word	0x0800871d
 80086f8:	0800871d 	.word	0x0800871d
 80086fc:	0800871d 	.word	0x0800871d
 8008700:	08008791 	.word	0x08008791
 8008704:	080087a5 	.word	0x080087a5
 8008708:	080087ef 	.word	0x080087ef
 800870c:	0800871d 	.word	0x0800871d
 8008710:	0800871d 	.word	0x0800871d
 8008714:	08008791 	.word	0x08008791
 8008718:	080087a5 	.word	0x080087a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008722:	f043 0301 	orr.w	r3, r3, #1
 8008726:	b2da      	uxtb	r2, r3
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	18d1      	adds	r1, r2, r3
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873c:	f7ff ff5c 	bl	80085f8 <prvInsertTimerInActiveList>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d069      	beq.n	800881a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d05e      	beq.n	800881a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	441a      	add	r2, r3
 8008764:	2300      	movs	r3, #0
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	2300      	movs	r3, #0
 800876a:	2100      	movs	r1, #0
 800876c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800876e:	f7ff fe05 	bl	800837c <xTimerGenericCommand>
 8008772:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d14f      	bne.n	800881a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	61bb      	str	r3, [r7, #24]
}
 800878c:	bf00      	nop
 800878e:	e7fe      	b.n	800878e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	b2da      	uxtb	r2, r3
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087a2:	e03a      	b.n	800881a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087aa:	f043 0301 	orr.w	r3, r3, #1
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	617b      	str	r3, [r7, #20]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	18d1      	adds	r1, r2, r3
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087e8:	f7ff ff06 	bl	80085f8 <prvInsertTimerInActiveList>
					break;
 80087ec:	e015      	b.n	800881a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d103      	bne.n	8008804 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80087fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087fe:	f7fd fd67 	bl	80062d0 <vPortFree>
 8008802:	e00a      	b.n	800881a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800880a:	f023 0301 	bic.w	r3, r3, #1
 800880e:	b2da      	uxtb	r2, r3
 8008810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008816:	e000      	b.n	800881a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008818:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800881a:	4b08      	ldr	r3, [pc, #32]	; (800883c <prvProcessReceivedCommands+0x1c0>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	1d39      	adds	r1, r7, #4
 8008820:	2200      	movs	r2, #0
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe fc16 	bl	8007054 <xQueueReceive>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	f47f af2a 	bne.w	8008684 <prvProcessReceivedCommands+0x8>
	}
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	3730      	adds	r7, #48	; 0x30
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	200019f0 	.word	0x200019f0

08008840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b088      	sub	sp, #32
 8008844:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008846:	e048      	b.n	80088da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008848:	4b2d      	ldr	r3, [pc, #180]	; (8008900 <prvSwitchTimerLists+0xc0>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008852:	4b2b      	ldr	r3, [pc, #172]	; (8008900 <prvSwitchTimerLists+0xc0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3304      	adds	r3, #4
 8008860:	4618      	mov	r0, r3
 8008862:	f7fd fedd 	bl	8006620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008874:	f003 0304 	and.w	r3, r3, #4
 8008878:	2b00      	cmp	r3, #0
 800887a:	d02e      	beq.n	80088da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	4413      	add	r3, r2
 8008884:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	429a      	cmp	r2, r3
 800888c:	d90e      	bls.n	80088ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800889a:	4b19      	ldr	r3, [pc, #100]	; (8008900 <prvSwitchTimerLists+0xc0>)
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4619      	mov	r1, r3
 80088a4:	4610      	mov	r0, r2
 80088a6:	f7fd fe82 	bl	80065ae <vListInsert>
 80088aa:	e016      	b.n	80088da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088ac:	2300      	movs	r3, #0
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	2300      	movs	r3, #0
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	2100      	movs	r1, #0
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7ff fd60 	bl	800837c <xTimerGenericCommand>
 80088bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10a      	bne.n	80088da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	603b      	str	r3, [r7, #0]
}
 80088d6:	bf00      	nop
 80088d8:	e7fe      	b.n	80088d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088da:	4b09      	ldr	r3, [pc, #36]	; (8008900 <prvSwitchTimerLists+0xc0>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1b1      	bne.n	8008848 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088e4:	4b06      	ldr	r3, [pc, #24]	; (8008900 <prvSwitchTimerLists+0xc0>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ea:	4b06      	ldr	r3, [pc, #24]	; (8008904 <prvSwitchTimerLists+0xc4>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a04      	ldr	r2, [pc, #16]	; (8008900 <prvSwitchTimerLists+0xc0>)
 80088f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088f2:	4a04      	ldr	r2, [pc, #16]	; (8008904 <prvSwitchTimerLists+0xc4>)
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	6013      	str	r3, [r2, #0]
}
 80088f8:	bf00      	nop
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	200019e8 	.word	0x200019e8
 8008904:	200019ec 	.word	0x200019ec

08008908 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800890e:	f7fd ffe1 	bl	80068d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008912:	4b15      	ldr	r3, [pc, #84]	; (8008968 <prvCheckForValidListAndQueue+0x60>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d120      	bne.n	800895c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800891a:	4814      	ldr	r0, [pc, #80]	; (800896c <prvCheckForValidListAndQueue+0x64>)
 800891c:	f7fd fdf6 	bl	800650c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008920:	4813      	ldr	r0, [pc, #76]	; (8008970 <prvCheckForValidListAndQueue+0x68>)
 8008922:	f7fd fdf3 	bl	800650c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008926:	4b13      	ldr	r3, [pc, #76]	; (8008974 <prvCheckForValidListAndQueue+0x6c>)
 8008928:	4a10      	ldr	r2, [pc, #64]	; (800896c <prvCheckForValidListAndQueue+0x64>)
 800892a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800892c:	4b12      	ldr	r3, [pc, #72]	; (8008978 <prvCheckForValidListAndQueue+0x70>)
 800892e:	4a10      	ldr	r2, [pc, #64]	; (8008970 <prvCheckForValidListAndQueue+0x68>)
 8008930:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008932:	2300      	movs	r3, #0
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	4b11      	ldr	r3, [pc, #68]	; (800897c <prvCheckForValidListAndQueue+0x74>)
 8008938:	4a11      	ldr	r2, [pc, #68]	; (8008980 <prvCheckForValidListAndQueue+0x78>)
 800893a:	2110      	movs	r1, #16
 800893c:	200a      	movs	r0, #10
 800893e:	f7fe f953 	bl	8006be8 <xQueueGenericCreateStatic>
 8008942:	4603      	mov	r3, r0
 8008944:	4a08      	ldr	r2, [pc, #32]	; (8008968 <prvCheckForValidListAndQueue+0x60>)
 8008946:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008948:	4b07      	ldr	r3, [pc, #28]	; (8008968 <prvCheckForValidListAndQueue+0x60>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <prvCheckForValidListAndQueue+0x60>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	490b      	ldr	r1, [pc, #44]	; (8008984 <prvCheckForValidListAndQueue+0x7c>)
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fd6c 	bl	8007434 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800895c:	f7fd ffea 	bl	8006934 <vPortExitCritical>
}
 8008960:	bf00      	nop
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	200019f0 	.word	0x200019f0
 800896c:	200019c0 	.word	0x200019c0
 8008970:	200019d4 	.word	0x200019d4
 8008974:	200019e8 	.word	0x200019e8
 8008978:	200019ec 	.word	0x200019ec
 800897c:	20001a9c 	.word	0x20001a9c
 8008980:	200019fc 	.word	0x200019fc
 8008984:	08008a38 	.word	0x08008a38

08008988 <__libc_init_array>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	4d0d      	ldr	r5, [pc, #52]	; (80089c0 <__libc_init_array+0x38>)
 800898c:	4c0d      	ldr	r4, [pc, #52]	; (80089c4 <__libc_init_array+0x3c>)
 800898e:	1b64      	subs	r4, r4, r5
 8008990:	10a4      	asrs	r4, r4, #2
 8008992:	2600      	movs	r6, #0
 8008994:	42a6      	cmp	r6, r4
 8008996:	d109      	bne.n	80089ac <__libc_init_array+0x24>
 8008998:	4d0b      	ldr	r5, [pc, #44]	; (80089c8 <__libc_init_array+0x40>)
 800899a:	4c0c      	ldr	r4, [pc, #48]	; (80089cc <__libc_init_array+0x44>)
 800899c:	f000 f82e 	bl	80089fc <_init>
 80089a0:	1b64      	subs	r4, r4, r5
 80089a2:	10a4      	asrs	r4, r4, #2
 80089a4:	2600      	movs	r6, #0
 80089a6:	42a6      	cmp	r6, r4
 80089a8:	d105      	bne.n	80089b6 <__libc_init_array+0x2e>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b0:	4798      	blx	r3
 80089b2:	3601      	adds	r6, #1
 80089b4:	e7ee      	b.n	8008994 <__libc_init_array+0xc>
 80089b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ba:	4798      	blx	r3
 80089bc:	3601      	adds	r6, #1
 80089be:	e7f2      	b.n	80089a6 <__libc_init_array+0x1e>
 80089c0:	08008ad0 	.word	0x08008ad0
 80089c4:	08008ad0 	.word	0x08008ad0
 80089c8:	08008ad0 	.word	0x08008ad0
 80089cc:	08008ad8 	.word	0x08008ad8

080089d0 <memcpy>:
 80089d0:	440a      	add	r2, r1
 80089d2:	4291      	cmp	r1, r2
 80089d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d8:	d100      	bne.n	80089dc <memcpy+0xc>
 80089da:	4770      	bx	lr
 80089dc:	b510      	push	{r4, lr}
 80089de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089e6:	4291      	cmp	r1, r2
 80089e8:	d1f9      	bne.n	80089de <memcpy+0xe>
 80089ea:	bd10      	pop	{r4, pc}

080089ec <memset>:
 80089ec:	4402      	add	r2, r0
 80089ee:	4603      	mov	r3, r0
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d100      	bne.n	80089f6 <memset+0xa>
 80089f4:	4770      	bx	lr
 80089f6:	f803 1b01 	strb.w	r1, [r3], #1
 80089fa:	e7f9      	b.n	80089f0 <memset+0x4>

080089fc <_init>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	bf00      	nop
 8008a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a02:	bc08      	pop	{r3}
 8008a04:	469e      	mov	lr, r3
 8008a06:	4770      	bx	lr

08008a08 <_fini>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	bf00      	nop
 8008a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0e:	bc08      	pop	{r3}
 8008a10:	469e      	mov	lr, r3
 8008a12:	4770      	bx	lr
