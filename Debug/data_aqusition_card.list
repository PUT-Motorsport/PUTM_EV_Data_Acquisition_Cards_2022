
data_aqusition_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d9c  08009d9c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009d9c  08009d9c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d9c  08009d9c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009da4  08009da4  00019da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b98  20000180  08009f28  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d18  08009f28  00021d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000404e3  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000580f  00000000  00000000  00060693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002240  00000000  00000000  00065ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002058  00000000  00000000  000680e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000345da  00000000  00000000  0006a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026e9d  00000000  00000000  0009e71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b6db  00000000  00000000  000c55b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00210c92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009270  00000000  00000000  00210ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000180 	.word	0x20000180
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009b9c 	.word	0x08009b9c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000184 	.word	0x20000184
 80001fc:	08009b9c 	.word	0x08009b9c

08000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>:
	 * @param  pBuffer: pointer to data to be read.
	 * @param  RegisterAddr: specifies internal address register to be read.
	 * @param  NumByteToRead: number of bytes to be read.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Read(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4611      	mov	r1, r2
 800020c:	461a      	mov	r2, r3
 800020e:	460b      	mov	r3, r1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4613      	mov	r3, r2
 8000214:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToRead) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f003 fcbd 	bl	8003b9c <HAL_GPIO_WritePin>
		uint8_t msg = RegisterAddr | 0x80;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000228:	b2db      	uxtb	r3, r3
 800022a:	75fb      	strb	r3, [r7, #23]
		/* Write Reg Address */
		HAL_SPI_Transmit(&hspi1, &msg, 1, 100);
 800022c:	f107 0117 	add.w	r1, r7, #23
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	2201      	movs	r2, #1
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000236:	f005 fdae 	bl	8005d96 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, pBuffer, nBytesToRead, 100);
 800023a:	88ba      	ldrh	r2, [r7, #4]
 800023c:	2364      	movs	r3, #100	; 0x64
 800023e:	68b9      	ldr	r1, [r7, #8]
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000242:	f005 ff16 	bl	8006072 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2110      	movs	r1, #16
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f003 fca5 	bl	8003b9c <HAL_GPIO_WritePin>

		return 0;
 8000252:	2300      	movs	r3, #0
	}
 8000254:	4618      	mov	r0, r3
 8000256:	3718      	adds	r7, #24
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200002e0 	.word	0x200002e0

08000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>:
	 * @param  pBuffer: pointer to data to be written.
	 * @param  RegisterAddr: specifies internal address register to be written.
	 * @param  NumByteToWrite: number of bytes to write.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Write(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	4611      	mov	r1, r2
 800026c:	461a      	mov	r2, r3
 800026e:	460b      	mov	r3, r1
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	4613      	mov	r3, r2
 8000274:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToWrite) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f003 fc8d 	bl	8003b9c <HAL_GPIO_WritePin>
		/* Write Reg Address */
		uint8_t data[2];
		data[0] = RegisterAddr;  // multibyte write
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	753b      	strb	r3, [r7, #20]
		data[1] = *pBuffer;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	757b      	strb	r3, [r7, #21]

		HAL_SPI_Transmit(&hspi1, data, 2, 100);
 800028c:	f107 0114 	add.w	r1, r7, #20
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2202      	movs	r2, #2
 8000294:	4806      	ldr	r0, [pc, #24]	; (80002b0 <_ZN16ISM330DHCXSensor8IO_WriteEPhht+0x50>)
 8000296:	f005 fd7e 	bl	8005d96 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f003 fc7b 	bl	8003b9c <HAL_GPIO_WritePin>

		return 0;
 80002a6:	2300      	movs	r3, #0
	}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	200002e0 	.word	0x200002e0

080002b4 <_ZN16ISM330DHCXSensorC1Ev>:
/** Constructor SPI
 *  @param spi object
 *  @param cs_pin the chip select pin
 *  @param spi_speed the SPI speed
 */
ISM330DHCXSensor::ISM330DHCXSensor() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(&hspi1);
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <_ZN16ISM330DHCXSensorC1Ev+0x3c>)
 80002be:	f005 fcc7 	bl	8005c50 <HAL_SPI_Init>
	reg_ctx.write_reg = ISM330DHCX_io_write;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <_ZN16ISM330DHCXSensorC1Ev+0x40>)
 80002c6:	611a      	str	r2, [r3, #16]
	reg_ctx.read_reg = ISM330DHCX_io_read;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <_ZN16ISM330DHCXSensorC1Ev+0x44>)
 80002cc:	615a      	str	r2, [r3, #20]
	reg_ctx.handle = (void*) this;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	619a      	str	r2, [r3, #24]
	address = 0U;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
	acc_is_enabled = 0U;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	735a      	strb	r2, [r3, #13]
}
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200002e0 	.word	0x200002e0
 80002f4:	080002fd 	.word	0x080002fd
 80002f8:	08000327 	.word	0x08000327

080002fc <ISM330DHCX_io_write>:

	return ISM330DHCX_OK;
}

int32_t ISM330DHCX_io_write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer,
		uint16_t nBytesToWrite) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	607a      	str	r2, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	460b      	mov	r3, r1
 800030a:	72fb      	strb	r3, [r7, #11]
 800030c:	4613      	mov	r3, r2
 800030e:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Write(pBuffer, WriteAddr,
 8000310:	893b      	ldrh	r3, [r7, #8]
 8000312:	7afa      	ldrb	r2, [r7, #11]
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f7ff ffa2 	bl	8000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>
 800031c:	4603      	mov	r3, r0
			nBytesToWrite);
}
 800031e:	4618      	mov	r0, r3
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <ISM330DHCX_io_read>:

int32_t ISM330DHCX_io_read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer,
		uint16_t nBytesToRead) {
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	60f8      	str	r0, [r7, #12]
 800032e:	607a      	str	r2, [r7, #4]
 8000330:	461a      	mov	r2, r3
 8000332:	460b      	mov	r3, r1
 8000334:	72fb      	strb	r3, [r7, #11]
 8000336:	4613      	mov	r3, r2
 8000338:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Read(pBuffer, ReadAddr,
 800033a:	893b      	ldrh	r3, [r7, #8]
 800033c:	7afa      	ldrb	r2, [r7, #11]
 800033e:	6879      	ldr	r1, [r7, #4]
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f7ff ff5d 	bl	8000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>
 8000346:	4603      	mov	r3, r0
			nBytesToRead);
}
 8000348:	4618      	mov	r0, r3
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	461a      	mov	r2, r3
 8000360:	2300      	movs	r3, #0
 8000362:	6013      	str	r3, [r2, #0]
 8000364:	6053      	str	r3, [r2, #4]
 8000366:	6093      	str	r3, [r2, #8]
 8000368:	60d3      	str	r3, [r2, #12]
 800036a:	6113      	str	r3, [r2, #16]
 800036c:	6153      	str	r3, [r2, #20]
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	331c      	adds	r3, #28
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 800037a:	68fa      	ldr	r2, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	331c      	adds	r3, #28
 8000380:	6879      	ldr	r1, [r7, #4]
 8000382:	68b8      	ldr	r0, [r7, #8]
 8000384:	f002 fc74 	bl	8002c70 <HAL_CAN_GetRxMessage>
 8000388:	4603      	mov	r3, r0
 800038a:	461a      	mov	r2, r3
    this->status =
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	791a      	ldrb	r2, [r3, #4]
 80003a8:	795b      	ldrb	r3, [r3, #5]
 80003aa:	f003 030f 	and.w	r3, r3, #15
 80003ae:	021b      	lsls	r3, r3, #8
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	4618      	mov	r0, r3
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &telemetry_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80003d0:	613b      	str	r3, [r7, #16]
 80003d2:	6938      	ldr	r0, [r7, #16]
 80003d4:	f000 f8f8 	bl	80005c8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>
 80003d8:	6178      	str	r0, [r7, #20]
 80003da:	6938      	ldr	r0, [r7, #16]
 80003dc:	f000 f900 	bl	80005e0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>
 80003e0:	60f8      	str	r0, [r7, #12]
 80003e2:	697a      	ldr	r2, [r7, #20]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d01f      	beq.n	800042a <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ffd2 	bl	800039c <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80003f8:	4602      	mov	r2, r0
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	429a      	cmp	r2, r3
 8000400:	bf0c      	ite	eq
 8000402:	2301      	moveq	r3, #1
 8000404:	2300      	movne	r3, #0
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d00a      	beq.n	8000422 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	6839      	ldr	r1, [r7, #0]
 800041a:	4610      	mov	r0, r2
 800041c:	4798      	blx	r3
        return true;
 800041e:	2301      	movs	r3, #1
 8000420:	e004      	b.n	800042c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	3304      	adds	r3, #4
 8000426:	617b      	str	r3, [r7, #20]
 8000428:	e7db      	b.n	80003e2 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 800042a:	2300      	movs	r3, #0
  }
 800042c:	4618      	mov	r0, r3
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b08c      	sub	sp, #48	; 0x30
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 800043c:	f107 0308 	add.w	r3, r7, #8
 8000440:	2200      	movs	r2, #0
 8000442:	6879      	ldr	r1, [r7, #4]
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff83 	bl	8000350 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 800044a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800044e:	2b00      	cmp	r3, #0
 8000450:	d10d      	bne.n	800046e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8000452:	f107 0308 	add.w	r3, r7, #8
 8000456:	4619      	mov	r1, r3
 8000458:	4807      	ldr	r0, [pc, #28]	; (8000478 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800045a:	f7ff ffb1 	bl	80003c0 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
 800045e:	4603      	mov	r3, r0
 8000460:	f083 0301 	eor.w	r3, r3, #1
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
      // Unknown message
      Error_Handler();
 800046a:	f000 fe97 	bl	800119c <Error_Handler>
    }
  }
}
 800046e:	bf00      	nop
 8000470:	3730      	adds	r7, #48	; 0x30
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000000 	.word	0x20000000

0800047c <_Z15init_can_filter17CAN_FilterTypeDef>:

#include "can_functions.hpp"
#include <can_interface.hpp>
extern CAN_HandleTypeDef hcan1;

void init_can_filter(CAN_FilterTypeDef sFilterConfig) {
 800047c:	b084      	sub	sp, #16
 800047e:	b580      	push	{r7, lr}
 8000480:	af00      	add	r7, sp, #0
 8000482:	f107 0c08 	add.w	ip, r7, #8
 8000486:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sFilterConfig.FilterBank = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000492:	2301      	movs	r3, #1
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = 0x0000;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = 0x0000;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80004aa:	2301      	movs	r3, #1
 80004ac:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80004ae:	f107 0108 	add.w	r1, r7, #8
 80004b2:	4809      	ldr	r0, [pc, #36]	; (80004d8 <_Z15init_can_filter17CAN_FilterTypeDef+0x5c>)
 80004b4:	f002 f9f3 	bl	800289e <HAL_CAN_ConfigFilter>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	bf14      	ite	ne
 80004be:	2301      	movne	r3, #1
 80004c0:	2300      	moveq	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <_Z15init_can_filter17CAN_FilterTypeDef+0x50>
		Error_Handler();
 80004c8:	f000 fe68 	bl	800119c <Error_Handler>
	}
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004d4:	b004      	add	sp, #16
 80004d6:	4770      	bx	lr
 80004d8:	20000284 	.word	0x20000284

080004dc <_Z15init_can_configv>:

void init_can_config(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80004e0:	480e      	ldr	r0, [pc, #56]	; (800051c <_Z15init_can_configv+0x40>)
 80004e2:	f002 faa6 	bl	8002a32 <HAL_CAN_Start>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	bf14      	ite	ne
 80004ec:	2301      	movne	r3, #1
 80004ee:	2300      	moveq	r3, #0
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <_Z15init_can_configv+0x1e>
		Error_Handler();
 80004f6:	f000 fe51 	bl	800119c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1,
 80004fa:	2103      	movs	r1, #3
 80004fc:	4807      	ldr	r0, [pc, #28]	; (800051c <_Z15init_can_configv+0x40>)
 80004fe:	f002 fcc9 	bl	8002e94 <HAL_CAN_ActivateNotification>
 8000502:	4603      	mov	r3, r0
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8000504:	2b00      	cmp	r3, #0
 8000506:	bf14      	ite	ne
 8000508:	2301      	movne	r3, #1
 800050a:	2300      	moveq	r3, #0
 800050c:	b2db      	uxtb	r3, r3
	if (HAL_CAN_ActivateNotification(&hcan1,
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <_Z15init_can_configv+0x3a>
		Error_Handler();
 8000512:	f000 fe43 	bl	800119c <Error_Handler>
	}
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000284 	.word	0x20000284

08000520 <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4614      	mov	r4, r2
 8000532:	461d      	mov	r5, r3
 8000534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000538:	e895 0003 	ldmia.w	r5, {r0, r1}
 800053c:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3318      	adds	r3, #24
 8000544:	2206      	movs	r2, #6
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	4618      	mov	r0, r3
 800054a:	f009 fb11 	bl	8009b70 <memcpy>
  }
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bdb0      	pop	{r4, r5, r7, pc}

08000558 <_Z19can_main_frame_sendtthh>:

void can_main_frame_send(uint16_t adc_susp_right, uint16_t adc_susp_left, uint8_t brake_pressure_front, uint8_t brake_pressure_back){
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b08d      	sub	sp, #52	; 0x34
 800055c:	af00      	add	r7, sp, #0
 800055e:	4604      	mov	r4, r0
 8000560:	4608      	mov	r0, r1
 8000562:	4611      	mov	r1, r2
 8000564:	461a      	mov	r2, r3
 8000566:	4623      	mov	r3, r4
 8000568:	80fb      	strh	r3, [r7, #6]
 800056a:	4603      	mov	r3, r0
 800056c:	80bb      	strh	r3, [r7, #4]
 800056e:	460b      	mov	r3, r1
 8000570:	70fb      	strb	r3, [r7, #3]
 8000572:	4613      	mov	r3, r2
 8000574:	70bb      	strb	r3, [r7, #2]
	AQ_main aq_frame{
		adc_susp_right,
		adc_susp_left, // i brake balance
		brake_pressure_front, // pressure of braking lquid front in %
		brake_pressure_back, // pressure of braking lquid back in %
	};
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	853b      	strh	r3, [r7, #40]	; 0x28
 800057a:	88bb      	ldrh	r3, [r7, #4]
 800057c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000584:	78bb      	ldrb	r3, [r7, #2]
 8000586:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	auto aq_main_frame = PUTM_CAN::Can_tx_message<AQ_main>(aq_frame, can_tx_header_AQ_MAIN);
 800058a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <_Z19can_main_frame_sendtthh+0x68>)
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ffc3 	bl	8000520 <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>
	auto status = aq_main_frame.send(hcan1);
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	4909      	ldr	r1, [pc, #36]	; (80005c4 <_Z19can_main_frame_sendtthh+0x6c>)
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f82b 	bl	80005fc <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainE4sendER19__CAN_HandleTypeDef>
 80005a6:	4603      	mov	r3, r0
 80005a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	 if (HAL_StatusTypeDef::HAL_OK != status)
 80005ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <_Z19can_main_frame_sendtthh+0x60>
	  {
	    Error_Handler();
 80005b4:	f000 fdf2 	bl	800119c <Error_Handler>
	  };

}
 80005b8:	bf00      	nop
 80005ba:	3734      	adds	r7, #52	; 0x34
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd90      	pop	{r4, r7, pc}
 80005c0:	08009be0 	.word	0x08009be0
 80005c4:	20000284 	.word	0x20000284

080005c8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f827 	bl	8000624 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f81b 	bl	8000624 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 80005ee:	4603      	mov	r3, r0
 80005f0:	335c      	adds	r3, #92	; 0x5c
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f103 0218 	add.w	r2, r3, #24
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainE4sendER19__CAN_HandleTypeDef+0x24>)
 8000610:	6838      	ldr	r0, [r7, #0]
 8000612:	f002 fa52 	bl	8002aba <HAL_CAN_AddTxMessage>
 8000616:	4603      	mov	r3, r0
  }
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000019c 	.word	0x2000019c

08000624 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f805 	bl	800063e <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>
 8000634:	4603      	mov	r3, r0
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <_ZN8PUTM_CAN6DeviceI14Telemetry_MainE8set_dataERKNS_14Can_rx_messageE>:
  explicit constexpr Device(uint32_t ide)
      : Device_base(ide, sizeof(Device_data_type)){};

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	7993      	ldrb	r3, [r2, #6]
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3307      	adds	r3, #7
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	321c      	adds	r2, #28
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	701a      	strb	r2, [r3, #0]
  }
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <_ZN8PUTM_CAN6DeviceI18TS_rear_suspensionE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
    new_data = true;
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	7993      	ldrb	r3, [r2, #6]
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	1dd8      	adds	r0, r3, #7
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	331c      	adds	r3, #28
 800069c:	2208      	movs	r2, #8
 800069e:	4619      	mov	r1, r3
 80006a0:	f009 fa66 	bl	8009b70 <memcpy>
  }
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_ZN8PUTM_CAN6DeviceI7TS_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	7993      	ldrb	r3, [r2, #6]
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	1dd8      	adds	r0, r3, #7
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	331c      	adds	r3, #28
 80006c8:	2208      	movs	r2, #8
 80006ca:	4619      	mov	r1, r3
 80006cc:	f009 fa50 	bl	8009b70 <memcpy>
  }
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_ZN8PUTM_CAN6DeviceI20Steering_Wheel_eventE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	7993      	ldrb	r3, [r2, #6]
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	1dd8      	adds	r0, r3, #7
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	331c      	adds	r3, #28
 80006f4:	2203      	movs	r2, #3
 80006f6:	4619      	mov	r1, r3
 80006f8:	f009 fa3a 	bl	8009b70 <memcpy>
  }
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <_ZN8PUTM_CAN6DeviceI19Steering_Wheel_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	7993      	ldrb	r3, [r2, #6]
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	1dd8      	adds	r0, r3, #7
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	331c      	adds	r3, #28
 8000720:	2203      	movs	r2, #3
 8000722:	4619      	mov	r1, r3
 8000724:	f009 fa24 	bl	8009b70 <memcpy>
  }
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN8PUTM_CAN6DeviceI7SF_NUCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
    new_data = true;
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	7993      	ldrb	r3, [r2, #6]
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3307      	adds	r3, #7
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	321c      	adds	r2, #28
 800074c:	6812      	ldr	r2, [r2, #0]
 800074e:	601a      	str	r2, [r3, #0]
  }
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <_ZN8PUTM_CAN6DeviceI5SF_WSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	7993      	ldrb	r3, [r2, #6]
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	1dd8      	adds	r0, r3, #7
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	331c      	adds	r3, #28
 8000778:	2208      	movs	r2, #8
 800077a:	4619      	mov	r1, r3
 800077c:	f009 f9f8 	bl	8009b70 <memcpy>
  }
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <_ZN8PUTM_CAN6DeviceI5SF_DVE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	7993      	ldrb	r3, [r2, #6]
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	1dd8      	adds	r0, r3, #7
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	331c      	adds	r3, #28
 80007a4:	2208      	movs	r2, #8
 80007a6:	4619      	mov	r1, r3
 80007a8:	f009 f9e2 	bl	8009b70 <memcpy>
  }
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_ZN8PUTM_CAN6DeviceI20SF_CoolingAndVSafetyE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	7993      	ldrb	r3, [r2, #6]
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	1dd8      	adds	r0, r3, #7
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	331c      	adds	r3, #28
 80007d0:	2208      	movs	r2, #8
 80007d2:	4619      	mov	r1, r3
 80007d4:	f009 f9cc 	bl	8009b70 <memcpy>
  }
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_ZN8PUTM_CAN6DeviceI11SF_FrontBoxE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	7993      	ldrb	r3, [r2, #6]
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	1dd8      	adds	r0, r3, #7
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	331c      	adds	r3, #28
 80007fc:	2208      	movs	r2, #8
 80007fe:	4619      	mov	r1, r3
 8000800:	f009 f9b6 	bl	8009b70 <memcpy>
  }
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <_ZN8PUTM_CAN6DeviceI7SF_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	7993      	ldrb	r3, [r2, #6]
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	1dd8      	adds	r0, r3, #7
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	331c      	adds	r3, #28
 8000828:	2203      	movs	r2, #3
 800082a:	4619      	mov	r1, r3
 800082c:	f009 f9a0 	bl	8009b70 <memcpy>
  }
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_ZN8PUTM_CAN6DeviceI14Lap_timer_PassE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	7993      	ldrb	r3, [r2, #6]
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3307      	adds	r3, #7
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	321c      	adds	r2, #28
 8000854:	8812      	ldrh	r2, [r2, #0]
 8000856:	b292      	uxth	r2, r2
 8000858:	801a      	strh	r2, [r3, #0]
  }
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <_ZN8PUTM_CAN6DeviceI14Lap_timer_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	7993      	ldrb	r3, [r2, #6]
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3307      	adds	r3, #7
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	321c      	adds	r2, #28
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	701a      	strb	r2, [r3, #0]
  }
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <_ZN8PUTM_CAN6DeviceI17Dash_lap_finishedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	7993      	ldrb	r3, [r2, #6]
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3307      	adds	r3, #7
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	321c      	adds	r2, #28
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	601a      	str	r2, [r3, #0]
  }
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_ZN8PUTM_CAN6DeviceI27Dash_steering_wheel_requestE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	7993      	ldrb	r3, [r2, #6]
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3307      	adds	r3, #7
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	321c      	adds	r2, #28
 80008da:	7812      	ldrb	r2, [r2, #0]
 80008dc:	701a      	strb	r2, [r3, #0]
  }
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <_ZN8PUTM_CAN6DeviceI26Dash_Smart_Fuses_FAN_speedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	7993      	ldrb	r3, [r2, #6]
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3307      	adds	r3, #7
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	321c      	adds	r2, #28
 8000906:	8812      	ldrh	r2, [r2, #0]
 8000908:	b292      	uxth	r2, r2
 800090a:	801a      	strh	r2, [r3, #0]
  }
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <_ZN8PUTM_CAN6DeviceI8Dash_TCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	7993      	ldrb	r3, [r2, #6]
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	1dd8      	adds	r0, r3, #7
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	331c      	adds	r3, #28
 8000934:	2208      	movs	r2, #8
 8000936:	4619      	mov	r1, r3
 8000938:	f009 f91a 	bl	8009b70 <memcpy>
  }
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <_ZN8PUTM_CAN6DeviceI9Dash_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	7993      	ldrb	r3, [r2, #6]
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3307      	adds	r3, #7
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	321c      	adds	r2, #28
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	701a      	strb	r2, [r3, #0]
  }
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <_ZN8PUTM_CAN6DeviceI18BMS_LV_temperatureE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
    new_data = true;
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	7993      	ldrb	r3, [r2, #6]
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	1dd8      	adds	r0, r3, #7
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	331c      	adds	r3, #28
 800098c:	2208      	movs	r2, #8
 800098e:	4619      	mov	r1, r3
 8000990:	f009 f8ee 	bl	8009b70 <memcpy>
  }
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <_ZN8PUTM_CAN6DeviceI11BMS_LV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	7993      	ldrb	r3, [r2, #6]
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	1dd8      	adds	r0, r3, #7
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	331c      	adds	r3, #28
 80009b8:	2206      	movs	r2, #6
 80009ba:	4619      	mov	r1, r3
 80009bc:	f009 f8d8 	bl	8009b70 <memcpy>
  }
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_ZN8PUTM_CAN6DeviceI11BMS_HV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	7993      	ldrb	r3, [r2, #6]
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	1dd8      	adds	r0, r3, #7
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	331c      	adds	r3, #28
 80009e4:	2207      	movs	r2, #7
 80009e6:	4619      	mov	r1, r3
 80009e8:	f009 f8c2 	bl	8009b70 <memcpy>
  }
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_ZN8PUTM_CAN6DeviceI7AQ_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	7993      	ldrb	r3, [r2, #6]
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	1dd8      	adds	r0, r3, #7
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	331c      	adds	r3, #28
 8000a10:	2206      	movs	r2, #6
 8000a12:	4619      	mov	r1, r3
 8000a14:	f009 f8ac 	bl	8009b70 <memcpy>
  }
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_ZN8PUTM_CAN6DeviceI9Apps_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	7993      	ldrb	r3, [r2, #6]
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	1dd8      	adds	r0, r3, #7
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	331c      	adds	r3, #28
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f009 f896 	bl	8009b70 <memcpy>
  }
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_Z41__static_initialization_and_destruction_0ii>:
}

void ism330_read(int32_t *acceleration, int32_t *angular_rate) {
	AccGyr.ACC_GetAxes(acceleration);
	AccGyr.GYRO_GetAxes(angular_rate);
}
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d107      	bne.n	8000a6c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d102      	bne.n	8000a6c <_Z41__static_initialization_and_destruction_0ii+0x20>
ISM330DHCXSensor AccGyr;
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000a68:	f7ff fc24 	bl	80002b4 <_ZN16ISM330DHCXSensorC1Ev>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200001a0 	.word	0x200001a0

08000a78 <_GLOBAL__sub_I_AccGyr>:
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff ffe3 	bl	8000a4c <_Z41__static_initialization_and_destruction_0ii>
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fe1b 	bl	80016c6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f82e 	bl	8000af0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 fa98 	bl	8000fc8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000a98:	f000 fa6c 	bl	8000f74 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000a9c:	f000 f88a 	bl	8000bb4 <_ZL12MX_ADC1_Initv>
  MX_CAN1_Init();
 8000aa0:	f000 f97c 	bl	8000d9c <_ZL12MX_CAN1_Initv>
  MX_RTC_Init();
 8000aa4:	f000 f9b4 	bl	8000e10 <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 8000aa8:	f000 fa22 	bl	8000ef0 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aac:	f006 faec 	bl	8007088 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ab0:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <main+0x50>)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <main+0x54>)
 8000ab6:	f006 fb31 	bl	800711c <osThreadNew>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <main+0x58>)
 8000abe:	6013      	str	r3, [r2, #0]

  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <main+0x5c>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <main+0x60>)
 8000ac6:	f006 fb29 	bl	800711c <osThreadNew>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <main+0x64>)
 8000ace:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ad0:	f006 fafe 	bl	80070d0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1) {
 8000ad4:	e7fe      	b.n	8000ad4 <main+0x4c>
 8000ad6:	bf00      	nop
 8000ad8:	08009d0c 	.word	0x08009d0c
 8000adc:	08001129 	.word	0x08001129
 8000ae0:	20000390 	.word	0x20000390
 8000ae4:	08009d30 	.word	0x08009d30
 8000ae8:	08001139 	.word	0x08001139
 8000aec:	20000394 	.word	0x20000394

08000af0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b098      	sub	sp, #96	; 0x60
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	2248      	movs	r2, #72	; 0x48
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f009 f844 	bl	8009b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b12:	2000      	movs	r0, #0
 8000b14:	f003 f882 	bl	8003c1c <HAL_PWREx_ControlVoltageScaling>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bf14      	ite	ne
 8000b1e:	2301      	movne	r3, #1
 8000b20:	2300      	moveq	r3, #0
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000b28:	f000 fb38 	bl	800119c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000b2c:	2318      	movs	r3, #24
 8000b2e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b30:	2301      	movs	r3, #1
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b34:	2301      	movs	r3, #1
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b3c:	2360      	movs	r3, #96	; 0x60
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b40:	2302      	movs	r3, #2
 8000b42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b44:	2301      	movs	r3, #1
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b4c:	233c      	movs	r3, #60	; 0x3c
 8000b4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 f959 	bl	8003e18 <HAL_RCC_OscConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf14      	ite	ne
 8000b6c:	2301      	movne	r3, #1
 8000b6e:	2300      	moveq	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8000b76:	f000 fb11 	bl	800119c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2105      	movs	r1, #5
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 fdc8 	bl	8004728 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8000ba8:	f000 faf8 	bl	800119c <Error_Handler>
  }
}
 8000bac:	bf00      	nop
 8000bae:	3760      	adds	r7, #96	; 0x60
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bd6:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000bd8:	4a69      	ldr	r2, [pc, #420]	; (8000d80 <_ZL12MX_ADC1_Initv+0x1cc>)
 8000bda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000bdc:	4b67      	ldr	r3, [pc, #412]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000bde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000be2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be4:	4b65      	ldr	r3, [pc, #404]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bea:	4b64      	ldr	r3, [pc, #400]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bf0:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf6:	4b61      	ldr	r3, [pc, #388]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bfc:	4b5f      	ldr	r3, [pc, #380]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c02:	4b5e      	ldr	r3, [pc, #376]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000c08:	4b5c      	ldr	r3, [pc, #368]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c0a:	2206      	movs	r2, #6
 8000c0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c0e:	4b5b      	ldr	r3, [pc, #364]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c16:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c1c:	4b57      	ldr	r3, [pc, #348]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c22:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c30:	4b52      	ldr	r3, [pc, #328]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c38:	4850      	ldr	r0, [pc, #320]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c3a:	f000 ff1d 	bl	8001a78 <HAL_ADC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	bf14      	ite	ne
 8000c44:	2301      	movne	r3, #1
 8000c46:	2300      	moveq	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 8000c4e:	f000 faa5 	bl	800119c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4847      	ldr	r0, [pc, #284]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c5e:	f001 fc7f 	bl	8002560 <HAL_ADCEx_MultiModeConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bf14      	ite	ne
 8000c68:	2301      	movne	r3, #1
 8000c6a:	2300      	moveq	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8000c72:	f000 fa93 	bl	800119c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c76:	4b43      	ldr	r3, [pc, #268]	; (8000d84 <_ZL12MX_ADC1_Initv+0x1d0>)
 8000c78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c82:	237f      	movs	r3, #127	; 0x7f
 8000c84:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c86:	2304      	movs	r3, #4
 8000c88:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	483a      	ldr	r0, [pc, #232]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000c94:	f001 f842 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf14      	ite	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	2300      	moveq	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 8000ca8:	f000 fa78 	bl	800119c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <_ZL12MX_ADC1_Initv+0x1d4>)
 8000cae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4830      	ldr	r0, [pc, #192]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cba:	f001 f82f 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	bf14      	ite	ne
 8000cc4:	2301      	movne	r3, #1
 8000cc6:	2300      	moveq	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <_ZL12MX_ADC1_Initv+0x11e>
  {
    Error_Handler();
 8000cce:	f000 fa65 	bl	800119c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <_ZL12MX_ADC1_Initv+0x1d8>)
 8000cd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cd6:	2312      	movs	r3, #18
 8000cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4827      	ldr	r0, [pc, #156]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000ce0:	f001 f81c 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	bf14      	ite	ne
 8000cea:	2301      	movne	r3, #1
 8000cec:	2300      	moveq	r3, #0
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <_ZL12MX_ADC1_Initv+0x144>
  {
    Error_Handler();
 8000cf4:	f000 fa52 	bl	800119c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <_ZL12MX_ADC1_Initv+0x1dc>)
 8000cfa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cfc:	2318      	movs	r3, #24
 8000cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	481d      	ldr	r0, [pc, #116]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d06:	f001 f809 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bf14      	ite	ne
 8000d10:	2301      	movne	r3, #1
 8000d12:	2300      	moveq	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <_ZL12MX_ADC1_Initv+0x16a>
  {
    Error_Handler();
 8000d1a:	f000 fa3f 	bl	800119c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <_ZL12MX_ADC1_Initv+0x1e0>)
 8000d20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4812      	ldr	r0, [pc, #72]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d32:	f000 fff3 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf14      	ite	ne
 8000d3c:	2301      	movne	r3, #1
 8000d3e:	2300      	moveq	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <_ZL12MX_ADC1_Initv+0x196>
  {
    Error_Handler();
 8000d46:	f000 fa29 	bl	800119c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_ZL12MX_ADC1_Initv+0x1e4>)
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d4e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000d52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4808      	ldr	r0, [pc, #32]	; (8000d7c <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d5a:	f000 ffdf 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf14      	ite	ne
 8000d64:	2301      	movne	r3, #1
 8000d66:	2300      	moveq	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <_ZL12MX_ADC1_Initv+0x1be>
  {
    Error_Handler();
 8000d6e:	f000 fa15 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001bc 	.word	0x200001bc
 8000d80:	50040000 	.word	0x50040000
 8000d84:	04300002 	.word	0x04300002
 8000d88:	08600004 	.word	0x08600004
 8000d8c:	0c900008 	.word	0x0c900008
 8000d90:	10c00010 	.word	0x10c00010
 8000d94:	36902000 	.word	0x36902000
 8000d98:	3ac04000 	.word	0x3ac04000

08000d9c <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000da2:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <_ZL12MX_CAN1_Initv+0x70>)
 8000da4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000da8:	220c      	movs	r2, #12
 8000daa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000dba:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000dbe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dea:	4807      	ldr	r0, [pc, #28]	; (8000e08 <_ZL12MX_CAN1_Initv+0x6c>)
 8000dec:	f001 fc5c 	bl	80026a8 <HAL_CAN_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bf14      	ite	ne
 8000df6:	2301      	movne	r3, #1
 8000df8:	2300      	moveq	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8000e00:	f000 f9cc 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000284 	.word	0x20000284
 8000e0c:	40006400 	.word	0x40006400

08000e10 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e28:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e2a:	4a30      	ldr	r2, [pc, #192]	; (8000eec <_ZL11MX_RTC_Initv+0xdc>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000e34:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e36:	227f      	movs	r2, #127	; 0x7f
 8000e38:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000e3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e3c:	22ff      	movs	r2, #255	; 0xff
 8000e3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e40:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e58:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e60:	4821      	ldr	r0, [pc, #132]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e62:	f004 fc83 	bl	800576c <HAL_RTC_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf14      	ite	ne
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	2300      	moveq	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 8000e76:	f000 f991 	bl	800119c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2201      	movs	r2, #1
 8000e92:	4619      	mov	r1, r3
 8000e94:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000e96:	f004 fcf9 	bl	800588c <HAL_RTC_SetTime>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 8000eaa:	f000 f977 	bl	800119c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <_ZL11MX_RTC_Initv+0xd8>)
 8000ec6:	f004 fd81 	bl	80059cc <HAL_RTC_SetDate>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf14      	ite	ne
 8000ed0:	2301      	movne	r3, #1
 8000ed2:	2300      	moveq	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <_ZL11MX_RTC_Initv+0xce>
  {
    Error_Handler();
 8000eda:	f000 f95f 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200002ac 	.word	0x200002ac
 8000eec:	40002800 	.word	0x40002800

08000ef0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000ef6:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <_ZL12MX_SPI1_Initv+0x80>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000efc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f26:	2230      	movs	r2, #48	; 0x30
 8000f28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f3e:	2207      	movs	r2, #7
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <_ZL12MX_SPI1_Initv+0x7c>)
 8000f50:	f004 fe7e 	bl	8005c50 <HAL_SPI_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf14      	ite	ne
 8000f5a:	2301      	movne	r3, #1
 8000f5c:	2300      	moveq	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8000f64:	f000 f91a 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200002e0 	.word	0x200002e0
 8000f70:	40013000 	.word	0x40013000

08000f74 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <_ZL11MX_DMA_Initv+0x50>)
 8000f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f7e:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <_ZL11MX_DMA_Initv+0x50>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6493      	str	r3, [r2, #72]	; 0x48
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <_ZL11MX_DMA_Initv+0x50>)
 8000f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <_ZL11MX_DMA_Initv+0x50>)
 8000f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <_ZL11MX_DMA_Initv+0x50>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <_ZL11MX_DMA_Initv+0x50>)
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2105      	movs	r1, #5
 8000fae:	200b      	movs	r0, #11
 8000fb0:	f002 fa7e 	bl	80034b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fb4:	200b      	movs	r0, #11
 8000fb6:	f002 fa97 	bl	80034e8 <HAL_NVIC_EnableIRQ>

}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b4f      	ldr	r3, [pc, #316]	; (800111c <_ZL12MX_GPIO_Initv+0x154>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a4e      	ldr	r2, [pc, #312]	; (800111c <_ZL12MX_GPIO_Initv+0x154>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b4c      	ldr	r3, [pc, #304]	; (800111c <_ZL12MX_GPIO_Initv+0x154>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b49      	ldr	r3, [pc, #292]	; (800111c <_ZL12MX_GPIO_Initv+0x154>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a48      	ldr	r2, [pc, #288]	; (800111c <_ZL12MX_GPIO_Initv+0x154>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b46      	ldr	r3, [pc, #280]	; (800111c <_ZL12MX_GPIO_Initv+0x154>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b43      	ldr	r3, [pc, #268]	; (800111c <_ZL12MX_GPIO_Initv+0x154>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a42      	ldr	r2, [pc, #264]	; (800111c <_ZL12MX_GPIO_Initv+0x154>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b40      	ldr	r3, [pc, #256]	; (800111c <_ZL12MX_GPIO_Initv+0x154>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2110      	movs	r1, #16
 800102a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102e:	f002 fdb5 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001032:	2200      	movs	r2, #0
 8001034:	f24f 0180 	movw	r1, #61568	; 0xf080
 8001038:	4839      	ldr	r0, [pc, #228]	; (8001120 <_ZL12MX_GPIO_Initv+0x158>)
 800103a:	f002 fdaf 	bl	8003b9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001044:	4837      	ldr	r0, [pc, #220]	; (8001124 <_ZL12MX_GPIO_Initv+0x15c>)
 8001046:	f002 fda9 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800104a:	2310      	movs	r3, #16
 800104c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001052:	2302      	movs	r3, #2
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f002 fc08 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pins : EEPROM_SCL_Pin EEPROM_SDA_Pin */
  GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8001068:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800106c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106e:	2312      	movs	r3, #18
 8001070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800107a:	2304      	movs	r3, #4
 800107c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4619      	mov	r1, r3
 8001084:	4826      	ldr	r0, [pc, #152]	; (8001120 <_ZL12MX_GPIO_Initv+0x158>)
 8001086:	f002 fbf7 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           PB7 */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800108a:	f24f 0380 	movw	r3, #61568	; 0xf080
 800108e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	481f      	ldr	r0, [pc, #124]	; (8001120 <_ZL12MX_GPIO_Initv+0x158>)
 80010a4:	f002 fbe8 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80010a8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4619      	mov	r1, r3
 80010c0:	4818      	ldr	r0, [pc, #96]	; (8001124 <_ZL12MX_GPIO_Initv+0x15c>)
 80010c2:	f002 fbd9 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	4812      	ldr	r0, [pc, #72]	; (8001124 <_ZL12MX_GPIO_Initv+0x15c>)
 80010dc:	f002 fbcc 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f8:	f002 fbbe 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISM_INT1_Pin */
  GPIO_InitStruct.Pin = ISM_INT1_Pin;
 80010fc:	2340      	movs	r3, #64	; 0x40
 80010fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ISM_INT1_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <_ZL12MX_GPIO_Initv+0x158>)
 8001110:	f002 fbb2 	bl	8003878 <HAL_GPIO_Init>

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	48000400 	.word	0x48000400
 8001124:	48000800 	.word	0x48000800

08001128 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f006 f885 	bl	8007240 <osDelay>
 8001136:	e7fb      	b.n	8001130 <_Z16StartDefaultTaskPv+0x8>

08001138 <_Z12StartBlink01Pv>:
* @retval None
*/
/* USER CODE END Header_StartBlink01 */

void StartBlink01(void *argument)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af06      	add	r7, sp, #24
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink01 */
	init_can_filter(sFilterConfig);
 8001140:	4e0c      	ldr	r6, [pc, #48]	; (8001174 <_Z12StartBlink01Pv+0x3c>)
 8001142:	466d      	mov	r5, sp
 8001144:	f106 0410 	add.w	r4, r6, #16
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001150:	e885 0003 	stmia.w	r5, {r0, r1}
 8001154:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001158:	f7ff f990 	bl	800047c <_Z15init_can_filter17CAN_FilterTypeDef>
	init_can_config();
 800115c:	f7ff f9be 	bl	80004dc <_Z15init_can_configv>

/* Infinite loop */
  for(;;)
  {
    can_main_frame_send(0, 1, 2, 3);
 8001160:	2303      	movs	r3, #3
 8001162:	2202      	movs	r2, #2
 8001164:	2101      	movs	r1, #1
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff f9f6 	bl	8000558 <_Z19can_main_frame_sendtthh>
    osDelay(10);
 800116c:	200a      	movs	r0, #10
 800116e:	f006 f867 	bl	8007240 <osDelay>
    can_main_frame_send(0, 1, 2, 3);
 8001172:	e7f5      	b.n	8001160 <_Z12StartBlink01Pv+0x28>
 8001174:	20000398 	.word	0x20000398

08001178 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800118a:	f000 fab5 	bl	80016f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40001000 	.word	0x40001000

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_MspInit+0x5c>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_MspInit+0x5c>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_MspInit+0x5c>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_MspInit+0x5c>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_MspInit+0x5c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6593      	str	r3, [r2, #88]	; 0x58
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_MspInit+0x5c>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	210f      	movs	r1, #15
 80011e2:	f06f 0001 	mvn.w	r0, #1
 80011e6:	f002 f963 	bl	80034b0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 5, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2105      	movs	r1, #5
 80011ee:	2001      	movs	r0, #1
 80011f0:	f002 f95e 	bl	80034b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f002 f977 	bl	80034e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000

08001208 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0b0      	sub	sp, #192	; 0xc0
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2298      	movs	r2, #152	; 0x98
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f008 fcaf 	bl	8009b8c <memset>
  if(hadc->Instance==ADC1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a3c      	ldr	r2, [pc, #240]	; (8001324 <HAL_ADC_MspInit+0x11c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d171      	bne.n	800131c <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001238:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800123c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800123e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001246:	2301      	movs	r3, #1
 8001248:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800124e:	2310      	movs	r3, #16
 8001250:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800125a:	2302      	movs	r3, #2
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800125e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fd2b 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001274:	f7ff ff92 	bl	800119c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_ADC_MspInit+0x120>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	4a2a      	ldr	r2, [pc, #168]	; (8001328 <HAL_ADC_MspInit+0x120>)
 800127e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <HAL_ADC_MspInit+0x120>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <HAL_ADC_MspInit+0x120>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a24      	ldr	r2, [pc, #144]	; (8001328 <HAL_ADC_MspInit+0x120>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_ADC_MspInit+0x120>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 80012a8:	233f      	movs	r3, #63	; 0x3f
 80012aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |ADC4_Pin|ADC5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012ae:	230b      	movs	r3, #11
 80012b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012be:	4619      	mov	r1, r3
 80012c0:	481a      	ldr	r0, [pc, #104]	; (800132c <HAL_ADC_MspInit+0x124>)
 80012c2:	f002 fad9 	bl	8003878 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_ADC_MspInit+0x128>)
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_ADC_MspInit+0x12c>)
 80012ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_ADC_MspInit+0x128>)
 80012ce:	2205      	movs	r2, #5
 80012d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_ADC_MspInit+0x128>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_ADC_MspInit+0x128>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_ADC_MspInit+0x128>)
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_ADC_MspInit+0x128>)
 80012e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_ADC_MspInit+0x128>)
 80012ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_ADC_MspInit+0x128>)
 80012f6:	2220      	movs	r2, #32
 80012f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_ADC_MspInit+0x128>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <HAL_ADC_MspInit+0x128>)
 8001302:	f002 f8ff 	bl	8003504 <HAL_DMA_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800130c:	f7ff ff46 	bl	800119c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_ADC_MspInit+0x128>)
 8001314:	651a      	str	r2, [r3, #80]	; 0x50
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_ADC_MspInit+0x128>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	37c0      	adds	r7, #192	; 0xc0
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	50040000 	.word	0x50040000
 8001328:	40021000 	.word	0x40021000
 800132c:	48000800 	.word	0x48000800
 8001330:	20000224 	.word	0x20000224
 8001334:	40020008 	.word	0x40020008

08001338 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_CAN_MspInit+0x8c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d130      	bne.n	80013bc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_CAN_MspInit+0x90>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <HAL_CAN_MspInit+0x90>)
 8001360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001364:	6593      	str	r3, [r2, #88]	; 0x58
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_CAN_MspInit+0x90>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_CAN_MspInit+0x90>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_CAN_MspInit+0x90>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_CAN_MspInit+0x90>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800138a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800139c:	2309      	movs	r3, #9
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <HAL_CAN_MspInit+0x94>)
 80013a8:	f002 fa66 	bl	8003878 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2105      	movs	r1, #5
 80013b0:	2013      	movs	r0, #19
 80013b2:	f002 f87d 	bl	80034b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80013b6:	2013      	movs	r0, #19
 80013b8:	f002 f896 	bl	80034e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40006400 	.word	0x40006400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400

080013d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0aa      	sub	sp, #168	; 0xa8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	2298      	movs	r2, #152	; 0x98
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f008 fbd3 	bl	8009b8c <memset>
  if(hrtc->Instance==RTC)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_RTC_MspInit+0x74>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d124      	bne.n	800143a <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fc5e 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800140e:	f7ff fec5 	bl	800119c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_RTC_MspInit+0x78>)
 8001414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_RTC_MspInit+0x78>)
 800141a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_RTC_MspInit+0x78>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_RTC_MspInit+0x78>)
 8001428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142c:	6593      	str	r3, [r2, #88]	; 0x58
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_RTC_MspInit+0x78>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	37a8      	adds	r7, #168	; 0xa8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40002800 	.word	0x40002800
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_SPI_MspInit+0x7c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d128      	bne.n	80014c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_SPI_MspInit+0x80>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <HAL_SPI_MspInit+0x80>)
 8001474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001478:	6613      	str	r3, [r2, #96]	; 0x60
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_SPI_MspInit+0x80>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_SPI_MspInit+0x80>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_SPI_MspInit+0x80>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_SPI_MspInit+0x80>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800149e:	23e0      	movs	r3, #224	; 0xe0
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ae:	2305      	movs	r3, #5
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014bc:	f002 f9dc 	bl	8003878 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40013000 	.word	0x40013000
 80014cc:	40021000 	.word	0x40021000

080014d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <HAL_TIM_Base_MspInit+0x44>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d113      	bne.n	800150a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_TIM_Base_MspInit+0x48>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <HAL_TIM_Base_MspInit+0x48>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6593      	str	r3, [r2, #88]	; 0x58
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_TIM_Base_MspInit+0x48>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2105      	movs	r1, #5
 80014fe:	201d      	movs	r0, #29
 8001500:	f001 ffd6 	bl	80034b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001504:	201d      	movs	r0, #29
 8001506:	f001 ffef 	bl	80034e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40000400 	.word	0x40000400
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	2036      	movs	r0, #54	; 0x36
 8001532:	f001 ffbd 	bl	80034b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001536:	2036      	movs	r0, #54	; 0x36
 8001538:	f001 ffd6 	bl	80034e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_InitTick+0x9c>)
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_InitTick+0x9c>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	6593      	str	r3, [r2, #88]	; 0x58
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_InitTick+0x9c>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001554:	f107 0210 	add.w	r2, r7, #16
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fabc 	bl	8004adc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001564:	f003 faa4 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8001568:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <HAL_InitTick+0xa0>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0c9b      	lsrs	r3, r3, #18
 8001574:	3b01      	subs	r3, #1
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_InitTick+0xa4>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_InitTick+0xa8>)
 800157c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_InitTick+0xa4>)
 8001580:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001584:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001586:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <HAL_InitTick+0xa4>)
 8001588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <HAL_InitTick+0xa4>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_InitTick+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <HAL_InitTick+0xa4>)
 800159a:	f005 fa69 	bl	8006a70 <HAL_TIM_Base_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d104      	bne.n	80015ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015a4:	4806      	ldr	r0, [pc, #24]	; (80015c0 <HAL_InitTick+0xa4>)
 80015a6:	f005 fabb 	bl	8006b20 <HAL_TIM_Base_Start_IT>
 80015aa:	4603      	mov	r3, r0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3730      	adds	r7, #48	; 0x30
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	431bde83 	.word	0x431bde83
 80015c0:	20001c88 	.word	0x20001c88
 80015c4:	40001000 	.word	0x40001000

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80015f8:	f002 fbb4 	bl	8003d64 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <DMA1_Channel1_IRQHandler+0x10>)
 8001606:	f002 f825 	bl	8003654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000224 	.word	0x20000224

08001614 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <CAN1_TX_IRQHandler+0x10>)
 800161a:	f001 fc61 	bl	8002ee0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000284 	.word	0x20000284

08001628 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <TIM3_IRQHandler+0x10>)
 800162e:	f005 fae7 	bl	8006c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000344 	.word	0x20000344

0800163c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <TIM6_DAC_IRQHandler+0x10>)
 8001642:	f005 fadd 	bl	8006c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20001c88 	.word	0x20001c88

08001650 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <SystemInit+0x20>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <SystemInit+0x20>)
 800165c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001678:	f7ff ffea 	bl	8001650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800167e:	490d      	ldr	r1, [pc, #52]	; (80016b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <LoopForever+0xe>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001694:	4c0a      	ldr	r4, [pc, #40]	; (80016c0 <LoopForever+0x16>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a2:	f008 fa41 	bl	8009b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016a6:	f7ff f9ef 	bl	8000a88 <main>

080016aa <LoopForever>:

LoopForever:
    b LoopForever
 80016aa:	e7fe      	b.n	80016aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80016b8:	08009da8 	.word	0x08009da8
  ldr r2, =_sbss
 80016bc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80016c0:	20001d18 	.word	0x20001d18

080016c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_2_IRQHandler>

080016c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f001 fee2 	bl	800349a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d6:	200f      	movs	r0, #15
 80016d8:	f7ff ff20 	bl	800151c <HAL_InitTick>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	e001      	b.n	80016ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016e8:	f7ff fd5e 	bl	80011a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000178 	.word	0x20000178
 800171c:	20001cd4 	.word	0x20001cd4

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20001cd4 	.word	0x20001cd4

08001738 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	609a      	str	r2, [r3, #8]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3360      	adds	r3, #96	; 0x60
 80017b2:	461a      	mov	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <LL_ADC_SetOffset+0x44>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	4313      	orrs	r3, r2
 80017d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017d8:	bf00      	nop
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	03fff000 	.word	0x03fff000

080017e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3360      	adds	r3, #96	; 0x60
 80017f6:	461a      	mov	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3360      	adds	r3, #96	; 0x60
 8001824:	461a      	mov	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	431a      	orrs	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800183e:	bf00      	nop
 8001840:	371c      	adds	r7, #28
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	615a      	str	r2, [r3, #20]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3330      	adds	r3, #48	; 0x30
 8001880:	461a      	mov	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	211f      	movs	r1, #31
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	0e9b      	lsrs	r3, r3, #26
 80018a8:	f003 011f 	and.w	r1, r3, #31
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	431a      	orrs	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018bc:	bf00      	nop
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3314      	adds	r3, #20
 80018d8:	461a      	mov	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	0e5b      	lsrs	r3, r3, #25
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	4413      	add	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	0d1b      	lsrs	r3, r3, #20
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2107      	movs	r1, #7
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	401a      	ands	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	0d1b      	lsrs	r3, r3, #20
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001912:	bf00      	nop
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0318 	and.w	r3, r3, #24
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001944:	40d9      	lsrs	r1, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	400b      	ands	r3, r1
 800194a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194e:	431a      	orrs	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	0007ffff 	.word	0x0007ffff

08001968 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6093      	str	r3, [r2, #8]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800199c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019a0:	d101      	bne.n	80019a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <LL_ADC_IsEnabled+0x18>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <LL_ADC_IsEnabled+0x1a>
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d101      	bne.n	8001a42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d101      	bne.n	8001a68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e134      	b.n	8001cfc <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fbb1 	bl	8001208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff67 	bl	800198c <LL_ADC_IsDeepPowerDownEnabled>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff4d 	bl	8001968 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff82 	bl	80019dc <LL_ADC_IsInternalRegulatorEnabled>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d115      	bne.n	8001b0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff66 	bl	80019b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ae8:	4b86      	ldr	r3, [pc, #536]	; (8001d04 <HAL_ADC_Init+0x28c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	4a86      	ldr	r2, [pc, #536]	; (8001d08 <HAL_ADC_Init+0x290>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	099b      	lsrs	r3, r3, #6
 8001af6:	3301      	adds	r3, #1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001afc:	e002      	b.n	8001b04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f9      	bne.n	8001afe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff64 	bl	80019dc <LL_ADC_IsInternalRegulatorEnabled>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10d      	bne.n	8001b36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	f043 0210 	orr.w	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff75 	bl	8001a2a <LL_ADC_REG_IsConversionOngoing>
 8001b40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 80cd 	bne.w	8001cea <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 80c9 	bne.w	8001cea <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b60:	f043 0202 	orr.w	r2, r3, #2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff49 	bl	8001a04 <LL_ADC_IsEnabled>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d110      	bne.n	8001b9a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b78:	4864      	ldr	r0, [pc, #400]	; (8001d0c <HAL_ADC_Init+0x294>)
 8001b7a:	f7ff ff43 	bl	8001a04 <LL_ADC_IsEnabled>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4863      	ldr	r0, [pc, #396]	; (8001d10 <HAL_ADC_Init+0x298>)
 8001b82:	f7ff ff3f 	bl	8001a04 <LL_ADC_IsEnabled>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4323      	orrs	r3, r4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4619      	mov	r1, r3
 8001b94:	485f      	ldr	r0, [pc, #380]	; (8001d14 <HAL_ADC_Init+0x29c>)
 8001b96:	f7ff fdcf 	bl	8001738 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7e5b      	ldrb	r3, [r3, #25]
 8001b9e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ba4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001baa:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001bb0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	045b      	lsls	r3, r3, #17
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_ADC_Init+0x2a0>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	69b9      	ldr	r1, [r7, #24]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff0d 	bl	8001a2a <LL_ADC_REG_IsConversionOngoing>
 8001c10:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff1a 	bl	8001a50 <LL_ADC_INJ_IsConversionOngoing>
 8001c1c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d140      	bne.n	8001ca6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d13d      	bne.n	8001ca6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7e1b      	ldrb	r3, [r3, #24]
 8001c32:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c34:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c3c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c4c:	f023 0306 	bic.w	r3, r3, #6
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	69b9      	ldr	r1, [r7, #24]
 8001c56:	430b      	orrs	r3, r1
 8001c58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d118      	bne.n	8001c96 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c6e:	f023 0304 	bic.w	r3, r3, #4
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c80:	4311      	orrs	r1, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c86:	430a      	orrs	r2, r1
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	e007      	b.n	8001ca6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d10c      	bne.n	8001cc8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	f023 010f 	bic.w	r1, r3, #15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	1e5a      	subs	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc6:	e007      	b.n	8001cd8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 020f 	bic.w	r2, r2, #15
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f023 0303 	bic.w	r3, r3, #3
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ce8:	e007      	b.n	8001cfa <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f043 0210 	orr.w	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3724      	adds	r7, #36	; 0x24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}
 8001d04:	20000170 	.word	0x20000170
 8001d08:	053e2d63 	.word	0x053e2d63
 8001d0c:	50040000 	.word	0x50040000
 8001d10:	50040100 	.word	0x50040100
 8001d14:	50040300 	.word	0x50040300
 8001d18:	fff0c007 	.word	0xfff0c007

08001d1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0b6      	sub	sp, #216	; 0xd8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x22>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e3d5      	b.n	80024ea <HAL_ADC_ConfigChannel+0x7ce>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fe6d 	bl	8001a2a <LL_ADC_REG_IsConversionOngoing>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 83ba 	bne.w	80024cc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d824      	bhi.n	8001daa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	3b02      	subs	r3, #2
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d81b      	bhi.n	8001da2 <HAL_ADC_ConfigChannel+0x86>
 8001d6a:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <HAL_ADC_ConfigChannel+0x54>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08001d81 	.word	0x08001d81
 8001d74:	08001d89 	.word	0x08001d89
 8001d78:	08001d91 	.word	0x08001d91
 8001d7c:	08001d99 	.word	0x08001d99
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	220c      	movs	r2, #12
 8001d84:	605a      	str	r2, [r3, #4]
          break;
 8001d86:	e011      	b.n	8001dac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2212      	movs	r2, #18
 8001d8c:	605a      	str	r2, [r3, #4]
          break;
 8001d8e:	e00d      	b.n	8001dac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2218      	movs	r2, #24
 8001d94:	605a      	str	r2, [r3, #4]
          break;
 8001d96:	e009      	b.n	8001dac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9e:	605a      	str	r2, [r3, #4]
          break;
 8001da0:	e004      	b.n	8001dac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2206      	movs	r2, #6
 8001da6:	605a      	str	r2, [r3, #4]
          break;
 8001da8:	e000      	b.n	8001dac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001daa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	f7ff fd59 	bl	8001870 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fe31 	bl	8001a2a <LL_ADC_REG_IsConversionOngoing>
 8001dc8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fe3d 	bl	8001a50 <LL_ADC_INJ_IsConversionOngoing>
 8001dd6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 81c1 	bne.w	8002166 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001de4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f040 81bc 	bne.w	8002166 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001df6:	d10f      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2200      	movs	r2, #0
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7ff fd60 	bl	80018c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fd1a 	bl	800184a <LL_ADC_SetSamplingTimeCommonConfig>
 8001e16:	e00e      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	461a      	mov	r2, r3
 8001e26:	f7ff fd4f 	bl	80018c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fd0a 	bl	800184a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d00a      	beq.n	8001e6e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6919      	ldr	r1, [r3, #16]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e68:	f7ff fc9a 	bl	80017a0 <LL_ADC_SetOffset>
 8001e6c:	e17b      	b.n	8002166 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fcb7 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x17e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fcac 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	e01e      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x1bc>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fca1 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	e004      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001ecc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x1d4>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	e018      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x206>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001f14:	2320      	movs	r3, #32
 8001f16:	e004      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001f18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d106      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fc70 	bl	8001814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fc54 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x244>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2101      	movs	r1, #1
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fc49 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 021f 	and.w	r2, r3, #31
 8001f5e:	e01e      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x282>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fc3e 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e004      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x29a>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	e018      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x2cc>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e004      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001fde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d106      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fc0d 	bl	8001814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2102      	movs	r1, #2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fbf1 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10a      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x30a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2102      	movs	r1, #2
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fbe6 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	e01e      	b.n	8002064 <HAL_ADC_ConfigChannel+0x348>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2102      	movs	r1, #2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fbdb 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002044:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002048:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800204c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002054:	2320      	movs	r3, #32
 8002056:	e004      	b.n	8002062 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002058:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_ADC_ConfigChannel+0x360>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	e016      	b.n	80020aa <HAL_ADC_ConfigChannel+0x38e>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800208e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800209c:	2320      	movs	r3, #32
 800209e:	e004      	b.n	80020aa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80020a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d106      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	2102      	movs	r1, #2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fbac 	bl	8001814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2103      	movs	r1, #3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fb90 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10a      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x3cc>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2103      	movs	r1, #3
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fb85 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	0e9b      	lsrs	r3, r3, #26
 80020e2:	f003 021f 	and.w	r2, r3, #31
 80020e6:	e017      	b.n	8002118 <HAL_ADC_ConfigChannel+0x3fc>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2103      	movs	r1, #3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fb7a 	bl	80017e8 <LL_ADC_GetOffsetChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002102:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800210a:	2320      	movs	r3, #32
 800210c:	e003      	b.n	8002116 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800210e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x414>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0e9b      	lsrs	r3, r3, #26
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	e011      	b.n	8002154 <HAL_ADC_ConfigChannel+0x438>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800213e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002140:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002148:	2320      	movs	r3, #32
 800214a:	e003      	b.n	8002154 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800214c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002154:	429a      	cmp	r2, r3
 8002156:	d106      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2200      	movs	r2, #0
 800215e:	2103      	movs	r1, #3
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fb57 	bl	8001814 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fc4a 	bl	8001a04 <LL_ADC_IsEnabled>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	f040 8140 	bne.w	80023f8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	461a      	mov	r2, r3
 8002186:	f7ff fbcb 	bl	8001920 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	4a8f      	ldr	r2, [pc, #572]	; (80023cc <HAL_ADC_ConfigChannel+0x6b0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	f040 8131 	bne.w	80023f8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10b      	bne.n	80021be <HAL_ADC_ConfigChannel+0x4a2>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0e9b      	lsrs	r3, r3, #26
 80021ac:	3301      	adds	r3, #1
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	2b09      	cmp	r3, #9
 80021b4:	bf94      	ite	ls
 80021b6:	2301      	movls	r3, #1
 80021b8:	2300      	movhi	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	e019      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x4d6>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ce:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80021d6:	2320      	movs	r3, #32
 80021d8:	e003      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80021da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	bf94      	ite	ls
 80021ec:	2301      	movls	r3, #1
 80021ee:	2300      	movhi	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d079      	beq.n	80022ea <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d107      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x4f6>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0e9b      	lsrs	r3, r3, #26
 8002208:	3301      	adds	r3, #1
 800220a:	069b      	lsls	r3, r3, #26
 800220c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002210:	e015      	b.n	800223e <HAL_ADC_ConfigChannel+0x522>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002222:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e003      	b.n	8002236 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800222e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	3301      	adds	r3, #1
 8002238:	069b      	lsls	r3, r3, #26
 800223a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_ADC_ConfigChannel+0x542>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	3301      	adds	r3, #1
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	e017      	b.n	800228e <HAL_ADC_ConfigChannel+0x572>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800226c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e003      	b.n	8002282 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800227a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	ea42 0103 	orr.w	r1, r2, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10a      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x598>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	0e9b      	lsrs	r3, r3, #26
 80022a4:	3301      	adds	r3, #1
 80022a6:	f003 021f 	and.w	r2, r3, #31
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	051b      	lsls	r3, r3, #20
 80022b2:	e018      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x5ca>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e003      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80022d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 021f 	and.w	r2, r3, #31
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e6:	430b      	orrs	r3, r1
 80022e8:	e081      	b.n	80023ee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x5ea>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0e9b      	lsrs	r3, r3, #26
 80022fc:	3301      	adds	r3, #1
 80022fe:	069b      	lsls	r3, r3, #26
 8002300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002304:	e015      	b.n	8002332 <HAL_ADC_ConfigChannel+0x616>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800231e:	2320      	movs	r3, #32
 8002320:	e003      	b.n	800232a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3301      	adds	r3, #1
 800232c:	069b      	lsls	r3, r3, #26
 800232e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x636>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	3301      	adds	r3, #1
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	e017      	b.n	8002382 <HAL_ADC_ConfigChannel+0x666>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	61fb      	str	r3, [r7, #28]
  return result;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800236a:	2320      	movs	r3, #32
 800236c:	e003      	b.n	8002376 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	ea42 0103 	orr.w	r1, r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10d      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x692>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	3301      	adds	r3, #1
 800239a:	f003 021f 	and.w	r2, r3, #31
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	3b1e      	subs	r3, #30
 80023a6:	051b      	lsls	r3, r3, #20
 80023a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ac:	e01e      	b.n	80023ec <HAL_ADC_ConfigChannel+0x6d0>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	613b      	str	r3, [r7, #16]
  return result;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d104      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80023c6:	2320      	movs	r3, #32
 80023c8:	e006      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x6bc>
 80023ca:	bf00      	nop
 80023cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	f003 021f 	and.w	r2, r3, #31
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	3b1e      	subs	r3, #30
 80023e6:	051b      	lsls	r3, r3, #20
 80023e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ec:	430b      	orrs	r3, r1
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	6892      	ldr	r2, [r2, #8]
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7ff fa68 	bl	80018c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_ADC_ConfigChannel+0x7d8>)
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d06c      	beq.n	80024de <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002404:	483c      	ldr	r0, [pc, #240]	; (80024f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002406:	f7ff f9bd 	bl	8001784 <LL_ADC_GetCommonPathInternalCh>
 800240a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3a      	ldr	r2, [pc, #232]	; (80024fc <HAL_ADC_ConfigChannel+0x7e0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d127      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800241c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d121      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a35      	ldr	r2, [pc, #212]	; (8002500 <HAL_ADC_ConfigChannel+0x7e4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d157      	bne.n	80024de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800242e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002432:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002436:	4619      	mov	r1, r3
 8002438:	482f      	ldr	r0, [pc, #188]	; (80024f8 <HAL_ADC_ConfigChannel+0x7dc>)
 800243a:	f7ff f990 	bl	800175e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_ADC_ConfigChannel+0x7e8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	4a30      	ldr	r2, [pc, #192]	; (8002508 <HAL_ADC_ConfigChannel+0x7ec>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002458:	e002      	b.n	8002460 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3b01      	subs	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002466:	e03a      	b.n	80024de <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_ADC_ConfigChannel+0x7f0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d113      	bne.n	800249a <HAL_ADC_ConfigChannel+0x77e>
 8002472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <HAL_ADC_ConfigChannel+0x7e4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d12a      	bne.n	80024de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002490:	4619      	mov	r1, r3
 8002492:	4819      	ldr	r0, [pc, #100]	; (80024f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002494:	f7ff f963 	bl	800175e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002498:	e021      	b.n	80024de <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_ADC_ConfigChannel+0x7f4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d11c      	bne.n	80024de <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d116      	bne.n	80024de <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_ADC_ConfigChannel+0x7e4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d111      	bne.n	80024de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024c2:	4619      	mov	r1, r3
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <HAL_ADC_ConfigChannel+0x7dc>)
 80024c6:	f7ff f94a 	bl	800175e <LL_ADC_SetCommonPathInternalCh>
 80024ca:	e008      	b.n	80024de <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80024e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	37d8      	adds	r7, #216	; 0xd8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	80080000 	.word	0x80080000
 80024f8:	50040300 	.word	0x50040300
 80024fc:	c7520000 	.word	0xc7520000
 8002500:	50040000 	.word	0x50040000
 8002504:	20000170 	.word	0x20000170
 8002508:	053e2d63 	.word	0x053e2d63
 800250c:	cb840000 	.word	0xcb840000
 8002510:	80000001 	.word	0x80000001

08002514 <LL_ADC_IsEnabled>:
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <LL_ADC_IsEnabled+0x18>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <LL_ADC_IsEnabled+0x1a>
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <LL_ADC_REG_IsConversionOngoing>:
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b04      	cmp	r3, #4
 800254c:	d101      	bne.n	8002552 <LL_ADC_REG_IsConversionOngoing+0x18>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b0a1      	sub	sp, #132	; 0x84
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800257a:	2302      	movs	r3, #2
 800257c:	e089      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002586:	2300      	movs	r3, #0
 8002588:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800258a:	2300      	movs	r3, #0
 800258c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a42      	ldr	r2, [pc, #264]	; (800269c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d102      	bne.n	800259e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002598:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e001      	b.n	80025a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e068      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ffb9 	bl	800253a <LL_ADC_REG_IsConversionOngoing>
 80025c8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ffb3 	bl	800253a <LL_ADC_REG_IsConversionOngoing>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d14a      	bne.n	8002670 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d147      	bne.n	8002670 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025e0:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80025e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d027      	beq.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fe:	035b      	lsls	r3, r3, #13
 8002600:	430b      	orrs	r3, r1
 8002602:	431a      	orrs	r2, r3
 8002604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002606:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002608:	4824      	ldr	r0, [pc, #144]	; (800269c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800260a:	f7ff ff83 	bl	8002514 <LL_ADC_IsEnabled>
 800260e:	4604      	mov	r4, r0
 8002610:	4823      	ldr	r0, [pc, #140]	; (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002612:	f7ff ff7f 	bl	8002514 <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	4323      	orrs	r3, r4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d132      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800261e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002626:	f023 030f 	bic.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	6811      	ldr	r1, [r2, #0]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	6892      	ldr	r2, [r2, #8]
 8002632:	430a      	orrs	r2, r1
 8002634:	431a      	orrs	r2, r3
 8002636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002638:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800263a:	e023      	b.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800263c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002646:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002648:	4814      	ldr	r0, [pc, #80]	; (800269c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800264a:	f7ff ff63 	bl	8002514 <LL_ADC_IsEnabled>
 800264e:	4604      	mov	r4, r0
 8002650:	4813      	ldr	r0, [pc, #76]	; (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002652:	f7ff ff5f 	bl	8002514 <LL_ADC_IsEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	4323      	orrs	r3, r4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d112      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800265e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002666:	f023 030f 	bic.w	r3, r3, #15
 800266a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800266c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800266e:	e009      	b.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f043 0220 	orr.w	r2, r3, #32
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002682:	e000      	b.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002684:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800268e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002692:	4618      	mov	r0, r3
 8002694:	3784      	adds	r7, #132	; 0x84
 8002696:	46bd      	mov	sp, r7
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	bf00      	nop
 800269c:	50040000 	.word	0x50040000
 80026a0:	50040100 	.word	0x50040100
 80026a4:	50040300 	.word	0x50040300

080026a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0ed      	b.n	8002896 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fe fe36 	bl	8001338 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026dc:	f7ff f820 	bl	8001720 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026e2:	e012      	b.n	800270a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026e4:	f7ff f81c 	bl	8001720 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b0a      	cmp	r3, #10
 80026f0:	d90b      	bls.n	800270a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2205      	movs	r2, #5
 8002702:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0c5      	b.n	8002896 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0e5      	beq.n	80026e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0202 	bic.w	r2, r2, #2
 8002726:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002728:	f7fe fffa 	bl	8001720 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800272e:	e012      	b.n	8002756 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002730:	f7fe fff6 	bl	8001720 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b0a      	cmp	r3, #10
 800273c:	d90b      	bls.n	8002756 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2205      	movs	r2, #5
 800274e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e09f      	b.n	8002896 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e5      	bne.n	8002730 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7e1b      	ldrb	r3, [r3, #24]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d108      	bne.n	800277e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e007      	b.n	800278e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7e5b      	ldrb	r3, [r3, #25]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d108      	bne.n	80027a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e007      	b.n	80027b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7e9b      	ldrb	r3, [r3, #26]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d108      	bne.n	80027d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0220 	orr.w	r2, r2, #32
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	e007      	b.n	80027e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0220 	bic.w	r2, r2, #32
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7edb      	ldrb	r3, [r3, #27]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d108      	bne.n	80027fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0210 	bic.w	r2, r2, #16
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e007      	b.n	800280c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0210 	orr.w	r2, r2, #16
 800280a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7f1b      	ldrb	r3, [r3, #28]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d108      	bne.n	8002826 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0208 	orr.w	r2, r2, #8
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e007      	b.n	8002836 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0208 	bic.w	r2, r2, #8
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7f5b      	ldrb	r3, [r3, #29]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0204 	orr.w	r2, r2, #4
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e007      	b.n	8002860 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0204 	bic.w	r2, r2, #4
 800285e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	ea42 0103 	orr.w	r1, r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800289e:	b480      	push	{r7}
 80028a0:	b087      	sub	sp, #28
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d003      	beq.n	80028c4 <HAL_CAN_ConfigFilter+0x26>
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	f040 80aa 	bne.w	8002a18 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ca:	f043 0201 	orr.w	r2, r3, #1
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2201      	movs	r2, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	401a      	ands	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d123      	bne.n	8002946 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43db      	mvns	r3, r3
 8002908:	401a      	ands	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002920:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	3248      	adds	r2, #72	; 0x48
 8002926:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800293a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800293c:	6979      	ldr	r1, [r7, #20]
 800293e:	3348      	adds	r3, #72	; 0x48
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d122      	bne.n	8002994 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	431a      	orrs	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800296e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3248      	adds	r2, #72	; 0x48
 8002974:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002988:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800298a:	6979      	ldr	r1, [r7, #20]
 800298c:	3348      	adds	r3, #72	; 0x48
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029ae:	e007      	b.n	80029c0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80029da:	e007      	b.n	80029ec <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d107      	bne.n	8002a04 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e006      	b.n	8002a26 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d12e      	bne.n	8002aa4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a5e:	f7fe fe5f 	bl	8001720 <HAL_GetTick>
 8002a62:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a64:	e012      	b.n	8002a8c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a66:	f7fe fe5b 	bl	8001720 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b0a      	cmp	r3, #10
 8002a72:	d90b      	bls.n	8002a8c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2205      	movs	r2, #5
 8002a84:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e012      	b.n	8002ab2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e5      	bne.n	8002a66 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e006      	b.n	8002ab2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b089      	sub	sp, #36	; 0x24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ace:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ad8:	7ffb      	ldrb	r3, [r7, #31]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d003      	beq.n	8002ae6 <HAL_CAN_AddTxMessage+0x2c>
 8002ade:	7ffb      	ldrb	r3, [r7, #31]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	f040 80b8 	bne.w	8002c56 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80a0 	beq.w	8002c46 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	0e1b      	lsrs	r3, r3, #24
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d907      	bls.n	8002b26 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e09e      	b.n	8002c64 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b26:	2201      	movs	r2, #1
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10d      	bne.n	8002b54 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b42:	68f9      	ldr	r1, [r7, #12]
 8002b44:	6809      	ldr	r1, [r1, #0]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3318      	adds	r3, #24
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	440b      	add	r3, r1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e00f      	b.n	8002b74 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b5e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b64:	68f9      	ldr	r1, [r7, #12]
 8002b66:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b68:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3318      	adds	r3, #24
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	440b      	add	r3, r1
 8002b72:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	3318      	adds	r3, #24
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	440b      	add	r3, r1
 8002b84:	3304      	adds	r3, #4
 8002b86:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	7d1b      	ldrb	r3, [r3, #20]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d111      	bne.n	8002bb4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3318      	adds	r3, #24
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	6811      	ldr	r1, [r2, #0]
 8002ba4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	3318      	adds	r3, #24
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	440b      	add	r3, r1
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3307      	adds	r3, #7
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	061a      	lsls	r2, r3, #24
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3306      	adds	r3, #6
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3305      	adds	r3, #5
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	3204      	adds	r2, #4
 8002bd4:	7812      	ldrb	r2, [r2, #0]
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	6811      	ldr	r1, [r2, #0]
 8002bdc:	ea43 0200 	orr.w	r2, r3, r0
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	440b      	add	r3, r1
 8002be6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002bea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3303      	adds	r3, #3
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	061a      	lsls	r2, r3, #24
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3301      	adds	r3, #1
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	4313      	orrs	r3, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	7812      	ldrb	r2, [r2, #0]
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	6811      	ldr	r1, [r2, #0]
 8002c12:	ea43 0200 	orr.w	r2, r3, r0
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3318      	adds	r3, #24
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	4413      	add	r3, r2
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	6811      	ldr	r1, [r2, #0]
 8002c34:	f043 0201 	orr.w	r2, r3, #1
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	3318      	adds	r3, #24
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	440b      	add	r3, r1
 8002c40:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e00e      	b.n	8002c64 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e006      	b.n	8002c64 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3724      	adds	r7, #36	; 0x24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c84:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d003      	beq.n	8002c94 <HAL_CAN_GetRxMessage+0x24>
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	f040 80f3 	bne.w	8002e7a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10e      	bne.n	8002cb8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d116      	bne.n	8002cd6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0e7      	b.n	8002e88 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d107      	bne.n	8002cd6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e0d8      	b.n	8002e88 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	331b      	adds	r3, #27
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	4413      	add	r3, r2
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0204 	and.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10c      	bne.n	8002d0e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	331b      	adds	r3, #27
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	4413      	add	r3, r2
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0d5b      	lsrs	r3, r3, #21
 8002d04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e00b      	b.n	8002d26 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	331b      	adds	r3, #27
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	4413      	add	r3, r2
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	331b      	adds	r3, #27
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	4413      	add	r3, r2
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0202 	and.w	r2, r3, #2
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	331b      	adds	r3, #27
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 020f 	and.w	r2, r3, #15
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	331b      	adds	r3, #27
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	4413      	add	r3, r2
 8002d60:	3304      	adds	r3, #4
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	331b      	adds	r3, #27
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	4413      	add	r3, r2
 8002d78:	3304      	adds	r3, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	0a1a      	lsrs	r2, r3, #8
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0c1a      	lsrs	r2, r3, #16
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	3302      	adds	r3, #2
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	0e1a      	lsrs	r2, r3, #24
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	3303      	adds	r3, #3
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0a1a      	lsrs	r2, r3, #8
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	3305      	adds	r3, #5
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0c1a      	lsrs	r2, r3, #16
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	3306      	adds	r3, #6
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0e1a      	lsrs	r2, r3, #24
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3307      	adds	r3, #7
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0220 	orr.w	r2, r2, #32
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	e007      	b.n	8002e76 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0220 	orr.w	r2, r2, #32
 8002e74:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e006      	b.n	8002e88 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d002      	beq.n	8002eb2 <HAL_CAN_ActivateNotification+0x1e>
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d109      	bne.n	8002ec6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6959      	ldr	r1, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e006      	b.n	8002ed4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d07c      	beq.n	8003020 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d023      	beq.n	8002f78 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2201      	movs	r2, #1
 8002f36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f983 	bl	800324e <HAL_CAN_TxMailbox0CompleteCallback>
 8002f48:	e016      	b.n	8002f78 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5c:	e00c      	b.n	8002f78 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f70:	e002      	b.n	8002f78 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f989 	bl	800328a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d024      	beq.n	8002fcc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f963 	bl	8003262 <HAL_CAN_TxMailbox1CompleteCallback>
 8002f9c:	e016      	b.n	8002fcc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	e00c      	b.n	8002fcc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	e002      	b.n	8002fcc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f969 	bl	800329e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d024      	beq.n	8003020 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f943 	bl	8003276 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ff0:	e016      	b.n	8003020 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d004      	beq.n	8003006 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	e00c      	b.n	8003020 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
 8003018:	e002      	b.n	8003020 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f949 	bl	80032b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2210      	movs	r2, #16
 8003042:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2208      	movs	r2, #8
 800305e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f930 	bl	80032c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d009      	beq.n	8003084 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd f9d8 	bl	8000434 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2210      	movs	r2, #16
 80030a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2208      	movs	r2, #8
 80030c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f912 	bl	80032ee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f8f9 	bl	80032da <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2210      	movs	r2, #16
 8003102:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f8fc 	bl	8003302 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2208      	movs	r2, #8
 8003124:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f8f5 	bl	8003316 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d07b      	beq.n	800322e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d072      	beq.n	8003226 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	f043 0302 	orr.w	r3, r3, #2
 8003176:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319a:	2b00      	cmp	r3, #0
 800319c:	d043      	beq.n	8003226 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d03e      	beq.n	8003226 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ae:	2b60      	cmp	r3, #96	; 0x60
 80031b0:	d02b      	beq.n	800320a <HAL_CAN_IRQHandler+0x32a>
 80031b2:	2b60      	cmp	r3, #96	; 0x60
 80031b4:	d82e      	bhi.n	8003214 <HAL_CAN_IRQHandler+0x334>
 80031b6:	2b50      	cmp	r3, #80	; 0x50
 80031b8:	d022      	beq.n	8003200 <HAL_CAN_IRQHandler+0x320>
 80031ba:	2b50      	cmp	r3, #80	; 0x50
 80031bc:	d82a      	bhi.n	8003214 <HAL_CAN_IRQHandler+0x334>
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d019      	beq.n	80031f6 <HAL_CAN_IRQHandler+0x316>
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d826      	bhi.n	8003214 <HAL_CAN_IRQHandler+0x334>
 80031c6:	2b30      	cmp	r3, #48	; 0x30
 80031c8:	d010      	beq.n	80031ec <HAL_CAN_IRQHandler+0x30c>
 80031ca:	2b30      	cmp	r3, #48	; 0x30
 80031cc:	d822      	bhi.n	8003214 <HAL_CAN_IRQHandler+0x334>
 80031ce:	2b10      	cmp	r3, #16
 80031d0:	d002      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x2f8>
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d005      	beq.n	80031e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031d6:	e01d      	b.n	8003214 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	f043 0308 	orr.w	r3, r3, #8
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031e0:	e019      	b.n	8003216 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	f043 0310 	orr.w	r3, r3, #16
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ea:	e014      	b.n	8003216 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f043 0320 	orr.w	r3, r3, #32
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f4:	e00f      	b.n	8003216 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031fe:	e00a      	b.n	8003216 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003208:	e005      	b.n	8003216 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003212:	e000      	b.n	8003216 <HAL_CAN_IRQHandler+0x336>
            break;
 8003214:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003224:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2204      	movs	r2, #4
 800322c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f872 	bl	800332a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003246:	bf00      	nop
 8003248:	3728      	adds	r7, #40	; 0x28
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0b      	blt.n	80033ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4907      	ldr	r1, [pc, #28]	; (80033dc <__NVIC_EnableIRQ+0x38>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db0a      	blt.n	800340a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	490c      	ldr	r1, [pc, #48]	; (800342c <__NVIC_SetPriority+0x4c>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	440b      	add	r3, r1
 8003404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003408:	e00a      	b.n	8003420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <__NVIC_SetPriority+0x50>)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3b04      	subs	r3, #4
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	440b      	add	r3, r1
 800341e:	761a      	strb	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000e100 	.word	0xe000e100
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf28      	it	cs
 8003452:	2304      	movcs	r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3304      	adds	r3, #4
 800345a:	2b06      	cmp	r3, #6
 800345c:	d902      	bls.n	8003464 <NVIC_EncodePriority+0x30>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3b03      	subs	r3, #3
 8003462:	e000      	b.n	8003466 <NVIC_EncodePriority+0x32>
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800347c:	f04f 31ff 	mov.w	r1, #4294967295
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43d9      	mvns	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	4313      	orrs	r3, r2
         );
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ff4c 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c2:	f7ff ff61 	bl	8003388 <__NVIC_GetPriorityGrouping>
 80034c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	6978      	ldr	r0, [r7, #20]
 80034ce:	f7ff ffb1 	bl	8003434 <NVIC_EncodePriority>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff80 	bl	80033e0 <__NVIC_SetPriority>
}
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff54 	bl	80033a4 <__NVIC_EnableIRQ>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e08d      	b.n	8003632 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	4b47      	ldr	r3, [pc, #284]	; (800363c <HAL_DMA_Init+0x138>)
 800351e:	429a      	cmp	r2, r3
 8003520:	d80f      	bhi.n	8003542 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	4b45      	ldr	r3, [pc, #276]	; (8003640 <HAL_DMA_Init+0x13c>)
 800352a:	4413      	add	r3, r2
 800352c:	4a45      	ldr	r2, [pc, #276]	; (8003644 <HAL_DMA_Init+0x140>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	009a      	lsls	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a42      	ldr	r2, [pc, #264]	; (8003648 <HAL_DMA_Init+0x144>)
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
 8003540:	e00e      	b.n	8003560 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	4b40      	ldr	r3, [pc, #256]	; (800364c <HAL_DMA_Init+0x148>)
 800354a:	4413      	add	r3, r2
 800354c:	4a3d      	ldr	r2, [pc, #244]	; (8003644 <HAL_DMA_Init+0x140>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	009a      	lsls	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a3c      	ldr	r2, [pc, #240]	; (8003650 <HAL_DMA_Init+0x14c>)
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f8fe 	bl	80037b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c0:	d102      	bne.n	80035c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035dc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d010      	beq.n	8003608 <HAL_DMA_Init+0x104>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d80c      	bhi.n	8003608 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f91e 	bl	8003830 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	e008      	b.n	800361a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40020407 	.word	0x40020407
 8003640:	bffdfff8 	.word	0xbffdfff8
 8003644:	cccccccd 	.word	0xcccccccd
 8003648:	40020000 	.word	0x40020000
 800364c:	bffdfbf8 	.word	0xbffdfbf8
 8003650:	40020400 	.word	0x40020400

08003654 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f003 031c 	and.w	r3, r3, #28
 8003674:	2204      	movs	r2, #4
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d026      	beq.n	80036ce <HAL_DMA_IRQHandler+0x7a>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d021      	beq.n	80036ce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d107      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0204 	bic.w	r2, r2, #4
 80036a6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	f003 021c 	and.w	r2, r3, #28
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2104      	movs	r1, #4
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d071      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80036cc:	e06c      	b.n	80037a8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f003 031c 	and.w	r3, r3, #28
 80036d6:	2202      	movs	r2, #2
 80036d8:	409a      	lsls	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02e      	beq.n	8003740 <HAL_DMA_IRQHandler+0xec>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d029      	beq.n	8003740 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 020a 	bic.w	r2, r2, #10
 8003708:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f003 021c 	and.w	r2, r3, #28
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	2102      	movs	r1, #2
 8003720:	fa01 f202 	lsl.w	r2, r1, r2
 8003724:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d038      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800373e:	e033      	b.n	80037a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f003 031c 	and.w	r3, r3, #28
 8003748:	2208      	movs	r2, #8
 800374a:	409a      	lsls	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d02a      	beq.n	80037aa <HAL_DMA_IRQHandler+0x156>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d025      	beq.n	80037aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 020e 	bic.w	r2, r2, #14
 800376c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f003 021c 	and.w	r2, r3, #28
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2101      	movs	r1, #1
 800377c:	fa01 f202 	lsl.w	r2, r1, r2
 8003780:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
}
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d80a      	bhi.n	80037de <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037d4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6493      	str	r3, [r2, #72]	; 0x48
 80037dc:	e007      	b.n	80037ee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	009a      	lsls	r2, r3, #2
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80037e8:	4413      	add	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	3b08      	subs	r3, #8
 80037f6:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a0a      	ldr	r2, [pc, #40]	; (800382c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003804:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	2201      	movs	r2, #1
 800380e:	409a      	lsls	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	40020407 	.word	0x40020407
 8003824:	4002081c 	.word	0x4002081c
 8003828:	cccccccd 	.word	0xcccccccd
 800382c:	40020880 	.word	0x40020880

08003830 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	461a      	mov	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a08      	ldr	r2, [pc, #32]	; (8003874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003852:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3b01      	subs	r3, #1
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2201      	movs	r2, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	1000823f 	.word	0x1000823f
 8003874:	40020940 	.word	0x40020940

08003878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003886:	e166      	b.n	8003b56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8158 	beq.w	8003b50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d005      	beq.n	80038b8 <HAL_GPIO_Init+0x40>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d130      	bne.n	800391a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ee:	2201      	movs	r2, #1
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 0201 	and.w	r2, r3, #1
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b03      	cmp	r3, #3
 8003924:	d017      	beq.n	8003956 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d123      	bne.n	80039aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	220f      	movs	r2, #15
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3208      	adds	r2, #8
 80039a4:	6939      	ldr	r1, [r7, #16]
 80039a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	2203      	movs	r2, #3
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 0203 	and.w	r2, r3, #3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80b2 	beq.w	8003b50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ec:	4b61      	ldr	r3, [pc, #388]	; (8003b74 <HAL_GPIO_Init+0x2fc>)
 80039ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f0:	4a60      	ldr	r2, [pc, #384]	; (8003b74 <HAL_GPIO_Init+0x2fc>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6613      	str	r3, [r2, #96]	; 0x60
 80039f8:	4b5e      	ldr	r3, [pc, #376]	; (8003b74 <HAL_GPIO_Init+0x2fc>)
 80039fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a04:	4a5c      	ldr	r2, [pc, #368]	; (8003b78 <HAL_GPIO_Init+0x300>)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	220f      	movs	r2, #15
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a2e:	d02b      	beq.n	8003a88 <HAL_GPIO_Init+0x210>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_GPIO_Init+0x304>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d025      	beq.n	8003a84 <HAL_GPIO_Init+0x20c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a51      	ldr	r2, [pc, #324]	; (8003b80 <HAL_GPIO_Init+0x308>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d01f      	beq.n	8003a80 <HAL_GPIO_Init+0x208>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a50      	ldr	r2, [pc, #320]	; (8003b84 <HAL_GPIO_Init+0x30c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d019      	beq.n	8003a7c <HAL_GPIO_Init+0x204>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a4f      	ldr	r2, [pc, #316]	; (8003b88 <HAL_GPIO_Init+0x310>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_GPIO_Init+0x200>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a4e      	ldr	r2, [pc, #312]	; (8003b8c <HAL_GPIO_Init+0x314>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00d      	beq.n	8003a74 <HAL_GPIO_Init+0x1fc>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a4d      	ldr	r2, [pc, #308]	; (8003b90 <HAL_GPIO_Init+0x318>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d007      	beq.n	8003a70 <HAL_GPIO_Init+0x1f8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a4c      	ldr	r2, [pc, #304]	; (8003b94 <HAL_GPIO_Init+0x31c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <HAL_GPIO_Init+0x1f4>
 8003a68:	2307      	movs	r3, #7
 8003a6a:	e00e      	b.n	8003a8a <HAL_GPIO_Init+0x212>
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	e00c      	b.n	8003a8a <HAL_GPIO_Init+0x212>
 8003a70:	2306      	movs	r3, #6
 8003a72:	e00a      	b.n	8003a8a <HAL_GPIO_Init+0x212>
 8003a74:	2305      	movs	r3, #5
 8003a76:	e008      	b.n	8003a8a <HAL_GPIO_Init+0x212>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	e006      	b.n	8003a8a <HAL_GPIO_Init+0x212>
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e004      	b.n	8003a8a <HAL_GPIO_Init+0x212>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e002      	b.n	8003a8a <HAL_GPIO_Init+0x212>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <HAL_GPIO_Init+0x212>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	f002 0203 	and.w	r2, r2, #3
 8003a90:	0092      	lsls	r2, r2, #2
 8003a92:	4093      	lsls	r3, r2
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a9a:	4937      	ldr	r1, [pc, #220]	; (8003b78 <HAL_GPIO_Init+0x300>)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <HAL_GPIO_Init+0x320>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003acc:	4a32      	ldr	r2, [pc, #200]	; (8003b98 <HAL_GPIO_Init+0x320>)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ad2:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <HAL_GPIO_Init+0x320>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af6:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <HAL_GPIO_Init+0x320>)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003afc:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <HAL_GPIO_Init+0x320>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b20:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <HAL_GPIO_Init+0x320>)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <HAL_GPIO_Init+0x320>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_GPIO_Init+0x320>)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3301      	adds	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f47f ae91 	bne.w	8003888 <HAL_GPIO_Init+0x10>
  }
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	48000400 	.word	0x48000400
 8003b80:	48000800 	.word	0x48000800
 8003b84:	48000c00 	.word	0x48000c00
 8003b88:	48001000 	.word	0x48001000
 8003b8c:	48001400 	.word	0x48001400
 8003b90:	48001800 	.word	0x48001800
 8003b94:	48001c00 	.word	0x48001c00
 8003b98:	40010400 	.word	0x40010400

08003b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bac:	787b      	ldrb	r3, [r7, #1]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb8:	e002      	b.n	8003bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bec:	d102      	bne.n	8003bf4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bf2:	e00b      	b.n	8003c0c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c02:	d102      	bne.n	8003c0a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c08:	e000      	b.n	8003c0c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003c0a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40007000 	.word	0x40007000

08003c1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d141      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	d131      	bne.n	8003c9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c38:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3e:	4a46      	ldr	r2, [pc, #280]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c48:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c50:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c58:	4b40      	ldr	r3, [pc, #256]	; (8003d5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2232      	movs	r2, #50	; 0x32
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	4a3f      	ldr	r2, [pc, #252]	; (8003d60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	0c9b      	lsrs	r3, r3, #18
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c6e:	e002      	b.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c76:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c82:	d102      	bne.n	8003c8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f2      	bne.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c8a:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c96:	d158      	bne.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e057      	b.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c9c:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca2:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cac:	e04d      	b.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb4:	d141      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb6:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc2:	d131      	bne.n	8003d28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	4a23      	ldr	r2, [pc, #140]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd4:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cdc:	4a1e      	ldr	r2, [pc, #120]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2232      	movs	r2, #50	; 0x32
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	0c9b      	lsrs	r3, r3, #18
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfa:	e002      	b.n	8003d02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0e:	d102      	bne.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f2      	bne.n	8003cfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d112      	bne.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e011      	b.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d38:	e007      	b.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d42:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d48:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	20000170 	.word	0x20000170
 8003d60:	431bde83 	.word	0x431bde83

08003d64 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8003d68:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003d74:	f7ff ff2a 	bl	8003bcc <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003d7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d7e:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8003d80:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8003d8c:	f000 f828 	bl	8003de0 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8003d90:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003d92:	2208      	movs	r2, #8
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8003d96:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8003da2:	f000 f824 	bl	8003dee <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003da8:	2210      	movs	r2, #16
 8003daa:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8003db8:	f000 f820 	bl	8003dfc <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8003dbc:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8003dce:	f000 f81c 	bl	8003e0a <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8003dd2:	4b02      	ldr	r3, [pc, #8]	; (8003ddc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003dd4:	2240      	movs	r2, #64	; 0x40
 8003dd6:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40010400 	.word	0x40010400

08003de0 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f000 bc76 	b.w	8004718 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2c:	4ba1      	ldr	r3, [pc, #644]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e36:	4b9f      	ldr	r3, [pc, #636]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80e6 	beq.w	800401a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <HAL_RCC_OscConfig+0x4c>
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	2b0c      	cmp	r3, #12
 8003e58:	f040 808d 	bne.w	8003f76 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	f040 8089 	bne.w	8003f76 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e64:	4b93      	ldr	r3, [pc, #588]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d006      	beq.n	8003e7e <HAL_RCC_OscConfig+0x66>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f000 bc4d 	b.w	8004718 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e82:	4b8c      	ldr	r3, [pc, #560]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <HAL_RCC_OscConfig+0x80>
 8003e8e:	4b89      	ldr	r3, [pc, #548]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e96:	e005      	b.n	8003ea4 <HAL_RCC_OscConfig+0x8c>
 8003e98:	4b86      	ldr	r3, [pc, #536]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d224      	bcs.n	8003ef2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fe47 	bl	8004b40 <RCC_SetFlashLatencyFromMSIRange>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f000 bc2d 	b.w	8004718 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ebe:	4b7d      	ldr	r3, [pc, #500]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7c      	ldr	r2, [pc, #496]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b7a      	ldr	r3, [pc, #488]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	4977      	ldr	r1, [pc, #476]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003edc:	4b75      	ldr	r3, [pc, #468]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	4972      	ldr	r1, [pc, #456]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
 8003ef0:	e025      	b.n	8003f3e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ef2:	4b70      	ldr	r3, [pc, #448]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a6f      	ldr	r2, [pc, #444]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003ef8:	f043 0308 	orr.w	r3, r3, #8
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	4b6d      	ldr	r3, [pc, #436]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	496a      	ldr	r1, [pc, #424]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f10:	4b68      	ldr	r3, [pc, #416]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	4965      	ldr	r1, [pc, #404]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fe06 	bl	8004b40 <RCC_SetFlashLatencyFromMSIRange>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e3ec      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f3e:	f000 fd1f 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b5b      	ldr	r3, [pc, #364]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	495a      	ldr	r1, [pc, #360]	; (80040b8 <HAL_RCC_OscConfig+0x2a0>)
 8003f50:	5ccb      	ldrb	r3, [r1, r3]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_RCC_OscConfig+0x2a4>)
 8003f5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f5e:	4b58      	ldr	r3, [pc, #352]	; (80040c0 <HAL_RCC_OscConfig+0x2a8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fd fada 	bl	800151c <HAL_InitTick>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d052      	beq.n	8004018 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	e3d0      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d032      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f7e:	4b4d      	ldr	r3, [pc, #308]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a4c      	ldr	r2, [pc, #304]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f8a:	f7fd fbc9 	bl	8001720 <HAL_GetTick>
 8003f8e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f92:	f7fd fbc5 	bl	8001720 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e3b9      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa4:	4b43      	ldr	r3, [pc, #268]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fb0:	4b40      	ldr	r3, [pc, #256]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a3f      	ldr	r2, [pc, #252]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003fb6:	f043 0308 	orr.w	r3, r3, #8
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	4b3d      	ldr	r3, [pc, #244]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	493a      	ldr	r1, [pc, #232]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fce:	4b39      	ldr	r3, [pc, #228]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	4935      	ldr	r1, [pc, #212]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
 8003fe2:	e01a      	b.n	800401a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fe4:	4b33      	ldr	r3, [pc, #204]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a32      	ldr	r2, [pc, #200]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fb96 	bl	8001720 <HAL_GetTick>
 8003ff4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ff8:	f7fd fb92 	bl	8001720 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e386      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800400a:	4b2a      	ldr	r3, [pc, #168]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x1e0>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004018:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d073      	beq.n	800410e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d005      	beq.n	8004038 <HAL_RCC_OscConfig+0x220>
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d10e      	bne.n	8004050 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d10b      	bne.n	8004050 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	4b1e      	ldr	r3, [pc, #120]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d063      	beq.n	800410c <HAL_RCC_OscConfig+0x2f4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d15f      	bne.n	800410c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e363      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d106      	bne.n	8004068 <HAL_RCC_OscConfig+0x250>
 800405a:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e01d      	b.n	80040a4 <HAL_RCC_OscConfig+0x28c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0x274>
 8004072:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a0f      	ldr	r2, [pc, #60]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8004078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a0c      	ldr	r2, [pc, #48]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e00b      	b.n	80040a4 <HAL_RCC_OscConfig+0x28c>
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a08      	ldr	r2, [pc, #32]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 8004092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a05      	ldr	r2, [pc, #20]	; (80040b4 <HAL_RCC_OscConfig+0x29c>)
 800409e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01b      	beq.n	80040e4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd fb38 	bl	8001720 <HAL_GetTick>
 80040b0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b2:	e010      	b.n	80040d6 <HAL_RCC_OscConfig+0x2be>
 80040b4:	40021000 	.word	0x40021000
 80040b8:	08009d54 	.word	0x08009d54
 80040bc:	20000170 	.word	0x20000170
 80040c0:	20000174 	.word	0x20000174
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fd fb2c 	bl	8001720 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	; 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e320      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d6:	4ba0      	ldr	r3, [pc, #640]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x2ac>
 80040e2:	e014      	b.n	800410e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fd fb1c 	bl	8001720 <HAL_GetTick>
 80040e8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fd fb18 	bl	8001720 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	; 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e30c      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040fe:	4b96      	ldr	r3, [pc, #600]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x2d4>
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d060      	beq.n	80041dc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d005      	beq.n	800412c <HAL_RCC_OscConfig+0x314>
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d119      	bne.n	800415a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d116      	bne.n	800415a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800412c:	4b8a      	ldr	r3, [pc, #552]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x32c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e2e9      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b84      	ldr	r3, [pc, #528]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	4981      	ldr	r1, [pc, #516]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004158:	e040      	b.n	80041dc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d023      	beq.n	80041aa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004162:	4b7d      	ldr	r3, [pc, #500]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a7c      	ldr	r2, [pc, #496]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fd fad7 	bl	8001720 <HAL_GetTick>
 8004172:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004176:	f7fd fad3 	bl	8001720 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e2c7      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004188:	4b73      	ldr	r3, [pc, #460]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004194:	4b70      	ldr	r3, [pc, #448]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	496d      	ldr	r1, [pc, #436]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
 80041a8:	e018      	b.n	80041dc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041aa:	4b6b      	ldr	r3, [pc, #428]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6a      	ldr	r2, [pc, #424]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80041b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fd fab3 	bl	8001720 <HAL_GetTick>
 80041ba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041be:	f7fd faaf 	bl	8001720 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e2a3      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d0:	4b61      	ldr	r3, [pc, #388]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d07f      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d05f      	beq.n	80042b0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80041f0:	4b59      	ldr	r3, [pc, #356]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80041f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	429a      	cmp	r2, r3
 8004204:	d037      	beq.n	8004276 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d006      	beq.n	800421e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e27c      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01b      	beq.n	8004260 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8004228:	4b4b      	ldr	r3, [pc, #300]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 800422a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422e:	4a4a      	ldr	r2, [pc, #296]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004238:	f7fd fa72 	bl	8001720 <HAL_GetTick>
 800423c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004240:	f7fd fa6e 	bl	8001720 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b11      	cmp	r3, #17
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e262      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004252:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ef      	bne.n	8004240 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004260:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004266:	f023 0210 	bic.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	493a      	ldr	r1, [pc, #232]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004276:	4b38      	ldr	r3, [pc, #224]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427c:	4a36      	ldr	r2, [pc, #216]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fd fa4b 	bl	8001720 <HAL_GetTick>
 800428a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800428e:	f7fd fa47 	bl	8001720 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b11      	cmp	r3, #17
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e23b      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a0:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ef      	beq.n	800428e <HAL_RCC_OscConfig+0x476>
 80042ae:	e01b      	b.n	80042e8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b0:	4b29      	ldr	r3, [pc, #164]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80042b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b6:	4a28      	ldr	r2, [pc, #160]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fd fa2e 	bl	8001720 <HAL_GetTick>
 80042c4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c8:	f7fd fa2a 	bl	8001720 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b11      	cmp	r3, #17
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e21e      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042da:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80042dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ef      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80c1 	beq.w	8004478 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10e      	bne.n	8004326 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	4a12      	ldr	r2, [pc, #72]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004312:	6593      	str	r3, [r2, #88]	; 0x58
 8004314:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_RCC_OscConfig+0x540>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_RCC_OscConfig+0x544>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d11c      	bne.n	800436c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <HAL_RCC_OscConfig+0x544>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <HAL_RCC_OscConfig+0x544>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433e:	f7fd f9ef 	bl	8001720 <HAL_GetTick>
 8004342:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004344:	e00c      	b.n	8004360 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004346:	f7fd f9eb 	bl	8001720 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d905      	bls.n	8004360 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e1df      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
 8004358:	40021000 	.word	0x40021000
 800435c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004360:	4b99      	ldr	r3, [pc, #612]	; (80045c8 <HAL_RCC_OscConfig+0x7b0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ec      	beq.n	8004346 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02c      	beq.n	80043d2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004378:	4b94      	ldr	r3, [pc, #592]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	4990      	ldr	r1, [pc, #576]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d010      	beq.n	80043c0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800439e:	4b8b      	ldr	r3, [pc, #556]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	4a89      	ldr	r2, [pc, #548]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043ae:	4b87      	ldr	r3, [pc, #540]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	4a85      	ldr	r2, [pc, #532]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043be:	e018      	b.n	80043f2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043c0:	4b82      	ldr	r3, [pc, #520]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c6:	4a81      	ldr	r2, [pc, #516]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d0:	e00f      	b.n	80043f2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043d2:	4b7e      	ldr	r3, [pc, #504]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	4a7c      	ldr	r2, [pc, #496]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80043e2:	4b7a      	ldr	r3, [pc, #488]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e8:	4a78      	ldr	r2, [pc, #480]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80043ea:	f023 0304 	bic.w	r3, r3, #4
 80043ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fa:	f7fd f991 	bl	8001720 <HAL_GetTick>
 80043fe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fd f98d 	bl	8001720 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e17f      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004418:	4b6c      	ldr	r3, [pc, #432]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ed      	beq.n	8004402 <HAL_RCC_OscConfig+0x5ea>
 8004426:	e01d      	b.n	8004464 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fd f97a 	bl	8001720 <HAL_GetTick>
 800442c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800442e:	e00a      	b.n	8004446 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fd f976 	bl	8001720 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e168      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004446:	4b61      	ldr	r3, [pc, #388]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ed      	bne.n	8004430 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004454:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	4a5c      	ldr	r2, [pc, #368]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 800445c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004468:	2b01      	cmp	r3, #1
 800446a:	d105      	bne.n	8004478 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446c:	4b57      	ldr	r3, [pc, #348]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	4a56      	ldr	r2, [pc, #344]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 8004472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004476:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d03c      	beq.n	80044fe <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01c      	beq.n	80044c6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800448c:	4b4f      	ldr	r3, [pc, #316]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 800448e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004492:	4a4e      	ldr	r2, [pc, #312]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449c:	f7fd f940 	bl	8001720 <HAL_GetTick>
 80044a0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044a4:	f7fd f93c 	bl	8001720 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e130      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044b6:	4b45      	ldr	r3, [pc, #276]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80044b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ef      	beq.n	80044a4 <HAL_RCC_OscConfig+0x68c>
 80044c4:	e01b      	b.n	80044fe <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044c6:	4b41      	ldr	r3, [pc, #260]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80044c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044cc:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d6:	f7fd f923 	bl	8001720 <HAL_GetTick>
 80044da:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044de:	f7fd f91f 	bl	8001720 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e113      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044f0:	4b36      	ldr	r3, [pc, #216]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80044f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ef      	bne.n	80044de <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8107 	beq.w	8004716 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	2b02      	cmp	r3, #2
 800450e:	f040 80cf 	bne.w	80046b0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0203 	and.w	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	429a      	cmp	r2, r3
 8004524:	d12c      	bne.n	8004580 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004530:	3b01      	subs	r3, #1
 8004532:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d123      	bne.n	8004580 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d11b      	bne.n	8004580 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d113      	bne.n	8004580 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	3b01      	subs	r3, #1
 8004566:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d109      	bne.n	8004580 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	085b      	lsrs	r3, r3, #1
 8004578:	3b01      	subs	r3, #1
 800457a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800457c:	429a      	cmp	r2, r3
 800457e:	d071      	beq.n	8004664 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	2b0c      	cmp	r3, #12
 8004584:	d06c      	beq.n	8004660 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004586:	4b11      	ldr	r3, [pc, #68]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d105      	bne.n	800459e <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004592:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e0ba      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045a2:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a09      	ldr	r2, [pc, #36]	; (80045cc <HAL_RCC_OscConfig+0x7b4>)
 80045a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045ae:	f7fd f8b7 	bl	8001720 <HAL_GetTick>
 80045b2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b4:	e00c      	b.n	80045d0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b6:	f7fd f8b3 	bl	8001720 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d905      	bls.n	80045d0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0a7      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
 80045c8:	40007000 	.word	0x40007000
 80045cc:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d0:	4b53      	ldr	r3, [pc, #332]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ec      	bne.n	80045b6 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045dc:	4b50      	ldr	r3, [pc, #320]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_OscConfig+0x90c>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045ec:	3a01      	subs	r2, #1
 80045ee:	0112      	lsls	r2, r2, #4
 80045f0:	4311      	orrs	r1, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045f6:	0212      	lsls	r2, r2, #8
 80045f8:	4311      	orrs	r1, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045fe:	0852      	lsrs	r2, r2, #1
 8004600:	3a01      	subs	r2, #1
 8004602:	0552      	lsls	r2, r2, #21
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	3a01      	subs	r2, #1
 800460e:	0652      	lsls	r2, r2, #25
 8004610:	4311      	orrs	r1, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004616:	06d2      	lsls	r2, r2, #27
 8004618:	430a      	orrs	r2, r1
 800461a:	4941      	ldr	r1, [pc, #260]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 800461c:	4313      	orrs	r3, r2
 800461e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004620:	4b3f      	ldr	r3, [pc, #252]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a3e      	ldr	r2, [pc, #248]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 8004626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800462c:	4b3c      	ldr	r3, [pc, #240]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a3b      	ldr	r2, [pc, #236]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 8004632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004636:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004638:	f7fd f872 	bl	8001720 <HAL_GetTick>
 800463c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fd f86e 	bl	8001720 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e062      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004652:	4b33      	ldr	r3, [pc, #204]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800465e:	e05a      	b.n	8004716 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e059      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004664:	4b2e      	ldr	r3, [pc, #184]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d152      	bne.n	8004716 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004670:	4b2b      	ldr	r3, [pc, #172]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 8004676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800467c:	4b28      	ldr	r3, [pc, #160]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a27      	ldr	r2, [pc, #156]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 8004682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004686:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004688:	f7fd f84a 	bl	8001720 <HAL_GetTick>
 800468c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004690:	f7fd f846 	bl	8001720 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e03a      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a2:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x878>
 80046ae:	e032      	b.n	8004716 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	2b0c      	cmp	r3, #12
 80046b4:	d02d      	beq.n	8004712 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a19      	ldr	r2, [pc, #100]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 80046bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80046c2:	4b17      	ldr	r3, [pc, #92]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80046ce:	4b14      	ldr	r3, [pc, #80]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	4a13      	ldr	r2, [pc, #76]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 80046d4:	f023 0303 	bic.w	r3, r3, #3
 80046d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	4a10      	ldr	r2, [pc, #64]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 80046e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fd f819 	bl	8001720 <HAL_GetTick>
 80046ee:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fd f815 	bl	8001720 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e009      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <HAL_RCC_OscConfig+0x908>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x8da>
 8004710:	e001      	b.n	8004716 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3728      	adds	r7, #40	; 0x28
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000
 8004724:	019d800c 	.word	0x019d800c

08004728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e10f      	b.n	8004960 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004740:	4b89      	ldr	r3, [pc, #548]	; (8004968 <HAL_RCC_ClockConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d910      	bls.n	8004770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b86      	ldr	r3, [pc, #536]	; (8004968 <HAL_RCC_ClockConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 020f 	bic.w	r2, r3, #15
 8004756:	4984      	ldr	r1, [pc, #528]	; (8004968 <HAL_RCC_ClockConfig+0x240>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b82      	ldr	r3, [pc, #520]	; (8004968 <HAL_RCC_ClockConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0f7      	b.n	8004960 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8089 	beq.w	8004890 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d133      	bne.n	80047ee <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004786:	4b79      	ldr	r3, [pc, #484]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e0e4      	b.n	8004960 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004796:	f000 fa2d 	bl	8004bf4 <RCC_GetSysClockFreqFromPLLSource>
 800479a:	4603      	mov	r3, r0
 800479c:	4a74      	ldr	r2, [pc, #464]	; (8004970 <HAL_RCC_ClockConfig+0x248>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d955      	bls.n	800484e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047a2:	4b72      	ldr	r3, [pc, #456]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047ae:	4b6f      	ldr	r3, [pc, #444]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b6:	4a6d      	ldr	r2, [pc, #436]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 80047b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	e044      	b.n	800484e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d03e      	beq.n	800484e <HAL_RCC_ClockConfig+0x126>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d13a      	bne.n	800484e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047d8:	4b64      	ldr	r3, [pc, #400]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047e0:	4a62      	ldr	r2, [pc, #392]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 80047e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e02f      	b.n	800484e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f6:	4b5d      	ldr	r3, [pc, #372]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d115      	bne.n	800482e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e0ac      	b.n	8004960 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800480e:	4b57      	ldr	r3, [pc, #348]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0a0      	b.n	8004960 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481e:	4b53      	ldr	r3, [pc, #332]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e098      	b.n	8004960 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800482e:	f000 f8a7 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 8004832:	4603      	mov	r3, r0
 8004834:	4a4e      	ldr	r2, [pc, #312]	; (8004970 <HAL_RCC_ClockConfig+0x248>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d909      	bls.n	800484e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800483a:	4b4c      	ldr	r3, [pc, #304]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004842:	4a4a      	ldr	r2, [pc, #296]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 8004844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004848:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800484e:	4b47      	ldr	r3, [pc, #284]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 0203 	bic.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4944      	ldr	r1, [pc, #272]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 800485c:	4313      	orrs	r3, r2
 800485e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004860:	f7fc ff5e 	bl	8001720 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	e00a      	b.n	800487e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004868:	f7fc ff5a 	bl	8001720 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	; 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e070      	b.n	8004960 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 020c 	and.w	r2, r3, #12
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	429a      	cmp	r2, r3
 800488e:	d1eb      	bne.n	8004868 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d009      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b33      	ldr	r3, [pc, #204]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4930      	ldr	r1, [pc, #192]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b80      	cmp	r3, #128	; 0x80
 80048b4:	d105      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048b6:	4b2d      	ldr	r3, [pc, #180]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	4a2c      	ldr	r2, [pc, #176]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 80048bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c2:	4b29      	ldr	r3, [pc, #164]	; (8004968 <HAL_RCC_ClockConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d210      	bcs.n	80048f2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_RCC_ClockConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 020f 	bic.w	r2, r3, #15
 80048d8:	4923      	ldr	r1, [pc, #140]	; (8004968 <HAL_RCC_ClockConfig+0x240>)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	4313      	orrs	r3, r2
 80048de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e0:	4b21      	ldr	r3, [pc, #132]	; (8004968 <HAL_RCC_ClockConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d001      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e036      	b.n	8004960 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048fe:	4b1b      	ldr	r3, [pc, #108]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	4918      	ldr	r1, [pc, #96]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 800490c:	4313      	orrs	r3, r2
 800490e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d009      	beq.n	8004930 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800491c:	4b13      	ldr	r3, [pc, #76]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4910      	ldr	r1, [pc, #64]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004930:	f000 f826 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <HAL_RCC_ClockConfig+0x244>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	490c      	ldr	r1, [pc, #48]	; (8004974 <HAL_RCC_ClockConfig+0x24c>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
 800494c:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <HAL_RCC_ClockConfig+0x250>)
 800494e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <HAL_RCC_ClockConfig+0x254>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fc fde1 	bl	800151c <HAL_InitTick>
 800495a:	4603      	mov	r3, r0
 800495c:	73fb      	strb	r3, [r7, #15]

  return status;
 800495e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40022000 	.word	0x40022000
 800496c:	40021000 	.word	0x40021000
 8004970:	04c4b400 	.word	0x04c4b400
 8004974:	08009d54 	.word	0x08009d54
 8004978:	20000170 	.word	0x20000170
 800497c:	20000174 	.word	0x20000174

08004980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004980:	b480      	push	{r7}
 8004982:	b089      	sub	sp, #36	; 0x24
 8004984:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800498e:	4b3e      	ldr	r3, [pc, #248]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004998:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x108>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x34>
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d121      	bne.n	80049f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d11e      	bne.n	80049f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049b4:	4b34      	ldr	r3, [pc, #208]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d107      	bne.n	80049d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049c0:	4b31      	ldr	r3, [pc, #196]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x108>)
 80049c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e005      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049d0:	4b2d      	ldr	r3, [pc, #180]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049dc:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x10c>)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10d      	bne.n	8004a08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049f0:	e00a      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d102      	bne.n	80049fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049f8:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x110>)
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	e004      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a04:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b0c      	cmp	r3, #12
 8004a0c:	d134      	bne.n	8004a78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a0e:	4b1e      	ldr	r3, [pc, #120]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d003      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0xac>
 8004a24:	e005      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a26:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a28:	617b      	str	r3, [r7, #20]
      break;
 8004a2a:	e005      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a2e:	617b      	str	r3, [r7, #20]
      break;
 8004a30:	e002      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	617b      	str	r3, [r7, #20]
      break;
 8004a36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a38:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	3301      	adds	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a46:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	0a1b      	lsrs	r3, r3, #8
 8004a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	fb02 f203 	mul.w	r2, r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	0e5b      	lsrs	r3, r3, #25
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	3301      	adds	r3, #1
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a78:	69bb      	ldr	r3, [r7, #24]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3724      	adds	r7, #36	; 0x24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	08009d6c 	.word	0x08009d6c
 8004a90:	00f42400 	.word	0x00f42400
 8004a94:	007a1200 	.word	0x007a1200

08004a98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_RCC_GetHCLKFreq+0x14>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000170 	.word	0x20000170

08004ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ab4:	f7ff fff0 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4904      	ldr	r1, [pc, #16]	; (8004ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	08009d64 	.word	0x08009d64

08004adc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	220f      	movs	r2, #15
 8004aea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004aec:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <HAL_RCC_GetClockConfig+0x5c>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0203 	and.w	r2, r3, #3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <HAL_RCC_GetClockConfig+0x5c>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <HAL_RCC_GetClockConfig+0x5c>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_RCC_GetClockConfig+0x5c>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	08db      	lsrs	r3, r3, #3
 8004b16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b1e:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <HAL_RCC_GetClockConfig+0x60>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 020f 	and.w	r2, r3, #15
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40022000 	.word	0x40022000

08004b40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b4c:	4b27      	ldr	r3, [pc, #156]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b58:	f7ff f840 	bl	8003bdc <HAL_PWREx_GetVoltageRange>
 8004b5c:	6178      	str	r0, [r7, #20]
 8004b5e:	e014      	b.n	8004b8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b60:	4b22      	ldr	r3, [pc, #136]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b64:	4a21      	ldr	r2, [pc, #132]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b6c:	4b1f      	ldr	r3, [pc, #124]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b78:	f7ff f830 	bl	8003bdc <HAL_PWREx_GetVoltageRange>
 8004b7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b7e:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b90:	d10b      	bne.n	8004baa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b80      	cmp	r3, #128	; 0x80
 8004b96:	d913      	bls.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2ba0      	cmp	r3, #160	; 0xa0
 8004b9c:	d902      	bls.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	e00d      	b.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	e00a      	b.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b7f      	cmp	r3, #127	; 0x7f
 8004bae:	d902      	bls.n	8004bb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	e004      	b.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b70      	cmp	r3, #112	; 0x70
 8004bba:	d101      	bne.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f023 020f 	bic.w	r2, r3, #15
 8004bc8:	4909      	ldr	r1, [pc, #36]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d001      	beq.n	8004be2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40022000 	.word	0x40022000

08004bf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004bfe:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d118      	bne.n	8004c3c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c0a:	4b2a      	ldr	r3, [pc, #168]	; (8004cb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d107      	bne.n	8004c26 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c16:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1c:	0a1b      	lsrs	r3, r3, #8
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e005      	b.n	8004c32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c26:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c32:	4a21      	ldr	r2, [pc, #132]	; (8004cb8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d003      	beq.n	8004c54 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d003      	beq.n	8004c5a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8004c52:	e005      	b.n	8004c60 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004c54:	4b19      	ldr	r3, [pc, #100]	; (8004cbc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004c56:	613b      	str	r3, [r7, #16]
    break;
 8004c58:	e005      	b.n	8004c66 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004c5a:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c5c:	613b      	str	r3, [r7, #16]
    break;
 8004c5e:	e002      	b.n	8004c66 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	613b      	str	r3, [r7, #16]
    break;
 8004c64:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c66:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	3301      	adds	r3, #1
 8004c72:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	0a1b      	lsrs	r3, r3, #8
 8004c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	fb02 f203 	mul.w	r2, r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c8c:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	0e5b      	lsrs	r3, r3, #25
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	3301      	adds	r3, #1
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004ca6:	683b      	ldr	r3, [r7, #0]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	371c      	adds	r7, #28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	08009d6c 	.word	0x08009d6c
 8004cbc:	00f42400 	.word	0x00f42400
 8004cc0:	007a1200 	.word	0x007a1200

08004cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ccc:	2300      	movs	r3, #0
 8004cce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d040      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce4:	2b80      	cmp	r3, #128	; 0x80
 8004ce6:	d02a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ce8:	2b80      	cmp	r3, #128	; 0x80
 8004cea:	d825      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cec:	2b60      	cmp	r3, #96	; 0x60
 8004cee:	d026      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cf0:	2b60      	cmp	r3, #96	; 0x60
 8004cf2:	d821      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d006      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d81d      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d009      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d010      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004d04:	e018      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d06:	4b89      	ldr	r3, [pc, #548]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	4a88      	ldr	r2, [pc, #544]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d10:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d12:	e015      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fb3e 	bl	800539c <RCCEx_PLLSAI1_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d24:	e00c      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3320      	adds	r3, #32
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fc29 	bl	8005584 <RCCEx_PLLSAI2_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d36:	e003      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	74fb      	strb	r3, [r7, #19]
      break;
 8004d3c:	e000      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d46:	4b79      	ldr	r3, [pc, #484]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d4c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d54:	4975      	ldr	r1, [pc, #468]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004d5c:	e001      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5e:	7cfb      	ldrb	r3, [r7, #19]
 8004d60:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d047      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d76:	d030      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7c:	d82a      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d82:	d02a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d88:	d824      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d94:	d81e      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9e:	d010      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004da0:	e018      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004da2:	4b62      	ldr	r3, [pc, #392]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	4a61      	ldr	r2, [pc, #388]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dae:	e015      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3304      	adds	r3, #4
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 faf0 	bl	800539c <RCCEx_PLLSAI1_Config>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dc0:	e00c      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3320      	adds	r3, #32
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fbdb 	bl	8005584 <RCCEx_PLLSAI2_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dd2:	e003      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	74fb      	strb	r3, [r7, #19]
      break;
 8004dd8:	e000      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004de2:	4b52      	ldr	r3, [pc, #328]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	494e      	ldr	r1, [pc, #312]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004df8:	e001      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfa:	7cfb      	ldrb	r3, [r7, #19]
 8004dfc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 809f 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e10:	4b46      	ldr	r3, [pc, #280]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004e20:	2300      	movs	r3, #0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e26:	4b41      	ldr	r3, [pc, #260]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2a:	4a40      	ldr	r2, [pc, #256]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6593      	str	r3, [r2, #88]	; 0x58
 8004e32:	4b3e      	ldr	r3, [pc, #248]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e42:	4b3b      	ldr	r3, [pc, #236]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a3a      	ldr	r2, [pc, #232]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e4e:	f7fc fc67 	bl	8001720 <HAL_GetTick>
 8004e52:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e54:	e009      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e56:	f7fc fc63 	bl	8001720 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d902      	bls.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	74fb      	strb	r3, [r7, #19]
        break;
 8004e68:	e005      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ef      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d15b      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e7c:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e86:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01f      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d019      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e9a:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ea6:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb6:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ec6:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d016      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fc fc22 	bl	8001720 <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ede:	e00b      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fc fc1e 	bl	8001720 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d902      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	74fb      	strb	r3, [r7, #19]
            break;
 8004ef6:	e006      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ec      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10c      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0c:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1c:	4903      	ldr	r1, [pc, #12]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f24:	e008      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f26:	7cfb      	ldrb	r3, [r7, #19]
 8004f28:	74bb      	strb	r3, [r7, #18]
 8004f2a:	e005      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f38:	7c7b      	ldrb	r3, [r7, #17]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d105      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3e:	4ba0      	ldr	r3, [pc, #640]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f42:	4a9f      	ldr	r2, [pc, #636]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f56:	4b9a      	ldr	r3, [pc, #616]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	f023 0203 	bic.w	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	4996      	ldr	r1, [pc, #600]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f78:	4b91      	ldr	r3, [pc, #580]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7e:	f023 020c 	bic.w	r2, r3, #12
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	498e      	ldr	r1, [pc, #568]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f9a:	4b89      	ldr	r3, [pc, #548]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa8:	4985      	ldr	r1, [pc, #532]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fbc:	4b80      	ldr	r3, [pc, #512]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fca:	497d      	ldr	r1, [pc, #500]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fde:	4b78      	ldr	r3, [pc, #480]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fec:	4974      	ldr	r1, [pc, #464]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005000:	4b6f      	ldr	r3, [pc, #444]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500e:	496c      	ldr	r1, [pc, #432]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005022:	4b67      	ldr	r3, [pc, #412]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005030:	4963      	ldr	r1, [pc, #396]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005044:	4b5e      	ldr	r3, [pc, #376]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005052:	495b      	ldr	r1, [pc, #364]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005066:	4b56      	ldr	r3, [pc, #344]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	4952      	ldr	r1, [pc, #328]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005088:	4b4d      	ldr	r3, [pc, #308]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	494a      	ldr	r1, [pc, #296]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050aa:	4b45      	ldr	r3, [pc, #276]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b8:	4941      	ldr	r1, [pc, #260]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050cc:	4b3c      	ldr	r3, [pc, #240]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050d2:	f023 0203 	bic.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050da:	4939      	ldr	r1, [pc, #228]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d028      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ee:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fc:	4930      	ldr	r1, [pc, #192]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800510c:	d106      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800510e:	4b2c      	ldr	r3, [pc, #176]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4a2b      	ldr	r2, [pc, #172]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005118:	60d3      	str	r3, [r2, #12]
 800511a:	e011      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005120:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005124:	d10c      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3304      	adds	r3, #4
 800512a:	2101      	movs	r1, #1
 800512c:	4618      	mov	r0, r3
 800512e:	f000 f935 	bl	800539c <RCCEx_PLLSAI1_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005136:	7cfb      	ldrb	r3, [r7, #19]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800513c:	7cfb      	ldrb	r3, [r7, #19]
 800513e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d04d      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005154:	d108      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800515c:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005162:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005166:	e012      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005168:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800516e:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005174:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005178:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005186:	490e      	ldr	r1, [pc, #56]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005196:	d106      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005198:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051a2:	60d3      	str	r3, [r2, #12]
 80051a4:	e020      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ae:	d109      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4a02      	ldr	r2, [pc, #8]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ba:	60d3      	str	r3, [r2, #12]
 80051bc:	e014      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80051be:	bf00      	nop
 80051c0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051cc:	d10c      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	2101      	movs	r1, #1
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 f8e1 	bl	800539c <RCCEx_PLLSAI1_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051de:	7cfb      	ldrb	r3, [r7, #19]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d028      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051f4:	4b68      	ldr	r3, [pc, #416]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005202:	4965      	ldr	r1, [pc, #404]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005212:	d106      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005214:	4b60      	ldr	r3, [pc, #384]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	4a5f      	ldr	r2, [pc, #380]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800521a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800521e:	60d3      	str	r3, [r2, #12]
 8005220:	e011      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005226:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800522a:	d10c      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3304      	adds	r3, #4
 8005230:	2101      	movs	r1, #1
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f8b2 	bl	800539c <RCCEx_PLLSAI1_Config>
 8005238:	4603      	mov	r3, r0
 800523a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800523c:	7cfb      	ldrb	r3, [r7, #19]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005242:	7cfb      	ldrb	r3, [r7, #19]
 8005244:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01e      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005252:	4b51      	ldr	r3, [pc, #324]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005258:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005262:	494d      	ldr	r1, [pc, #308]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005274:	d10c      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3304      	adds	r3, #4
 800527a:	2102      	movs	r1, #2
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f88d 	bl	800539c <RCCEx_PLLSAI1_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005286:	7cfb      	ldrb	r3, [r7, #19]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00b      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800529c:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800529e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052a2:	f023 0204 	bic.w	r2, r3, #4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ac:	493a      	ldr	r1, [pc, #232]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00b      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80052c0:	4b35      	ldr	r3, [pc, #212]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052c6:	f023 0218 	bic.w	r2, r3, #24
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d0:	4931      	ldr	r1, [pc, #196]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d035      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052e4:	4b2c      	ldr	r3, [pc, #176]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f0:	f7fc fa16 	bl	8001720 <HAL_GetTick>
 80052f4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052f6:	e009      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052f8:	f7fc fa12 	bl	8001720 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d902      	bls.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	74fb      	strb	r3, [r7, #19]
        break;
 800530a:	e005      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800530c:	4b22      	ldr	r3, [pc, #136]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1ef      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d113      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800531e:	4b1e      	ldr	r3, [pc, #120]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005320:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800532e:	491a      	ldr	r1, [pc, #104]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3320      	adds	r3, #32
 800533a:	2102      	movs	r1, #2
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f921 	bl	8005584 <RCCEx_PLLSAI2_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800534c:	7cfb      	ldrb	r3, [r7, #19]
 800534e:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d017      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800535e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	490a      	ldr	r1, [pc, #40]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800537e:	d105      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a04      	ldr	r2, [pc, #16]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800538a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800538c:	7cbb      	ldrb	r3, [r7, #18]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000

0800539c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053aa:	4b72      	ldr	r3, [pc, #456]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00e      	beq.n	80053d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053b6:	4b6f      	ldr	r3, [pc, #444]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0203 	and.w	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d103      	bne.n	80053ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
       ||
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d142      	bne.n	8005454 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
 80053d2:	e03f      	b.n	8005454 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d018      	beq.n	800540e <RCCEx_PLLSAI1_Config+0x72>
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d825      	bhi.n	800542c <RCCEx_PLLSAI1_Config+0x90>
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d002      	beq.n	80053ea <RCCEx_PLLSAI1_Config+0x4e>
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d009      	beq.n	80053fc <RCCEx_PLLSAI1_Config+0x60>
 80053e8:	e020      	b.n	800542c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053ea:	4b62      	ldr	r3, [pc, #392]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d11d      	bne.n	8005432 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053fa:	e01a      	b.n	8005432 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053fc:	4b5d      	ldr	r3, [pc, #372]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005404:	2b00      	cmp	r3, #0
 8005406:	d116      	bne.n	8005436 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800540c:	e013      	b.n	8005436 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800540e:	4b59      	ldr	r3, [pc, #356]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10f      	bne.n	800543a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800541a:	4b56      	ldr	r3, [pc, #344]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800542a:	e006      	b.n	800543a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	73fb      	strb	r3, [r7, #15]
      break;
 8005430:	e004      	b.n	800543c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005432:	bf00      	nop
 8005434:	e002      	b.n	800543c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005436:	bf00      	nop
 8005438:	e000      	b.n	800543c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800543a:	bf00      	nop
    }

    if(status == HAL_OK)
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d108      	bne.n	8005454 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005442:	4b4c      	ldr	r3, [pc, #304]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f023 0203 	bic.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4949      	ldr	r1, [pc, #292]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005450:	4313      	orrs	r3, r2
 8005452:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b00      	cmp	r3, #0
 8005458:	f040 8086 	bne.w	8005568 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800545c:	4b45      	ldr	r3, [pc, #276]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a44      	ldr	r2, [pc, #272]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005462:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005468:	f7fc f95a 	bl	8001720 <HAL_GetTick>
 800546c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800546e:	e009      	b.n	8005484 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005470:	f7fc f956 	bl	8001720 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d902      	bls.n	8005484 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	73fb      	strb	r3, [r7, #15]
        break;
 8005482:	e005      	b.n	8005490 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005484:	4b3b      	ldr	r3, [pc, #236]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1ef      	bne.n	8005470 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d168      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d113      	bne.n	80054c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800549c:	4b35      	ldr	r3, [pc, #212]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	4b35      	ldr	r3, [pc, #212]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6892      	ldr	r2, [r2, #8]
 80054a8:	0211      	lsls	r1, r2, #8
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	68d2      	ldr	r2, [r2, #12]
 80054ae:	06d2      	lsls	r2, r2, #27
 80054b0:	4311      	orrs	r1, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6852      	ldr	r2, [r2, #4]
 80054b6:	3a01      	subs	r2, #1
 80054b8:	0112      	lsls	r2, r2, #4
 80054ba:	430a      	orrs	r2, r1
 80054bc:	492d      	ldr	r1, [pc, #180]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	610b      	str	r3, [r1, #16]
 80054c2:	e02d      	b.n	8005520 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d115      	bne.n	80054f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054ca:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	4b2b      	ldr	r3, [pc, #172]	; (800557c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6892      	ldr	r2, [r2, #8]
 80054d6:	0211      	lsls	r1, r2, #8
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6912      	ldr	r2, [r2, #16]
 80054dc:	0852      	lsrs	r2, r2, #1
 80054de:	3a01      	subs	r2, #1
 80054e0:	0552      	lsls	r2, r2, #21
 80054e2:	4311      	orrs	r1, r2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6852      	ldr	r2, [r2, #4]
 80054e8:	3a01      	subs	r2, #1
 80054ea:	0112      	lsls	r2, r2, #4
 80054ec:	430a      	orrs	r2, r1
 80054ee:	4921      	ldr	r1, [pc, #132]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	610b      	str	r3, [r1, #16]
 80054f4:	e014      	b.n	8005520 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054f6:	4b1f      	ldr	r3, [pc, #124]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	4b21      	ldr	r3, [pc, #132]	; (8005580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6892      	ldr	r2, [r2, #8]
 8005502:	0211      	lsls	r1, r2, #8
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6952      	ldr	r2, [r2, #20]
 8005508:	0852      	lsrs	r2, r2, #1
 800550a:	3a01      	subs	r2, #1
 800550c:	0652      	lsls	r2, r2, #25
 800550e:	4311      	orrs	r1, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6852      	ldr	r2, [r2, #4]
 8005514:	3a01      	subs	r2, #1
 8005516:	0112      	lsls	r2, r2, #4
 8005518:	430a      	orrs	r2, r1
 800551a:	4916      	ldr	r1, [pc, #88]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800551c:	4313      	orrs	r3, r2
 800551e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a13      	ldr	r2, [pc, #76]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800552a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fc f8f8 	bl	8001720 <HAL_GetTick>
 8005530:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005532:	e009      	b.n	8005548 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005534:	f7fc f8f4 	bl	8001720 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	73fb      	strb	r3, [r7, #15]
          break;
 8005546:	e005      	b.n	8005554 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ef      	beq.n	8005534 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800555a:	4b06      	ldr	r3, [pc, #24]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	4904      	ldr	r1, [pc, #16]	; (8005574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005564:	4313      	orrs	r3, r2
 8005566:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000
 8005578:	07ff800f 	.word	0x07ff800f
 800557c:	ff9f800f 	.word	0xff9f800f
 8005580:	f9ff800f 	.word	0xf9ff800f

08005584 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005592:	4b72      	ldr	r3, [pc, #456]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00e      	beq.n	80055bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800559e:	4b6f      	ldr	r3, [pc, #444]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0203 	and.w	r2, r3, #3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d103      	bne.n	80055b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
       ||
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d142      	bne.n	800563c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
 80055ba:	e03f      	b.n	800563c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d018      	beq.n	80055f6 <RCCEx_PLLSAI2_Config+0x72>
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d825      	bhi.n	8005614 <RCCEx_PLLSAI2_Config+0x90>
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d002      	beq.n	80055d2 <RCCEx_PLLSAI2_Config+0x4e>
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d009      	beq.n	80055e4 <RCCEx_PLLSAI2_Config+0x60>
 80055d0:	e020      	b.n	8005614 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055d2:	4b62      	ldr	r3, [pc, #392]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d11d      	bne.n	800561a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055e2:	e01a      	b.n	800561a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055e4:	4b5d      	ldr	r3, [pc, #372]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d116      	bne.n	800561e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f4:	e013      	b.n	800561e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055f6:	4b59      	ldr	r3, [pc, #356]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10f      	bne.n	8005622 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005602:	4b56      	ldr	r3, [pc, #344]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005612:	e006      	b.n	8005622 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e004      	b.n	8005624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800561a:	bf00      	nop
 800561c:	e002      	b.n	8005624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800561e:	bf00      	nop
 8005620:	e000      	b.n	8005624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005622:	bf00      	nop
    }

    if(status == HAL_OK)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d108      	bne.n	800563c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800562a:	4b4c      	ldr	r3, [pc, #304]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f023 0203 	bic.w	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4949      	ldr	r1, [pc, #292]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005638:	4313      	orrs	r3, r2
 800563a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f040 8086 	bne.w	8005750 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005644:	4b45      	ldr	r3, [pc, #276]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a44      	ldr	r2, [pc, #272]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 800564a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005650:	f7fc f866 	bl	8001720 <HAL_GetTick>
 8005654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005656:	e009      	b.n	800566c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005658:	f7fc f862 	bl	8001720 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	73fb      	strb	r3, [r7, #15]
        break;
 800566a:	e005      	b.n	8005678 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800566c:	4b3b      	ldr	r3, [pc, #236]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ef      	bne.n	8005658 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d168      	bne.n	8005750 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d113      	bne.n	80056ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005684:	4b35      	ldr	r3, [pc, #212]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	4b35      	ldr	r3, [pc, #212]	; (8005760 <RCCEx_PLLSAI2_Config+0x1dc>)
 800568a:	4013      	ands	r3, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6892      	ldr	r2, [r2, #8]
 8005690:	0211      	lsls	r1, r2, #8
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68d2      	ldr	r2, [r2, #12]
 8005696:	06d2      	lsls	r2, r2, #27
 8005698:	4311      	orrs	r1, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6852      	ldr	r2, [r2, #4]
 800569e:	3a01      	subs	r2, #1
 80056a0:	0112      	lsls	r2, r2, #4
 80056a2:	430a      	orrs	r2, r1
 80056a4:	492d      	ldr	r1, [pc, #180]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	614b      	str	r3, [r1, #20]
 80056aa:	e02d      	b.n	8005708 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d115      	bne.n	80056de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056b2:	4b2a      	ldr	r3, [pc, #168]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056b4:	695a      	ldr	r2, [r3, #20]
 80056b6:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <RCCEx_PLLSAI2_Config+0x1e0>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6892      	ldr	r2, [r2, #8]
 80056be:	0211      	lsls	r1, r2, #8
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6912      	ldr	r2, [r2, #16]
 80056c4:	0852      	lsrs	r2, r2, #1
 80056c6:	3a01      	subs	r2, #1
 80056c8:	0552      	lsls	r2, r2, #21
 80056ca:	4311      	orrs	r1, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6852      	ldr	r2, [r2, #4]
 80056d0:	3a01      	subs	r2, #1
 80056d2:	0112      	lsls	r2, r2, #4
 80056d4:	430a      	orrs	r2, r1
 80056d6:	4921      	ldr	r1, [pc, #132]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	614b      	str	r3, [r1, #20]
 80056dc:	e014      	b.n	8005708 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056de:	4b1f      	ldr	r3, [pc, #124]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056e0:	695a      	ldr	r2, [r3, #20]
 80056e2:	4b21      	ldr	r3, [pc, #132]	; (8005768 <RCCEx_PLLSAI2_Config+0x1e4>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6892      	ldr	r2, [r2, #8]
 80056ea:	0211      	lsls	r1, r2, #8
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6952      	ldr	r2, [r2, #20]
 80056f0:	0852      	lsrs	r2, r2, #1
 80056f2:	3a01      	subs	r2, #1
 80056f4:	0652      	lsls	r2, r2, #25
 80056f6:	4311      	orrs	r1, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6852      	ldr	r2, [r2, #4]
 80056fc:	3a01      	subs	r2, #1
 80056fe:	0112      	lsls	r2, r2, #4
 8005700:	430a      	orrs	r2, r1
 8005702:	4916      	ldr	r1, [pc, #88]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005704:	4313      	orrs	r3, r2
 8005706:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005708:	4b14      	ldr	r3, [pc, #80]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a13      	ldr	r2, [pc, #76]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 800570e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005714:	f7fc f804 	bl	8001720 <HAL_GetTick>
 8005718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800571a:	e009      	b.n	8005730 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800571c:	f7fc f800 	bl	8001720 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d902      	bls.n	8005730 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	73fb      	strb	r3, [r7, #15]
          break;
 800572e:	e005      	b.n	800573c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0ef      	beq.n	800571c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005742:	4b06      	ldr	r3, [pc, #24]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005744:	695a      	ldr	r2, [r3, #20]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	4904      	ldr	r1, [pc, #16]	; (800575c <RCCEx_PLLSAI2_Config+0x1d8>)
 800574c:	4313      	orrs	r3, r2
 800574e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005750:	7bfb      	ldrb	r3, [r7, #15]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40021000 	.word	0x40021000
 8005760:	07ff800f 	.word	0x07ff800f
 8005764:	ff9f800f 	.word	0xff9f800f
 8005768:	f9ff800f 	.word	0xf9ff800f

0800576c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d07f      	beq.n	800587e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fb fe1c 	bl	80013d0 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800579e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	22ca      	movs	r2, #202	; 0xca
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2253      	movs	r2, #83	; 0x53
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f9b5 	bl	8005b28 <RTC_EnterInitMode>
 80057be:	4603      	mov	r3, r0
 80057c0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d15a      	bne.n	800587e <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80057d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057da:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6999      	ldr	r1, [r3, #24]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6912      	ldr	r2, [r2, #16]
 8005802:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6919      	ldr	r1, [r3, #16]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	041a      	lsls	r2, r3, #16
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005818:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <HAL_RTC_Init+0x11c>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	430b      	orrs	r3, r1
 800582a:	4917      	ldr	r1, [pc, #92]	; (8005888 <HAL_RTC_Init+0x11c>)
 800582c:	4313      	orrs	r3, r2
 800582e:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f9af 	bl	8005b94 <RTC_ExitInitMode>
 8005836:	4603      	mov	r3, r0
 8005838:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d11e      	bne.n	800587e <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800584e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6999      	ldr	r1, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	22ff      	movs	r2, #255	; 0xff
 8005874:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40002800 	.word	0x40002800

0800588c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_RTC_SetTime+0x1a>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e08b      	b.n	80059be <HAL_RTC_SetTime+0x132>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	22ca      	movs	r2, #202	; 0xca
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2253      	movs	r2, #83	; 0x53
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 f92e 	bl	8005b28 <RTC_EnterInitMode>
 80058cc:	4603      	mov	r3, r0
 80058ce:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80058d0:	7cfb      	ldrb	r3, [r7, #19]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d15e      	bne.n	8005994 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80058d6:	4b3c      	ldr	r3, [pc, #240]	; (80059c8 <HAL_RTC_SetTime+0x13c>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e2:	d057      	beq.n	8005994 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d125      	bne.n	8005936 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80058ea:	4b37      	ldr	r3, [pc, #220]	; (80059c8 <HAL_RTC_SetTime+0x13c>)
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 f985 	bl	8005c10 <RTC_ByteToBcd2>
 8005906:	4603      	mov	r3, r0
 8005908:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	785b      	ldrb	r3, [r3, #1]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f97e 	bl	8005c10 <RTC_ByteToBcd2>
 8005914:	4603      	mov	r3, r0
 8005916:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005918:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	789b      	ldrb	r3, [r3, #2]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 f976 	bl	8005c10 <RTC_ByteToBcd2>
 8005924:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005926:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	78db      	ldrb	r3, [r3, #3]
 800592e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e017      	b.n	8005966 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005936:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <HAL_RTC_SetTime+0x13c>)
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d102      	bne.n	8005948 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2200      	movs	r2, #0
 8005946:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005954:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800595a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	78db      	ldrb	r3, [r3, #3]
 8005960:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <HAL_RTC_SetTime+0x13c>)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800596e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005972:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005974:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <HAL_RTC_SetTime+0x13c>)
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	4a13      	ldr	r2, [pc, #76]	; (80059c8 <HAL_RTC_SetTime+0x13c>)
 800597a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800597e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005980:	4b11      	ldr	r3, [pc, #68]	; (80059c8 <HAL_RTC_SetTime+0x13c>)
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	68d9      	ldr	r1, [r3, #12]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	430b      	orrs	r3, r1
 800598e:	490e      	ldr	r1, [pc, #56]	; (80059c8 <HAL_RTC_SetTime+0x13c>)
 8005990:	4313      	orrs	r3, r2
 8005992:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f8fd 	bl	8005b94 <RTC_ExitInitMode>
 800599a:	4603      	mov	r3, r0
 800599c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	22ff      	movs	r2, #255	; 0xff
 80059a4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80059a6:	7cfb      	ldrb	r3, [r7, #19]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d103      	bne.n	80059b4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80059bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd90      	pop	{r4, r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40002800 	.word	0x40002800

080059cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059cc:	b590      	push	{r4, r7, lr}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_RTC_SetDate+0x1a>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e074      	b.n	8005ad0 <HAL_RTC_SetDate+0x104>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10e      	bne.n	8005a1a <HAL_RTC_SetDate+0x4e>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	f023 0310 	bic.w	r3, r3, #16
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	330a      	adds	r3, #10
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d11c      	bne.n	8005a5a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	78db      	ldrb	r3, [r3, #3]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f8f3 	bl	8005c10 <RTC_ByteToBcd2>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f8ec 	bl	8005c10 <RTC_ByteToBcd2>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a3c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	789b      	ldrb	r3, [r3, #2]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f8e4 	bl	8005c10 <RTC_ByteToBcd2>
 8005a48:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a4a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e00e      	b.n	8005a78 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	78db      	ldrb	r3, [r3, #3]
 8005a5e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	785b      	ldrb	r3, [r3, #1]
 8005a64:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a66:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a6c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	22ca      	movs	r2, #202	; 0xca
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2253      	movs	r2, #83	; 0x53
 8005a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f84d 	bl	8005b28 <RTC_EnterInitMode>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005a92:	7cfb      	ldrb	r3, [r7, #19]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005a98:	4a0f      	ldr	r2, [pc, #60]	; (8005ad8 <HAL_RTC_SetDate+0x10c>)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005aa0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005aa4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f874 	bl	8005b94 <RTC_ExitInitMode>
 8005aac:	4603      	mov	r3, r0
 8005aae:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	22ff      	movs	r2, #255	; 0xff
 8005ab6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005ab8:	7cfb      	ldrb	r3, [r7, #19]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005ace:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd90      	pop	{r4, r7, pc}
 8005ad8:	40002800 	.word	0x40002800

08005adc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005af2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8005af4:	f7fb fe14 	bl	8001720 <HAL_GetTick>
 8005af8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005afa:	e009      	b.n	8005b10 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005afc:	f7fb fe10 	bl	8001720 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b0a:	d901      	bls.n	8005b10 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e007      	b.n	8005b20 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0ee      	beq.n	8005afc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d123      	bne.n	8005b8a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b50:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b52:	f7fb fde5 	bl	8001720 <HAL_GetTick>
 8005b56:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b58:	e00d      	b.n	8005b76 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b5a:	f7fb fde1 	bl	8001720 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b68:	d905      	bls.n	8005b76 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2203      	movs	r2, #3
 8005b72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <RTC_EnterInitMode+0x62>
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d1e7      	bne.n	8005b5a <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <RTC_ExitInitMode+0x78>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <RTC_ExitInitMode+0x78>)
 8005ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005baa:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005bac:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <RTC_ExitInitMode+0x78>)
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10c      	bne.n	8005bd2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff8f 	bl	8005adc <HAL_RTC_WaitForSynchro>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01e      	beq.n	8005c02 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	73fb      	strb	r3, [r7, #15]
 8005bd0:	e017      	b.n	8005c02 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005bd2:	4b0e      	ldr	r3, [pc, #56]	; (8005c0c <RTC_ExitInitMode+0x78>)
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	4a0d      	ldr	r2, [pc, #52]	; (8005c0c <RTC_ExitInitMode+0x78>)
 8005bd8:	f023 0320 	bic.w	r3, r3, #32
 8005bdc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff ff7c 	bl	8005adc <HAL_RTC_WaitForSynchro>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2203      	movs	r2, #3
 8005bee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <RTC_ExitInitMode+0x78>)
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <RTC_ExitInitMode+0x78>)
 8005bfc:	f043 0320 	orr.w	r3, r3, #32
 8005c00:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	40002800 	.word	0x40002800

08005c10 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005c22:	e005      	b.n	8005c30 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005c2a:	7afb      	ldrb	r3, [r7, #11]
 8005c2c:	3b0a      	subs	r3, #10
 8005c2e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005c30:	7afb      	ldrb	r3, [r7, #11]
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	d8f6      	bhi.n	8005c24 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	b2db      	uxtb	r3, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e095      	b.n	8005d8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d108      	bne.n	8005c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c72:	d009      	beq.n	8005c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	61da      	str	r2, [r3, #28]
 8005c7a:	e005      	b.n	8005c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fb fbd2 	bl	800144c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cc8:	d902      	bls.n	8005cd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	e002      	b.n	8005cd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cde:	d007      	beq.n	8005cf0 <HAL_SPI_Init+0xa0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ce8:	d002      	beq.n	8005cf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d32:	ea42 0103 	orr.w	r1, r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	0c1b      	lsrs	r3, r3, #16
 8005d4c:	f003 0204 	and.w	r2, r3, #4
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d6c:	ea42 0103 	orr.w	r1, r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b088      	sub	sp, #32
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_SPI_Transmit+0x22>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e158      	b.n	800606a <HAL_SPI_Transmit+0x2d4>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dc0:	f7fb fcae 	bl	8001720 <HAL_GetTick>
 8005dc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d002      	beq.n	8005ddc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dda:	e13d      	b.n	8006058 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_SPI_Transmit+0x52>
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dec:	e134      	b.n	8006058 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2203      	movs	r2, #3
 8005df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	88fa      	ldrh	r2, [r7, #6]
 8005e06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	88fa      	ldrh	r2, [r7, #6]
 8005e0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e38:	d10f      	bne.n	8005e5a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b40      	cmp	r3, #64	; 0x40
 8005e66:	d007      	beq.n	8005e78 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e80:	d94b      	bls.n	8005f1a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_SPI_Transmit+0xfa>
 8005e8a:	8afb      	ldrh	r3, [r7, #22]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d13e      	bne.n	8005f0e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	881a      	ldrh	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	1c9a      	adds	r2, r3, #2
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005eb4:	e02b      	b.n	8005f0e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d112      	bne.n	8005eea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	881a      	ldrh	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	1c9a      	adds	r2, r3, #2
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ee8:	e011      	b.n	8005f0e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eea:	f7fb fc19 	bl	8001720 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d803      	bhi.n	8005f02 <HAL_SPI_Transmit+0x16c>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d102      	bne.n	8005f08 <HAL_SPI_Transmit+0x172>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f0c:	e0a4      	b.n	8006058 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1ce      	bne.n	8005eb6 <HAL_SPI_Transmit+0x120>
 8005f18:	e07c      	b.n	8006014 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_SPI_Transmit+0x192>
 8005f22:	8afb      	ldrh	r3, [r7, #22]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d170      	bne.n	800600a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d912      	bls.n	8005f58 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	881a      	ldrh	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	1c9a      	adds	r2, r3, #2
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b02      	subs	r3, #2
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f56:	e058      	b.n	800600a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	7812      	ldrb	r2, [r2, #0]
 8005f64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f7e:	e044      	b.n	800600a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d12b      	bne.n	8005fe6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d912      	bls.n	8005fbe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	881a      	ldrh	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	1c9a      	adds	r2, r3, #2
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b02      	subs	r3, #2
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fbc:	e025      	b.n	800600a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	7812      	ldrb	r2, [r2, #0]
 8005fca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fe4:	e011      	b.n	800600a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fe6:	f7fb fb9b 	bl	8001720 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d803      	bhi.n	8005ffe <HAL_SPI_Transmit+0x268>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d102      	bne.n	8006004 <HAL_SPI_Transmit+0x26e>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d102      	bne.n	800600a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006008:	e026      	b.n	8006058 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1b5      	bne.n	8005f80 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fce3 	bl	80069e4 <SPI_EndRxTxTransaction>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e000      	b.n	8006058 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006056:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006068:	7ffb      	ldrb	r3, [r7, #31]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b088      	sub	sp, #32
 8006076:	af02      	add	r7, sp, #8
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800608e:	d112      	bne.n	80060b6 <HAL_SPI_Receive+0x44>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10e      	bne.n	80060b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2204      	movs	r2, #4
 800609c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	4613      	mov	r3, r2
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f910 	bl	80062d2 <HAL_SPI_TransmitReceive>
 80060b2:	4603      	mov	r3, r0
 80060b4:	e109      	b.n	80062ca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_SPI_Receive+0x52>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e102      	b.n	80062ca <HAL_SPI_Receive+0x258>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060cc:	f7fb fb28 	bl	8001720 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d002      	beq.n	80060e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80060de:	2302      	movs	r3, #2
 80060e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060e2:	e0e9      	b.n	80062b8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_SPI_Receive+0x7e>
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060f4:	e0e0      	b.n	80062b8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2204      	movs	r2, #4
 80060fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	88fa      	ldrh	r2, [r7, #6]
 800610e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	88fa      	ldrh	r2, [r7, #6]
 8006116:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006140:	d908      	bls.n	8006154 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006150:	605a      	str	r2, [r3, #4]
 8006152:	e007      	b.n	8006164 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006162:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616c:	d10f      	bne.n	800618e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800617c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800618c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d007      	beq.n	80061ac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061b4:	d867      	bhi.n	8006286 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80061b6:	e030      	b.n	800621a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d117      	bne.n	80061f6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f103 020c 	add.w	r2, r3, #12
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80061f4:	e011      	b.n	800621a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061f6:	f7fb fa93 	bl	8001720 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d803      	bhi.n	800620e <HAL_SPI_Receive+0x19c>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620c:	d102      	bne.n	8006214 <HAL_SPI_Receive+0x1a2>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006218:	e04e      	b.n	80062b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1c8      	bne.n	80061b8 <HAL_SPI_Receive+0x146>
 8006226:	e034      	b.n	8006292 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d115      	bne.n	8006262 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	b292      	uxth	r2, r2
 8006242:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	1c9a      	adds	r2, r3, #2
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006260:	e011      	b.n	8006286 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006262:	f7fb fa5d 	bl	8001720 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d803      	bhi.n	800627a <HAL_SPI_Receive+0x208>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d102      	bne.n	8006280 <HAL_SPI_Receive+0x20e>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006284:	e018      	b.n	80062b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1ca      	bne.n	8006228 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 fb4c 	bl	8006934 <SPI_EndRxTransaction>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2220      	movs	r2, #32
 80062a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	75fb      	strb	r3, [r7, #23]
 80062b4:	e000      	b.n	80062b8 <HAL_SPI_Receive+0x246>
  }

error :
 80062b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08a      	sub	sp, #40	; 0x28
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062e0:	2301      	movs	r3, #1
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x26>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e1fb      	b.n	80066f0 <HAL_SPI_TransmitReceive+0x41e>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006300:	f7fb fa0e 	bl	8001720 <HAL_GetTick>
 8006304:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800630c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006314:	887b      	ldrh	r3, [r7, #2]
 8006316:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006318:	887b      	ldrh	r3, [r7, #2]
 800631a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800631c:	7efb      	ldrb	r3, [r7, #27]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d00e      	beq.n	8006340 <HAL_SPI_TransmitReceive+0x6e>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006328:	d106      	bne.n	8006338 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <HAL_SPI_TransmitReceive+0x66>
 8006332:	7efb      	ldrb	r3, [r7, #27]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d003      	beq.n	8006340 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006338:	2302      	movs	r3, #2
 800633a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800633e:	e1cd      	b.n	80066dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_SPI_TransmitReceive+0x80>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_SPI_TransmitReceive+0x80>
 800634c:	887b      	ldrh	r3, [r7, #2]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006358:	e1c0      	b.n	80066dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b04      	cmp	r3, #4
 8006364:	d003      	beq.n	800636e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2205      	movs	r2, #5
 800636a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	887a      	ldrh	r2, [r7, #2]
 800637e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	887a      	ldrh	r2, [r7, #2]
 8006386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	887a      	ldrh	r2, [r7, #2]
 8006394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	887a      	ldrh	r2, [r7, #2]
 800639a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063b0:	d802      	bhi.n	80063b8 <HAL_SPI_TransmitReceive+0xe6>
 80063b2:	8a3b      	ldrh	r3, [r7, #16]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d908      	bls.n	80063ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063c6:	605a      	str	r2, [r3, #4]
 80063c8:	e007      	b.n	80063da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	d007      	beq.n	80063f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006400:	d97c      	bls.n	80064fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x13e>
 800640a:	8a7b      	ldrh	r3, [r7, #18]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d169      	bne.n	80064e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	881a      	ldrh	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	1c9a      	adds	r2, r3, #2
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006434:	e056      	b.n	80064e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b02      	cmp	r3, #2
 8006442:	d11b      	bne.n	800647c <HAL_SPI_TransmitReceive+0x1aa>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d016      	beq.n	800647c <HAL_SPI_TransmitReceive+0x1aa>
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	2b01      	cmp	r3, #1
 8006452:	d113      	bne.n	800647c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	881a      	ldrh	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	1c9a      	adds	r2, r3, #2
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d11c      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x1f2>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d016      	beq.n	80064c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	b292      	uxth	r2, r2
 80064a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	1c9a      	adds	r2, r3, #2
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064c0:	2301      	movs	r3, #1
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064c4:	f7fb f92c 	bl	8001720 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d807      	bhi.n	80064e4 <HAL_SPI_TransmitReceive+0x212>
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d003      	beq.n	80064e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80064e2:	e0fb      	b.n	80066dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1a3      	bne.n	8006436 <HAL_SPI_TransmitReceive+0x164>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d19d      	bne.n	8006436 <HAL_SPI_TransmitReceive+0x164>
 80064fa:	e0df      	b.n	80066bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_SPI_TransmitReceive+0x23a>
 8006504:	8a7b      	ldrh	r3, [r7, #18]
 8006506:	2b01      	cmp	r3, #1
 8006508:	f040 80cb 	bne.w	80066a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b01      	cmp	r3, #1
 8006514:	d912      	bls.n	800653c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	881a      	ldrh	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006526:	1c9a      	adds	r2, r3, #2
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b02      	subs	r3, #2
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	87da      	strh	r2, [r3, #62]	; 0x3e
 800653a:	e0b2      	b.n	80066a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	7812      	ldrb	r2, [r2, #0]
 8006548:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006562:	e09e      	b.n	80066a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d134      	bne.n	80065dc <HAL_SPI_TransmitReceive+0x30a>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d02f      	beq.n	80065dc <HAL_SPI_TransmitReceive+0x30a>
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	2b01      	cmp	r3, #1
 8006580:	d12c      	bne.n	80065dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	d912      	bls.n	80065b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	881a      	ldrh	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	1c9a      	adds	r2, r3, #2
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	3b02      	subs	r3, #2
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065b0:	e012      	b.n	80065d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	7812      	ldrb	r2, [r2, #0]
 80065be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d148      	bne.n	800667c <HAL_SPI_TransmitReceive+0x3aa>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d042      	beq.n	800667c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d923      	bls.n	800664a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660c:	b292      	uxth	r2, r2
 800660e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	1c9a      	adds	r2, r3, #2
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b02      	subs	r3, #2
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	d81f      	bhi.n	8006678 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	e016      	b.n	8006678 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f103 020c 	add.w	r2, r3, #12
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	7812      	ldrb	r2, [r2, #0]
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800666c:	b29b      	uxth	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006678:	2301      	movs	r3, #1
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800667c:	f7fb f850 	bl	8001720 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006688:	429a      	cmp	r2, r3
 800668a:	d803      	bhi.n	8006694 <HAL_SPI_TransmitReceive+0x3c2>
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006692:	d102      	bne.n	800669a <HAL_SPI_TransmitReceive+0x3c8>
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	2b00      	cmp	r3, #0
 8006698:	d103      	bne.n	80066a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80066a0:	e01c      	b.n	80066dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f47f af5b 	bne.w	8006564 <HAL_SPI_TransmitReceive+0x292>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f47f af54 	bne.w	8006564 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f98f 	bl	80069e4 <SPI_EndRxTxTransaction>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d006      	beq.n	80066da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	661a      	str	r2, [r3, #96]	; 0x60
 80066d8:	e000      	b.n	80066dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80066da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3728      	adds	r7, #40	; 0x28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	4613      	mov	r3, r2
 8006706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006708:	f7fb f80a 	bl	8001720 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	4413      	add	r3, r2
 8006716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006718:	f7fb f802 	bl	8001720 <HAL_GetTick>
 800671c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800671e:	4b39      	ldr	r3, [pc, #228]	; (8006804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	015b      	lsls	r3, r3, #5
 8006724:	0d1b      	lsrs	r3, r3, #20
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	fb02 f303 	mul.w	r3, r2, r3
 800672c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800672e:	e054      	b.n	80067da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d050      	beq.n	80067da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006738:	f7fa fff2 	bl	8001720 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	429a      	cmp	r2, r3
 8006746:	d902      	bls.n	800674e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d13d      	bne.n	80067ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800675c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006766:	d111      	bne.n	800678c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006770:	d004      	beq.n	800677c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677a:	d107      	bne.n	800678c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800678a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006794:	d10f      	bne.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e017      	b.n	80067fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4013      	ands	r3, r2
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	bf0c      	ite	eq
 80067ea:	2301      	moveq	r3, #1
 80067ec:	2300      	movne	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	79fb      	ldrb	r3, [r7, #7]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d19b      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000170 	.word	0x20000170

08006808 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08a      	sub	sp, #40	; 0x28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800681a:	f7fa ff81 	bl	8001720 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	4413      	add	r3, r2
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800682a:	f7fa ff79 	bl	8001720 <HAL_GetTick>
 800682e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006838:	4b3d      	ldr	r3, [pc, #244]	; (8006930 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	00da      	lsls	r2, r3, #3
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	0d1b      	lsrs	r3, r3, #20
 8006848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684a:	fb02 f303 	mul.w	r3, r2, r3
 800684e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006850:	e060      	b.n	8006914 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006858:	d107      	bne.n	800686a <SPI_WaitFifoStateUntilTimeout+0x62>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006868:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006870:	d050      	beq.n	8006914 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006872:	f7fa ff55 	bl	8001720 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687e:	429a      	cmp	r2, r3
 8006880:	d902      	bls.n	8006888 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	2b00      	cmp	r3, #0
 8006886:	d13d      	bne.n	8006904 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006896:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068a0:	d111      	bne.n	80068c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068aa:	d004      	beq.n	80068b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b4:	d107      	bne.n	80068c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ce:	d10f      	bne.n	80068f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e010      	b.n	8006926 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	3b01      	subs	r3, #1
 8006912:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4013      	ands	r3, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d196      	bne.n	8006852 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3728      	adds	r7, #40	; 0x28
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20000170 	.word	0x20000170

08006934 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af02      	add	r7, sp, #8
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006948:	d111      	bne.n	800696e <SPI_EndRxTransaction+0x3a>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006952:	d004      	beq.n	800695e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695c:	d107      	bne.n	800696e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800696c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	2180      	movs	r1, #128	; 0x80
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff febd 	bl	80066f8 <SPI_WaitFlagStateUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d007      	beq.n	8006994 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006988:	f043 0220 	orr.w	r2, r3, #32
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e023      	b.n	80069dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800699c:	d11d      	bne.n	80069da <SPI_EndRxTransaction+0xa6>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a6:	d004      	beq.n	80069b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b0:	d113      	bne.n	80069da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff ff22 	bl	8006808 <SPI_WaitFifoStateUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d007      	beq.n	80069da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ce:	f043 0220 	orr.w	r2, r3, #32
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e000      	b.n	80069dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff ff03 	bl	8006808 <SPI_WaitFifoStateUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0c:	f043 0220 	orr.w	r2, r3, #32
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e027      	b.n	8006a68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2180      	movs	r1, #128	; 0x80
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f7ff fe68 	bl	80066f8 <SPI_WaitFlagStateUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a32:	f043 0220 	orr.w	r2, r3, #32
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e014      	b.n	8006a68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff fedc 	bl	8006808 <SPI_WaitFifoStateUntilTimeout>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5a:	f043 0220 	orr.w	r2, r3, #32
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e000      	b.n	8006a68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e049      	b.n	8006b16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fa fd1a 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f000 f9ee 	bl	8006e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d001      	beq.n	8006b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e04f      	b.n	8006bd8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a23      	ldr	r2, [pc, #140]	; (8006be4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d01d      	beq.n	8006b96 <HAL_TIM_Base_Start_IT+0x76>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b62:	d018      	beq.n	8006b96 <HAL_TIM_Base_Start_IT+0x76>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1f      	ldr	r2, [pc, #124]	; (8006be8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <HAL_TIM_Base_Start_IT+0x76>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1e      	ldr	r2, [pc, #120]	; (8006bec <HAL_TIM_Base_Start_IT+0xcc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00e      	beq.n	8006b96 <HAL_TIM_Base_Start_IT+0x76>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1c      	ldr	r2, [pc, #112]	; (8006bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d009      	beq.n	8006b96 <HAL_TIM_Base_Start_IT+0x76>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1b      	ldr	r2, [pc, #108]	; (8006bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_TIM_Base_Start_IT+0x76>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a19      	ldr	r2, [pc, #100]	; (8006bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d115      	bne.n	8006bc2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	4b17      	ldr	r3, [pc, #92]	; (8006bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b06      	cmp	r3, #6
 8006ba6:	d015      	beq.n	8006bd4 <HAL_TIM_Base_Start_IT+0xb4>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bae:	d011      	beq.n	8006bd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc0:	e008      	b.n	8006bd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0201 	orr.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e000      	b.n	8006bd6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	40012c00 	.word	0x40012c00
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40013400 	.word	0x40013400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	00010007 	.word	0x00010007

08006c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d122      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d11b      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0202 	mvn.w	r2, #2
 8006c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f905 	bl	8006e52 <HAL_TIM_IC_CaptureCallback>
 8006c48:	e005      	b.n	8006c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8f7 	bl	8006e3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f908 	bl	8006e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d122      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d11b      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0204 	mvn.w	r2, #4
 8006c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8db 	bl	8006e52 <HAL_TIM_IC_CaptureCallback>
 8006c9c:	e005      	b.n	8006caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f8cd 	bl	8006e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f8de 	bl	8006e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d122      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f003 0308 	and.w	r3, r3, #8
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d11b      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0208 	mvn.w	r2, #8
 8006cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2204      	movs	r2, #4
 8006cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f8b1 	bl	8006e52 <HAL_TIM_IC_CaptureCallback>
 8006cf0:	e005      	b.n	8006cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f8a3 	bl	8006e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f8b4 	bl	8006e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0310 	and.w	r3, r3, #16
 8006d0e:	2b10      	cmp	r3, #16
 8006d10:	d122      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d11b      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0210 	mvn.w	r2, #16
 8006d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f887 	bl	8006e52 <HAL_TIM_IC_CaptureCallback>
 8006d44:	e005      	b.n	8006d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f879 	bl	8006e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f88a 	bl	8006e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d10e      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d107      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0201 	mvn.w	r2, #1
 8006d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fa f9fa 	bl	8001178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8e:	2b80      	cmp	r3, #128	; 0x80
 8006d90:	d10e      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9c:	2b80      	cmp	r3, #128	; 0x80
 8006d9e:	d107      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f914 	bl	8006fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dbe:	d10e      	bne.n	8006dde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dca:	2b80      	cmp	r3, #128	; 0x80
 8006dcc:	d107      	bne.n	8006dde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f907 	bl	8006fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de8:	2b40      	cmp	r3, #64	; 0x40
 8006dea:	d10e      	bne.n	8006e0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d107      	bne.n	8006e0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f838 	bl	8006e7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d10e      	bne.n	8006e36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d107      	bne.n	8006e36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f06f 0220 	mvn.w	r2, #32
 8006e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f8c7 	bl	8006fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
	...

08006e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a40      	ldr	r2, [pc, #256]	; (8006fa4 <TIM_Base_SetConfig+0x114>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d013      	beq.n	8006ed0 <TIM_Base_SetConfig+0x40>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eae:	d00f      	beq.n	8006ed0 <TIM_Base_SetConfig+0x40>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a3d      	ldr	r2, [pc, #244]	; (8006fa8 <TIM_Base_SetConfig+0x118>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00b      	beq.n	8006ed0 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a3c      	ldr	r2, [pc, #240]	; (8006fac <TIM_Base_SetConfig+0x11c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d007      	beq.n	8006ed0 <TIM_Base_SetConfig+0x40>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a3b      	ldr	r2, [pc, #236]	; (8006fb0 <TIM_Base_SetConfig+0x120>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_Base_SetConfig+0x40>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a3a      	ldr	r2, [pc, #232]	; (8006fb4 <TIM_Base_SetConfig+0x124>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d108      	bne.n	8006ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2f      	ldr	r2, [pc, #188]	; (8006fa4 <TIM_Base_SetConfig+0x114>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d01f      	beq.n	8006f2a <TIM_Base_SetConfig+0x9a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef0:	d01b      	beq.n	8006f2a <TIM_Base_SetConfig+0x9a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a2c      	ldr	r2, [pc, #176]	; (8006fa8 <TIM_Base_SetConfig+0x118>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d017      	beq.n	8006f2a <TIM_Base_SetConfig+0x9a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a2b      	ldr	r2, [pc, #172]	; (8006fac <TIM_Base_SetConfig+0x11c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <TIM_Base_SetConfig+0x9a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a2a      	ldr	r2, [pc, #168]	; (8006fb0 <TIM_Base_SetConfig+0x120>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00f      	beq.n	8006f2a <TIM_Base_SetConfig+0x9a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a29      	ldr	r2, [pc, #164]	; (8006fb4 <TIM_Base_SetConfig+0x124>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00b      	beq.n	8006f2a <TIM_Base_SetConfig+0x9a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a28      	ldr	r2, [pc, #160]	; (8006fb8 <TIM_Base_SetConfig+0x128>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d007      	beq.n	8006f2a <TIM_Base_SetConfig+0x9a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a27      	ldr	r2, [pc, #156]	; (8006fbc <TIM_Base_SetConfig+0x12c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d003      	beq.n	8006f2a <TIM_Base_SetConfig+0x9a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a26      	ldr	r2, [pc, #152]	; (8006fc0 <TIM_Base_SetConfig+0x130>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d108      	bne.n	8006f3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a10      	ldr	r2, [pc, #64]	; (8006fa4 <TIM_Base_SetConfig+0x114>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00f      	beq.n	8006f88 <TIM_Base_SetConfig+0xf8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a12      	ldr	r2, [pc, #72]	; (8006fb4 <TIM_Base_SetConfig+0x124>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00b      	beq.n	8006f88 <TIM_Base_SetConfig+0xf8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a11      	ldr	r2, [pc, #68]	; (8006fb8 <TIM_Base_SetConfig+0x128>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d007      	beq.n	8006f88 <TIM_Base_SetConfig+0xf8>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a10      	ldr	r2, [pc, #64]	; (8006fbc <TIM_Base_SetConfig+0x12c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_Base_SetConfig+0xf8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a0f      	ldr	r2, [pc, #60]	; (8006fc0 <TIM_Base_SetConfig+0x130>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d103      	bne.n	8006f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	691a      	ldr	r2, [r3, #16]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	615a      	str	r2, [r3, #20]
}
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40012c00 	.word	0x40012c00
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800
 8006fb0:	40000c00 	.word	0x40000c00
 8006fb4:	40013400 	.word	0x40013400
 8006fb8:	40014000 	.word	0x40014000
 8006fbc:	40014400 	.word	0x40014400
 8006fc0:	40014800 	.word	0x40014800

08006fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <__NVIC_SetPriority>:
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800700c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007010:	2b00      	cmp	r3, #0
 8007012:	db0a      	blt.n	800702a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	490c      	ldr	r1, [pc, #48]	; (800704c <__NVIC_SetPriority+0x4c>)
 800701a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800701e:	0112      	lsls	r2, r2, #4
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	440b      	add	r3, r1
 8007024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007028:	e00a      	b.n	8007040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	b2da      	uxtb	r2, r3
 800702e:	4908      	ldr	r1, [pc, #32]	; (8007050 <__NVIC_SetPriority+0x50>)
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	3b04      	subs	r3, #4
 8007038:	0112      	lsls	r2, r2, #4
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	440b      	add	r3, r1
 800703e:	761a      	strb	r2, [r3, #24]
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	e000e100 	.word	0xe000e100
 8007050:	e000ed00 	.word	0xe000ed00

08007054 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007058:	4b05      	ldr	r3, [pc, #20]	; (8007070 <SysTick_Handler+0x1c>)
 800705a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800705c:	f002 f936 	bl	80092cc <xTaskGetSchedulerState>
 8007060:	4603      	mov	r3, r0
 8007062:	2b01      	cmp	r3, #1
 8007064:	d001      	beq.n	800706a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007066:	f000 fd97 	bl	8007b98 <xPortSysTickHandler>
  }
}
 800706a:	bf00      	nop
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	e000e010 	.word	0xe000e010

08007074 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007078:	2100      	movs	r1, #0
 800707a:	f06f 0004 	mvn.w	r0, #4
 800707e:	f7ff ffbf 	bl	8007000 <__NVIC_SetPriority>
#endif
}
 8007082:	bf00      	nop
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800708e:	f3ef 8305 	mrs	r3, IPSR
 8007092:	603b      	str	r3, [r7, #0]
  return(result);
 8007094:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800709a:	f06f 0305 	mvn.w	r3, #5
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	e00c      	b.n	80070bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80070a2:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <osKernelInitialize+0x44>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d105      	bne.n	80070b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80070aa:	4b08      	ldr	r3, [pc, #32]	; (80070cc <osKernelInitialize+0x44>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	607b      	str	r3, [r7, #4]
 80070b4:	e002      	b.n	80070bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80070b6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070bc:	687b      	ldr	r3, [r7, #4]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	200003c0 	.word	0x200003c0

080070d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070d6:	f3ef 8305 	mrs	r3, IPSR
 80070da:	603b      	str	r3, [r7, #0]
  return(result);
 80070dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80070e2:	f06f 0305 	mvn.w	r3, #5
 80070e6:	607b      	str	r3, [r7, #4]
 80070e8:	e010      	b.n	800710c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80070ea:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <osKernelStart+0x48>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d109      	bne.n	8007106 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80070f2:	f7ff ffbf 	bl	8007074 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80070f6:	4b08      	ldr	r3, [pc, #32]	; (8007118 <osKernelStart+0x48>)
 80070f8:	2202      	movs	r2, #2
 80070fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80070fc:	f001 fc9e 	bl	8008a3c <vTaskStartScheduler>
      stat = osOK;
 8007100:	2300      	movs	r3, #0
 8007102:	607b      	str	r3, [r7, #4]
 8007104:	e002      	b.n	800710c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800710c:	687b      	ldr	r3, [r7, #4]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	200003c0 	.word	0x200003c0

0800711c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b08e      	sub	sp, #56	; 0x38
 8007120:	af04      	add	r7, sp, #16
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800712c:	f3ef 8305 	mrs	r3, IPSR
 8007130:	617b      	str	r3, [r7, #20]
  return(result);
 8007132:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007134:	2b00      	cmp	r3, #0
 8007136:	d17e      	bne.n	8007236 <osThreadNew+0x11a>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d07b      	beq.n	8007236 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800713e:	2380      	movs	r3, #128	; 0x80
 8007140:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007142:	2318      	movs	r3, #24
 8007144:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007146:	2300      	movs	r3, #0
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800714a:	f04f 33ff 	mov.w	r3, #4294967295
 800714e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d045      	beq.n	80071e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <osThreadNew+0x48>
        name = attr->name;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d008      	beq.n	800718a <osThreadNew+0x6e>
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	2b38      	cmp	r3, #56	; 0x38
 800717c:	d805      	bhi.n	800718a <osThreadNew+0x6e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <osThreadNew+0x72>
        return (NULL);
 800718a:	2300      	movs	r3, #0
 800718c:	e054      	b.n	8007238 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	089b      	lsrs	r3, r3, #2
 800719c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00e      	beq.n	80071c4 <osThreadNew+0xa8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	2b5b      	cmp	r3, #91	; 0x5b
 80071ac:	d90a      	bls.n	80071c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d006      	beq.n	80071c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <osThreadNew+0xa8>
        mem = 1;
 80071be:	2301      	movs	r3, #1
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	e010      	b.n	80071e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10c      	bne.n	80071e6 <osThreadNew+0xca>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d108      	bne.n	80071e6 <osThreadNew+0xca>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <osThreadNew+0xca>
          mem = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	61bb      	str	r3, [r7, #24]
 80071e0:	e001      	b.n	80071e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d110      	bne.n	800720e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071f4:	9202      	str	r2, [sp, #8]
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6a3a      	ldr	r2, [r7, #32]
 8007200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f001 fa44 	bl	8008690 <xTaskCreateStatic>
 8007208:	4603      	mov	r3, r0
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	e013      	b.n	8007236 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d110      	bne.n	8007236 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	b29a      	uxth	r2, r3
 8007218:	f107 0310 	add.w	r3, r7, #16
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f001 fa8f 	bl	800874a <xTaskCreate>
 800722c:	4603      	mov	r3, r0
 800722e:	2b01      	cmp	r3, #1
 8007230:	d001      	beq.n	8007236 <osThreadNew+0x11a>
            hTask = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007236:	693b      	ldr	r3, [r7, #16]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3728      	adds	r7, #40	; 0x28
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007248:	f3ef 8305 	mrs	r3, IPSR
 800724c:	60bb      	str	r3, [r7, #8]
  return(result);
 800724e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <osDelay+0x1c>
    stat = osErrorISR;
 8007254:	f06f 0305 	mvn.w	r3, #5
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	e007      	b.n	800726c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 fbb4 	bl	80089d4 <vTaskDelay>
    }
  }

  return (stat);
 800726c:	68fb      	ldr	r3, [r7, #12]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4a07      	ldr	r2, [pc, #28]	; (80072a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007288:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4a06      	ldr	r2, [pc, #24]	; (80072a8 <vApplicationGetIdleTaskMemory+0x30>)
 800728e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2280      	movs	r2, #128	; 0x80
 8007294:	601a      	str	r2, [r3, #0]
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	200003c4 	.word	0x200003c4
 80072a8:	20000420 	.word	0x20000420

080072ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a07      	ldr	r2, [pc, #28]	; (80072d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80072bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	4a06      	ldr	r2, [pc, #24]	; (80072dc <vApplicationGetTimerTaskMemory+0x30>)
 80072c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072ca:	601a      	str	r2, [r3, #0]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	20000620 	.word	0x20000620
 80072dc:	2000067c 	.word	0x2000067c

080072e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08a      	sub	sp, #40	; 0x28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072ec:	f001 fc0c 	bl	8008b08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072f0:	4b5b      	ldr	r3, [pc, #364]	; (8007460 <pvPortMalloc+0x180>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072f8:	f000 f920 	bl	800753c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072fc:	4b59      	ldr	r3, [pc, #356]	; (8007464 <pvPortMalloc+0x184>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4013      	ands	r3, r2
 8007304:	2b00      	cmp	r3, #0
 8007306:	f040 8093 	bne.w	8007430 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01d      	beq.n	800734c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007310:	2208      	movs	r2, #8
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4413      	add	r3, r2
 8007316:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	2b00      	cmp	r3, #0
 8007320:	d014      	beq.n	800734c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f023 0307 	bic.w	r3, r3, #7
 8007328:	3308      	adds	r3, #8
 800732a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007348:	bf00      	nop
 800734a:	e7fe      	b.n	800734a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d06e      	beq.n	8007430 <pvPortMalloc+0x150>
 8007352:	4b45      	ldr	r3, [pc, #276]	; (8007468 <pvPortMalloc+0x188>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	d869      	bhi.n	8007430 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800735c:	4b43      	ldr	r3, [pc, #268]	; (800746c <pvPortMalloc+0x18c>)
 800735e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007360:	4b42      	ldr	r3, [pc, #264]	; (800746c <pvPortMalloc+0x18c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007366:	e004      	b.n	8007372 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	429a      	cmp	r2, r3
 800737a:	d903      	bls.n	8007384 <pvPortMalloc+0xa4>
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f1      	bne.n	8007368 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007384:	4b36      	ldr	r3, [pc, #216]	; (8007460 <pvPortMalloc+0x180>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738a:	429a      	cmp	r2, r3
 800738c:	d050      	beq.n	8007430 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2208      	movs	r2, #8
 8007394:	4413      	add	r3, r2
 8007396:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	2308      	movs	r3, #8
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d91f      	bls.n	80073f0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4413      	add	r3, r2
 80073b6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <pvPortMalloc+0xf8>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	613b      	str	r3, [r7, #16]
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073ea:	69b8      	ldr	r0, [r7, #24]
 80073ec:	f000 f908 	bl	8007600 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073f0:	4b1d      	ldr	r3, [pc, #116]	; (8007468 <pvPortMalloc+0x188>)
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	4a1b      	ldr	r2, [pc, #108]	; (8007468 <pvPortMalloc+0x188>)
 80073fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073fe:	4b1a      	ldr	r3, [pc, #104]	; (8007468 <pvPortMalloc+0x188>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	4b1b      	ldr	r3, [pc, #108]	; (8007470 <pvPortMalloc+0x190>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d203      	bcs.n	8007412 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800740a:	4b17      	ldr	r3, [pc, #92]	; (8007468 <pvPortMalloc+0x188>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a18      	ldr	r2, [pc, #96]	; (8007470 <pvPortMalloc+0x190>)
 8007410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	4b13      	ldr	r3, [pc, #76]	; (8007464 <pvPortMalloc+0x184>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	431a      	orrs	r2, r3
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007426:	4b13      	ldr	r3, [pc, #76]	; (8007474 <pvPortMalloc+0x194>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	4a11      	ldr	r2, [pc, #68]	; (8007474 <pvPortMalloc+0x194>)
 800742e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007430:	f001 fb78 	bl	8008b24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <pvPortMalloc+0x174>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	60fb      	str	r3, [r7, #12]
}
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <pvPortMalloc+0x172>
	return pvReturn;
 8007454:	69fb      	ldr	r3, [r7, #28]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3728      	adds	r7, #40	; 0x28
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	2000163c 	.word	0x2000163c
 8007464:	20001650 	.word	0x20001650
 8007468:	20001640 	.word	0x20001640
 800746c:	20001634 	.word	0x20001634
 8007470:	20001644 	.word	0x20001644
 8007474:	20001648 	.word	0x20001648

08007478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d04d      	beq.n	8007526 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800748a:	2308      	movs	r3, #8
 800748c:	425b      	negs	r3, r3
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4413      	add	r3, r2
 8007492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	4b24      	ldr	r3, [pc, #144]	; (8007530 <vPortFree+0xb8>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <vPortFree+0x44>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	60fb      	str	r3, [r7, #12]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <vPortFree+0x62>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	60bb      	str	r3, [r7, #8]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	4b14      	ldr	r3, [pc, #80]	; (8007530 <vPortFree+0xb8>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4013      	ands	r3, r2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01e      	beq.n	8007526 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d11a      	bne.n	8007526 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <vPortFree+0xb8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	43db      	mvns	r3, r3
 80074fa:	401a      	ands	r2, r3
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007500:	f001 fb02 	bl	8008b08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <vPortFree+0xbc>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4413      	add	r3, r2
 800750e:	4a09      	ldr	r2, [pc, #36]	; (8007534 <vPortFree+0xbc>)
 8007510:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007512:	6938      	ldr	r0, [r7, #16]
 8007514:	f000 f874 	bl	8007600 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <vPortFree+0xc0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3301      	adds	r3, #1
 800751e:	4a06      	ldr	r2, [pc, #24]	; (8007538 <vPortFree+0xc0>)
 8007520:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007522:	f001 faff 	bl	8008b24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007526:	bf00      	nop
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20001650 	.word	0x20001650
 8007534:	20001640 	.word	0x20001640
 8007538:	2000164c 	.word	0x2000164c

0800753c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007542:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007546:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007548:	4b27      	ldr	r3, [pc, #156]	; (80075e8 <prvHeapInit+0xac>)
 800754a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00c      	beq.n	8007570 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3307      	adds	r3, #7
 800755a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0307 	bic.w	r3, r3, #7
 8007562:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	4a1f      	ldr	r2, [pc, #124]	; (80075e8 <prvHeapInit+0xac>)
 800756c:	4413      	add	r3, r2
 800756e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007574:	4a1d      	ldr	r2, [pc, #116]	; (80075ec <prvHeapInit+0xb0>)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800757a:	4b1c      	ldr	r3, [pc, #112]	; (80075ec <prvHeapInit+0xb0>)
 800757c:	2200      	movs	r2, #0
 800757e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	4413      	add	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007588:	2208      	movs	r2, #8
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0307 	bic.w	r3, r3, #7
 8007596:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4a15      	ldr	r2, [pc, #84]	; (80075f0 <prvHeapInit+0xb4>)
 800759c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800759e:	4b14      	ldr	r3, [pc, #80]	; (80075f0 <prvHeapInit+0xb4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075a6:	4b12      	ldr	r3, [pc, #72]	; (80075f0 <prvHeapInit+0xb4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	1ad2      	subs	r2, r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075bc:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <prvHeapInit+0xb4>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4a0a      	ldr	r2, [pc, #40]	; (80075f4 <prvHeapInit+0xb8>)
 80075ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	4a09      	ldr	r2, [pc, #36]	; (80075f8 <prvHeapInit+0xbc>)
 80075d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075d4:	4b09      	ldr	r3, [pc, #36]	; (80075fc <prvHeapInit+0xc0>)
 80075d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075da:	601a      	str	r2, [r3, #0]
}
 80075dc:	bf00      	nop
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	20000a7c 	.word	0x20000a7c
 80075ec:	20001634 	.word	0x20001634
 80075f0:	2000163c 	.word	0x2000163c
 80075f4:	20001644 	.word	0x20001644
 80075f8:	20001640 	.word	0x20001640
 80075fc:	20001650 	.word	0x20001650

08007600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007608:	4b28      	ldr	r3, [pc, #160]	; (80076ac <prvInsertBlockIntoFreeList+0xac>)
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	e002      	b.n	8007614 <prvInsertBlockIntoFreeList+0x14>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	429a      	cmp	r2, r3
 800761c:	d8f7      	bhi.n	800760e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	4413      	add	r3, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	429a      	cmp	r2, r3
 800762e:	d108      	bne.n	8007642 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	441a      	add	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	441a      	add	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d118      	bne.n	8007688 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <prvInsertBlockIntoFreeList+0xb0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d00d      	beq.n	800767e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	441a      	add	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	e008      	b.n	8007690 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800767e:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <prvInsertBlockIntoFreeList+0xb0>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	e003      	b.n	8007690 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	d002      	beq.n	800769e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20001634 	.word	0x20001634
 80076b0:	2000163c 	.word	0x2000163c

080076b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 0208 	add.w	r2, r3, #8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f04f 32ff 	mov.w	r2, #4294967295
 80076cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f103 0208 	add.w	r2, r3, #8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f103 0208 	add.w	r2, r3, #8
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	601a      	str	r2, [r3, #0]
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d103      	bne.n	8007776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e00c      	b.n	8007790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3308      	adds	r3, #8
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	e002      	b.n	8007784 <vListInsert+0x2e>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	429a      	cmp	r2, r3
 800778e:	d2f6      	bcs.n	800777e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	601a      	str	r2, [r3, #0]
}
 80077bc:	bf00      	nop
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6892      	ldr	r2, [r2, #8]
 80077de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6852      	ldr	r2, [r2, #4]
 80077e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d103      	bne.n	80077fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	1e5a      	subs	r2, r3, #1
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3b04      	subs	r3, #4
 800782c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3b04      	subs	r3, #4
 800783a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f023 0201 	bic.w	r2, r3, #1
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b04      	subs	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800784c:	4a0c      	ldr	r2, [pc, #48]	; (8007880 <pxPortInitialiseStack+0x64>)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3b14      	subs	r3, #20
 8007856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3b04      	subs	r3, #4
 8007862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f06f 0202 	mvn.w	r2, #2
 800786a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3b20      	subs	r3, #32
 8007870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007872:	68fb      	ldr	r3, [r7, #12]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	08007885 	.word	0x08007885

08007884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800788e:	4b12      	ldr	r3, [pc, #72]	; (80078d8 <prvTaskExitError+0x54>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d00a      	beq.n	80078ae <prvTaskExitError+0x2a>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	60fb      	str	r3, [r7, #12]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <prvTaskExitError+0x28>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	60bb      	str	r3, [r7, #8]
}
 80078c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078c2:	bf00      	nop
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0fc      	beq.n	80078c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	2000017c 	.word	0x2000017c
 80078dc:	00000000 	.word	0x00000000

080078e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <pxCurrentTCBConst2>)
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	6808      	ldr	r0, [r1, #0]
 80078e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	f380 8809 	msr	PSP, r0
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8811 	msr	BASEPRI, r0
 80078fa:	4770      	bx	lr
 80078fc:	f3af 8000 	nop.w

08007900 <pxCurrentTCBConst2>:
 8007900:	2000165c 	.word	0x2000165c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop

08007908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007908:	4808      	ldr	r0, [pc, #32]	; (800792c <prvPortStartFirstTask+0x24>)
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	6800      	ldr	r0, [r0, #0]
 800790e:	f380 8808 	msr	MSP, r0
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8814 	msr	CONTROL, r0
 800791a:	b662      	cpsie	i
 800791c:	b661      	cpsie	f
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	df00      	svc	0
 8007928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800792a:	bf00      	nop
 800792c:	e000ed08 	.word	0xe000ed08

08007930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007936:	4b46      	ldr	r3, [pc, #280]	; (8007a50 <xPortStartScheduler+0x120>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a46      	ldr	r2, [pc, #280]	; (8007a54 <xPortStartScheduler+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d10a      	bne.n	8007956 <xPortStartScheduler+0x26>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007956:	4b3e      	ldr	r3, [pc, #248]	; (8007a50 <xPortStartScheduler+0x120>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3f      	ldr	r2, [pc, #252]	; (8007a58 <xPortStartScheduler+0x128>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d10a      	bne.n	8007976 <xPortStartScheduler+0x46>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007976:	4b39      	ldr	r3, [pc, #228]	; (8007a5c <xPortStartScheduler+0x12c>)
 8007978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	22ff      	movs	r2, #255	; 0xff
 8007986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007998:	b2da      	uxtb	r2, r3
 800799a:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <xPortStartScheduler+0x130>)
 800799c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800799e:	4b31      	ldr	r3, [pc, #196]	; (8007a64 <xPortStartScheduler+0x134>)
 80079a0:	2207      	movs	r2, #7
 80079a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079a4:	e009      	b.n	80079ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079a6:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <xPortStartScheduler+0x134>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	4a2d      	ldr	r2, [pc, #180]	; (8007a64 <xPortStartScheduler+0x134>)
 80079ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d0ef      	beq.n	80079a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079c6:	4b27      	ldr	r3, [pc, #156]	; (8007a64 <xPortStartScheduler+0x134>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1c3 0307 	rsb	r3, r3, #7
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d00a      	beq.n	80079e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60bb      	str	r3, [r7, #8]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079e8:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <xPortStartScheduler+0x134>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <xPortStartScheduler+0x134>)
 80079f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079f2:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <xPortStartScheduler+0x134>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <xPortStartScheduler+0x134>)
 80079fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a14      	ldr	r2, [pc, #80]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a1e:	f000 f8dd 	bl	8007bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a22:	4b12      	ldr	r3, [pc, #72]	; (8007a6c <xPortStartScheduler+0x13c>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a28:	f000 f8fc 	bl	8007c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <xPortStartScheduler+0x140>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0f      	ldr	r2, [pc, #60]	; (8007a70 <xPortStartScheduler+0x140>)
 8007a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a38:	f7ff ff66 	bl	8007908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a3c:	f001 f9da 	bl	8008df4 <vTaskSwitchContext>
	prvTaskExitError();
 8007a40:	f7ff ff20 	bl	8007884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	e000ed00 	.word	0xe000ed00
 8007a54:	410fc271 	.word	0x410fc271
 8007a58:	410fc270 	.word	0x410fc270
 8007a5c:	e000e400 	.word	0xe000e400
 8007a60:	20001654 	.word	0x20001654
 8007a64:	20001658 	.word	0x20001658
 8007a68:	e000ed20 	.word	0xe000ed20
 8007a6c:	2000017c 	.word	0x2000017c
 8007a70:	e000ef34 	.word	0xe000ef34

08007a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	607b      	str	r3, [r7, #4]
}
 8007a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <vPortEnterCritical+0x58>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	4a0d      	ldr	r2, [pc, #52]	; (8007acc <vPortEnterCritical+0x58>)
 8007a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a98:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <vPortEnterCritical+0x58>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10f      	bne.n	8007ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <vPortEnterCritical+0x5c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	603b      	str	r3, [r7, #0]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <vPortEnterCritical+0x4a>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	2000017c 	.word	0x2000017c
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ada:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <vPortExitCritical+0x50>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <vPortExitCritical+0x24>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	607b      	str	r3, [r7, #4]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <vPortExitCritical+0x50>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <vPortExitCritical+0x50>)
 8007b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b02:	4b08      	ldr	r3, [pc, #32]	; (8007b24 <vPortExitCritical+0x50>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <vPortExitCritical+0x42>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	2000017c 	.word	0x2000017c
	...

08007b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b30:	f3ef 8009 	mrs	r0, PSP
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <pxCurrentTCBConst>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	f01e 0f10 	tst.w	lr, #16
 8007b40:	bf08      	it	eq
 8007b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	6010      	str	r0, [r2, #0]
 8007b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b54:	f380 8811 	msr	BASEPRI, r0
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f001 f948 	bl	8008df4 <vTaskSwitchContext>
 8007b64:	f04f 0000 	mov.w	r0, #0
 8007b68:	f380 8811 	msr	BASEPRI, r0
 8007b6c:	bc09      	pop	{r0, r3}
 8007b6e:	6819      	ldr	r1, [r3, #0]
 8007b70:	6808      	ldr	r0, [r1, #0]
 8007b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b76:	f01e 0f10 	tst.w	lr, #16
 8007b7a:	bf08      	it	eq
 8007b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b80:	f380 8809 	msr	PSP, r0
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	f3af 8000 	nop.w

08007b90 <pxCurrentTCBConst>:
 8007b90:	2000165c 	.word	0x2000165c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bb2:	f001 f865 	bl	8008c80 <xTaskIncrementTick>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <xPortSysTickHandler+0x40>)
 8007bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	f383 8811 	msr	BASEPRI, r3
}
 8007bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007be0:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <vPortSetupTimerInterrupt+0x34>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <vPortSetupTimerInterrupt+0x38>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <vPortSetupTimerInterrupt+0x3c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <vPortSetupTimerInterrupt+0x40>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	099b      	lsrs	r3, r3, #6
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <vPortSetupTimerInterrupt+0x44>)
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bfe:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <vPortSetupTimerInterrupt+0x34>)
 8007c00:	2207      	movs	r2, #7
 8007c02:	601a      	str	r2, [r3, #0]
}
 8007c04:	bf00      	nop
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	e000e010 	.word	0xe000e010
 8007c14:	e000e018 	.word	0xe000e018
 8007c18:	20000170 	.word	0x20000170
 8007c1c:	10624dd3 	.word	0x10624dd3
 8007c20:	e000e014 	.word	0xe000e014

08007c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c34 <vPortEnableVFP+0x10>
 8007c28:	6801      	ldr	r1, [r0, #0]
 8007c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c2e:	6001      	str	r1, [r0, #0]
 8007c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c32:	bf00      	nop
 8007c34:	e000ed88 	.word	0xe000ed88

08007c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c3e:	f3ef 8305 	mrs	r3, IPSR
 8007c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b0f      	cmp	r3, #15
 8007c48:	d914      	bls.n	8007c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <vPortValidateInterruptPriority+0x70>)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c54:	4b15      	ldr	r3, [pc, #84]	; (8007cac <vPortValidateInterruptPriority+0x74>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	7afa      	ldrb	r2, [r7, #11]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d20a      	bcs.n	8007c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <vPortValidateInterruptPriority+0x78>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c7c:	4b0d      	ldr	r3, [pc, #52]	; (8007cb4 <vPortValidateInterruptPriority+0x7c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d90a      	bls.n	8007c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	603b      	str	r3, [r7, #0]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <vPortValidateInterruptPriority+0x60>
	}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	e000e3f0 	.word	0xe000e3f0
 8007cac:	20001654 	.word	0x20001654
 8007cb0:	e000ed0c 	.word	0xe000ed0c
 8007cb4:	20001658 	.word	0x20001658

08007cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <xQueueGenericReset+0x2a>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	60bb      	str	r3, [r7, #8]
}
 8007cde:	bf00      	nop
 8007ce0:	e7fe      	b.n	8007ce0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ce2:	f7ff fec7 	bl	8007a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	68f9      	ldr	r1, [r7, #12]
 8007cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cf2:	fb01 f303 	mul.w	r3, r1, r3
 8007cf6:	441a      	add	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d12:	3b01      	subs	r3, #1
 8007d14:	68f9      	ldr	r1, [r7, #12]
 8007d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d18:	fb01 f303 	mul.w	r3, r1, r3
 8007d1c:	441a      	add	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	22ff      	movs	r2, #255	; 0xff
 8007d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	22ff      	movs	r2, #255	; 0xff
 8007d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d114      	bne.n	8007d62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01a      	beq.n	8007d76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3310      	adds	r3, #16
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 f903 	bl	8008f50 <xTaskRemoveFromEventList>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d012      	beq.n	8007d76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d50:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <xQueueGenericReset+0xcc>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	e009      	b.n	8007d76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3310      	adds	r3, #16
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff fca4 	bl	80076b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff fc9f 	bl	80076b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d76:	f7ff fead 	bl	8007ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d7a:	2301      	movs	r3, #1
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	e000ed04 	.word	0xe000ed04

08007d88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08e      	sub	sp, #56	; 0x38
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <xQueueGenericCreateStatic+0x52>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <xQueueGenericCreateStatic+0x56>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <xQueueGenericCreateStatic+0x58>
 8007dde:	2300      	movs	r3, #0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	623b      	str	r3, [r7, #32]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <xQueueGenericCreateStatic+0x7e>
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <xQueueGenericCreateStatic+0x82>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <xQueueGenericCreateStatic+0x84>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	61fb      	str	r3, [r7, #28]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e26:	2350      	movs	r3, #80	; 0x50
 8007e28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b50      	cmp	r3, #80	; 0x50
 8007e2e:	d00a      	beq.n	8007e46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	61bb      	str	r3, [r7, #24]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00d      	beq.n	8007e6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	4613      	mov	r3, r2
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f805 	bl	8007e78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3730      	adds	r7, #48	; 0x30
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d103      	bne.n	8007e94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e002      	b.n	8007e9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	69b8      	ldr	r0, [r7, #24]
 8007eaa:	f7ff ff05 	bl	8007cb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	78fa      	ldrb	r2, [r7, #3]
 8007eb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007eb6:	bf00      	nop
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	; 0x38
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <xQueueGenericSend+0x32>
	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d103      	bne.n	8007f00 <xQueueGenericSend+0x40>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <xQueueGenericSend+0x44>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e000      	b.n	8007f06 <xQueueGenericSend+0x46>
 8007f04:	2300      	movs	r3, #0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10a      	bne.n	8007f20 <xQueueGenericSend+0x60>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d103      	bne.n	8007f2e <xQueueGenericSend+0x6e>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d101      	bne.n	8007f32 <xQueueGenericSend+0x72>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <xQueueGenericSend+0x74>
 8007f32:	2300      	movs	r3, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <xQueueGenericSend+0x8e>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	623b      	str	r3, [r7, #32]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f4e:	f001 f9bd 	bl	80092cc <xTaskGetSchedulerState>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <xQueueGenericSend+0x9e>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <xQueueGenericSend+0xa2>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <xQueueGenericSend+0xa4>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <xQueueGenericSend+0xbe>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	61fb      	str	r3, [r7, #28]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f7e:	f7ff fd79 	bl	8007a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d302      	bcc.n	8007f94 <xQueueGenericSend+0xd4>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d129      	bne.n	8007fe8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f9a:	f000 fa0b 	bl	80083b4 <prvCopyDataToQueue>
 8007f9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d010      	beq.n	8007fca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	3324      	adds	r3, #36	; 0x24
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 ffcf 	bl	8008f50 <xTaskRemoveFromEventList>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d013      	beq.n	8007fe0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fb8:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <xQueueGenericSend+0x1f8>)
 8007fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	e00a      	b.n	8007fe0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fd0:	4b39      	ldr	r3, [pc, #228]	; (80080b8 <xQueueGenericSend+0x1f8>)
 8007fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fe0:	f7ff fd78 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e063      	b.n	80080b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fee:	f7ff fd71 	bl	8007ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e05c      	b.n	80080b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ffc:	f107 0314 	add.w	r3, r7, #20
 8008000:	4618      	mov	r0, r3
 8008002:	f001 f809 	bl	8009018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008006:	2301      	movs	r3, #1
 8008008:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800800a:	f7ff fd63 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800800e:	f000 fd7b 	bl	8008b08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008012:	f7ff fd2f 	bl	8007a74 <vPortEnterCritical>
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800801c:	b25b      	sxtb	r3, r3
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008022:	d103      	bne.n	800802c <xQueueGenericSend+0x16c>
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008032:	b25b      	sxtb	r3, r3
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d103      	bne.n	8008042 <xQueueGenericSend+0x182>
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008042:	f7ff fd47 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008046:	1d3a      	adds	r2, r7, #4
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fff8 	bl	8009044 <xTaskCheckForTimeOut>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d124      	bne.n	80080a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800805a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800805c:	f000 faa2 	bl	80085a4 <prvIsQueueFull>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d018      	beq.n	8008098 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	3310      	adds	r3, #16
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f000 ff1e 	bl	8008eb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008076:	f000 fa2d 	bl	80084d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800807a:	f000 fd53 	bl	8008b24 <xTaskResumeAll>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	f47f af7c 	bne.w	8007f7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <xQueueGenericSend+0x1f8>)
 8008088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	e772      	b.n	8007f7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800809a:	f000 fa1b 	bl	80084d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800809e:	f000 fd41 	bl	8008b24 <xTaskResumeAll>
 80080a2:	e76c      	b.n	8007f7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080a6:	f000 fa15 	bl	80084d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080aa:	f000 fd3b 	bl	8008b24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3738      	adds	r7, #56	; 0x38
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b090      	sub	sp, #64	; 0x40
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <xQueueGenericSendFromISR+0x3c>
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <xQueueGenericSendFromISR+0x40>
 80080f8:	2301      	movs	r3, #1
 80080fa:	e000      	b.n	80080fe <xQueueGenericSendFromISR+0x42>
 80080fc:	2300      	movs	r3, #0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d103      	bne.n	8008126 <xQueueGenericSendFromISR+0x6a>
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <xQueueGenericSendFromISR+0x6e>
 8008126:	2301      	movs	r3, #1
 8008128:	e000      	b.n	800812c <xQueueGenericSendFromISR+0x70>
 800812a:	2300      	movs	r3, #0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	623b      	str	r3, [r7, #32]
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008146:	f7ff fd77 	bl	8007c38 <vPortValidateInterruptPriority>
	__asm volatile
 800814a:	f3ef 8211 	mrs	r2, BASEPRI
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	61fa      	str	r2, [r7, #28]
 8008160:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008162:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008164:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816e:	429a      	cmp	r2, r3
 8008170:	d302      	bcc.n	8008178 <xQueueGenericSendFromISR+0xbc>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d12f      	bne.n	80081d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800817e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	68b9      	ldr	r1, [r7, #8]
 800818c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800818e:	f000 f911 	bl	80083b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008192:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819a:	d112      	bne.n	80081c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d016      	beq.n	80081d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a6:	3324      	adds	r3, #36	; 0x24
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fed1 	bl	8008f50 <xTaskRemoveFromEventList>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00b      	beq.n	80081d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	e007      	b.n	80081d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80081c6:	3301      	adds	r3, #1
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	b25a      	sxtb	r2, r3
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081d2:	2301      	movs	r3, #1
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80081d6:	e001      	b.n	80081dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081d8:	2300      	movs	r3, #0
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081de:	617b      	str	r3, [r7, #20]
	__asm volatile
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f383 8811 	msr	BASEPRI, r3
}
 80081e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3740      	adds	r7, #64	; 0x40
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b08c      	sub	sp, #48	; 0x30
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008200:	2300      	movs	r3, #0
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10a      	bne.n	8008224 <xQueueReceive+0x30>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	623b      	str	r3, [r7, #32]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d103      	bne.n	8008232 <xQueueReceive+0x3e>
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <xQueueReceive+0x42>
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <xQueueReceive+0x44>
 8008236:	2300      	movs	r3, #0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <xQueueReceive+0x5e>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	61fb      	str	r3, [r7, #28]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008252:	f001 f83b 	bl	80092cc <xTaskGetSchedulerState>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <xQueueReceive+0x6e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <xQueueReceive+0x72>
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <xQueueReceive+0x74>
 8008266:	2300      	movs	r3, #0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <xQueueReceive+0x8e>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	61bb      	str	r3, [r7, #24]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008282:	f7ff fbf7 	bl	8007a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01f      	beq.n	80082d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008296:	f000 f8f7 	bl	8008488 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	1e5a      	subs	r2, r3, #1
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00f      	beq.n	80082ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	3310      	adds	r3, #16
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fe4e 	bl	8008f50 <xTaskRemoveFromEventList>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d007      	beq.n	80082ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082ba:	4b3d      	ldr	r3, [pc, #244]	; (80083b0 <xQueueReceive+0x1bc>)
 80082bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082ca:	f7ff fc03 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e069      	b.n	80083a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082d8:	f7ff fbfc 	bl	8007ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082dc:	2300      	movs	r3, #0
 80082de:	e062      	b.n	80083a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082e6:	f107 0310 	add.w	r3, r7, #16
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fe94 	bl	8009018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082f0:	2301      	movs	r3, #1
 80082f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082f4:	f7ff fbee 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082f8:	f000 fc06 	bl	8008b08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082fc:	f7ff fbba 	bl	8007a74 <vPortEnterCritical>
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008306:	b25b      	sxtb	r3, r3
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830c:	d103      	bne.n	8008316 <xQueueReceive+0x122>
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800831c:	b25b      	sxtb	r3, r3
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d103      	bne.n	800832c <xQueueReceive+0x138>
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800832c:	f7ff fbd2 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008330:	1d3a      	adds	r2, r7, #4
 8008332:	f107 0310 	add.w	r3, r7, #16
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fe83 	bl	8009044 <xTaskCheckForTimeOut>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d123      	bne.n	800838c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008346:	f000 f917 	bl	8008578 <prvIsQueueEmpty>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d017      	beq.n	8008380 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	3324      	adds	r3, #36	; 0x24
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4611      	mov	r1, r2
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fda9 	bl	8008eb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800835e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008360:	f000 f8b8 	bl	80084d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008364:	f000 fbde 	bl	8008b24 <xTaskResumeAll>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d189      	bne.n	8008282 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800836e:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <xQueueReceive+0x1bc>)
 8008370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	e780      	b.n	8008282 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008382:	f000 f8a7 	bl	80084d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008386:	f000 fbcd 	bl	8008b24 <xTaskResumeAll>
 800838a:	e77a      	b.n	8008282 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800838c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838e:	f000 f8a1 	bl	80084d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008392:	f000 fbc7 	bl	8008b24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008398:	f000 f8ee 	bl	8008578 <prvIsQueueEmpty>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f43f af6f 	beq.w	8008282 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3730      	adds	r7, #48	; 0x30
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	e000ed04 	.word	0xe000ed04

080083b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10d      	bne.n	80083ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d14d      	bne.n	8008476 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 ff92 	bl	8009308 <xTaskPriorityDisinherit>
 80083e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	609a      	str	r2, [r3, #8]
 80083ec:	e043      	b.n	8008476 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d119      	bne.n	8008428 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6858      	ldr	r0, [r3, #4]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	461a      	mov	r2, r3
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	f001 fbb6 	bl	8009b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840c:	441a      	add	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	429a      	cmp	r2, r3
 800841c:	d32b      	bcc.n	8008476 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	e026      	b.n	8008476 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68d8      	ldr	r0, [r3, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	461a      	mov	r2, r3
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	f001 fb9c 	bl	8009b70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	425b      	negs	r3, r3
 8008442:	441a      	add	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	429a      	cmp	r2, r3
 8008452:	d207      	bcs.n	8008464 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	425b      	negs	r3, r3
 800845e:	441a      	add	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b02      	cmp	r3, #2
 8008468:	d105      	bne.n	8008476 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	3b01      	subs	r3, #1
 8008474:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800847e:	697b      	ldr	r3, [r7, #20]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	d018      	beq.n	80084cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	441a      	add	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d303      	bcc.n	80084bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68d9      	ldr	r1, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	461a      	mov	r2, r3
 80084c6:	6838      	ldr	r0, [r7, #0]
 80084c8:	f001 fb52 	bl	8009b70 <memcpy>
	}
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084dc:	f7ff faca 	bl	8007a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084e8:	e011      	b.n	800850e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d012      	beq.n	8008518 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3324      	adds	r3, #36	; 0x24
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 fd2a 	bl	8008f50 <xTaskRemoveFromEventList>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008502:	f000 fe01 	bl	8009108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	3b01      	subs	r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800850e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008512:	2b00      	cmp	r3, #0
 8008514:	dce9      	bgt.n	80084ea <prvUnlockQueue+0x16>
 8008516:	e000      	b.n	800851a <prvUnlockQueue+0x46>
					break;
 8008518:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	22ff      	movs	r2, #255	; 0xff
 800851e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008522:	f7ff fad7 	bl	8007ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008526:	f7ff faa5 	bl	8007a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008530:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008532:	e011      	b.n	8008558 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d012      	beq.n	8008562 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3310      	adds	r3, #16
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fd05 	bl	8008f50 <xTaskRemoveFromEventList>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800854c:	f000 fddc 	bl	8009108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	3b01      	subs	r3, #1
 8008554:	b2db      	uxtb	r3, r3
 8008556:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800855c:	2b00      	cmp	r3, #0
 800855e:	dce9      	bgt.n	8008534 <prvUnlockQueue+0x60>
 8008560:	e000      	b.n	8008564 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008562:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	22ff      	movs	r2, #255	; 0xff
 8008568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800856c:	f7ff fab2 	bl	8007ad4 <vPortExitCritical>
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008580:	f7ff fa78 	bl	8007a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	2b00      	cmp	r3, #0
 800858a:	d102      	bne.n	8008592 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800858c:	2301      	movs	r3, #1
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	e001      	b.n	8008596 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008596:	f7ff fa9d 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 800859a:	68fb      	ldr	r3, [r7, #12]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085ac:	f7ff fa62 	bl	8007a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d102      	bne.n	80085c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	e001      	b.n	80085c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085c6:	f7ff fa85 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 80085ca:	68fb      	ldr	r3, [r7, #12]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	e014      	b.n	800860e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085e4:	4a0f      	ldr	r2, [pc, #60]	; (8008624 <vQueueAddToRegistry+0x50>)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085f0:	490c      	ldr	r1, [pc, #48]	; (8008624 <vQueueAddToRegistry+0x50>)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085fa:	4a0a      	ldr	r2, [pc, #40]	; (8008624 <vQueueAddToRegistry+0x50>)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008606:	e006      	b.n	8008616 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3301      	adds	r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b07      	cmp	r3, #7
 8008612:	d9e7      	bls.n	80085e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	20001cd8 	.word	0x20001cd8

08008628 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008638:	f7ff fa1c 	bl	8007a74 <vPortEnterCritical>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008642:	b25b      	sxtb	r3, r3
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d103      	bne.n	8008652 <vQueueWaitForMessageRestricted+0x2a>
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008658:	b25b      	sxtb	r3, r3
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d103      	bne.n	8008668 <vQueueWaitForMessageRestricted+0x40>
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008668:	f7ff fa34 	bl	8007ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	2b00      	cmp	r3, #0
 8008672:	d106      	bne.n	8008682 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	3324      	adds	r3, #36	; 0x24
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fc3b 	bl	8008ef8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008682:	6978      	ldr	r0, [r7, #20]
 8008684:	f7ff ff26 	bl	80084d4 <prvUnlockQueue>
	}
 8008688:	bf00      	nop
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08e      	sub	sp, #56	; 0x38
 8008694:	af04      	add	r7, sp, #16
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800869e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	623b      	str	r3, [r7, #32]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10a      	bne.n	80086d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	61fb      	str	r3, [r7, #28]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086d6:	235c      	movs	r3, #92	; 0x5c
 80086d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b5c      	cmp	r3, #92	; 0x5c
 80086de:	d00a      	beq.n	80086f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	61bb      	str	r3, [r7, #24]
}
 80086f2:	bf00      	nop
 80086f4:	e7fe      	b.n	80086f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d01e      	beq.n	800873c <xTaskCreateStatic+0xac>
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	2b00      	cmp	r3, #0
 8008702:	d01b      	beq.n	800873c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800870c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	2202      	movs	r2, #2
 8008712:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008716:	2300      	movs	r3, #0
 8008718:	9303      	str	r3, [sp, #12]
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	f107 0314 	add.w	r3, r7, #20
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 f850 	bl	80087d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008736:	f000 f8dd 	bl	80088f4 <prvAddNewTaskToReadyList>
 800873a:	e001      	b.n	8008740 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008740:	697b      	ldr	r3, [r7, #20]
	}
 8008742:	4618      	mov	r0, r3
 8008744:	3728      	adds	r7, #40	; 0x28
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800874a:	b580      	push	{r7, lr}
 800874c:	b08c      	sub	sp, #48	; 0x30
 800874e:	af04      	add	r7, sp, #16
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	603b      	str	r3, [r7, #0]
 8008756:	4613      	mov	r3, r2
 8008758:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800875a:	88fb      	ldrh	r3, [r7, #6]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fdbe 	bl	80072e0 <pvPortMalloc>
 8008764:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00e      	beq.n	800878a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800876c:	205c      	movs	r0, #92	; 0x5c
 800876e:	f7fe fdb7 	bl	80072e0 <pvPortMalloc>
 8008772:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	631a      	str	r2, [r3, #48]	; 0x30
 8008780:	e005      	b.n	800878e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008782:	6978      	ldr	r0, [r7, #20]
 8008784:	f7fe fe78 	bl	8007478 <vPortFree>
 8008788:	e001      	b.n	800878e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d017      	beq.n	80087c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800879c:	88fa      	ldrh	r2, [r7, #6]
 800879e:	2300      	movs	r3, #0
 80087a0:	9303      	str	r3, [sp, #12]
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	9302      	str	r3, [sp, #8]
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 f80e 	bl	80087d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087b8:	69f8      	ldr	r0, [r7, #28]
 80087ba:	f000 f89b 	bl	80088f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087be:	2301      	movs	r3, #1
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	e002      	b.n	80087ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087c4:	f04f 33ff 	mov.w	r3, #4294967295
 80087c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087ca:	69bb      	ldr	r3, [r7, #24]
	}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	461a      	mov	r2, r3
 80087ec:	21a5      	movs	r1, #165	; 0xa5
 80087ee:	f001 f9cd 	bl	8009b8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087fc:	3b01      	subs	r3, #1
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	617b      	str	r3, [r7, #20]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01f      	beq.n	8008872 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008832:	2300      	movs	r3, #0
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	e012      	b.n	800885e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	4413      	add	r3, r2
 800883e:	7819      	ldrb	r1, [r3, #0]
 8008840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	4413      	add	r3, r2
 8008846:	3334      	adds	r3, #52	; 0x34
 8008848:	460a      	mov	r2, r1
 800884a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	4413      	add	r3, r2
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d006      	beq.n	8008866 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	3301      	adds	r3, #1
 800885c:	61fb      	str	r3, [r7, #28]
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	2b0f      	cmp	r3, #15
 8008862:	d9e9      	bls.n	8008838 <prvInitialiseNewTask+0x64>
 8008864:	e000      	b.n	8008868 <prvInitialiseNewTask+0x94>
			{
				break;
 8008866:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008870:	e003      	b.n	800887a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	2b37      	cmp	r3, #55	; 0x37
 800887e:	d901      	bls.n	8008884 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008880:	2337      	movs	r3, #55	; 0x37
 8008882:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008888:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800888e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	2200      	movs	r2, #0
 8008894:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	3304      	adds	r3, #4
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe ff2a 	bl	80076f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	3318      	adds	r3, #24
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe ff25 	bl	80076f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	2200      	movs	r2, #0
 80088c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	68f9      	ldr	r1, [r7, #12]
 80088d2:	69b8      	ldr	r0, [r7, #24]
 80088d4:	f7fe ffa2 	bl	800781c <pxPortInitialiseStack>
 80088d8:	4602      	mov	r2, r0
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088ea:	bf00      	nop
 80088ec:	3720      	adds	r7, #32
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
	...

080088f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088fc:	f7ff f8ba 	bl	8007a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008900:	4b2d      	ldr	r3, [pc, #180]	; (80089b8 <prvAddNewTaskToReadyList+0xc4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3301      	adds	r3, #1
 8008906:	4a2c      	ldr	r2, [pc, #176]	; (80089b8 <prvAddNewTaskToReadyList+0xc4>)
 8008908:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800890a:	4b2c      	ldr	r3, [pc, #176]	; (80089bc <prvAddNewTaskToReadyList+0xc8>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d109      	bne.n	8008926 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008912:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <prvAddNewTaskToReadyList+0xc8>)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008918:	4b27      	ldr	r3, [pc, #156]	; (80089b8 <prvAddNewTaskToReadyList+0xc4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d110      	bne.n	8008942 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008920:	f000 fc16 	bl	8009150 <prvInitialiseTaskLists>
 8008924:	e00d      	b.n	8008942 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008926:	4b26      	ldr	r3, [pc, #152]	; (80089c0 <prvAddNewTaskToReadyList+0xcc>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800892e:	4b23      	ldr	r3, [pc, #140]	; (80089bc <prvAddNewTaskToReadyList+0xc8>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008938:	429a      	cmp	r2, r3
 800893a:	d802      	bhi.n	8008942 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800893c:	4a1f      	ldr	r2, [pc, #124]	; (80089bc <prvAddNewTaskToReadyList+0xc8>)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008942:	4b20      	ldr	r3, [pc, #128]	; (80089c4 <prvAddNewTaskToReadyList+0xd0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3301      	adds	r3, #1
 8008948:	4a1e      	ldr	r2, [pc, #120]	; (80089c4 <prvAddNewTaskToReadyList+0xd0>)
 800894a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800894c:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <prvAddNewTaskToReadyList+0xd0>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <prvAddNewTaskToReadyList+0xd4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d903      	bls.n	8008968 <prvAddNewTaskToReadyList+0x74>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	4a18      	ldr	r2, [pc, #96]	; (80089c8 <prvAddNewTaskToReadyList+0xd4>)
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4a15      	ldr	r2, [pc, #84]	; (80089cc <prvAddNewTaskToReadyList+0xd8>)
 8008976:	441a      	add	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3304      	adds	r3, #4
 800897c:	4619      	mov	r1, r3
 800897e:	4610      	mov	r0, r2
 8008980:	f7fe fec5 	bl	800770e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008984:	f7ff f8a6 	bl	8007ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008988:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <prvAddNewTaskToReadyList+0xcc>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00e      	beq.n	80089ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008990:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <prvAddNewTaskToReadyList+0xc8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	429a      	cmp	r2, r3
 800899c:	d207      	bcs.n	80089ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800899e:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <prvAddNewTaskToReadyList+0xdc>)
 80089a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089ae:	bf00      	nop
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	20001b30 	.word	0x20001b30
 80089bc:	2000165c 	.word	0x2000165c
 80089c0:	20001b3c 	.word	0x20001b3c
 80089c4:	20001b4c 	.word	0x20001b4c
 80089c8:	20001b38 	.word	0x20001b38
 80089cc:	20001660 	.word	0x20001660
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d017      	beq.n	8008a16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089e6:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <vTaskDelay+0x60>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <vTaskDelay+0x30>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	60bb      	str	r3, [r7, #8]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a04:	f000 f880 	bl	8008b08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a08:	2100      	movs	r1, #0
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fcea 	bl	80093e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a10:	f000 f888 	bl	8008b24 <xTaskResumeAll>
 8008a14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d107      	bne.n	8008a2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <vTaskDelay+0x64>)
 8008a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20001b58 	.word	0x20001b58
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08a      	sub	sp, #40	; 0x28
 8008a40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a4a:	463a      	mov	r2, r7
 8008a4c:	1d39      	adds	r1, r7, #4
 8008a4e:	f107 0308 	add.w	r3, r7, #8
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fc10 	bl	8007278 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	9202      	str	r2, [sp, #8]
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	2300      	movs	r3, #0
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	2300      	movs	r3, #0
 8008a68:	460a      	mov	r2, r1
 8008a6a:	4921      	ldr	r1, [pc, #132]	; (8008af0 <vTaskStartScheduler+0xb4>)
 8008a6c:	4821      	ldr	r0, [pc, #132]	; (8008af4 <vTaskStartScheduler+0xb8>)
 8008a6e:	f7ff fe0f 	bl	8008690 <xTaskCreateStatic>
 8008a72:	4603      	mov	r3, r0
 8008a74:	4a20      	ldr	r2, [pc, #128]	; (8008af8 <vTaskStartScheduler+0xbc>)
 8008a76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a78:	4b1f      	ldr	r3, [pc, #124]	; (8008af8 <vTaskStartScheduler+0xbc>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a80:	2301      	movs	r3, #1
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e001      	b.n	8008a8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a86:	2300      	movs	r3, #0
 8008a88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d102      	bne.n	8008a96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a90:	f000 fcfc 	bl	800948c <xTimerCreateTimerTask>
 8008a94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d116      	bne.n	8008aca <vTaskStartScheduler+0x8e>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	613b      	str	r3, [r7, #16]
}
 8008aae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ab0:	4b12      	ldr	r3, [pc, #72]	; (8008afc <vTaskStartScheduler+0xc0>)
 8008ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ab8:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <vTaskStartScheduler+0xc4>)
 8008aba:	2201      	movs	r2, #1
 8008abc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008abe:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <vTaskStartScheduler+0xc8>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ac4:	f7fe ff34 	bl	8007930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ac8:	e00e      	b.n	8008ae8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad0:	d10a      	bne.n	8008ae8 <vTaskStartScheduler+0xac>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60fb      	str	r3, [r7, #12]
}
 8008ae4:	bf00      	nop
 8008ae6:	e7fe      	b.n	8008ae6 <vTaskStartScheduler+0xaa>
}
 8008ae8:	bf00      	nop
 8008aea:	3718      	adds	r7, #24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	08009bc8 	.word	0x08009bc8
 8008af4:	08009121 	.word	0x08009121
 8008af8:	20001b54 	.word	0x20001b54
 8008afc:	20001b50 	.word	0x20001b50
 8008b00:	20001b3c 	.word	0x20001b3c
 8008b04:	20001b34 	.word	0x20001b34

08008b08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b0c:	4b04      	ldr	r3, [pc, #16]	; (8008b20 <vTaskSuspendAll+0x18>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3301      	adds	r3, #1
 8008b12:	4a03      	ldr	r2, [pc, #12]	; (8008b20 <vTaskSuspendAll+0x18>)
 8008b14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b16:	bf00      	nop
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	20001b58 	.word	0x20001b58

08008b24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b32:	4b42      	ldr	r3, [pc, #264]	; (8008c3c <xTaskResumeAll+0x118>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	603b      	str	r3, [r7, #0]
}
 8008b4c:	bf00      	nop
 8008b4e:	e7fe      	b.n	8008b4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b50:	f7fe ff90 	bl	8007a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b54:	4b39      	ldr	r3, [pc, #228]	; (8008c3c <xTaskResumeAll+0x118>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4a38      	ldr	r2, [pc, #224]	; (8008c3c <xTaskResumeAll+0x118>)
 8008b5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b5e:	4b37      	ldr	r3, [pc, #220]	; (8008c3c <xTaskResumeAll+0x118>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d162      	bne.n	8008c2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b66:	4b36      	ldr	r3, [pc, #216]	; (8008c40 <xTaskResumeAll+0x11c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d05e      	beq.n	8008c2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b6e:	e02f      	b.n	8008bd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b70:	4b34      	ldr	r3, [pc, #208]	; (8008c44 <xTaskResumeAll+0x120>)
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3318      	adds	r3, #24
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe fe23 	bl	80077c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3304      	adds	r3, #4
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fe1e 	bl	80077c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b90:	4b2d      	ldr	r3, [pc, #180]	; (8008c48 <xTaskResumeAll+0x124>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d903      	bls.n	8008ba0 <xTaskResumeAll+0x7c>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	4a2a      	ldr	r2, [pc, #168]	; (8008c48 <xTaskResumeAll+0x124>)
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4a27      	ldr	r2, [pc, #156]	; (8008c4c <xTaskResumeAll+0x128>)
 8008bae:	441a      	add	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7fe fda9 	bl	800770e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc0:	4b23      	ldr	r3, [pc, #140]	; (8008c50 <xTaskResumeAll+0x12c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d302      	bcc.n	8008bd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008bca:	4b22      	ldr	r3, [pc, #136]	; (8008c54 <xTaskResumeAll+0x130>)
 8008bcc:	2201      	movs	r2, #1
 8008bce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bd0:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <xTaskResumeAll+0x120>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1cb      	bne.n	8008b70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bde:	f000 fb55 	bl	800928c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008be2:	4b1d      	ldr	r3, [pc, #116]	; (8008c58 <xTaskResumeAll+0x134>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d010      	beq.n	8008c10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bee:	f000 f847 	bl	8008c80 <xTaskIncrementTick>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008bf8:	4b16      	ldr	r3, [pc, #88]	; (8008c54 <xTaskResumeAll+0x130>)
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f1      	bne.n	8008bee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008c0a:	4b13      	ldr	r3, [pc, #76]	; (8008c58 <xTaskResumeAll+0x134>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c10:	4b10      	ldr	r3, [pc, #64]	; (8008c54 <xTaskResumeAll+0x130>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d009      	beq.n	8008c2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c1c:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <xTaskResumeAll+0x138>)
 8008c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c2c:	f7fe ff52 	bl	8007ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8008c30:	68bb      	ldr	r3, [r7, #8]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20001b58 	.word	0x20001b58
 8008c40:	20001b30 	.word	0x20001b30
 8008c44:	20001af0 	.word	0x20001af0
 8008c48:	20001b38 	.word	0x20001b38
 8008c4c:	20001660 	.word	0x20001660
 8008c50:	2000165c 	.word	0x2000165c
 8008c54:	20001b44 	.word	0x20001b44
 8008c58:	20001b40 	.word	0x20001b40
 8008c5c:	e000ed04 	.word	0xe000ed04

08008c60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <xTaskGetTickCount+0x1c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c6c:	687b      	ldr	r3, [r7, #4]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	20001b34 	.word	0x20001b34

08008c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c86:	2300      	movs	r3, #0
 8008c88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c8a:	4b4f      	ldr	r3, [pc, #316]	; (8008dc8 <xTaskIncrementTick+0x148>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f040 808f 	bne.w	8008db2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c94:	4b4d      	ldr	r3, [pc, #308]	; (8008dcc <xTaskIncrementTick+0x14c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c9c:	4a4b      	ldr	r2, [pc, #300]	; (8008dcc <xTaskIncrementTick+0x14c>)
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d120      	bne.n	8008cea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ca8:	4b49      	ldr	r3, [pc, #292]	; (8008dd0 <xTaskIncrementTick+0x150>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00a      	beq.n	8008cc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	603b      	str	r3, [r7, #0]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xTaskIncrementTick+0x46>
 8008cc8:	4b41      	ldr	r3, [pc, #260]	; (8008dd0 <xTaskIncrementTick+0x150>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	4b41      	ldr	r3, [pc, #260]	; (8008dd4 <xTaskIncrementTick+0x154>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a3f      	ldr	r2, [pc, #252]	; (8008dd0 <xTaskIncrementTick+0x150>)
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	4a3f      	ldr	r2, [pc, #252]	; (8008dd4 <xTaskIncrementTick+0x154>)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	4b3e      	ldr	r3, [pc, #248]	; (8008dd8 <xTaskIncrementTick+0x158>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	4a3d      	ldr	r2, [pc, #244]	; (8008dd8 <xTaskIncrementTick+0x158>)
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	f000 fad1 	bl	800928c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cea:	4b3c      	ldr	r3, [pc, #240]	; (8008ddc <xTaskIncrementTick+0x15c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d349      	bcc.n	8008d88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cf4:	4b36      	ldr	r3, [pc, #216]	; (8008dd0 <xTaskIncrementTick+0x150>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d104      	bne.n	8008d08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cfe:	4b37      	ldr	r3, [pc, #220]	; (8008ddc <xTaskIncrementTick+0x15c>)
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	601a      	str	r2, [r3, #0]
					break;
 8008d06:	e03f      	b.n	8008d88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d08:	4b31      	ldr	r3, [pc, #196]	; (8008dd0 <xTaskIncrementTick+0x150>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d203      	bcs.n	8008d28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d20:	4a2e      	ldr	r2, [pc, #184]	; (8008ddc <xTaskIncrementTick+0x15c>)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d26:	e02f      	b.n	8008d88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe fd4b 	bl	80077c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d004      	beq.n	8008d44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	3318      	adds	r3, #24
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fd42 	bl	80077c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d48:	4b25      	ldr	r3, [pc, #148]	; (8008de0 <xTaskIncrementTick+0x160>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d903      	bls.n	8008d58 <xTaskIncrementTick+0xd8>
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	4a22      	ldr	r2, [pc, #136]	; (8008de0 <xTaskIncrementTick+0x160>)
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4a1f      	ldr	r2, [pc, #124]	; (8008de4 <xTaskIncrementTick+0x164>)
 8008d66:	441a      	add	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4610      	mov	r0, r2
 8008d70:	f7fe fccd 	bl	800770e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d78:	4b1b      	ldr	r3, [pc, #108]	; (8008de8 <xTaskIncrementTick+0x168>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d3b8      	bcc.n	8008cf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d82:	2301      	movs	r3, #1
 8008d84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d86:	e7b5      	b.n	8008cf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d88:	4b17      	ldr	r3, [pc, #92]	; (8008de8 <xTaskIncrementTick+0x168>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8e:	4915      	ldr	r1, [pc, #84]	; (8008de4 <xTaskIncrementTick+0x164>)
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d901      	bls.n	8008da4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008da0:	2301      	movs	r3, #1
 8008da2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008da4:	4b11      	ldr	r3, [pc, #68]	; (8008dec <xTaskIncrementTick+0x16c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d007      	beq.n	8008dbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008dac:	2301      	movs	r3, #1
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	e004      	b.n	8008dbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008db2:	4b0f      	ldr	r3, [pc, #60]	; (8008df0 <xTaskIncrementTick+0x170>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3301      	adds	r3, #1
 8008db8:	4a0d      	ldr	r2, [pc, #52]	; (8008df0 <xTaskIncrementTick+0x170>)
 8008dba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008dbc:	697b      	ldr	r3, [r7, #20]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20001b58 	.word	0x20001b58
 8008dcc:	20001b34 	.word	0x20001b34
 8008dd0:	20001ae8 	.word	0x20001ae8
 8008dd4:	20001aec 	.word	0x20001aec
 8008dd8:	20001b48 	.word	0x20001b48
 8008ddc:	20001b50 	.word	0x20001b50
 8008de0:	20001b38 	.word	0x20001b38
 8008de4:	20001660 	.word	0x20001660
 8008de8:	2000165c 	.word	0x2000165c
 8008dec:	20001b44 	.word	0x20001b44
 8008df0:	20001b40 	.word	0x20001b40

08008df4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dfa:	4b28      	ldr	r3, [pc, #160]	; (8008e9c <vTaskSwitchContext+0xa8>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e02:	4b27      	ldr	r3, [pc, #156]	; (8008ea0 <vTaskSwitchContext+0xac>)
 8008e04:	2201      	movs	r2, #1
 8008e06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e08:	e041      	b.n	8008e8e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008e0a:	4b25      	ldr	r3, [pc, #148]	; (8008ea0 <vTaskSwitchContext+0xac>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e10:	4b24      	ldr	r3, [pc, #144]	; (8008ea4 <vTaskSwitchContext+0xb0>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	e010      	b.n	8008e3a <vTaskSwitchContext+0x46>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10a      	bne.n	8008e34 <vTaskSwitchContext+0x40>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	607b      	str	r3, [r7, #4]
}
 8008e30:	bf00      	nop
 8008e32:	e7fe      	b.n	8008e32 <vTaskSwitchContext+0x3e>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	491b      	ldr	r1, [pc, #108]	; (8008ea8 <vTaskSwitchContext+0xb4>)
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	440b      	add	r3, r1
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0e4      	beq.n	8008e18 <vTaskSwitchContext+0x24>
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	4613      	mov	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4a13      	ldr	r2, [pc, #76]	; (8008ea8 <vTaskSwitchContext+0xb4>)
 8008e5a:	4413      	add	r3, r2
 8008e5c:	60bb      	str	r3, [r7, #8]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	605a      	str	r2, [r3, #4]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d104      	bne.n	8008e7e <vTaskSwitchContext+0x8a>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	605a      	str	r2, [r3, #4]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	4a09      	ldr	r2, [pc, #36]	; (8008eac <vTaskSwitchContext+0xb8>)
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	4a06      	ldr	r2, [pc, #24]	; (8008ea4 <vTaskSwitchContext+0xb0>)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6013      	str	r3, [r2, #0]
}
 8008e8e:	bf00      	nop
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	20001b58 	.word	0x20001b58
 8008ea0:	20001b44 	.word	0x20001b44
 8008ea4:	20001b38 	.word	0x20001b38
 8008ea8:	20001660 	.word	0x20001660
 8008eac:	2000165c 	.word	0x2000165c

08008eb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	60fb      	str	r3, [r7, #12]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ed6:	4b07      	ldr	r3, [pc, #28]	; (8008ef4 <vTaskPlaceOnEventList+0x44>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3318      	adds	r3, #24
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7fe fc39 	bl	8007756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	6838      	ldr	r0, [r7, #0]
 8008ee8:	f000 fa7c 	bl	80093e4 <prvAddCurrentTaskToDelayedList>
}
 8008eec:	bf00      	nop
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	2000165c 	.word	0x2000165c

08008ef8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10a      	bne.n	8008f20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	617b      	str	r3, [r7, #20]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <vTaskPlaceOnEventListRestricted+0x54>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3318      	adds	r3, #24
 8008f26:	4619      	mov	r1, r3
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7fe fbf0 	bl	800770e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008f34:	f04f 33ff 	mov.w	r3, #4294967295
 8008f38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	68b8      	ldr	r0, [r7, #8]
 8008f3e:	f000 fa51 	bl	80093e4 <prvAddCurrentTaskToDelayedList>
	}
 8008f42:	bf00      	nop
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	2000165c 	.word	0x2000165c

08008f50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10a      	bne.n	8008f7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	3318      	adds	r3, #24
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe fc21 	bl	80077c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f86:	4b1e      	ldr	r3, [pc, #120]	; (8009000 <xTaskRemoveFromEventList+0xb0>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d11d      	bne.n	8008fca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	3304      	adds	r3, #4
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe fc18 	bl	80077c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9c:	4b19      	ldr	r3, [pc, #100]	; (8009004 <xTaskRemoveFromEventList+0xb4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d903      	bls.n	8008fac <xTaskRemoveFromEventList+0x5c>
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	4a16      	ldr	r2, [pc, #88]	; (8009004 <xTaskRemoveFromEventList+0xb4>)
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4a13      	ldr	r2, [pc, #76]	; (8009008 <xTaskRemoveFromEventList+0xb8>)
 8008fba:	441a      	add	r2, r3
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	f7fe fba3 	bl	800770e <vListInsertEnd>
 8008fc8:	e005      	b.n	8008fd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	3318      	adds	r3, #24
 8008fce:	4619      	mov	r1, r3
 8008fd0:	480e      	ldr	r0, [pc, #56]	; (800900c <xTaskRemoveFromEventList+0xbc>)
 8008fd2:	f7fe fb9c 	bl	800770e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fda:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <xTaskRemoveFromEventList+0xc0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d905      	bls.n	8008ff0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <xTaskRemoveFromEventList+0xc4>)
 8008fea:	2201      	movs	r2, #1
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	e001      	b.n	8008ff4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ff4:	697b      	ldr	r3, [r7, #20]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3718      	adds	r7, #24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20001b58 	.word	0x20001b58
 8009004:	20001b38 	.word	0x20001b38
 8009008:	20001660 	.word	0x20001660
 800900c:	20001af0 	.word	0x20001af0
 8009010:	2000165c 	.word	0x2000165c
 8009014:	20001b44 	.word	0x20001b44

08009018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <vTaskInternalSetTimeOutState+0x24>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009028:	4b05      	ldr	r3, [pc, #20]	; (8009040 <vTaskInternalSetTimeOutState+0x28>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	605a      	str	r2, [r3, #4]
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	20001b48 	.word	0x20001b48
 8009040:	20001b34 	.word	0x20001b34

08009044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	613b      	str	r3, [r7, #16]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	60fb      	str	r3, [r7, #12]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009086:	f7fe fcf5 	bl	8007a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800908a:	4b1d      	ldr	r3, [pc, #116]	; (8009100 <xTaskCheckForTimeOut+0xbc>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a2:	d102      	bne.n	80090aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090a4:	2300      	movs	r3, #0
 80090a6:	61fb      	str	r3, [r7, #28]
 80090a8:	e023      	b.n	80090f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	4b15      	ldr	r3, [pc, #84]	; (8009104 <xTaskCheckForTimeOut+0xc0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d007      	beq.n	80090c6 <xTaskCheckForTimeOut+0x82>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	69ba      	ldr	r2, [r7, #24]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d302      	bcc.n	80090c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	61fb      	str	r3, [r7, #28]
 80090c4:	e015      	b.n	80090f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d20b      	bcs.n	80090e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff ff9b 	bl	8009018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090e2:	2300      	movs	r3, #0
 80090e4:	61fb      	str	r3, [r7, #28]
 80090e6:	e004      	b.n	80090f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090ee:	2301      	movs	r3, #1
 80090f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090f2:	f7fe fcef 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 80090f6:	69fb      	ldr	r3, [r7, #28]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20001b34 	.word	0x20001b34
 8009104:	20001b48 	.word	0x20001b48

08009108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009108:	b480      	push	{r7}
 800910a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800910c:	4b03      	ldr	r3, [pc, #12]	; (800911c <vTaskMissedYield+0x14>)
 800910e:	2201      	movs	r2, #1
 8009110:	601a      	str	r2, [r3, #0]
}
 8009112:	bf00      	nop
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	20001b44 	.word	0x20001b44

08009120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009128:	f000 f852 	bl	80091d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800912c:	4b06      	ldr	r3, [pc, #24]	; (8009148 <prvIdleTask+0x28>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d9f9      	bls.n	8009128 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <prvIdleTask+0x2c>)
 8009136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009144:	e7f0      	b.n	8009128 <prvIdleTask+0x8>
 8009146:	bf00      	nop
 8009148:	20001660 	.word	0x20001660
 800914c:	e000ed04 	.word	0xe000ed04

08009150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009156:	2300      	movs	r3, #0
 8009158:	607b      	str	r3, [r7, #4]
 800915a:	e00c      	b.n	8009176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4a12      	ldr	r2, [pc, #72]	; (80091b0 <prvInitialiseTaskLists+0x60>)
 8009168:	4413      	add	r3, r2
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe faa2 	bl	80076b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3301      	adds	r3, #1
 8009174:	607b      	str	r3, [r7, #4]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b37      	cmp	r3, #55	; 0x37
 800917a:	d9ef      	bls.n	800915c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800917c:	480d      	ldr	r0, [pc, #52]	; (80091b4 <prvInitialiseTaskLists+0x64>)
 800917e:	f7fe fa99 	bl	80076b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009182:	480d      	ldr	r0, [pc, #52]	; (80091b8 <prvInitialiseTaskLists+0x68>)
 8009184:	f7fe fa96 	bl	80076b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009188:	480c      	ldr	r0, [pc, #48]	; (80091bc <prvInitialiseTaskLists+0x6c>)
 800918a:	f7fe fa93 	bl	80076b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800918e:	480c      	ldr	r0, [pc, #48]	; (80091c0 <prvInitialiseTaskLists+0x70>)
 8009190:	f7fe fa90 	bl	80076b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009194:	480b      	ldr	r0, [pc, #44]	; (80091c4 <prvInitialiseTaskLists+0x74>)
 8009196:	f7fe fa8d 	bl	80076b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800919a:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <prvInitialiseTaskLists+0x78>)
 800919c:	4a05      	ldr	r2, [pc, #20]	; (80091b4 <prvInitialiseTaskLists+0x64>)
 800919e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091a0:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <prvInitialiseTaskLists+0x7c>)
 80091a2:	4a05      	ldr	r2, [pc, #20]	; (80091b8 <prvInitialiseTaskLists+0x68>)
 80091a4:	601a      	str	r2, [r3, #0]
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20001660 	.word	0x20001660
 80091b4:	20001ac0 	.word	0x20001ac0
 80091b8:	20001ad4 	.word	0x20001ad4
 80091bc:	20001af0 	.word	0x20001af0
 80091c0:	20001b04 	.word	0x20001b04
 80091c4:	20001b1c 	.word	0x20001b1c
 80091c8:	20001ae8 	.word	0x20001ae8
 80091cc:	20001aec 	.word	0x20001aec

080091d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091d6:	e019      	b.n	800920c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091d8:	f7fe fc4c 	bl	8007a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091dc:	4b10      	ldr	r3, [pc, #64]	; (8009220 <prvCheckTasksWaitingTermination+0x50>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe faed 	bl	80077c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091ee:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <prvCheckTasksWaitingTermination+0x54>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	4a0b      	ldr	r2, [pc, #44]	; (8009224 <prvCheckTasksWaitingTermination+0x54>)
 80091f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091f8:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <prvCheckTasksWaitingTermination+0x58>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	4a0a      	ldr	r2, [pc, #40]	; (8009228 <prvCheckTasksWaitingTermination+0x58>)
 8009200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009202:	f7fe fc67 	bl	8007ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f810 	bl	800922c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800920c:	4b06      	ldr	r3, [pc, #24]	; (8009228 <prvCheckTasksWaitingTermination+0x58>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e1      	bne.n	80091d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */

}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20001b04 	.word	0x20001b04
 8009224:	20001b30 	.word	0x20001b30
 8009228:	20001b18 	.word	0x20001b18

0800922c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800923a:	2b00      	cmp	r3, #0
 800923c:	d108      	bne.n	8009250 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe f918 	bl	8007478 <vPortFree>
				vPortFree( pxTCB );
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7fe f915 	bl	8007478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800924e:	e018      	b.n	8009282 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009256:	2b01      	cmp	r3, #1
 8009258:	d103      	bne.n	8009262 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7fe f90c 	bl	8007478 <vPortFree>
	}
 8009260:	e00f      	b.n	8009282 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009268:	2b02      	cmp	r3, #2
 800926a:	d00a      	beq.n	8009282 <prvDeleteTCB+0x56>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	60fb      	str	r3, [r7, #12]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <prvDeleteTCB+0x54>
	}
 8009282:	bf00      	nop
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009292:	4b0c      	ldr	r3, [pc, #48]	; (80092c4 <prvResetNextTaskUnblockTime+0x38>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d104      	bne.n	80092a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800929c:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <prvResetNextTaskUnblockTime+0x3c>)
 800929e:	f04f 32ff 	mov.w	r2, #4294967295
 80092a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092a4:	e008      	b.n	80092b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a6:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <prvResetNextTaskUnblockTime+0x38>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	4a04      	ldr	r2, [pc, #16]	; (80092c8 <prvResetNextTaskUnblockTime+0x3c>)
 80092b6:	6013      	str	r3, [r2, #0]
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	20001ae8 	.word	0x20001ae8
 80092c8:	20001b50 	.word	0x20001b50

080092cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092d2:	4b0b      	ldr	r3, [pc, #44]	; (8009300 <xTaskGetSchedulerState+0x34>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d102      	bne.n	80092e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092da:	2301      	movs	r3, #1
 80092dc:	607b      	str	r3, [r7, #4]
 80092de:	e008      	b.n	80092f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092e0:	4b08      	ldr	r3, [pc, #32]	; (8009304 <xTaskGetSchedulerState+0x38>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d102      	bne.n	80092ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092e8:	2302      	movs	r3, #2
 80092ea:	607b      	str	r3, [r7, #4]
 80092ec:	e001      	b.n	80092f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092ee:	2300      	movs	r3, #0
 80092f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092f2:	687b      	ldr	r3, [r7, #4]
	}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	20001b3c 	.word	0x20001b3c
 8009304:	20001b58 	.word	0x20001b58

08009308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d056      	beq.n	80093cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800931e:	4b2e      	ldr	r3, [pc, #184]	; (80093d8 <xTaskPriorityDisinherit+0xd0>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	429a      	cmp	r2, r3
 8009326:	d00a      	beq.n	800933e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	60fb      	str	r3, [r7, #12]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10a      	bne.n	800935c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	60bb      	str	r3, [r7, #8]
}
 8009358:	bf00      	nop
 800935a:	e7fe      	b.n	800935a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009360:	1e5a      	subs	r2, r3, #1
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800936e:	429a      	cmp	r2, r3
 8009370:	d02c      	beq.n	80093cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009376:	2b00      	cmp	r3, #0
 8009378:	d128      	bne.n	80093cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	3304      	adds	r3, #4
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe fa22 	bl	80077c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939c:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <xTaskPriorityDisinherit+0xd4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d903      	bls.n	80093ac <xTaskPriorityDisinherit+0xa4>
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	4a0c      	ldr	r2, [pc, #48]	; (80093dc <xTaskPriorityDisinherit+0xd4>)
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b0:	4613      	mov	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4413      	add	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4a09      	ldr	r2, [pc, #36]	; (80093e0 <xTaskPriorityDisinherit+0xd8>)
 80093ba:	441a      	add	r2, r3
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	3304      	adds	r3, #4
 80093c0:	4619      	mov	r1, r3
 80093c2:	4610      	mov	r0, r2
 80093c4:	f7fe f9a3 	bl	800770e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093c8:	2301      	movs	r3, #1
 80093ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093cc:	697b      	ldr	r3, [r7, #20]
	}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	2000165c 	.word	0x2000165c
 80093dc:	20001b38 	.word	0x20001b38
 80093e0:	20001660 	.word	0x20001660

080093e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093ee:	4b21      	ldr	r3, [pc, #132]	; (8009474 <prvAddCurrentTaskToDelayedList+0x90>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093f4:	4b20      	ldr	r3, [pc, #128]	; (8009478 <prvAddCurrentTaskToDelayedList+0x94>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fe f9e4 	bl	80077c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009406:	d10a      	bne.n	800941e <prvAddCurrentTaskToDelayedList+0x3a>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d007      	beq.n	800941e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800940e:	4b1a      	ldr	r3, [pc, #104]	; (8009478 <prvAddCurrentTaskToDelayedList+0x94>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3304      	adds	r3, #4
 8009414:	4619      	mov	r1, r3
 8009416:	4819      	ldr	r0, [pc, #100]	; (800947c <prvAddCurrentTaskToDelayedList+0x98>)
 8009418:	f7fe f979 	bl	800770e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800941c:	e026      	b.n	800946c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4413      	add	r3, r2
 8009424:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009426:	4b14      	ldr	r3, [pc, #80]	; (8009478 <prvAddCurrentTaskToDelayedList+0x94>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	429a      	cmp	r2, r3
 8009434:	d209      	bcs.n	800944a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009436:	4b12      	ldr	r3, [pc, #72]	; (8009480 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <prvAddCurrentTaskToDelayedList+0x94>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3304      	adds	r3, #4
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f7fe f987 	bl	8007756 <vListInsert>
}
 8009448:	e010      	b.n	800946c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800944a:	4b0e      	ldr	r3, [pc, #56]	; (8009484 <prvAddCurrentTaskToDelayedList+0xa0>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <prvAddCurrentTaskToDelayedList+0x94>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3304      	adds	r3, #4
 8009454:	4619      	mov	r1, r3
 8009456:	4610      	mov	r0, r2
 8009458:	f7fe f97d 	bl	8007756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800945c:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <prvAddCurrentTaskToDelayedList+0xa4>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	429a      	cmp	r2, r3
 8009464:	d202      	bcs.n	800946c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009466:	4a08      	ldr	r2, [pc, #32]	; (8009488 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	6013      	str	r3, [r2, #0]
}
 800946c:	bf00      	nop
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20001b34 	.word	0x20001b34
 8009478:	2000165c 	.word	0x2000165c
 800947c:	20001b1c 	.word	0x20001b1c
 8009480:	20001aec 	.word	0x20001aec
 8009484:	20001ae8 	.word	0x20001ae8
 8009488:	20001b50 	.word	0x20001b50

0800948c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08a      	sub	sp, #40	; 0x28
 8009490:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009492:	2300      	movs	r3, #0
 8009494:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009496:	f000 fb07 	bl	8009aa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800949a:	4b1c      	ldr	r3, [pc, #112]	; (800950c <xTimerCreateTimerTask+0x80>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d021      	beq.n	80094e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094aa:	1d3a      	adds	r2, r7, #4
 80094ac:	f107 0108 	add.w	r1, r7, #8
 80094b0:	f107 030c 	add.w	r3, r7, #12
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fd fef9 	bl	80072ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	9202      	str	r2, [sp, #8]
 80094c2:	9301      	str	r3, [sp, #4]
 80094c4:	2302      	movs	r3, #2
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	2300      	movs	r3, #0
 80094ca:	460a      	mov	r2, r1
 80094cc:	4910      	ldr	r1, [pc, #64]	; (8009510 <xTimerCreateTimerTask+0x84>)
 80094ce:	4811      	ldr	r0, [pc, #68]	; (8009514 <xTimerCreateTimerTask+0x88>)
 80094d0:	f7ff f8de 	bl	8008690 <xTaskCreateStatic>
 80094d4:	4603      	mov	r3, r0
 80094d6:	4a10      	ldr	r2, [pc, #64]	; (8009518 <xTimerCreateTimerTask+0x8c>)
 80094d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094da:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <xTimerCreateTimerTask+0x8c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094e2:	2301      	movs	r3, #1
 80094e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	613b      	str	r3, [r7, #16]
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009502:	697b      	ldr	r3, [r7, #20]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20001b8c 	.word	0x20001b8c
 8009510:	08009bd0 	.word	0x08009bd0
 8009514:	08009651 	.word	0x08009651
 8009518:	20001b90 	.word	0x20001b90

0800951c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08a      	sub	sp, #40	; 0x28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800952a:	2300      	movs	r3, #0
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10a      	bne.n	800954a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	623b      	str	r3, [r7, #32]
}
 8009546:	bf00      	nop
 8009548:	e7fe      	b.n	8009548 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800954a:	4b1a      	ldr	r3, [pc, #104]	; (80095b4 <xTimerGenericCommand+0x98>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d02a      	beq.n	80095a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b05      	cmp	r3, #5
 8009562:	dc18      	bgt.n	8009596 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009564:	f7ff feb2 	bl	80092cc <xTaskGetSchedulerState>
 8009568:	4603      	mov	r3, r0
 800956a:	2b02      	cmp	r3, #2
 800956c:	d109      	bne.n	8009582 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800956e:	4b11      	ldr	r3, [pc, #68]	; (80095b4 <xTimerGenericCommand+0x98>)
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	f107 0110 	add.w	r1, r7, #16
 8009576:	2300      	movs	r3, #0
 8009578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800957a:	f7fe fca1 	bl	8007ec0 <xQueueGenericSend>
 800957e:	6278      	str	r0, [r7, #36]	; 0x24
 8009580:	e012      	b.n	80095a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009582:	4b0c      	ldr	r3, [pc, #48]	; (80095b4 <xTimerGenericCommand+0x98>)
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	f107 0110 	add.w	r1, r7, #16
 800958a:	2300      	movs	r3, #0
 800958c:	2200      	movs	r2, #0
 800958e:	f7fe fc97 	bl	8007ec0 <xQueueGenericSend>
 8009592:	6278      	str	r0, [r7, #36]	; 0x24
 8009594:	e008      	b.n	80095a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009596:	4b07      	ldr	r3, [pc, #28]	; (80095b4 <xTimerGenericCommand+0x98>)
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	f107 0110 	add.w	r1, r7, #16
 800959e:	2300      	movs	r3, #0
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	f7fe fd8b 	bl	80080bc <xQueueGenericSendFromISR>
 80095a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3728      	adds	r7, #40	; 0x28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20001b8c 	.word	0x20001b8c

080095b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af02      	add	r7, sp, #8
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c2:	4b22      	ldr	r3, [pc, #136]	; (800964c <prvProcessExpiredTimer+0x94>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	3304      	adds	r3, #4
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe f8f9 	bl	80077c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d022      	beq.n	800962a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	699a      	ldr	r2, [r3, #24]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	18d1      	adds	r1, r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	6978      	ldr	r0, [r7, #20]
 80095f2:	f000 f8d1 	bl	8009798 <prvInsertTimerInActiveList>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d01f      	beq.n	800963c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095fc:	2300      	movs	r3, #0
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	2300      	movs	r3, #0
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	2100      	movs	r1, #0
 8009606:	6978      	ldr	r0, [r7, #20]
 8009608:	f7ff ff88 	bl	800951c <xTimerGenericCommand>
 800960c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d113      	bne.n	800963c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	60fb      	str	r3, [r7, #12]
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009630:	f023 0301 	bic.w	r3, r3, #1
 8009634:	b2da      	uxtb	r2, r3
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	6978      	ldr	r0, [r7, #20]
 8009642:	4798      	blx	r3
}
 8009644:	bf00      	nop
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	20001b84 	.word	0x20001b84

08009650 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009658:	f107 0308 	add.w	r3, r7, #8
 800965c:	4618      	mov	r0, r3
 800965e:	f000 f857 	bl	8009710 <prvGetNextExpireTime>
 8009662:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	4619      	mov	r1, r3
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 f803 	bl	8009674 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800966e:	f000 f8d5 	bl	800981c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009672:	e7f1      	b.n	8009658 <prvTimerTask+0x8>

08009674 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800967e:	f7ff fa43 	bl	8008b08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009682:	f107 0308 	add.w	r3, r7, #8
 8009686:	4618      	mov	r0, r3
 8009688:	f000 f866 	bl	8009758 <prvSampleTimeNow>
 800968c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d130      	bne.n	80096f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10a      	bne.n	80096b0 <prvProcessTimerOrBlockTask+0x3c>
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d806      	bhi.n	80096b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096a2:	f7ff fa3f 	bl	8008b24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff ff85 	bl	80095b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096ae:	e024      	b.n	80096fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d008      	beq.n	80096c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096b6:	4b13      	ldr	r3, [pc, #76]	; (8009704 <prvProcessTimerOrBlockTask+0x90>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <prvProcessTimerOrBlockTask+0x50>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e000      	b.n	80096c6 <prvProcessTimerOrBlockTask+0x52>
 80096c4:	2300      	movs	r3, #0
 80096c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096c8:	4b0f      	ldr	r3, [pc, #60]	; (8009708 <prvProcessTimerOrBlockTask+0x94>)
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	4619      	mov	r1, r3
 80096d6:	f7fe ffa7 	bl	8008628 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096da:	f7ff fa23 	bl	8008b24 <xTaskResumeAll>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096e4:	4b09      	ldr	r3, [pc, #36]	; (800970c <prvProcessTimerOrBlockTask+0x98>)
 80096e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ea:	601a      	str	r2, [r3, #0]
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	f3bf 8f6f 	isb	sy
}
 80096f4:	e001      	b.n	80096fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096f6:	f7ff fa15 	bl	8008b24 <xTaskResumeAll>
}
 80096fa:	bf00      	nop
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20001b88 	.word	0x20001b88
 8009708:	20001b8c 	.word	0x20001b8c
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009718:	4b0e      	ldr	r3, [pc, #56]	; (8009754 <prvGetNextExpireTime+0x44>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <prvGetNextExpireTime+0x16>
 8009722:	2201      	movs	r2, #1
 8009724:	e000      	b.n	8009728 <prvGetNextExpireTime+0x18>
 8009726:	2200      	movs	r2, #0
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d105      	bne.n	8009740 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009734:	4b07      	ldr	r3, [pc, #28]	; (8009754 <prvGetNextExpireTime+0x44>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	e001      	b.n	8009744 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009744:	68fb      	ldr	r3, [r7, #12]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20001b84 	.word	0x20001b84

08009758 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009760:	f7ff fa7e 	bl	8008c60 <xTaskGetTickCount>
 8009764:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009766:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <prvSampleTimeNow+0x3c>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	429a      	cmp	r2, r3
 800976e:	d205      	bcs.n	800977c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009770:	f000 f936 	bl	80099e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	e002      	b.n	8009782 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009782:	4a04      	ldr	r2, [pc, #16]	; (8009794 <prvSampleTimeNow+0x3c>)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009788:	68fb      	ldr	r3, [r7, #12]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20001b94 	.word	0x20001b94

08009798 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097a6:	2300      	movs	r3, #0
 80097a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d812      	bhi.n	80097e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	1ad2      	subs	r2, r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d302      	bcc.n	80097d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097cc:	2301      	movs	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
 80097d0:	e01b      	b.n	800980a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097d2:	4b10      	ldr	r3, [pc, #64]	; (8009814 <prvInsertTimerInActiveList+0x7c>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3304      	adds	r3, #4
 80097da:	4619      	mov	r1, r3
 80097dc:	4610      	mov	r0, r2
 80097de:	f7fd ffba 	bl	8007756 <vListInsert>
 80097e2:	e012      	b.n	800980a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d206      	bcs.n	80097fa <prvInsertTimerInActiveList+0x62>
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d302      	bcc.n	80097fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097f4:	2301      	movs	r3, #1
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	e007      	b.n	800980a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097fa:	4b07      	ldr	r3, [pc, #28]	; (8009818 <prvInsertTimerInActiveList+0x80>)
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3304      	adds	r3, #4
 8009802:	4619      	mov	r1, r3
 8009804:	4610      	mov	r0, r2
 8009806:	f7fd ffa6 	bl	8007756 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800980a:	697b      	ldr	r3, [r7, #20]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20001b88 	.word	0x20001b88
 8009818:	20001b84 	.word	0x20001b84

0800981c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08e      	sub	sp, #56	; 0x38
 8009820:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009822:	e0ca      	b.n	80099ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	da18      	bge.n	800985c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	3304      	adds	r3, #4
 800982e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10a      	bne.n	800984c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	61fb      	str	r3, [r7, #28]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800984c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009852:	6850      	ldr	r0, [r2, #4]
 8009854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009856:	6892      	ldr	r2, [r2, #8]
 8009858:	4611      	mov	r1, r2
 800985a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f2c0 80aa 	blt.w	80099b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d004      	beq.n	800987a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	3304      	adds	r3, #4
 8009874:	4618      	mov	r0, r3
 8009876:	f7fd ffa7 	bl	80077c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800987a:	463b      	mov	r3, r7
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff ff6b 	bl	8009758 <prvSampleTimeNow>
 8009882:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b09      	cmp	r3, #9
 8009888:	f200 8097 	bhi.w	80099ba <prvProcessReceivedCommands+0x19e>
 800988c:	a201      	add	r2, pc, #4	; (adr r2, 8009894 <prvProcessReceivedCommands+0x78>)
 800988e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009892:	bf00      	nop
 8009894:	080098bd 	.word	0x080098bd
 8009898:	080098bd 	.word	0x080098bd
 800989c:	080098bd 	.word	0x080098bd
 80098a0:	08009931 	.word	0x08009931
 80098a4:	08009945 	.word	0x08009945
 80098a8:	0800998f 	.word	0x0800998f
 80098ac:	080098bd 	.word	0x080098bd
 80098b0:	080098bd 	.word	0x080098bd
 80098b4:	08009931 	.word	0x08009931
 80098b8:	08009945 	.word	0x08009945
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098c2:	f043 0301 	orr.w	r3, r3, #1
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	18d1      	adds	r1, r2, r3
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098dc:	f7ff ff5c 	bl	8009798 <prvInsertTimerInActiveList>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d069      	beq.n	80099ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098f4:	f003 0304 	and.w	r3, r3, #4
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d05e      	beq.n	80099ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	441a      	add	r2, r3
 8009904:	2300      	movs	r3, #0
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	2300      	movs	r3, #0
 800990a:	2100      	movs	r1, #0
 800990c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990e:	f7ff fe05 	bl	800951c <xTimerGenericCommand>
 8009912:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d14f      	bne.n	80099ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	61bb      	str	r3, [r7, #24]
}
 800992c:	bf00      	nop
 800992e:	e7fe      	b.n	800992e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009936:	f023 0301 	bic.w	r3, r3, #1
 800993a:	b2da      	uxtb	r2, r3
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009942:	e03a      	b.n	80099ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800994a:	f043 0301 	orr.w	r3, r3, #1
 800994e:	b2da      	uxtb	r2, r3
 8009950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	617b      	str	r3, [r7, #20]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	699a      	ldr	r2, [r3, #24]
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	18d1      	adds	r1, r2, r3
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009988:	f7ff ff06 	bl	8009798 <prvInsertTimerInActiveList>
					break;
 800998c:	e015      	b.n	80099ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	2b00      	cmp	r3, #0
 800999a:	d103      	bne.n	80099a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800999c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999e:	f7fd fd6b 	bl	8007478 <vPortFree>
 80099a2:	e00a      	b.n	80099ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099aa:	f023 0301 	bic.w	r3, r3, #1
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099b6:	e000      	b.n	80099ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80099b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099ba:	4b08      	ldr	r3, [pc, #32]	; (80099dc <prvProcessReceivedCommands+0x1c0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	1d39      	adds	r1, r7, #4
 80099c0:	2200      	movs	r2, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fc16 	bl	80081f4 <xQueueReceive>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f47f af2a 	bne.w	8009824 <prvProcessReceivedCommands+0x8>
	}
}
 80099d0:	bf00      	nop
 80099d2:	bf00      	nop
 80099d4:	3730      	adds	r7, #48	; 0x30
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	20001b8c 	.word	0x20001b8c

080099e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099e6:	e048      	b.n	8009a7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099e8:	4b2d      	ldr	r3, [pc, #180]	; (8009aa0 <prvSwitchTimerLists+0xc0>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099f2:	4b2b      	ldr	r3, [pc, #172]	; (8009aa0 <prvSwitchTimerLists+0xc0>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3304      	adds	r3, #4
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fd fee1 	bl	80077c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a14:	f003 0304 	and.w	r3, r3, #4
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d02e      	beq.n	8009a7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	4413      	add	r3, r2
 8009a24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d90e      	bls.n	8009a4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a3a:	4b19      	ldr	r3, [pc, #100]	; (8009aa0 <prvSwitchTimerLists+0xc0>)
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3304      	adds	r3, #4
 8009a42:	4619      	mov	r1, r3
 8009a44:	4610      	mov	r0, r2
 8009a46:	f7fd fe86 	bl	8007756 <vListInsert>
 8009a4a:	e016      	b.n	8009a7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	2300      	movs	r3, #0
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	2100      	movs	r1, #0
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff fd60 	bl	800951c <xTimerGenericCommand>
 8009a5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	603b      	str	r3, [r7, #0]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a7a:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <prvSwitchTimerLists+0xc0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1b1      	bne.n	80099e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a84:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <prvSwitchTimerLists+0xc0>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a8a:	4b06      	ldr	r3, [pc, #24]	; (8009aa4 <prvSwitchTimerLists+0xc4>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a04      	ldr	r2, [pc, #16]	; (8009aa0 <prvSwitchTimerLists+0xc0>)
 8009a90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a92:	4a04      	ldr	r2, [pc, #16]	; (8009aa4 <prvSwitchTimerLists+0xc4>)
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	6013      	str	r3, [r2, #0]
}
 8009a98:	bf00      	nop
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20001b84 	.word	0x20001b84
 8009aa4:	20001b88 	.word	0x20001b88

08009aa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009aae:	f7fd ffe1 	bl	8007a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ab2:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <prvCheckForValidListAndQueue+0x60>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d120      	bne.n	8009afc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009aba:	4814      	ldr	r0, [pc, #80]	; (8009b0c <prvCheckForValidListAndQueue+0x64>)
 8009abc:	f7fd fdfa 	bl	80076b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ac0:	4813      	ldr	r0, [pc, #76]	; (8009b10 <prvCheckForValidListAndQueue+0x68>)
 8009ac2:	f7fd fdf7 	bl	80076b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ac6:	4b13      	ldr	r3, [pc, #76]	; (8009b14 <prvCheckForValidListAndQueue+0x6c>)
 8009ac8:	4a10      	ldr	r2, [pc, #64]	; (8009b0c <prvCheckForValidListAndQueue+0x64>)
 8009aca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009acc:	4b12      	ldr	r3, [pc, #72]	; (8009b18 <prvCheckForValidListAndQueue+0x70>)
 8009ace:	4a10      	ldr	r2, [pc, #64]	; (8009b10 <prvCheckForValidListAndQueue+0x68>)
 8009ad0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	4b11      	ldr	r3, [pc, #68]	; (8009b1c <prvCheckForValidListAndQueue+0x74>)
 8009ad8:	4a11      	ldr	r2, [pc, #68]	; (8009b20 <prvCheckForValidListAndQueue+0x78>)
 8009ada:	2110      	movs	r1, #16
 8009adc:	200a      	movs	r0, #10
 8009ade:	f7fe f953 	bl	8007d88 <xQueueGenericCreateStatic>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4a08      	ldr	r2, [pc, #32]	; (8009b08 <prvCheckForValidListAndQueue+0x60>)
 8009ae6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ae8:	4b07      	ldr	r3, [pc, #28]	; (8009b08 <prvCheckForValidListAndQueue+0x60>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009af0:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <prvCheckForValidListAndQueue+0x60>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	490b      	ldr	r1, [pc, #44]	; (8009b24 <prvCheckForValidListAndQueue+0x7c>)
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fd6c 	bl	80085d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009afc:	f7fd ffea 	bl	8007ad4 <vPortExitCritical>
}
 8009b00:	bf00      	nop
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20001b8c 	.word	0x20001b8c
 8009b0c:	20001b5c 	.word	0x20001b5c
 8009b10:	20001b70 	.word	0x20001b70
 8009b14:	20001b84 	.word	0x20001b84
 8009b18:	20001b88 	.word	0x20001b88
 8009b1c:	20001c38 	.word	0x20001c38
 8009b20:	20001b98 	.word	0x20001b98
 8009b24:	08009bd8 	.word	0x08009bd8

08009b28 <__libc_init_array>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4d0d      	ldr	r5, [pc, #52]	; (8009b60 <__libc_init_array+0x38>)
 8009b2c:	4c0d      	ldr	r4, [pc, #52]	; (8009b64 <__libc_init_array+0x3c>)
 8009b2e:	1b64      	subs	r4, r4, r5
 8009b30:	10a4      	asrs	r4, r4, #2
 8009b32:	2600      	movs	r6, #0
 8009b34:	42a6      	cmp	r6, r4
 8009b36:	d109      	bne.n	8009b4c <__libc_init_array+0x24>
 8009b38:	4d0b      	ldr	r5, [pc, #44]	; (8009b68 <__libc_init_array+0x40>)
 8009b3a:	4c0c      	ldr	r4, [pc, #48]	; (8009b6c <__libc_init_array+0x44>)
 8009b3c:	f000 f82e 	bl	8009b9c <_init>
 8009b40:	1b64      	subs	r4, r4, r5
 8009b42:	10a4      	asrs	r4, r4, #2
 8009b44:	2600      	movs	r6, #0
 8009b46:	42a6      	cmp	r6, r4
 8009b48:	d105      	bne.n	8009b56 <__libc_init_array+0x2e>
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}
 8009b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b50:	4798      	blx	r3
 8009b52:	3601      	adds	r6, #1
 8009b54:	e7ee      	b.n	8009b34 <__libc_init_array+0xc>
 8009b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b5a:	4798      	blx	r3
 8009b5c:	3601      	adds	r6, #1
 8009b5e:	e7f2      	b.n	8009b46 <__libc_init_array+0x1e>
 8009b60:	08009d9c 	.word	0x08009d9c
 8009b64:	08009d9c 	.word	0x08009d9c
 8009b68:	08009d9c 	.word	0x08009d9c
 8009b6c:	08009da4 	.word	0x08009da4

08009b70 <memcpy>:
 8009b70:	440a      	add	r2, r1
 8009b72:	4291      	cmp	r1, r2
 8009b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b78:	d100      	bne.n	8009b7c <memcpy+0xc>
 8009b7a:	4770      	bx	lr
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b86:	4291      	cmp	r1, r2
 8009b88:	d1f9      	bne.n	8009b7e <memcpy+0xe>
 8009b8a:	bd10      	pop	{r4, pc}

08009b8c <memset>:
 8009b8c:	4402      	add	r2, r0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d100      	bne.n	8009b96 <memset+0xa>
 8009b94:	4770      	bx	lr
 8009b96:	f803 1b01 	strb.w	r1, [r3], #1
 8009b9a:	e7f9      	b.n	8009b90 <memset+0x4>

08009b9c <_init>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	bf00      	nop
 8009ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	4770      	bx	lr

08009ba8 <_fini>:
 8009ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009baa:	bf00      	nop
 8009bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bae:	bc08      	pop	{r3}
 8009bb0:	469e      	mov	lr, r3
 8009bb2:	4770      	bx	lr
