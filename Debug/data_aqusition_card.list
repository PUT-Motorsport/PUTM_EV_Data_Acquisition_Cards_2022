
data_aqusition_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a044  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800a204  0800a204  0001a204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2d8  0800a2d8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2d8  0800a2d8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2d8  0800a2d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2d8  0800a2d8  0001a2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2dc  0800a2dc  0001a2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a2e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b68  20000010  0800a2f0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  0800a2f0  00021b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040864  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d83  00000000  00000000  000608a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b08  00000000  00000000  00065628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002930  00000000  00000000  00068130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032a95  00000000  00000000  0006aa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028abb  00000000  00000000  0009d4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00143b5c  00000000  00000000  000c5fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00209b0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba94  00000000  00000000  00209b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a1ec 	.word	0x0800a1ec

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	0800a1ec 	.word	0x0800a1ec

08000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>:
	 * @param  pBuffer: pointer to data to be read.
	 * @param  RegisterAddr: specifies internal address register to be read.
	 * @param  NumByteToRead: number of bytes to be read.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Read(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4611      	mov	r1, r2
 800020c:	461a      	mov	r2, r3
 800020e:	460b      	mov	r3, r1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4613      	mov	r3, r2
 8000214:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToRead) {
		if (&hspi1 != NULL) {
//
//			dev_spi->beginTransaction(
//					SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f003 ffcb 	bl	80041b8 <HAL_GPIO_WritePin>

//digitalWrite(cs_pin, LOW);
			uint8_t msg = RegisterAddr | 0x80;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000228:	b2db      	uxtb	r3, r3
 800022a:	75fb      	strb	r3, [r7, #23]
			/* Write Reg Address */
			HAL_SPI_Transmit(&hspi1, &msg, 1, 100);
 800022c:	f107 0117 	add.w	r1, r7, #23
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	2201      	movs	r2, #1
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000236:	f006 f8d6 	bl	80063e6 <HAL_SPI_Transmit>
//			dev_spi->transfer(RegisterAddr | 0x80);
			/* Read the data */
//			for (uint16_t i = 0; i < NumByteToRead; i++) {
//				*(pBuffer + i) = dev_spi->transfer(0x00);
//			}
			HAL_SPI_Receive(&hspi1, pBuffer, nBytesToRead, 100);
 800023a:	88ba      	ldrh	r2, [r7, #4]
 800023c:	2364      	movs	r3, #100	; 0x64
 800023e:	68b9      	ldr	r1, [r7, #8]
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000242:	f006 fa3e 	bl	80066c2 <HAL_SPI_Receive>

			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2110      	movs	r1, #16
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f003 ffb3 	bl	80041b8 <HAL_GPIO_WritePin>

			return 0;
 8000252:	2300      	movs	r3, #0
		}

		return 1;
	}
 8000254:	4618      	mov	r0, r3
 8000256:	3718      	adds	r7, #24
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000002c 	.word	0x2000002c

08000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>:
	 * @param  pBuffer: pointer to data to be written.
	 * @param  RegisterAddr: specifies internal address register to be written.
	 * @param  NumByteToWrite: number of bytes to write.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Write(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	4611      	mov	r1, r2
 800026c:	461a      	mov	r2, r3
 800026e:	460b      	mov	r3, r1
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	4613      	mov	r3, r2
 8000274:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToWrite) {
		if (&hspi1!=NULL) {
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f003 ff9b 	bl	80041b8 <HAL_GPIO_WritePin>

			//digitalWrite(cs_pin, LOW);

			/* Write Reg Address */
			uint8_t data[2];
			data[0] = RegisterAddr;  // multibyte write
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	753b      	strb	r3, [r7, #20]
			data[1] = *pBuffer;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	757b      	strb	r3, [r7, #21]

//			HAL_SPI_Transmit(&hspi1, &RegisterAddr, 1, 100);
			HAL_SPI_Transmit(&hspi1, data, 2, 100);
 800028c:	f107 0114 	add.w	r1, r7, #20
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2202      	movs	r2, #2
 8000294:	4806      	ldr	r0, [pc, #24]	; (80002b0 <_ZN16ISM330DHCXSensor8IO_WriteEPhht+0x50>)
 8000296:	f006 f8a6 	bl	80063e6 <HAL_SPI_Transmit>

//			HAL_SPI_Receive(&hspi1, pBuffer, nBytesToWrite, 100);

			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f003 ff89 	bl	80041b8 <HAL_GPIO_WritePin>

			return 0;
 80002a6:	2300      	movs	r3, #0
		}

		return 1;
	}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	2000002c 	.word	0x2000002c

080002b4 <_ZN16ISM330DHCXSensorC1Ev>:
/** Constructor SPI
 *  @param spi object
 *  @param cs_pin the chip select pin
 *  @param spi_speed the SPI speed
 */
ISM330DHCXSensor::ISM330DHCXSensor() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(&hspi1);
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <_ZN16ISM330DHCXSensorC1Ev+0x3c>)
 80002be:	f005 ffef 	bl	80062a0 <HAL_SPI_Init>
	reg_ctx.write_reg = ISM330DHCX_io_write;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <_ZN16ISM330DHCXSensorC1Ev+0x40>)
 80002c6:	611a      	str	r2, [r3, #16]
	reg_ctx.read_reg = ISM330DHCX_io_read;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <_ZN16ISM330DHCXSensorC1Ev+0x44>)
 80002cc:	615a      	str	r2, [r3, #20]
	reg_ctx.handle = (void*) this;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	619a      	str	r2, [r3, #24]
	address = 0U;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
	acc_is_enabled = 0U;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	735a      	strb	r2, [r3, #13]
}
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000002c 	.word	0x2000002c
 80002f4:	08000e51 	.word	0x08000e51
 80002f8:	08000e7b 	.word	0x08000e7b

080002fc <_ZN16ISM330DHCXSensor4InitEv>:

/**
 *  @brief Initialize the sensor
 *  @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::Init() {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]

	/* SW reset */
	if (ism330dhcx_reset_set(&(reg_ctx), PROPERTY_ENABLE) != ISM330DHCX_OK) {
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3310      	adds	r3, #16
 8000308:	2101      	movs	r1, #1
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fa1e 	bl	800174c <ism330dhcx_reset_set>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	bf14      	ite	ne
 8000316:	2301      	movne	r3, #1
 8000318:	2300      	moveq	r3, #0
 800031a:	b2db      	uxtb	r3, r3
 800031c:	2b00      	cmp	r3, #0
 800031e:	d002      	beq.n	8000326 <_ZN16ISM330DHCXSensor4InitEv+0x2a>
		return ISM330DHCX_ERROR;
 8000320:	f04f 33ff 	mov.w	r3, #4294967295
 8000324:	e07d      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* Enable register address automatically incremented during a multiple byte
	 access with a serial interface */
	if (ism330dhcx_auto_increment_set(&(reg_ctx), PROPERTY_ENABLE)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3310      	adds	r3, #16
 800032a:	2101      	movs	r1, #1
 800032c:	4618      	mov	r0, r3
 800032e:	f001 fa33 	bl	8001798 <ism330dhcx_auto_increment_set>
 8000332:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000334:	2b00      	cmp	r3, #0
 8000336:	bf14      	ite	ne
 8000338:	2301      	movne	r3, #1
 800033a:	2300      	moveq	r3, #0
 800033c:	b2db      	uxtb	r3, r3
	if (ism330dhcx_auto_increment_set(&(reg_ctx), PROPERTY_ENABLE)
 800033e:	2b00      	cmp	r3, #0
 8000340:	d002      	beq.n	8000348 <_ZN16ISM330DHCXSensor4InitEv+0x4c>
		return ISM330DHCX_ERROR;
 8000342:	f04f 33ff 	mov.w	r3, #4294967295
 8000346:	e06c      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* Enable BDU */
	if (ism330dhcx_block_data_update_set(&(reg_ctx), PROPERTY_ENABLE)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3310      	adds	r3, #16
 800034c:	2101      	movs	r1, #1
 800034e:	4618      	mov	r0, r3
 8000350:	f001 f98e 	bl	8001670 <ism330dhcx_block_data_update_set>
 8000354:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000356:	2b00      	cmp	r3, #0
 8000358:	bf14      	ite	ne
 800035a:	2301      	movne	r3, #1
 800035c:	2300      	moveq	r3, #0
 800035e:	b2db      	uxtb	r3, r3
	if (ism330dhcx_block_data_update_set(&(reg_ctx), PROPERTY_ENABLE)
 8000360:	2b00      	cmp	r3, #0
 8000362:	d002      	beq.n	800036a <_ZN16ISM330DHCXSensor4InitEv+0x6e>
		return ISM330DHCX_ERROR;
 8000364:	f04f 33ff 	mov.w	r3, #4294967295
 8000368:	e05b      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* FIFO mode selection */
	if (ism330dhcx_fifo_mode_set(&(reg_ctx), ISM330DHCX_BYPASS_MODE)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3310      	adds	r3, #16
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f001 fa83 	bl	800187c <ism330dhcx_fifo_mode_set>
 8000376:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000378:	2b00      	cmp	r3, #0
 800037a:	bf14      	ite	ne
 800037c:	2301      	movne	r3, #1
 800037e:	2300      	moveq	r3, #0
 8000380:	b2db      	uxtb	r3, r3
	if (ism330dhcx_fifo_mode_set(&(reg_ctx), ISM330DHCX_BYPASS_MODE)
 8000382:	2b00      	cmp	r3, #0
 8000384:	d002      	beq.n	800038c <_ZN16ISM330DHCXSensor4InitEv+0x90>
		return ISM330DHCX_ERROR;
 8000386:	f04f 33ff 	mov.w	r3, #4294967295
 800038a:	e04a      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* ACCELEROMETER Output data rate selection - power down */
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_OFF)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3310      	adds	r3, #16
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fe14 	bl	8000fc0 <ism330dhcx_xl_data_rate_set>
 8000398:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 800039a:	2b00      	cmp	r3, #0
 800039c:	bf14      	ite	ne
 800039e:	2301      	movne	r3, #1
 80003a0:	2300      	moveq	r3, #0
 80003a2:	b2db      	uxtb	r3, r3
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_OFF)
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d002      	beq.n	80003ae <_ZN16ISM330DHCXSensor4InitEv+0xb2>
		return ISM330DHCX_ERROR;
 80003a8:	f04f 33ff 	mov.w	r3, #4294967295
 80003ac:	e039      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* ACCELEROMETER Full scale selection */
	if (ism330dhcx_xl_full_scale_set(&(reg_ctx), ISM330DHCX_2g)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3310      	adds	r3, #16
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fda5 	bl	8000f04 <ism330dhcx_xl_full_scale_set>
 80003ba:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80003bc:	2b00      	cmp	r3, #0
 80003be:	bf14      	ite	ne
 80003c0:	2301      	movne	r3, #1
 80003c2:	2300      	moveq	r3, #0
 80003c4:	b2db      	uxtb	r3, r3
	if (ism330dhcx_xl_full_scale_set(&(reg_ctx), ISM330DHCX_2g)
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d002      	beq.n	80003d0 <_ZN16ISM330DHCXSensor4InitEv+0xd4>
		return ISM330DHCX_ERROR;
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295
 80003ce:	e028      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* GYROSCOPE Output data rate selection - power down */
	if (ism330dhcx_gy_data_rate_set(&(reg_ctx), ISM330DHCX_GY_ODR_OFF)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3310      	adds	r3, #16
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 ffda 	bl	8001390 <ism330dhcx_gy_data_rate_set>
 80003dc:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80003de:	2b00      	cmp	r3, #0
 80003e0:	bf14      	ite	ne
 80003e2:	2301      	movne	r3, #1
 80003e4:	2300      	moveq	r3, #0
 80003e6:	b2db      	uxtb	r3, r3
	if (ism330dhcx_gy_data_rate_set(&(reg_ctx), ISM330DHCX_GY_ODR_OFF)
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <_ZN16ISM330DHCXSensor4InitEv+0xf6>
		return ISM330DHCX_ERROR;
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295
 80003f0:	e017      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* GYROSCOPE Full scale selection */
	if (ism330dhcx_gy_full_scale_set(&(reg_ctx), ISM330DHCX_2000dps)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3310      	adds	r3, #16
 80003f6:	210c      	movs	r1, #12
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 ff51 	bl	80012a0 <ism330dhcx_gy_full_scale_set>
 80003fe:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000400:	2b00      	cmp	r3, #0
 8000402:	bf14      	ite	ne
 8000404:	2301      	movne	r3, #1
 8000406:	2300      	moveq	r3, #0
 8000408:	b2db      	uxtb	r3, r3
	if (ism330dhcx_gy_full_scale_set(&(reg_ctx), ISM330DHCX_2000dps)
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <_ZN16ISM330DHCXSensor4InitEv+0x118>
		return ISM330DHCX_ERROR;
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
 8000412:	e006      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	acc_is_enabled = 0U;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2200      	movs	r2, #0
 8000418:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2200      	movs	r2, #0
 800041e:	735a      	strb	r2, [r3, #13]

	return ISM330DHCX_OK;
 8000420:	2300      	movs	r3, #0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_ZN16ISM330DHCXSensor5beginEv>:

/**
 * @brief  Configure the sensor in order to be used
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::begin() {
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
	if (&hspi1 != NULL) {
		// Configure CS pin
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2110      	movs	r1, #16
 8000436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043a:	f003 febd 	bl	80041b8 <HAL_GPIO_WritePin>

	}

	if (Init() != ISM330DHCX_OK) {
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f7ff ff5c 	bl	80002fc <_ZN16ISM330DHCXSensor4InitEv>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	bf14      	ite	ne
 800044a:	2301      	movne	r3, #1
 800044c:	2300      	moveq	r3, #0
 800044e:	b2db      	uxtb	r3, r3
 8000450:	2b00      	cmp	r3, #0
 8000452:	d002      	beq.n	800045a <_ZN16ISM330DHCXSensor5beginEv+0x30>
		return ISM330DHCX_ERROR;
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
 8000458:	e000      	b.n	800045c <_ZN16ISM330DHCXSensor5beginEv+0x32>
	}

	return ISM330DHCX_OK;
 800045a:	2300      	movs	r3, #0
}
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <_ZN16ISM330DHCXSensor10ACC_EnableEv>:

/**
 * @brief Enabled the ISM330DHCX accelerometer sensor
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_Enable() {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	if (acc_is_enabled == 1U) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	7b1b      	ldrb	r3, [r3, #12]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d101      	bne.n	8000478 <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x14>
		return ISM330DHCX_OK;
 8000474:	2300      	movs	r3, #0
 8000476:	e014      	b.n	80004a2 <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x3e>
	}

	/*ODR selection*/
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_104Hz)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3310      	adds	r3, #16
 800047c:	2104      	movs	r1, #4
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fd9e 	bl	8000fc0 <ism330dhcx_xl_data_rate_set>
 8000484:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000486:	2b00      	cmp	r3, #0
 8000488:	bf14      	ite	ne
 800048a:	2301      	movne	r3, #1
 800048c:	2300      	moveq	r3, #0
 800048e:	b2db      	uxtb	r3, r3
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_104Hz)
 8000490:	2b00      	cmp	r3, #0
 8000492:	d002      	beq.n	800049a <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x36>
		return ISM330DHCX_ERROR;
 8000494:	f04f 33ff 	mov.w	r3, #4294967295
 8000498:	e003      	b.n	80004a2 <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x3e>
	}

	acc_is_enabled = 1U;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2201      	movs	r2, #1
 800049e:	731a      	strb	r2, [r3, #12]
	return ISM330DHCX_OK;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf>:
 * @brief Get the ISM330DHCX accelerometer sensitivity
 * @param Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_GetSensitivity(
		float *Sensitivity) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_xl_t full_scale;
	ISM330DHCXStatusTypeDef ret = ISM330DHCX_OK;
 80004b6:	2300      	movs	r3, #0
 80004b8:	73fb      	strb	r3, [r7, #15]

	/**Read actual full scale selection from sensor  */
	if (ism330dhcx_xl_full_scale_get(&reg_ctx, &full_scale) != ISM330DHCX_OK) {
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	3310      	adds	r3, #16
 80004be:	f107 020e 	add.w	r2, r7, #14
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 fd43 	bl	8000f50 <ism330dhcx_xl_full_scale_get>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	bf14      	ite	ne
 80004d0:	2301      	movne	r3, #1
 80004d2:	2300      	moveq	r3, #0
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x34>
		return ISM330DHCX_ERROR;
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	e022      	b.n	8000526 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x7a>
	}

	/*Store the value of Sensitivity based on actual full scale*/
	switch (full_scale) {
 80004e0:	7bbb      	ldrb	r3, [r7, #14]
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	d81a      	bhi.n	800051c <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x70>
 80004e6:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x40>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	080004fd 	.word	0x080004fd
 80004f0:	08000515 	.word	0x08000515
 80004f4:	08000505 	.word	0x08000505
 80004f8:	0800050d 	.word	0x0800050d
	case ISM330DHCX_2g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x84>)
 8000500:	601a      	str	r2, [r3, #0]
		break;
 8000502:	e00e      	b.n	8000522 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	case ISM330DHCX_4g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x88>)
 8000508:	601a      	str	r2, [r3, #0]
		break;
 800050a:	e00a      	b.n	8000522 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	case ISM330DHCX_8g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x8c>)
 8000510:	601a      	str	r2, [r3, #0]
		break;
 8000512:	e006      	b.n	8000522 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	case ISM330DHCX_16g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	4a09      	ldr	r2, [pc, #36]	; (800053c <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x90>)
 8000518:	601a      	str	r2, [r3, #0]
		break;
 800051a:	e002      	b.n	8000522 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	default:
		ret = ISM330DHCX_ERROR;
 800051c:	23ff      	movs	r3, #255	; 0xff
 800051e:	73fb      	strb	r3, [r7, #15]
		break;
 8000520:	bf00      	nop
	}
	return ret;
 8000522:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	3d79db23 	.word	0x3d79db23
 8000534:	3df9db23 	.word	0x3df9db23
 8000538:	3e79db23 	.word	0x3e79db23
 800053c:	3ef9db23 	.word	0x3ef9db23

08000540 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf>:
/**
 * @brief Set the ISM330DHCX accelerometer Output Data Rate
 * @param Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_SetOutputDataRate(float Odr) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_odr_xl_t new_odr;

	new_odr =
			(Odr <= 12.5f) ? ISM330DHCX_XL_ODR_12Hz5 :
 800054c:	edd7 7a00 	vldr	s15, [r7]
 8000550:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055c:	d801      	bhi.n	8000562 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x22>
 800055e:	2301      	movs	r3, #1
 8000560:	e058      	b.n	8000614 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 26.0f) ? ISM330DHCX_XL_ODR_26Hz :
 8000562:	edd7 7a00 	vldr	s15, [r7]
 8000566:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800056a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800056e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000572:	d801      	bhi.n	8000578 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x38>
 8000574:	2302      	movs	r3, #2
 8000576:	e04d      	b.n	8000614 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 52.0f) ? ISM330DHCX_XL_ODR_52Hz :
 8000578:	edd7 7a00 	vldr	s15, [r7]
 800057c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000644 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x104>
 8000580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000588:	d801      	bhi.n	800058e <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x4e>
 800058a:	2303      	movs	r3, #3
 800058c:	e042      	b.n	8000614 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 104.0f) ? ISM330DHCX_XL_ODR_104Hz :
 800058e:	edd7 7a00 	vldr	s15, [r7]
 8000592:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000648 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x108>
 8000596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800059a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059e:	d801      	bhi.n	80005a4 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x64>
 80005a0:	2304      	movs	r3, #4
 80005a2:	e037      	b.n	8000614 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 208.0f) ? ISM330DHCX_XL_ODR_208Hz :
 80005a4:	edd7 7a00 	vldr	s15, [r7]
 80005a8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800064c <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x10c>
 80005ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b4:	d801      	bhi.n	80005ba <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x7a>
 80005b6:	2305      	movs	r3, #5
 80005b8:	e02c      	b.n	8000614 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 417.0f) ? ISM330DHCX_XL_ODR_417Hz :
 80005ba:	edd7 7a00 	vldr	s15, [r7]
 80005be:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000650 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x110>
 80005c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ca:	d801      	bhi.n	80005d0 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x90>
 80005cc:	2306      	movs	r3, #6
 80005ce:	e021      	b.n	8000614 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 833.0f) ? ISM330DHCX_XL_ODR_833Hz :
 80005d0:	edd7 7a00 	vldr	s15, [r7]
 80005d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000654 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x114>
 80005d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e0:	d801      	bhi.n	80005e6 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xa6>
 80005e2:	2307      	movs	r3, #7
 80005e4:	e016      	b.n	8000614 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz :
 80005e6:	edd7 7a00 	vldr	s15, [r7]
 80005ea:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000658 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x118>
 80005ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f6:	d801      	bhi.n	80005fc <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xbc>
 80005f8:	2308      	movs	r3, #8
 80005fa:	e00b      	b.n	8000614 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 3333.0f) ?
 80005fc:	edd7 7a00 	vldr	s15, [r7]
 8000600:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800065c <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x11c>
 8000604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800060c:	d801      	bhi.n	8000612 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd2>
 800060e:	2309      	movs	r3, #9
 8000610:	e000      	b.n	8000614 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
 8000612:	230a      	movs	r3, #10
	new_odr =
 8000614:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_XL_ODR_3333Hz : ISM330DHCX_XL_ODR_6667Hz;

	/* Output data rate selection */
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), new_odr) != ISM330DHCX_OK) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3310      	adds	r3, #16
 800061a:	7bfa      	ldrb	r2, [r7, #15]
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fcce 	bl	8000fc0 <ism330dhcx_xl_data_rate_set>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	bf14      	ite	ne
 800062a:	2301      	movne	r3, #1
 800062c:	2300      	moveq	r3, #0
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xfa>
		return ISM330DHCX_ERROR;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e000      	b.n	800063c <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xfc>
	}

	return ISM330DHCX_OK;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	42500000 	.word	0x42500000
 8000648:	42d00000 	.word	0x42d00000
 800064c:	43500000 	.word	0x43500000
 8000650:	43d08000 	.word	0x43d08000
 8000654:	44504000 	.word	0x44504000
 8000658:	44d06000 	.word	0x44d06000
 800065c:	45505000 	.word	0x45505000

08000660 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl>:
/**
 * @brief Set the ISM330DHCX accelerometer sensor full scale
 * @param fullscale the fullscale to be set
 * @retval  0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_SetFullScale(int32_t FullScale) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_xl_t new_fs;

	new_fs = (FullScale <= 2) ? ISM330DHCX_2g :
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2b02      	cmp	r3, #2
 800066e:	dd0b      	ble.n	8000688 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x28>
				(FullScale <= 4) ? ISM330DHCX_4g :
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	2b04      	cmp	r3, #4
 8000674:	dd06      	ble.n	8000684 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x24>
				(FullScale <= 8) ? ISM330DHCX_8g : ISM330DHCX_16g;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2b08      	cmp	r3, #8
 800067a:	dc01      	bgt.n	8000680 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x20>
 800067c:	2303      	movs	r3, #3
 800067e:	e004      	b.n	800068a <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x2a>
 8000680:	2301      	movs	r3, #1
 8000682:	e002      	b.n	800068a <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x2a>
				(FullScale <= 4) ? ISM330DHCX_4g :
 8000684:	2302      	movs	r3, #2
 8000686:	e000      	b.n	800068a <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x2a>
	new_fs = (FullScale <= 2) ? ISM330DHCX_2g :
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]

	if (ism330dhcx_xl_full_scale_set(&(reg_ctx), new_fs) != ISM330DHCX_OK) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3310      	adds	r3, #16
 8000690:	7bfa      	ldrb	r2, [r7, #15]
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fc35 	bl	8000f04 <ism330dhcx_xl_full_scale_set>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x50>
		return ISM330DHCX_ERROR;
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	e000      	b.n	80006b2 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x52>
	}

	return ISM330DHCX_OK;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs>:
/**
 * @brief Get the ISM330DHCX accelerometer sensor raw axes
 * @param value pointer where the raw values are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_GetAxesRaw(int16_t *Value) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b084      	sub	sp, #16
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
	axis3bit16_t data_raw;

	/*Read raw data values */
	if (ism330dhcx_acceleration_raw_get(&reg_ctx, data_raw.u8bit)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3310      	adds	r3, #16
 80006c8:	f107 0208 	add.w	r2, r7, #8
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f805 	bl	80016de <ism330dhcx_acceleration_raw_get>
 80006d4:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bf14      	ite	ne
 80006da:	2301      	movne	r3, #1
 80006dc:	2300      	moveq	r3, #0
 80006de:	b2db      	uxtb	r3, r3
	if (ism330dhcx_acceleration_raw_get(&reg_ctx, data_raw.u8bit)
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs+0x30>
		return ISM330DHCX_ERROR;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	e00e      	b.n	8000708 <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs+0x4e>
	}

	/*Formatting data */
	Value[0] = data_raw.i16bit[0];
 80006ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	801a      	strh	r2, [r3, #0]
	Value[1] = data_raw.i16bit[1];
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	3302      	adds	r3, #2
 80006f6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80006fa:	801a      	strh	r2, [r3, #0]
	Value[2] = data_raw.i16bit[2];
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	3304      	adds	r3, #4
 8000700:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000704:	801a      	strh	r2, [r3, #0]

	return ISM330DHCX_OK;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl>:
/**
 * @brief Get the ISM330DHCX accelerometer sensor axes
 * @param acceleration pointer where the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_GetAxes(int32_t *Acceleration) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	float sensitivity = 0.0f;
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
	int16_t data_raw[3];

	/* Get actualSensitivity */
	if (ACC_GetSensitivity(&sensitivity) != ISM330DHCX_OK) {
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff fec0 	bl	80004ac <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf14      	ite	ne
 8000732:	2301      	movne	r3, #1
 8000734:	2300      	moveq	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0x32>
		return ISM330DHCX_ERROR;
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
 8000740:	e043      	b.n	80007ca <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0xba>
	}

	/*Get Data Raw*/
	if (ACC_GetAxesRaw(data_raw) != ISM330DHCX_OK) {
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffb6 	bl	80006ba <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf14      	ite	ne
 8000754:	2301      	movne	r3, #1
 8000756:	2300      	moveq	r3, #0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0x54>
		return ISM330DHCX_ERROR;
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	e032      	b.n	80007ca <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0xba>
	}

	/*Calculate data */
	Acceleration[0] = (int32_t) ((float) data_raw[0] * sensitivity);
 8000764:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000770:	edd7 7a05 	vldr	s15, [r7, #20]
 8000774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800077c:	ee17 2a90 	vmov	r2, s15
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	601a      	str	r2, [r3, #0]
	Acceleration[1] = (int32_t) ((float) data_raw[1] * sensitivity);
 8000784:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000788:	ee07 3a90 	vmov	s15, r3
 800078c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000790:	edd7 7a05 	vldr	s15, [r7, #20]
 8000794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	3304      	adds	r3, #4
 800079c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a0:	ee17 2a90 	vmov	r2, s15
 80007a4:	601a      	str	r2, [r3, #0]
	Acceleration[2] = (int32_t) ((float) data_raw[2] * sensitivity);
 80007a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3308      	adds	r3, #8
 80007be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007c2:	ee17 2a90 	vmov	r2, s15
 80007c6:	601a      	str	r2, [r3, #0]

	return ISM330DHCX_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_ZN16ISM330DHCXSensor11GYRO_EnableEv>:

/**
 * @brief Enabled the ISM330DHCX gyroscope sensor
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_Enable() {
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	/*Check if the component is already enabled*/
	if (gyro_is_enabled == 1U) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7b5b      	ldrb	r3, [r3, #13]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d101      	bne.n	80007e6 <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x14>
		return ISM330DHCX_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e014      	b.n	8000810 <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x3e>
	}

	/*Output data rate selection */
	if (ism330dhcx_gy_data_rate_set(&reg_ctx, ISM330DHCX_GY_ODR_104Hz)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3310      	adds	r3, #16
 80007ea:	2104      	movs	r1, #4
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fdcf 	bl	8001390 <ism330dhcx_gy_data_rate_set>
 80007f2:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf14      	ite	ne
 80007f8:	2301      	movne	r3, #1
 80007fa:	2300      	moveq	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
	if (ism330dhcx_gy_data_rate_set(&reg_ctx, ISM330DHCX_GY_ODR_104Hz)
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x36>
		return ISM330DHCX_ERROR;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	e003      	b.n	8000810 <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x3e>
	}

	gyro_is_enabled = 1U;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2201      	movs	r2, #1
 800080c:	735a      	strb	r2, [r3, #13]

	return ISM330DHCX_OK;
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf>:
 * @brief Get the ISM330DHCX gyroscope sensitivity
 * @param Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_GetSensitivity(
		float *Sensitivity) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_g_t full_scale;
	ISM330DHCXStatusTypeDef ret = ISM330DHCX_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]

	if (ism330dhcx_gy_full_scale_get(&reg_ctx, &full_scale) != ISM330DHCX_OK) {
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3310      	adds	r3, #16
 800082a:	f107 020e 	add.w	r2, r7, #14
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fd5b 	bl	80012ec <ism330dhcx_gy_full_scale_get>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	bf14      	ite	ne
 800083c:	2301      	movne	r3, #1
 800083e:	2300      	moveq	r3, #0
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d002      	beq.n	800084c <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0x34>
		return ISM330DHCX_ERROR;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	e03c      	b.n	80008c6 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xae>
	}

	switch (full_scale) {
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	2b0c      	cmp	r3, #12
 8000850:	d834      	bhi.n	80008bc <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xa4>
 8000852:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0x40>)
 8000854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000858:	08000895 	.word	0x08000895
 800085c:	080008b5 	.word	0x080008b5
 8000860:	0800088d 	.word	0x0800088d
 8000864:	080008bd 	.word	0x080008bd
 8000868:	0800089d 	.word	0x0800089d
 800086c:	080008bd 	.word	0x080008bd
 8000870:	080008bd 	.word	0x080008bd
 8000874:	080008bd 	.word	0x080008bd
 8000878:	080008a5 	.word	0x080008a5
 800087c:	080008bd 	.word	0x080008bd
 8000880:	080008bd 	.word	0x080008bd
 8000884:	080008bd 	.word	0x080008bd
 8000888:	080008ad 	.word	0x080008ad
	case ISM330DHCX_125dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xb8>)
 8000890:	601a      	str	r2, [r3, #0]
		break;
 8000892:	e016      	b.n	80008c2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_250dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xbc>)
 8000898:	601a      	str	r2, [r3, #0]
		break;
 800089a:	e012      	b.n	80008c2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_500dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xc0>)
 80008a0:	601a      	str	r2, [r3, #0]
		break;
 80008a2:	e00e      	b.n	80008c2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_1000dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xc4>)
 80008a8:	601a      	str	r2, [r3, #0]
		break;
 80008aa:	e00a      	b.n	80008c2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_2000dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xc8>)
 80008b0:	601a      	str	r2, [r3, #0]
		break;
 80008b2:	e006      	b.n	80008c2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_4000dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xcc>)
 80008b8:	601a      	str	r2, [r3, #0]
		break;
 80008ba:	e002      	b.n	80008c2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	default:
		ret = ISM330DHCX_ERROR;
 80008bc:	23ff      	movs	r3, #255	; 0xff
 80008be:	73fb      	strb	r3, [r7, #15]
		break;
 80008c0:	bf00      	nop
	}
	return ret;
 80008c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	408c0000 	.word	0x408c0000
 80008d4:	410c0000 	.word	0x410c0000
 80008d8:	418c0000 	.word	0x418c0000
 80008dc:	420c0000 	.word	0x420c0000
 80008e0:	428c0000 	.word	0x428c0000
 80008e4:	430c0000 	.word	0x430c0000

080008e8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf>:
/**
 * @brief Set the ISM330DHCX gyroscope Output Data Rate
 * @param Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_SetOutputDataRate(float Odr) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_odr_g_t new_odr;

	new_odr =
			(Odr <= 12.5f) ? ISM330DHCX_GY_ODR_12Hz5 :
 80008f4:	edd7 7a00 	vldr	s15, [r7]
 80008f8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80008fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000904:	d801      	bhi.n	800090a <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x22>
 8000906:	2301      	movs	r3, #1
 8000908:	e058      	b.n	80009bc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 26.0f) ? ISM330DHCX_GY_ODR_26Hz :
 800090a:	edd7 7a00 	vldr	s15, [r7]
 800090e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091a:	d801      	bhi.n	8000920 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x38>
 800091c:	2302      	movs	r3, #2
 800091e:	e04d      	b.n	80009bc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 52.0f) ? ISM330DHCX_GY_ODR_52Hz :
 8000920:	edd7 7a00 	vldr	s15, [r7]
 8000924:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80009ec <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x104>
 8000928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800092c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000930:	d801      	bhi.n	8000936 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x4e>
 8000932:	2303      	movs	r3, #3
 8000934:	e042      	b.n	80009bc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 104.0f) ? ISM330DHCX_GY_ODR_104Hz :
 8000936:	edd7 7a00 	vldr	s15, [r7]
 800093a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80009f0 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x108>
 800093e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000946:	d801      	bhi.n	800094c <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x64>
 8000948:	2304      	movs	r3, #4
 800094a:	e037      	b.n	80009bc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 208.0f) ? ISM330DHCX_GY_ODR_208Hz :
 800094c:	edd7 7a00 	vldr	s15, [r7]
 8000950:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80009f4 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x10c>
 8000954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800095c:	d801      	bhi.n	8000962 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x7a>
 800095e:	2305      	movs	r3, #5
 8000960:	e02c      	b.n	80009bc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 417.0f) ? ISM330DHCX_GY_ODR_417Hz :
 8000962:	edd7 7a00 	vldr	s15, [r7]
 8000966:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80009f8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x110>
 800096a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800096e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000972:	d801      	bhi.n	8000978 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x90>
 8000974:	2306      	movs	r3, #6
 8000976:	e021      	b.n	80009bc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 833.0f) ? ISM330DHCX_GY_ODR_833Hz :
 8000978:	edd7 7a00 	vldr	s15, [r7]
 800097c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80009fc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x114>
 8000980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000988:	d801      	bhi.n	800098e <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xa6>
 800098a:	2307      	movs	r3, #7
 800098c:	e016      	b.n	80009bc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz :
 800098e:	edd7 7a00 	vldr	s15, [r7]
 8000992:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000a00 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x118>
 8000996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800099a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099e:	d801      	bhi.n	80009a4 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xbc>
 80009a0:	2308      	movs	r3, #8
 80009a2:	e00b      	b.n	80009bc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 3333.0f) ?
 80009a4:	edd7 7a00 	vldr	s15, [r7]
 80009a8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000a04 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x11c>
 80009ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009b4:	d801      	bhi.n	80009ba <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd2>
 80009b6:	2309      	movs	r3, #9
 80009b8:	e000      	b.n	80009bc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
 80009ba:	230a      	movs	r3, #10
	new_odr =
 80009bc:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_GY_ODR_3333Hz : ISM330DHCX_GY_ODR_6667Hz;

	/* Output data rate selection */
	if (ism330dhcx_gy_data_rate_set(&reg_ctx, new_odr) != ISM330DHCX_OK) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3310      	adds	r3, #16
 80009c2:	7bfa      	ldrb	r2, [r7, #15]
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fce2 	bl	8001390 <ism330dhcx_gy_data_rate_set>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bf14      	ite	ne
 80009d2:	2301      	movne	r3, #1
 80009d4:	2300      	moveq	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d002      	beq.n	80009e2 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xfa>
		return ISM330DHCX_ERROR;
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	e000      	b.n	80009e4 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xfc>
	}

	return ISM330DHCX_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	42500000 	.word	0x42500000
 80009f0:	42d00000 	.word	0x42d00000
 80009f4:	43500000 	.word	0x43500000
 80009f8:	43d08000 	.word	0x43d08000
 80009fc:	44504000 	.word	0x44504000
 8000a00:	44d06000 	.word	0x44d06000
 8000a04:	45505000 	.word	0x45505000

08000a08 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl>:
/**
 * @brief Set the ISM330DHCX gyroscope sensor full scale
 * @param fullscale the fullscale to be set
 * @retval  0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_SetFullScale(int32_t FullScale) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_g_t new_fs;

	new_fs = (FullScale <= 125) ? ISM330DHCX_125dps :
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	2b7d      	cmp	r3, #125	; 0x7d
 8000a16:	dd18      	ble.n	8000a4a <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x42>
				(FullScale <= 250) ? ISM330DHCX_250dps :
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	2bfa      	cmp	r3, #250	; 0xfa
 8000a1c:	dd13      	ble.n	8000a46 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x3e>
				(FullScale <= 500) ? ISM330DHCX_500dps :
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a24:	dd0d      	ble.n	8000a42 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x3a>
				(FullScale <= 1000) ? ISM330DHCX_1000dps :
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a2c:	dd07      	ble.n	8000a3e <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x36>
				(FullScale <= 2000) ? ISM330DHCX_2000dps : ISM330DHCX_4000dps;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a34:	dc01      	bgt.n	8000a3a <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x32>
 8000a36:	230c      	movs	r3, #12
 8000a38:	e008      	b.n	8000a4c <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e006      	b.n	8000a4c <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
				(FullScale <= 1000) ? ISM330DHCX_1000dps :
 8000a3e:	2308      	movs	r3, #8
 8000a40:	e004      	b.n	8000a4c <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
				(FullScale <= 500) ? ISM330DHCX_500dps :
 8000a42:	2304      	movs	r3, #4
 8000a44:	e002      	b.n	8000a4c <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
				(FullScale <= 250) ? ISM330DHCX_250dps :
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
	new_fs = (FullScale <= 125) ? ISM330DHCX_125dps :
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	73fb      	strb	r3, [r7, #15]

	if (ism330dhcx_gy_full_scale_set(&reg_ctx, new_fs) != ISM330DHCX_OK) {
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3310      	adds	r3, #16
 8000a52:	7bfa      	ldrb	r2, [r7, #15]
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fc22 	bl	80012a0 <ism330dhcx_gy_full_scale_set>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bf14      	ite	ne
 8000a62:	2301      	movne	r3, #1
 8000a64:	2300      	moveq	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x6a>
		return ISM330DHCX_ERROR;
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	e000      	b.n	8000a74 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x6c>
	}

	return ISM330DHCX_OK;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs>:
/**
 * @brief Get the ISM330DHCX gyroscope sensor raw axes
 * @param value pointer where the raw values are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_GetAxesRaw(int16_t *Value) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	axis3bit16_t data_raw;

	/* Read raw data values */
	if (ism330dhcx_angular_rate_raw_get(&reg_ctx, data_raw.u8bit)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3310      	adds	r3, #16
 8000a8a:	f107 0208 	add.w	r2, r7, #8
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fe13 	bl	80016bc <ism330dhcx_angular_rate_raw_get>
 8000a96:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
	if (ism330dhcx_angular_rate_raw_get(&reg_ctx, data_raw.u8bit)
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs+0x30>
		return ISM330DHCX_ERROR;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e00e      	b.n	8000aca <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs+0x4e>
	}

	/* Format the data */
	Value[0] = data_raw.i16bit[0];
 8000aac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	801a      	strh	r2, [r3, #0]
	Value[1] = data_raw.i16bit[1];
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000abc:	801a      	strh	r2, [r3, #0]
	Value[2] = data_raw.i16bit[2];
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ac6:	801a      	strh	r2, [r3, #0]

	return ISM330DHCX_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl>:
/**
 * @brief Get the ISM330DHCX gyroscope sensor axes
 * @param acceleration pointer where the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_GetAxes(int32_t *AngularRate) {
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
	float sensitivity;
	int16_t raw_data[3];

	/*Read raw data values */
	if (GYRO_GetAxesRaw(raw_data) != ISM330DHCX_OK) {
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffca 	bl	8000a7c <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0x2c>
		return ISM330DHCX_ERROR;
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
 8000afc:	e043      	b.n	8000b86 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0xb4>
	}

	/*Read actual sensitivity */
	if (GYRO_GetSensitivity(&sensitivity) != ISM330DHCX_OK) {
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff fe87 	bl	8000818 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0x4e>
		return ISM330DHCX_ERROR;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e032      	b.n	8000b86 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0xb4>
	}

	AngularRate[0] = (int32_t) ((float) raw_data[0] * sensitivity);
 8000b20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	601a      	str	r2, [r3, #0]
	AngularRate[1] = (int32_t) ((float) raw_data[1] * sensitivity);
 8000b40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3304      	adds	r3, #4
 8000b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b5c:	ee17 2a90 	vmov	r2, s15
 8000b60:	601a      	str	r2, [r3, #0]
	AngularRate[2] = (int32_t) ((float) raw_data[2] * sensitivity);
 8000b62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3308      	adds	r3, #8
 8000b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7e:	ee17 2a90 	vmov	r2, s15
 8000b82:	601a      	str	r2, [r3, #0]

	return ISM330DHCX_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf>:
/**
 * @brief  Set the ISM330DHCX FIFO ACC ODR value
 * @param  Odr FIFO ODR value
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::FIFO_ACC_Set_BDR(float Bdr) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_bdr_xl_t new_odr;

	new_odr =
			(Bdr <= 12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5 :
 8000b9c:	edd7 7a00 	vldr	s15, [r7]
 8000ba0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bac:	d801      	bhi.n	8000bb2 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x22>
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e058      	b.n	8000c64 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz :
 8000bb2:	edd7 7a00 	vldr	s15, [r7]
 8000bb6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d801      	bhi.n	8000bc8 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x38>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	e04d      	b.n	8000c64 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 52.0f) ? ISM330DHCX_XL_BATCHED_AT_52Hz :
 8000bc8:	edd7 7a00 	vldr	s15, [r7]
 8000bcc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000c94 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x104>
 8000bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd8:	d801      	bhi.n	8000bde <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x4e>
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e042      	b.n	8000c64 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 104.0f) ? ISM330DHCX_XL_BATCHED_AT_104Hz :
 8000bde:	edd7 7a00 	vldr	s15, [r7]
 8000be2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000c98 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x108>
 8000be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bee:	d801      	bhi.n	8000bf4 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x64>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e037      	b.n	8000c64 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 208.0f) ? ISM330DHCX_XL_BATCHED_AT_208Hz :
 8000bf4:	edd7 7a00 	vldr	s15, [r7]
 8000bf8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000c9c <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x10c>
 8000bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c04:	d801      	bhi.n	8000c0a <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x7a>
 8000c06:	2305      	movs	r3, #5
 8000c08:	e02c      	b.n	8000c64 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 417.0f) ? ISM330DHCX_XL_BATCHED_AT_417Hz :
 8000c0a:	edd7 7a00 	vldr	s15, [r7]
 8000c0e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000ca0 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x110>
 8000c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1a:	d801      	bhi.n	8000c20 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x90>
 8000c1c:	2306      	movs	r3, #6
 8000c1e:	e021      	b.n	8000c64 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 833.0f) ? ISM330DHCX_XL_BATCHED_AT_833Hz :
 8000c20:	edd7 7a00 	vldr	s15, [r7]
 8000c24:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000ca4 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x114>
 8000c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c30:	d801      	bhi.n	8000c36 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xa6>
 8000c32:	2307      	movs	r3, #7
 8000c34:	e016      	b.n	8000c64 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 1667.0f) ? ISM330DHCX_XL_BATCHED_AT_1667Hz :
 8000c36:	edd7 7a00 	vldr	s15, [r7]
 8000c3a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000ca8 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x118>
 8000c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	d801      	bhi.n	8000c4c <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xbc>
 8000c48:	2308      	movs	r3, #8
 8000c4a:	e00b      	b.n	8000c64 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 3333.0f) ?
 8000c4c:	edd7 7a00 	vldr	s15, [r7]
 8000c50:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000cac <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x11c>
 8000c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5c:	d801      	bhi.n	8000c62 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd2>
 8000c5e:	2309      	movs	r3, #9
 8000c60:	e000      	b.n	8000c64 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
 8000c62:	230a      	movs	r3, #10
	new_odr =
 8000c64:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_XL_BATCHED_AT_3333Hz :
					ISM330DHCX_XL_BATCHED_AT_6667Hz;

	if (ism330dhcx_fifo_xl_batch_set(&reg_ctx, new_odr) != ISM330DHCX_OK) {
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3310      	adds	r3, #16
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 fdb8 	bl	80017e4 <ism330dhcx_fifo_xl_batch_set>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf14      	ite	ne
 8000c7a:	2301      	movne	r3, #1
 8000c7c:	2300      	moveq	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xfa>
		return ISM330DHCX_ERROR;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	e000      	b.n	8000c8c <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xfc>
	}

	return ISM330DHCX_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	42500000 	.word	0x42500000
 8000c98:	42d00000 	.word	0x42d00000
 8000c9c:	43500000 	.word	0x43500000
 8000ca0:	43d08000 	.word	0x43d08000
 8000ca4:	44504000 	.word	0x44504000
 8000ca8:	44d06000 	.word	0x44d06000
 8000cac:	45505000 	.word	0x45505000

08000cb0 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf>:
/**
 * @brief  Set the ISM330DHCX FIFO GYRO ODR value
 * @param  Odr FIFO ODR value
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::FIFO_GYRO_Set_BDR(float Bdr) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_bdr_gy_t new_odr;

	new_odr =
			(Bdr <= 12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5 :
 8000cbc:	edd7 7a00 	vldr	s15, [r7]
 8000cc0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ccc:	d801      	bhi.n	8000cd2 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x22>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e058      	b.n	8000d84 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz :
 8000cd2:	edd7 7a00 	vldr	s15, [r7]
 8000cd6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce2:	d801      	bhi.n	8000ce8 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x38>
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	e04d      	b.n	8000d84 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 52.0f) ? ISM330DHCX_GY_BATCHED_AT_52Hz :
 8000ce8:	edd7 7a00 	vldr	s15, [r7]
 8000cec:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000db4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x104>
 8000cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf8:	d801      	bhi.n	8000cfe <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x4e>
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e042      	b.n	8000d84 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 104.0f) ? ISM330DHCX_GY_BATCHED_AT_104Hz :
 8000cfe:	edd7 7a00 	vldr	s15, [r7]
 8000d02:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000db8 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x108>
 8000d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0e:	d801      	bhi.n	8000d14 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x64>
 8000d10:	2304      	movs	r3, #4
 8000d12:	e037      	b.n	8000d84 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 208.0f) ? ISM330DHCX_GY_BATCHED_AT_208Hz :
 8000d14:	edd7 7a00 	vldr	s15, [r7]
 8000d18:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000dbc <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x10c>
 8000d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d24:	d801      	bhi.n	8000d2a <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x7a>
 8000d26:	2305      	movs	r3, #5
 8000d28:	e02c      	b.n	8000d84 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 417.0f) ? ISM330DHCX_GY_BATCHED_AT_417Hz :
 8000d2a:	edd7 7a00 	vldr	s15, [r7]
 8000d2e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000dc0 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x110>
 8000d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3a:	d801      	bhi.n	8000d40 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x90>
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	e021      	b.n	8000d84 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 833.0f) ? ISM330DHCX_GY_BATCHED_AT_833Hz :
 8000d40:	edd7 7a00 	vldr	s15, [r7]
 8000d44:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000dc4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x114>
 8000d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d50:	d801      	bhi.n	8000d56 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xa6>
 8000d52:	2307      	movs	r3, #7
 8000d54:	e016      	b.n	8000d84 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 1667.0f) ? ISM330DHCX_GY_BATCHED_AT_1667Hz :
 8000d56:	edd7 7a00 	vldr	s15, [r7]
 8000d5a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000dc8 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x118>
 8000d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d66:	d801      	bhi.n	8000d6c <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xbc>
 8000d68:	2308      	movs	r3, #8
 8000d6a:	e00b      	b.n	8000d84 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 3333.0f) ?
 8000d6c:	edd7 7a00 	vldr	s15, [r7]
 8000d70:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000dcc <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x11c>
 8000d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	d801      	bhi.n	8000d82 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd2>
 8000d7e:	2309      	movs	r3, #9
 8000d80:	e000      	b.n	8000d84 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
 8000d82:	230a      	movs	r3, #10
	new_odr =
 8000d84:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_GY_BATCHED_AT_3333Hz :
					ISM330DHCX_GY_BATCHED_AT_6667Hz;

	if (ism330dhcx_fifo_gy_batch_set(&reg_ctx, new_odr) != ISM330DHCX_OK) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3310      	adds	r3, #16
 8000d8a:	7bfa      	ldrb	r2, [r7, #15]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fd4e 	bl	8001830 <ism330dhcx_fifo_gy_batch_set>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xfa>
		return ISM330DHCX_ERROR;
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	e000      	b.n	8000dac <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xfc>
	}

	return ISM330DHCX_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	42500000 	.word	0x42500000
 8000db8:	42d00000 	.word	0x42d00000
 8000dbc:	43500000 	.word	0x43500000
 8000dc0:	43d08000 	.word	0x43d08000
 8000dc4:	44504000 	.word	0x44504000
 8000dc8:	44d06000 	.word	0x44d06000
 8000dcc:	45505000 	.word	0x45505000

08000dd0 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh>:
/**
 * @brief  Set the ISM330DHCX FIFO mode
 * @param  Mode FIFO mode
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::FIFO_Set_Mode(uint8_t Mode) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
	ISM330DHCXStatusTypeDef ret = ISM330DHCX_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]

	/* Verify that the passed parameter contains one of the valid values */
	switch ((ism330dhcx_fifo_mode_t) Mode) {
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	bf8c      	ite	hi
 8000de6:	2201      	movhi	r2, #1
 8000de8:	2200      	movls	r2, #0
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d10b      	bne.n	8000e08 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x38>
 8000df0:	2201      	movs	r2, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bf14      	ite	ne
 8000dfe:	2301      	movne	r3, #1
 8000e00:	2300      	moveq	r3, #0
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x3e>
	case ISM330DHCX_BYPASS_TO_STREAM_MODE:
	case ISM330DHCX_STREAM_MODE:
		break;

	default:
		ret = ISM330DHCX_ERROR;
 8000e08:	23ff      	movs	r3, #255	; 0xff
 8000e0a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e0c:	e000      	b.n	8000e10 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x40>
		break;
 8000e0e:	bf00      	nop
	}

	if (ret == ISM330DHCX_ERROR) {
 8000e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d102      	bne.n	8000e20 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x50>
		return ret;
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	e013      	b.n	8000e48 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x78>
	}

	if (ism330dhcx_fifo_mode_set(&reg_ctx, (ism330dhcx_fifo_mode_t) Mode)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3310      	adds	r3, #16
 8000e24:	78fa      	ldrb	r2, [r7, #3]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fd27 	bl	800187c <ism330dhcx_fifo_mode_set>
 8000e2e:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bf14      	ite	ne
 8000e34:	2301      	movne	r3, #1
 8000e36:	2300      	moveq	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
	if (ism330dhcx_fifo_mode_set(&reg_ctx, (ism330dhcx_fifo_mode_t) Mode)
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x74>
		return ISM330DHCX_ERROR;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e001      	b.n	8000e48 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x78>
	}

	return ret;
 8000e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <ISM330DHCX_io_write>:

	return ISM330DHCX_OK;
}

int32_t ISM330DHCX_io_write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer,
		uint16_t nBytesToWrite) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	72fb      	strb	r3, [r7, #11]
 8000e60:	4613      	mov	r3, r2
 8000e62:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Write(pBuffer, WriteAddr,
 8000e64:	893b      	ldrh	r3, [r7, #8]
 8000e66:	7afa      	ldrb	r2, [r7, #11]
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f7ff f9f8 	bl	8000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>
 8000e70:	4603      	mov	r3, r0
			nBytesToWrite);
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <ISM330DHCX_io_read>:

int32_t ISM330DHCX_io_read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer,
		uint16_t nBytesToRead) {
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	461a      	mov	r2, r3
 8000e86:	460b      	mov	r3, r1
 8000e88:	72fb      	strb	r3, [r7, #11]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Read(pBuffer, ReadAddr,
 8000e8e:	893b      	ldrh	r3, [r7, #8]
 8000e90:	7afa      	ldrb	r2, [r7, #11]
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f7ff f9b3 	bl	8000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>
 8000e9a:	4603      	mov	r3, r0
			nBytesToRead);
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <ism330dhcx_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330dhcx_read_reg(ism330dhcx_ctx_t *ctx, uint8_t reg, uint8_t *data,
                            uint16_t len)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	72fb      	strb	r3, [r7, #11]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	685c      	ldr	r4, [r3, #4]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6898      	ldr	r0, [r3, #8]
 8000ec0:	893b      	ldrh	r3, [r7, #8]
 8000ec2:	7af9      	ldrb	r1, [r7, #11]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	47a0      	blx	r4
 8000ec8:	6178      	str	r0, [r7, #20]
  return ret;
 8000eca:	697b      	ldr	r3, [r7, #20]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}

08000ed4 <ism330dhcx_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330dhcx_write_reg(ism330dhcx_ctx_t *ctx, uint8_t reg, uint8_t *data,
                             uint16_t len)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	72fb      	strb	r3, [r7, #11]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681c      	ldr	r4, [r3, #0]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6898      	ldr	r0, [r3, #8]
 8000ef0:	893b      	ldrh	r3, [r7, #8]
 8000ef2:	7af9      	ldrb	r1, [r7, #11]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	47a0      	blx	r4
 8000ef8:	6178      	str	r0, [r7, #20]
  return ret;
 8000efa:	697b      	ldr	r3, [r7, #20]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd90      	pop	{r4, r7, pc}

08000f04 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000f10:	f107 0208 	add.w	r2, r7, #8
 8000f14:	2301      	movs	r3, #1
 8000f16:	2110      	movs	r1, #16
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ffc3 	bl	8000ea4 <ism330dhcx_read_reg>
 8000f1e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10f      	bne.n	8000f46 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	7a3b      	ldrb	r3, [r7, #8]
 8000f30:	f362 0383 	bfi	r3, r2, #2, #2
 8000f34:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8000f36:	f107 0208 	add.w	r2, r7, #8
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffc8 	bl	8000ed4 <ism330dhcx_write_reg>
 8000f44:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }
  return ret;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	2301      	movs	r3, #1
 8000f60:	2110      	movs	r1, #16
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff9e 	bl	8000ea4 <ism330dhcx_read_reg>
 8000f68:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8000f6a:	7a3b      	ldrb	r3, [r7, #8]
 8000f6c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d81a      	bhi.n	8000fac <ism330dhcx_xl_full_scale_get+0x5c>
 8000f76:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <ism330dhcx_xl_full_scale_get+0x2c>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08000f8d 	.word	0x08000f8d
 8000f80:	08000f95 	.word	0x08000f95
 8000f84:	08000f9d 	.word	0x08000f9d
 8000f88:	08000fa5 	.word	0x08000fa5
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
      break;
 8000f92:	e00f      	b.n	8000fb4 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
      break;
 8000f9a:	e00b      	b.n	8000fb4 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]
      break;
 8000fa2:	e007      	b.n	8000fb4 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	701a      	strb	r2, [r3, #0]
      break;
 8000faa:	e003      	b.n	8000fb4 <ism330dhcx_xl_full_scale_get+0x64>
    default:
      *val = ISM330DHCX_2g;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
      break;
 8000fb2:	bf00      	nop
  }
  return ret;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop

08000fc0 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(ism330dhcx_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	75fb      	strb	r3, [r7, #23]
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 fc76 	bl	80018c8 <ism330dhcx_fsm_enable_get>
 8000fdc:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 80c4 	bne.w	800116e <ism330dhcx_xl_data_rate_set+0x1ae>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000fe6:	7b3b      	ldrb	r3, [r7, #12]
 8000fe8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000fec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8000fee:	7b3b      	ldrb	r3, [r7, #12]
 8000ff0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ff4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8000ffa:	7b3b      	ldrb	r3, [r7, #12]
 8000ffc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001000:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001002:	4313      	orrs	r3, r2
 8001004:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800100c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800100e:	4313      	orrs	r3, r2
 8001010:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001012:	7b3b      	ldrb	r3, [r7, #12]
 8001014:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001018:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800101a:	4313      	orrs	r3, r2
 800101c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800101e:	7b3b      	ldrb	r3, [r7, #12]
 8001020:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001024:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001026:	4313      	orrs	r3, r2
 8001028:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800102a:	7b3b      	ldrb	r3, [r7, #12]
 800102c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001030:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001032:	4313      	orrs	r3, r2
 8001034:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800103c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800103e:	4313      	orrs	r3, r2
 8001040:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001048:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800104a:	4313      	orrs	r3, r2
 800104c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001054:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001056:	4313      	orrs	r3, r2
 8001058:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800105a:	7b7b      	ldrb	r3, [r7, #13]
 800105c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001062:	4313      	orrs	r3, r2
 8001064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800106c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800106e:	4313      	orrs	r3, r2
 8001070:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001078:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800107a:	4313      	orrs	r3, r2
 800107c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001084:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001086:	4313      	orrs	r3, r2
 8001088:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001090:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001092:	4313      	orrs	r3, r2
 8001094:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE) {
 8001096:	7b7b      	ldrb	r3, [r7, #13]
 8001098:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800109c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800109e:	4313      	orrs	r3, r2
 80010a0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d163      	bne.n	800116e <ism330dhcx_xl_data_rate_set+0x1ae>

      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80010a6:	f107 030b 	add.w	r3, r7, #11
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 fc37 	bl	8001920 <ism330dhcx_fsm_data_rate_get>
 80010b2:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d159      	bne.n	800116e <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d853      	bhi.n	8001168 <ism330dhcx_xl_data_rate_set+0x1a8>
 80010c0:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <ism330dhcx_xl_data_rate_set+0x108>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	080010d9 	.word	0x080010d9
 80010cc:	080010eb 	.word	0x080010eb
 80010d0:	08001109 	.word	0x08001109
 80010d4:	08001133 	.word	0x08001133
          case ISM330DHCX_ODR_FSM_12Hz5:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80010de:	2301      	movs	r3, #1
 80010e0:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80010e2:	e045      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	75fb      	strb	r3, [r7, #23]
            break;
 80010e8:	e042      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_26Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80010f0:	2302      	movs	r3, #2
 80010f2:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80010f4:	e03c      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d102      	bne.n	8001102 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80010fc:	2302      	movs	r3, #2
 80010fe:	75fb      	strb	r3, [r7, #23]
            break;
 8001100:	e036      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	75fb      	strb	r3, [r7, #23]
            break;
 8001106:	e033      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_52Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800110e:	2303      	movs	r3, #3
 8001110:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001112:	e02d      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d102      	bne.n	8001120 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800111a:	2303      	movs	r3, #3
 800111c:	75fb      	strb	r3, [r7, #23]
            break;
 800111e:	e027      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d102      	bne.n	800112c <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001126:	2303      	movs	r3, #3
 8001128:	75fb      	strb	r3, [r7, #23]
            break;
 800112a:	e021      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	75fb      	strb	r3, [r7, #23]
            break;
 8001130:	e01e      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_104Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001138:	2304      	movs	r3, #4
 800113a:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 800113c:	e018      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d102      	bne.n	800114a <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001144:	2304      	movs	r3, #4
 8001146:	75fb      	strb	r3, [r7, #23]
            break;
 8001148:	e012      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 800114a:	78fb      	ldrb	r3, [r7, #3]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d102      	bne.n	8001156 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001150:	2304      	movs	r3, #4
 8001152:	75fb      	strb	r3, [r7, #23]
            break;
 8001154:	e00c      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d102      	bne.n	8001162 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800115c:	2304      	movs	r3, #4
 800115e:	75fb      	strb	r3, [r7, #23]
            break;
 8001160:	e006      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	75fb      	strb	r3, [r7, #23]
            break;
 8001166:	e003      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	75fb      	strb	r3, [r7, #23]
            break;
 800116c:	e000      	b.n	8001170 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 800116e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d16d      	bne.n	8001256 <ism330dhcx_xl_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800117a:	f107 030a 	add.w	r3, r7, #10
 800117e:	4619      	mov	r1, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fc15 	bl	80019b0 <ism330dhcx_mlc_get>
 8001186:	6138      	str	r0, [r7, #16]
    if (mlc_enable == PROPERTY_ENABLE) {
 8001188:	7abb      	ldrb	r3, [r7, #10]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d163      	bne.n	8001256 <ism330dhcx_xl_data_rate_set+0x296>

      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800118e:	f107 0309 	add.w	r3, r7, #9
 8001192:	4619      	mov	r1, r3
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 fc35 	bl	8001a04 <ism330dhcx_mlc_data_rate_get>
 800119a:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d159      	bne.n	8001256 <ism330dhcx_xl_data_rate_set+0x296>
        switch (mlc_odr) {
 80011a2:	7a7b      	ldrb	r3, [r7, #9]
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d853      	bhi.n	8001250 <ism330dhcx_xl_data_rate_set+0x290>
 80011a8:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <ism330dhcx_xl_data_rate_set+0x1f0>)
 80011aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ae:	bf00      	nop
 80011b0:	080011c1 	.word	0x080011c1
 80011b4:	080011d3 	.word	0x080011d3
 80011b8:	080011f1 	.word	0x080011f1
 80011bc:	0800121b 	.word	0x0800121b
          case ISM330DHCX_ODR_PRGS_12Hz5:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <ism330dhcx_xl_data_rate_set+0x20c>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80011c6:	2301      	movs	r3, #1
 80011c8:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80011ca:	e045      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	75fb      	strb	r3, [r7, #23]
            break;
 80011d0:	e042      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <ism330dhcx_xl_data_rate_set+0x21e>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80011d8:	2302      	movs	r3, #2
 80011da:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80011dc:	e03c      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d102      	bne.n	80011ea <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80011e4:	2302      	movs	r3, #2
 80011e6:	75fb      	strb	r3, [r7, #23]
            break;
 80011e8:	e036      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	75fb      	strb	r3, [r7, #23]
            break;
 80011ee:	e033      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_52Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <ism330dhcx_xl_data_rate_set+0x23c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80011f6:	2303      	movs	r3, #3
 80011f8:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80011fa:	e02d      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d102      	bne.n	8001208 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001202:	2303      	movs	r3, #3
 8001204:	75fb      	strb	r3, [r7, #23]
            break;
 8001206:	e027      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d102      	bne.n	8001214 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800120e:	2303      	movs	r3, #3
 8001210:	75fb      	strb	r3, [r7, #23]
            break;
 8001212:	e021      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	75fb      	strb	r3, [r7, #23]
            break;
 8001218:	e01e      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <ism330dhcx_xl_data_rate_set+0x266>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001220:	2304      	movs	r3, #4
 8001222:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001224:	e018      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d102      	bne.n	8001232 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800122c:	2304      	movs	r3, #4
 800122e:	75fb      	strb	r3, [r7, #23]
            break;
 8001230:	e012      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d102      	bne.n	800123e <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001238:	2304      	movs	r3, #4
 800123a:	75fb      	strb	r3, [r7, #23]
            break;
 800123c:	e00c      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_52Hz) {
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d102      	bne.n	800124a <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001244:	2304      	movs	r3, #4
 8001246:	75fb      	strb	r3, [r7, #23]
            break;
 8001248:	e006      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	75fb      	strb	r3, [r7, #23]
            break;
 800124e:	e003      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
          default:
            odr_xl = val;
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	75fb      	strb	r3, [r7, #23]
            break;
 8001254:	e000      	b.n	8001258 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8001256:	bf00      	nop
    }
  }
  if (ret == 0) {
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d107      	bne.n	800126e <ism330dhcx_xl_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800125e:	f107 0208 	add.w	r2, r7, #8
 8001262:	2301      	movs	r3, #1
 8001264:	2110      	movs	r1, #16
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fe1c 	bl	8000ea4 <ism330dhcx_read_reg>
 800126c:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }
  if (ret == 0) {
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10f      	bne.n	8001294 <ism330dhcx_xl_data_rate_set+0x2d4>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	b2da      	uxtb	r2, r3
 800127c:	7a3b      	ldrb	r3, [r7, #8]
 800127e:	f362 1307 	bfi	r3, r2, #4, #4
 8001282:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001284:	f107 0208 	add.w	r2, r7, #8
 8001288:	2301      	movs	r3, #1
 800128a:	2110      	movs	r1, #16
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fe21 	bl	8000ed4 <ism330dhcx_write_reg>
 8001292:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }
  return ret;
 8001294:	693b      	ldr	r3, [r7, #16]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop

080012a0 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80012ac:	f107 0208 	add.w	r2, r7, #8
 80012b0:	2301      	movs	r3, #1
 80012b2:	2111      	movs	r1, #17
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fdf5 	bl	8000ea4 <ism330dhcx_read_reg>
 80012ba:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	7a3b      	ldrb	r3, [r7, #8]
 80012cc:	f362 0303 	bfi	r3, r2, #0, #4
 80012d0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80012d2:	f107 0208 	add.w	r2, r7, #8
 80012d6:	2301      	movs	r3, #1
 80012d8:	2111      	movs	r1, #17
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fdfa 	bl	8000ed4 <ism330dhcx_write_reg>
 80012e0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80012f6:	f107 0208 	add.w	r2, r7, #8
 80012fa:	2301      	movs	r3, #1
 80012fc:	2111      	movs	r1, #17
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fdd0 	bl	8000ea4 <ism330dhcx_read_reg>
 8001304:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8001306:	7a3b      	ldrb	r3, [r7, #8]
 8001308:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b0c      	cmp	r3, #12
 8001310:	d834      	bhi.n	800137c <ism330dhcx_gy_full_scale_get+0x90>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <ism330dhcx_gy_full_scale_get+0x2c>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	08001355 	.word	0x08001355
 800131c:	08001375 	.word	0x08001375
 8001320:	0800134d 	.word	0x0800134d
 8001324:	0800137d 	.word	0x0800137d
 8001328:	0800135d 	.word	0x0800135d
 800132c:	0800137d 	.word	0x0800137d
 8001330:	0800137d 	.word	0x0800137d
 8001334:	0800137d 	.word	0x0800137d
 8001338:	08001365 	.word	0x08001365
 800133c:	0800137d 	.word	0x0800137d
 8001340:	0800137d 	.word	0x0800137d
 8001344:	0800137d 	.word	0x0800137d
 8001348:	0800136d 	.word	0x0800136d
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]
      break;
 8001352:	e017      	b.n	8001384 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
      break;
 800135a:	e013      	b.n	8001384 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2204      	movs	r2, #4
 8001360:	701a      	strb	r2, [r3, #0]
      break;
 8001362:	e00f      	b.n	8001384 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2208      	movs	r2, #8
 8001368:	701a      	strb	r2, [r3, #0]
      break;
 800136a:	e00b      	b.n	8001384 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	220c      	movs	r2, #12
 8001370:	701a      	strb	r2, [r3, #0]
      break;
 8001372:	e007      	b.n	8001384 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
      break;
 800137a:	e003      	b.n	8001384 <ism330dhcx_gy_full_scale_get+0x98>
    default:
      *val = ISM330DHCX_125dps;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2202      	movs	r2, #2
 8001380:	701a      	strb	r2, [r3, #0]
      break;
 8001382:	bf00      	nop
  }
  return ret;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop

08001390 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(ism330dhcx_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	75fb      	strb	r3, [r7, #23]
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4619      	mov	r1, r3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 fa8e 	bl	80018c8 <ism330dhcx_fsm_enable_get>
 80013ac:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f040 80c4 	bne.w	800153e <ism330dhcx_gy_data_rate_set+0x1ae>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80013b6:	7b3b      	ldrb	r3, [r7, #12]
 80013b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80013be:	7b3b      	ldrb	r3, [r7, #12]
 80013c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013c4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80013ca:	7b3b      	ldrb	r3, [r7, #12]
 80013cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80013d6:	7b3b      	ldrb	r3, [r7, #12]
 80013d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80013dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80013de:	4313      	orrs	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80013e2:	7b3b      	ldrb	r3, [r7, #12]
 80013e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80013f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80013fa:	7b3b      	ldrb	r3, [r7, #12]
 80013fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001400:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001402:	4313      	orrs	r3, r2
 8001404:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001406:	7b3b      	ldrb	r3, [r7, #12]
 8001408:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800140c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800140e:	4313      	orrs	r3, r2
 8001410:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001418:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800141a:	4313      	orrs	r3, r2
 800141c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800141e:	7b7b      	ldrb	r3, [r7, #13]
 8001420:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001424:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001426:	4313      	orrs	r3, r2
 8001428:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800142a:	7b7b      	ldrb	r3, [r7, #13]
 800142c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001430:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001432:	4313      	orrs	r3, r2
 8001434:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001436:	7b7b      	ldrb	r3, [r7, #13]
 8001438:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800143c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800143e:	4313      	orrs	r3, r2
 8001440:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001442:	7b7b      	ldrb	r3, [r7, #13]
 8001444:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001448:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800144a:	4313      	orrs	r3, r2
 800144c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800144e:	7b7b      	ldrb	r3, [r7, #13]
 8001450:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001454:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001456:	4313      	orrs	r3, r2
 8001458:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001460:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001462:	4313      	orrs	r3, r2
 8001464:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE) {
 8001466:	7b7b      	ldrb	r3, [r7, #13]
 8001468:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800146c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800146e:	4313      	orrs	r3, r2
 8001470:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001472:	2b01      	cmp	r3, #1
 8001474:	d163      	bne.n	800153e <ism330dhcx_gy_data_rate_set+0x1ae>

      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8001476:	f107 030b 	add.w	r3, r7, #11
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fa4f 	bl	8001920 <ism330dhcx_fsm_data_rate_get>
 8001482:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d159      	bne.n	800153e <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800148a:	7afb      	ldrb	r3, [r7, #11]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d853      	bhi.n	8001538 <ism330dhcx_gy_data_rate_set+0x1a8>
 8001490:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <ism330dhcx_gy_data_rate_set+0x108>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014a9 	.word	0x080014a9
 800149c:	080014bb 	.word	0x080014bb
 80014a0:	080014d9 	.word	0x080014d9
 80014a4:	08001503 	.word	0x08001503
          case ISM330DHCX_ODR_FSM_12Hz5:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80014ae:	2301      	movs	r3, #1
 80014b0:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 80014b2:	e045      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	75fb      	strb	r3, [r7, #23]
            break;
 80014b8:	e042      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_26Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80014c0:	2302      	movs	r3, #2
 80014c2:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 80014c4:	e03c      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80014cc:	2302      	movs	r3, #2
 80014ce:	75fb      	strb	r3, [r7, #23]
            break;
 80014d0:	e036      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	75fb      	strb	r3, [r7, #23]
            break;
 80014d6:	e033      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_52Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80014de:	2303      	movs	r3, #3
 80014e0:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 80014e2:	e02d      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d102      	bne.n	80014f0 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80014ea:	2303      	movs	r3, #3
 80014ec:	75fb      	strb	r3, [r7, #23]
            break;
 80014ee:	e027      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d102      	bne.n	80014fc <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80014f6:	2303      	movs	r3, #3
 80014f8:	75fb      	strb	r3, [r7, #23]
            break;
 80014fa:	e021      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	75fb      	strb	r3, [r7, #23]
            break;
 8001500:	e01e      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_104Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001508:	2304      	movs	r3, #4
 800150a:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 800150c:	e018      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d102      	bne.n	800151a <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001514:	2304      	movs	r3, #4
 8001516:	75fb      	strb	r3, [r7, #23]
            break;
 8001518:	e012      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d102      	bne.n	8001526 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001520:	2304      	movs	r3, #4
 8001522:	75fb      	strb	r3, [r7, #23]
            break;
 8001524:	e00c      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d102      	bne.n	8001532 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800152c:	2304      	movs	r3, #4
 800152e:	75fb      	strb	r3, [r7, #23]
            break;
 8001530:	e006      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	75fb      	strb	r3, [r7, #23]
            break;
 8001536:	e003      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	75fb      	strb	r3, [r7, #23]
            break;
 800153c:	e000      	b.n	8001540 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 800153e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d16d      	bne.n	8001626 <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800154a:	f107 030a 	add.w	r3, r7, #10
 800154e:	4619      	mov	r1, r3
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 fa2d 	bl	80019b0 <ism330dhcx_mlc_get>
 8001556:	6138      	str	r0, [r7, #16]
    if (mlc_enable == PROPERTY_ENABLE) {
 8001558:	7abb      	ldrb	r3, [r7, #10]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d163      	bne.n	8001626 <ism330dhcx_gy_data_rate_set+0x296>

      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800155e:	f107 0309 	add.w	r3, r7, #9
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fa4d 	bl	8001a04 <ism330dhcx_mlc_data_rate_get>
 800156a:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d159      	bne.n	8001626 <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 8001572:	7a7b      	ldrb	r3, [r7, #9]
 8001574:	2b03      	cmp	r3, #3
 8001576:	d853      	bhi.n	8001620 <ism330dhcx_gy_data_rate_set+0x290>
 8001578:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <ism330dhcx_gy_data_rate_set+0x1f0>)
 800157a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157e:	bf00      	nop
 8001580:	08001591 	.word	0x08001591
 8001584:	080015a3 	.word	0x080015a3
 8001588:	080015c1 	.word	0x080015c1
 800158c:	080015eb 	.word	0x080015eb
          case ISM330DHCX_ODR_PRGS_12Hz5:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8001596:	2301      	movs	r3, #1
 8001598:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 800159a:	e045      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	75fb      	strb	r3, [r7, #23]
            break;
 80015a0:	e042      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_26Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80015a8:	2302      	movs	r3, #2
 80015aa:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 80015ac:	e03c      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d102      	bne.n	80015ba <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80015b4:	2302      	movs	r3, #2
 80015b6:	75fb      	strb	r3, [r7, #23]
            break;
 80015b8:	e036      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	75fb      	strb	r3, [r7, #23]
            break;
 80015be:	e033      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_52Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80015c6:	2303      	movs	r3, #3
 80015c8:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 80015ca:	e02d      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d102      	bne.n	80015d8 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80015d2:	2303      	movs	r3, #3
 80015d4:	75fb      	strb	r3, [r7, #23]
            break;
 80015d6:	e027      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d102      	bne.n	80015e4 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80015de:	2303      	movs	r3, #3
 80015e0:	75fb      	strb	r3, [r7, #23]
            break;
 80015e2:	e021      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	75fb      	strb	r3, [r7, #23]
            break;
 80015e8:	e01e      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_104Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80015f0:	2304      	movs	r3, #4
 80015f2:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 80015f4:	e018      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d102      	bne.n	8001602 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80015fc:	2304      	movs	r3, #4
 80015fe:	75fb      	strb	r3, [r7, #23]
            break;
 8001600:	e012      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d102      	bne.n	800160e <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001608:	2304      	movs	r3, #4
 800160a:	75fb      	strb	r3, [r7, #23]
            break;
 800160c:	e00c      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_52Hz) {
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d102      	bne.n	800161a <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001614:	2304      	movs	r3, #4
 8001616:	75fb      	strb	r3, [r7, #23]
            break;
 8001618:	e006      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	75fb      	strb	r3, [r7, #23]
            break;
 800161e:	e003      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
          default:
            odr_gy = val;
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	75fb      	strb	r3, [r7, #23]
            break;
 8001624:	e000      	b.n	8001628 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8001626:	bf00      	nop
    }
  }
  if (ret == 0) {
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d107      	bne.n	800163e <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800162e:	f107 0208 	add.w	r2, r7, #8
 8001632:	2301      	movs	r3, #1
 8001634:	2111      	movs	r1, #17
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fc34 	bl	8000ea4 <ism330dhcx_read_reg>
 800163c:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10f      	bne.n	8001664 <ism330dhcx_gy_data_rate_set+0x2d4>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	b2da      	uxtb	r2, r3
 800164c:	7a3b      	ldrb	r3, [r7, #8]
 800164e:	f362 1307 	bfi	r3, r2, #4, #4
 8001652:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001654:	f107 0208 	add.w	r2, r7, #8
 8001658:	2301      	movs	r3, #1
 800165a:	2111      	movs	r1, #17
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff fc39 	bl	8000ed4 <ism330dhcx_write_reg>
 8001662:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8001664:	693b      	ldr	r3, [r7, #16]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop

08001670 <ism330dhcx_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(ism330dhcx_ctx_t *ctx, uint8_t val)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800167c:	f107 0208 	add.w	r2, r7, #8
 8001680:	2301      	movs	r3, #1
 8001682:	2112      	movs	r1, #18
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fc0d 	bl	8000ea4 <ism330dhcx_read_reg>
 800168a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10f      	bne.n	80016b2 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	7a3b      	ldrb	r3, [r7, #8]
 800169c:	f362 1386 	bfi	r3, r2, #6, #1
 80016a0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016a2:	f107 0208 	add.w	r2, r7, #8
 80016a6:	2301      	movs	r3, #1
 80016a8:	2112      	movs	r1, #18
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fc12 	bl	8000ed4 <ism330dhcx_write_reg>
 80016b0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <ism330dhcx_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(ism330dhcx_ctx_t *ctx, uint8_t *buff)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 80016c6:	2306      	movs	r3, #6
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	2122      	movs	r1, #34	; 0x22
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fbe9 	bl	8000ea4 <ism330dhcx_read_reg>
 80016d2:	60f8      	str	r0, [r7, #12]
  return ret;
 80016d4:	68fb      	ldr	r3, [r7, #12]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <ism330dhcx_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(ism330dhcx_ctx_t *ctx, uint8_t *buff)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 80016e8:	2306      	movs	r3, #6
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	2128      	movs	r1, #40	; 0x28
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fbd8 	bl	8000ea4 <ism330dhcx_read_reg>
 80016f4:	60f8      	str	r0, [r7, #12]
  return ret;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(ism330dhcx_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800170c:	f107 0208 	add.w	r2, r7, #8
 8001710:	2301      	movs	r3, #1
 8001712:	2101      	movs	r1, #1
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fbc5 	bl	8000ea4 <ism330dhcx_read_reg>
 800171a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  if (ret == 0) {
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10f      	bne.n	8001742 <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	b2da      	uxtb	r2, r3
 800172a:	7a3b      	ldrb	r3, [r7, #8]
 800172c:	f362 1387 	bfi	r3, r2, #6, #2
 8001730:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8001732:	f107 0208 	add.w	r2, r7, #8
 8001736:	2301      	movs	r3, #1
 8001738:	2101      	movs	r1, #1
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fbca 	bl	8000ed4 <ism330dhcx_write_reg>
 8001740:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }
  return ret;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(ism330dhcx_ctx_t *ctx, uint8_t val)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001758:	f107 0208 	add.w	r2, r7, #8
 800175c:	2301      	movs	r3, #1
 800175e:	2112      	movs	r1, #18
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fb9f 	bl	8000ea4 <ism330dhcx_read_reg>
 8001766:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10f      	bne.n	800178e <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	7a3b      	ldrb	r3, [r7, #8]
 8001778:	f362 0300 	bfi	r3, r2, #0, #1
 800177c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800177e:	f107 0208 	add.w	r2, r7, #8
 8001782:	2301      	movs	r3, #1
 8001784:	2112      	movs	r1, #18
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fba4 	bl	8000ed4 <ism330dhcx_write_reg>
 800178c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }
  return ret;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(ism330dhcx_ctx_t *ctx, uint8_t val)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80017a4:	f107 0208 	add.w	r2, r7, #8
 80017a8:	2301      	movs	r3, #1
 80017aa:	2112      	movs	r1, #18
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fb79 	bl	8000ea4 <ism330dhcx_read_reg>
 80017b2:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10f      	bne.n	80017da <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	7a3b      	ldrb	r3, [r7, #8]
 80017c4:	f362 0382 	bfi	r3, r2, #2, #1
 80017c8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80017ca:	f107 0208 	add.w	r2, r7, #8
 80017ce:	2301      	movs	r3, #1
 80017d0:	2112      	movs	r1, #18
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fb7e 	bl	8000ed4 <ism330dhcx_write_reg>
 80017d8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80017f0:	f107 0208 	add.w	r2, r7, #8
 80017f4:	2301      	movs	r3, #1
 80017f6:	2109      	movs	r1, #9
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fb53 	bl	8000ea4 <ism330dhcx_read_reg>
 80017fe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  if (ret == 0) {
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10f      	bne.n	8001826 <ism330dhcx_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	b2da      	uxtb	r2, r3
 800180e:	7a3b      	ldrb	r3, [r7, #8]
 8001810:	f362 0303 	bfi	r3, r2, #0, #4
 8001814:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8001816:	f107 0208 	add.w	r2, r7, #8
 800181a:	2301      	movs	r3, #1
 800181c:	2109      	movs	r1, #9
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fb58 	bl	8000ed4 <ism330dhcx_write_reg>
 8001824:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }
  return ret;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 800183c:	f107 0208 	add.w	r2, r7, #8
 8001840:	2301      	movs	r3, #1
 8001842:	2109      	movs	r1, #9
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fb2d 	bl	8000ea4 <ism330dhcx_read_reg>
 800184a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  if (ret == 0) {
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <ism330dhcx_fifo_gy_batch_set+0x42>
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	b2da      	uxtb	r2, r3
 800185a:	7a3b      	ldrb	r3, [r7, #8]
 800185c:	f362 1307 	bfi	r3, r2, #4, #4
 8001860:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8001862:	f107 0208 	add.w	r2, r7, #8
 8001866:	2301      	movs	r3, #1
 8001868:	2109      	movs	r1, #9
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fb32 	bl	8000ed4 <ism330dhcx_write_reg>
 8001870:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }
  return ret;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(ism330dhcx_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8001888:	f107 0208 	add.w	r2, r7, #8
 800188c:	2301      	movs	r3, #1
 800188e:	210a      	movs	r1, #10
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fb07 	bl	8000ea4 <ism330dhcx_read_reg>
 8001896:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  if (ret == 0) {
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	7a3b      	ldrb	r3, [r7, #8]
 80018a8:	f362 0302 	bfi	r3, r2, #0, #3
 80018ac:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80018ae:	f107 0208 	add.w	r2, r7, #8
 80018b2:	2301      	movs	r3, #1
 80018b4:	210a      	movs	r1, #10
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fb0c 	bl	8000ed4 <ism330dhcx_write_reg>
 80018bc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }
  return ret;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(ism330dhcx_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80018d2:	2102      	movs	r1, #2
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff13 	bl	8001700 <ism330dhcx_mem_bank_set>
 80018da:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80018e2:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80018e4:	2301      	movs	r3, #1
 80018e6:	2146      	movs	r1, #70	; 0x46
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fadb 	bl	8000ea4 <ism330dhcx_read_reg>
 80018ee:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d107      	bne.n	8001906 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80018fa:	2301      	movs	r3, #1
 80018fc:	2147      	movs	r1, #71	; 0x47
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fad0 	bl	8000ea4 <ism330dhcx_read_reg>
 8001904:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d104      	bne.n	8001916 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800190c:	2100      	movs	r1, #0
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fef6 	bl	8001700 <ism330dhcx_mem_bank_set>
 8001914:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800192a:	2102      	movs	r1, #2
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fee7 	bl	8001700 <ism330dhcx_mem_bank_set>
 8001932:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d107      	bne.n	800194a <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800193a:	f107 0208 	add.w	r2, r7, #8
 800193e:	2301      	movs	r3, #1
 8001940:	215f      	movs	r1, #95	; 0x5f
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff faae 	bl	8000ea4 <ism330dhcx_read_reg>
 8001948:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }
  if (ret == 0) {
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d104      	bne.n	800195a <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8001950:	2100      	movs	r1, #0
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fed4 	bl	8001700 <ism330dhcx_mem_bank_set>
 8001958:	60f8      	str	r0, [r7, #12]
  }
  switch (emb_func_odr_cfg_b.fsm_odr) {
 800195a:	7a3b      	ldrb	r3, [r7, #8]
 800195c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b03      	cmp	r3, #3
 8001964:	d81a      	bhi.n	800199c <ism330dhcx_fsm_data_rate_get+0x7c>
 8001966:	a201      	add	r2, pc, #4	; (adr r2, 800196c <ism330dhcx_fsm_data_rate_get+0x4c>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	0800197d 	.word	0x0800197d
 8001970:	08001985 	.word	0x08001985
 8001974:	0800198d 	.word	0x0800198d
 8001978:	08001995 	.word	0x08001995
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
      break;
 8001982:	e00f      	b.n	80019a4 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
      break;
 800198a:	e00b      	b.n	80019a4 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2202      	movs	r2, #2
 8001990:	701a      	strb	r2, [r3, #0]
      break;
 8001992:	e007      	b.n	80019a4 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2203      	movs	r2, #3
 8001998:	701a      	strb	r2, [r3, #0]
      break;
 800199a:	e003      	b.n	80019a4 <ism330dhcx_fsm_data_rate_get+0x84>
    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
      break;
 80019a2:	bf00      	nop
  }
  return ret;
 80019a4:	68fb      	ldr	r3, [r7, #12]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop

080019b0 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(ism330dhcx_ctx_t *ctx, uint8_t *val)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80019ba:	2102      	movs	r1, #2
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fe9f 	bl	8001700 <ism330dhcx_mem_bank_set>
 80019c2:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80019ca:	f107 0208 	add.w	r2, r7, #8
 80019ce:	2301      	movs	r3, #1
 80019d0:	2105      	movs	r1, #5
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fa66 	bl	8000ea4 <ism330dhcx_read_reg>
 80019d8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }
  if (ret == 0) {
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10b      	bne.n	80019f8 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80019e0:	2100      	movs	r1, #0
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fe8c 	bl	8001700 <ism330dhcx_mem_bank_set>
 80019e8:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80019ea:	7a3b      	ldrb	r3, [r7, #8]
 80019ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 80019f8:	68fb      	ldr	r3, [r7, #12]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8001a0e:	2102      	movs	r1, #2
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fe75 	bl	8001700 <ism330dhcx_mem_bank_set>
 8001a16:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8001a1e:	f107 0208 	add.w	r2, r7, #8
 8001a22:	2301      	movs	r3, #1
 8001a24:	2160      	movs	r1, #96	; 0x60
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fa3c 	bl	8000ea4 <ism330dhcx_read_reg>
 8001a2c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }
  if (ret == 0) {
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d12a      	bne.n	8001a8a <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8001a34:	7a3b      	ldrb	r3, [r7, #8]
 8001a36:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d81b      	bhi.n	8001a78 <ism330dhcx_mlc_data_rate_get+0x74>
 8001a40:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <ism330dhcx_mlc_data_rate_get+0x44>)
 8001a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a46:	bf00      	nop
 8001a48:	08001a59 	.word	0x08001a59
 8001a4c:	08001a61 	.word	0x08001a61
 8001a50:	08001a69 	.word	0x08001a69
 8001a54:	08001a71 	.word	0x08001a71
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
        break;
 8001a5e:	e00f      	b.n	8001a80 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
        break;
 8001a66:	e00b      	b.n	8001a80 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	701a      	strb	r2, [r3, #0]
        break;
 8001a6e:	e007      	b.n	8001a80 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2203      	movs	r2, #3
 8001a74:	701a      	strb	r2, [r3, #0]
        break;
 8001a76:	e003      	b.n	8001a80 <ism330dhcx_mlc_data_rate_get+0x7c>
      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
        break;
 8001a7e:	bf00      	nop
    }
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8001a80:	2100      	movs	r1, #0
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fe3c 	bl	8001700 <ism330dhcx_mem_bank_set>
 8001a88:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001a98:	f000 fe73 	bl	8002782 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a9c:	f000 f82e 	bl	8001afc <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001aa0:	f000 fa6c 	bl	8001f7c <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8001aa4:	f000 fa40 	bl	8001f28 <_ZL11MX_DMA_Initv>
	MX_ADC1_Init();
 8001aa8:	f000 f88a 	bl	8001bc0 <_ZL12MX_ADC1_Initv>
	MX_CAN1_Init();
 8001aac:	f000 f94e 	bl	8001d4c <_ZL12MX_CAN1_Initv>
	MX_RTC_Init();
 8001ab0:	f000 f988 	bl	8001dc4 <_ZL11MX_RTC_Initv>
	MX_SPI1_Init();
 8001ab4:	f000 f9f6 	bl	8001ea4 <_ZL12MX_SPI1_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001ab8:	f005 fe0e 	bl	80076d8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8001abc:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <main+0x50>)
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <main+0x54>)
 8001ac2:	f005 fe53 	bl	800776c <osThreadNew>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a08      	ldr	r2, [pc, #32]	; (8001aec <main+0x58>)
 8001aca:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of blink01 */
	blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8001acc:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <main+0x5c>)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4808      	ldr	r0, [pc, #32]	; (8001af4 <main+0x60>)
 8001ad2:	f005 fe4b 	bl	800776c <osThreadNew>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <main+0x64>)
 8001ada:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001adc:	f005 fe20 	bl	8007720 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001ae0:	e7fe      	b.n	8001ae0 <main+0x4c>
 8001ae2:	bf00      	nop
 8001ae4:	0800a248 	.word	0x0800a248
 8001ae8:	08002139 	.word	0x08002139
 8001aec:	20000200 	.word	0x20000200
 8001af0:	0800a26c 	.word	0x0800a26c
 8001af4:	08002149 	.word	0x08002149
 8001af8:	20000204 	.word	0x20000204

08001afc <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b098      	sub	sp, #96	; 0x60
 8001b00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b02:	f107 0318 	add.w	r3, r7, #24
 8001b06:	2248      	movs	r2, #72	; 0x48
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f008 fb66 	bl	800a1dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f002 fba4 	bl	800426c <HAL_PWREx_ControlVoltageScaling>
 8001b24:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	bf14      	ite	ne
 8001b2a:	2301      	movne	r3, #1
 8001b2c:	2300      	moveq	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <_Z18SystemClock_Configv+0x3c>
		Error_Handler();
 8001b34:	f000 fba2 	bl	800227c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001b38:	2318      	movs	r3, #24
 8001b3a:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b40:	2301      	movs	r3, #1
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b48:	2360      	movs	r3, #96	; 0x60
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b50:	2301      	movs	r3, #1
 8001b52:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001b54:	2301      	movs	r3, #1
 8001b56:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 60;
 8001b58:	233c      	movs	r3, #60	; 0x3c
 8001b5a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b60:	2302      	movs	r3, #2
 8001b62:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fc7b 	bl	8004468 <HAL_RCC_OscConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf14      	ite	ne
 8001b78:	2301      	movne	r3, #1
 8001b7a:	2300      	moveq	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <_Z18SystemClock_Configv+0x8a>
		Error_Handler();
 8001b82:	f000 fb7b 	bl	800227c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b86:	230f      	movs	r3, #15
 8001b88:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 f8ea 	bl	8004d78 <HAL_RCC_ClockConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 8001bb4:	f000 fb62 	bl	800227c <Error_Handler>
	}
}
 8001bb8:	bf00      	nop
 8001bba:	3760      	adds	r7, #96	; 0x60
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001be2:	4b54      	ldr	r3, [pc, #336]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001be4:	4a54      	ldr	r2, [pc, #336]	; (8001d38 <_ZL12MX_ADC1_Initv+0x178>)
 8001be6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001be8:	4b52      	ldr	r3, [pc, #328]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001bea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bee:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bf0:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bf6:	4b4f      	ldr	r3, [pc, #316]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bfc:	4b4d      	ldr	r3, [pc, #308]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c04:	2204      	movs	r2, #4
 8001c06:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c08:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001c0e:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 4;
 8001c14:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c16:	2204      	movs	r2, #4
 8001c18:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c28:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c36:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001c3c:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001c44:	483b      	ldr	r0, [pc, #236]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c46:	f000 ff75 	bl	8002b34 <HAL_ADC_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <_ZL12MX_ADC1_Initv+0x9e>
		Error_Handler();
 8001c5a:	f000 fb0f 	bl	800227c <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	4619      	mov	r1, r3
 8001c68:	4832      	ldr	r0, [pc, #200]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001c6a:	f001 fcd7 	bl	800361c <HAL_ADCEx_MultiModeConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <_ZL12MX_ADC1_Initv+0xc2>
		Error_Handler();
 8001c7e:	f000 fafd 	bl	800227c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <_ZL12MX_ADC1_Initv+0x17c>)
 8001c84:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c86:	2306      	movs	r3, #6
 8001c88:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c8e:	237f      	movs	r3, #127	; 0x7f
 8001c90:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c92:	2304      	movs	r3, #4
 8001c94:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4825      	ldr	r0, [pc, #148]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001ca0:	f001 f89a 	bl	8002dd8 <HAL_ADC_ConfigChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf14      	ite	ne
 8001caa:	2301      	movne	r3, #1
 8001cac:	2300      	moveq	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <_ZL12MX_ADC1_Initv+0xf8>
		Error_Handler();
 8001cb4:	f000 fae2 	bl	800227c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <_ZL12MX_ADC1_Initv+0x180>)
 8001cba:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481b      	ldr	r0, [pc, #108]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001cc6:	f001 f887 	bl	8002dd8 <HAL_ADC_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <_ZL12MX_ADC1_Initv+0x11e>
		Error_Handler();
 8001cda:	f000 facf 	bl	800227c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <_ZL12MX_ADC1_Initv+0x184>)
 8001ce0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ce2:	2312      	movs	r3, #18
 8001ce4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4812      	ldr	r0, [pc, #72]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001cec:	f001 f874 	bl	8002dd8 <HAL_ADC_ConfigChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <_ZL12MX_ADC1_Initv+0x144>
		Error_Handler();
 8001d00:	f000 fabc 	bl	800227c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <_ZL12MX_ADC1_Initv+0x188>)
 8001d06:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d08:	2318      	movs	r3, #24
 8001d0a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4808      	ldr	r0, [pc, #32]	; (8001d34 <_ZL12MX_ADC1_Initv+0x174>)
 8001d12:	f001 f861 	bl	8002dd8 <HAL_ADC_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf14      	ite	ne
 8001d1c:	2301      	movne	r3, #1
 8001d1e:	2300      	moveq	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <_ZL12MX_ADC1_Initv+0x16a>
		Error_Handler();
 8001d26:	f000 faa9 	bl	800227c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	; 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000090 	.word	0x20000090
 8001d38:	50040000 	.word	0x50040000
 8001d3c:	04300002 	.word	0x04300002
 8001d40:	08600004 	.word	0x08600004
 8001d44:	0c900008 	.word	0x0c900008
 8001d48:	10c00010 	.word	0x10c00010

08001d4c <_ZL12MX_CAN1_Initv>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d52:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <_ZL12MX_CAN1_Initv+0x74>)
 8001d54:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 8;
 8001d56:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d58:	2208      	movs	r2, #8
 8001d5a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d5c:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d6a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001d6e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d76:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001d9c:	4807      	ldr	r0, [pc, #28]	; (8001dbc <_ZL12MX_CAN1_Initv+0x70>)
 8001d9e:	f001 fce1 	bl	8003764 <HAL_CAN_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <_ZL12MX_CAN1_Initv+0x6a>
		Error_Handler();
 8001db2:	f000 fa63 	bl	800227c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000158 	.word	0x20000158
 8001dc0:	40006400 	.word	0x40006400

08001dc4 <_ZL11MX_RTC_Initv>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001dd8:	2300      	movs	r3, #0
 8001dda:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001dde:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <_ZL11MX_RTC_Initv+0xdc>)
 8001de0:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8001de8:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001dea:	227f      	movs	r2, #127	; 0x7f
 8001dec:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001df4:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001dfa:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001e08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e0c:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001e0e:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001e14:	4821      	ldr	r0, [pc, #132]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001e16:	f003 ffd1 	bl	8005dbc <HAL_RTC_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf14      	ite	ne
 8001e20:	2301      	movne	r3, #1
 8001e22:	2300      	moveq	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <_ZL11MX_RTC_Initv+0x6a>
		Error_Handler();
 8001e2a:	f000 fa27 	bl	800227c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2201      	movs	r2, #1
 8001e46:	4619      	mov	r1, r3
 8001e48:	4814      	ldr	r0, [pc, #80]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001e4a:	f004 f847 	bl	8005edc <HAL_RTC_SetTime>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf14      	ite	ne
 8001e54:	2301      	movne	r3, #1
 8001e56:	2300      	moveq	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <_ZL11MX_RTC_Initv+0x9e>
		Error_Handler();
 8001e5e:	f000 fa0d 	bl	800227c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e62:	2301      	movs	r3, #1
 8001e64:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001e66:	2301      	movs	r3, #1
 8001e68:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001e72:	463b      	mov	r3, r7
 8001e74:	2201      	movs	r2, #1
 8001e76:	4619      	mov	r1, r3
 8001e78:	4808      	ldr	r0, [pc, #32]	; (8001e9c <_ZL11MX_RTC_Initv+0xd8>)
 8001e7a:	f004 f8cf 	bl	800601c <HAL_RTC_SetDate>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf14      	ite	ne
 8001e84:	2301      	movne	r3, #1
 8001e86:	2300      	moveq	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <_ZL11MX_RTC_Initv+0xce>
		Error_Handler();
 8001e8e:	f000 f9f5 	bl	800227c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000180 	.word	0x20000180
 8001ea0:	40002800 	.word	0x40002800

08001ea4 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <_ZL12MX_SPI1_Initv+0x80>)
 8001eac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eb4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ebe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ec2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001eda:	2230      	movs	r2, #48	; 0x30
 8001edc:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001f02:	4807      	ldr	r0, [pc, #28]	; (8001f20 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f04:	f004 f9cc 	bl	80062a0 <HAL_SPI_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 8001f18:	f000 f9b0 	bl	800227c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000002c 	.word	0x2000002c
 8001f24:	40013000 	.word	0x40013000

08001f28 <_ZL11MX_DMA_Initv>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <_ZL11MX_DMA_Initv+0x50>)
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <_ZL11MX_DMA_Initv+0x50>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6493      	str	r3, [r2, #72]	; 0x48
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <_ZL11MX_DMA_Initv+0x50>)
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <_ZL11MX_DMA_Initv+0x50>)
 8001f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <_ZL11MX_DMA_Initv+0x50>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6493      	str	r3, [r2, #72]	; 0x48
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <_ZL11MX_DMA_Initv+0x50>)
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	200b      	movs	r0, #11
 8001f64:	f001 fdb2 	bl	8003acc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f68:	200b      	movs	r0, #11
 8001f6a:	f001 fdcb 	bl	8003b04 <HAL_NVIC_EnableIRQ>

}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000

08001f7c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	4b4f      	ldr	r3, [pc, #316]	; (80020d0 <_ZL12MX_GPIO_Initv+0x154>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <_ZL12MX_GPIO_Initv+0x154>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a48      	ldr	r2, [pc, #288]	; (80020d0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4a42      	ldr	r2, [pc, #264]	; (80020d0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fce:	4b40      	ldr	r3, [pc, #256]	; (80020d0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2110      	movs	r1, #16
 8001fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe2:	f002 f8e9 	bl	80041b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f24f 0180 	movw	r1, #61568	; 0xf080
 8001fec:	4839      	ldr	r0, [pc, #228]	; (80020d4 <_ZL12MX_GPIO_Initv+0x158>)
 8001fee:	f002 f8e3 	bl	80041b8 <HAL_GPIO_WritePin>
			LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin | GPIO_PIN_7,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8,
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001ff8:	4837      	ldr	r0, [pc, #220]	; (80020d8 <_ZL12MX_GPIO_Initv+0x15c>)
 8001ffa:	f002 f8dd 	bl	80041b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001ffe:	2310      	movs	r3, #16
 8002000:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	2301      	movs	r3, #1
 8002004:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002006:	2302      	movs	r3, #2
 8002008:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	4619      	mov	r1, r3
 8002014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002018:	f001 ff3c 	bl	8003e94 <HAL_GPIO_Init>

	/*Configure GPIO pins : EEPROM_SCL_Pin EEPROM_SDA_Pin */
	GPIO_InitStruct.Pin = EEPROM_SCL_Pin | EEPROM_SDA_Pin;
 800201c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002020:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002022:	2312      	movs	r3, #18
 8002024:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800202e:	2304      	movs	r3, #4
 8002030:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4619      	mov	r1, r3
 8002038:	4826      	ldr	r0, [pc, #152]	; (80020d4 <_ZL12MX_GPIO_Initv+0x158>)
 800203a:	f001 ff2b 	bl	8003e94 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
	 PB7 */
	GPIO_InitStruct.Pin =
 800203e:	f24f 0380 	movw	r3, #61568	; 0xf080
 8002042:	60fb      	str	r3, [r7, #12]
			LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4619      	mov	r1, r3
 8002056:	481f      	ldr	r0, [pc, #124]	; (80020d4 <_ZL12MX_GPIO_Initv+0x158>)
 8002058:	f001 ff1c 	bl	8003e94 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 800205c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002060:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	4619      	mov	r1, r3
 8002074:	4818      	ldr	r0, [pc, #96]	; (80020d8 <_ZL12MX_GPIO_Initv+0x15c>)
 8002076:	f001 ff0d 	bl	8003e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800207a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4619      	mov	r1, r3
 800208e:	4812      	ldr	r0, [pc, #72]	; (80020d8 <_ZL12MX_GPIO_Initv+0x15c>)
 8002090:	f001 ff00 	bl	8003e94 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002094:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002098:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	4619      	mov	r1, r3
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ac:	f001 fef2 	bl	8003e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : ISM_INT1_Pin */
	GPIO_InitStruct.Pin = ISM_INT1_Pin;
 80020b0:	2340      	movs	r3, #64	; 0x40
 80020b2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ISM_INT1_GPIO_Port, &GPIO_InitStruct);
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	4619      	mov	r1, r3
 80020c2:	4804      	ldr	r0, [pc, #16]	; (80020d4 <_ZL12MX_GPIO_Initv+0x158>)
 80020c4:	f001 fee6 	bl	8003e94 <HAL_GPIO_Init>

}
 80020c8:	bf00      	nop
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	48000400 	.word	0x48000400
 80020d8:	48000800 	.word	0x48000800

080020dc <_Z8ism_readhhPh>:
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); // pull the cs pin low
	HAL_SPI_Transmit(&hspi1, data, 2, 100);  // write data to register
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);  // pull the cs pin high
}
void ism_read(uint8_t address, uint8_t nBytesToRead, uint8_t *buffer)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	603a      	str	r2, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	460b      	mov	r3, r1
 80020ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); // pull the cs pin low
 80020ec:	2200      	movs	r2, #0
 80020ee:	2110      	movs	r1, #16
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f4:	f002 f860 	bl	80041b8 <HAL_GPIO_WritePin>
	uint8_t msg = address | 0x80;
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &msg, 1, 100);  // write data to register
 8002102:	f107 010f 	add.w	r1, r7, #15
 8002106:	2364      	movs	r3, #100	; 0x64
 8002108:	2201      	movs	r2, #1
 800210a:	480a      	ldr	r0, [pc, #40]	; (8002134 <_Z8ism_readhhPh+0x58>)
 800210c:	f004 f96b 	bl	80063e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, buffer, nBytesToRead , 100);
 8002110:	79bb      	ldrb	r3, [r7, #6]
 8002112:	b29a      	uxth	r2, r3
 8002114:	2364      	movs	r3, #100	; 0x64
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	4806      	ldr	r0, [pc, #24]	; (8002134 <_Z8ism_readhhPh+0x58>)
 800211a:	f004 fad2 	bl	80066c2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);  // pull the cs pin high
 800211e:	2201      	movs	r2, #1
 8002120:	2110      	movs	r1, #16
 8002122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002126:	f002 f847 	bl	80041b8 <HAL_GPIO_WritePin>
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000002c 	.word	0x2000002c

08002138 <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	for (;;) {
		osDelay(1);
 8002140:	2001      	movs	r0, #1
 8002142:	f005 fba5 	bl	8007890 <osDelay>
 8002146:	e7fb      	b.n	8002140 <_Z16StartDefaultTaskPv+0x8>

08002148 <_Z12StartBlink01Pv>:
 * @brief Function implementing the blink01 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlink01 */
	HAL_SPI_Init(&hspi1);
 8002150:	483c      	ldr	r0, [pc, #240]	; (8002244 <_Z12StartBlink01Pv+0xfc>)
 8002152:	f004 f8a5 	bl	80062a0 <HAL_SPI_Init>
	ISM330DHCXSensor AccGyr;
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f8aa 	bl	80002b4 <_ZN16ISM330DHCXSensorC1Ev>
	uint8_t r = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	72fb      	strb	r3, [r7, #11]
	  AccGyr.begin();
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f95e 	bl	800042a <_ZN16ISM330DHCXSensor5beginEv>
	  AccGyr.ACC_Enable();
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f976 	bl	8000464 <_ZN16ISM330DHCXSensor10ACC_EnableEv>
//
//	  ism_write(0x10U, 0b01110000);
//	  ism_write(0x14U, 0b1100000);

	  AccGyr.GYRO_Enable();
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fb28 	bl	80007d2 <_ZN16ISM330DHCXSensor11GYRO_EnableEv>

	  // Configure ODR and FS of the acc and gyro
	  AccGyr.ACC_SetOutputDataRate(SENSOR_ODR);
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8002248 <_Z12StartBlink01Pv+0x100>
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9d8 	bl	8000540 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf>
	  ism_read(0x10, 1, &r);
 8002190:	f107 030b 	add.w	r3, r7, #11
 8002194:	461a      	mov	r2, r3
 8002196:	2101      	movs	r1, #1
 8002198:	2010      	movs	r0, #16
 800219a:	f7ff ff9f 	bl	80020dc <_Z8ism_readhhPh>
	  AccGyr.ACC_SetFullScale(ACC_FS);
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	2102      	movs	r1, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fa5b 	bl	8000660 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl>
	  ism_read(0x10, 1, &r);
 80021aa:	f107 030b 	add.w	r3, r7, #11
 80021ae:	461a      	mov	r2, r3
 80021b0:	2101      	movs	r1, #1
 80021b2:	2010      	movs	r0, #16
 80021b4:	f7ff ff92 	bl	80020dc <_Z8ism_readhhPh>
	  AccGyr.GYRO_SetOutputDataRate(SENSOR_ODR);
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8002248 <_Z12StartBlink01Pv+0x100>
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fb91 	bl	80008e8 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf>
	  ism_read(0x11, 1, &r);
 80021c6:	f107 030b 	add.w	r3, r7, #11
 80021ca:	461a      	mov	r2, r3
 80021cc:	2101      	movs	r1, #1
 80021ce:	2011      	movs	r0, #17
 80021d0:	f7ff ff84 	bl	80020dc <_Z8ism_readhhPh>
	  AccGyr.GYRO_SetFullScale(GYR_FS);
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fc13 	bl	8000a08 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl>
	  ism_read(0x11, 1, &r);
 80021e2:	f107 030b 	add.w	r3, r7, #11
 80021e6:	461a      	mov	r2, r3
 80021e8:	2101      	movs	r1, #1
 80021ea:	2011      	movs	r0, #17
 80021ec:	f7ff ff76 	bl	80020dc <_Z8ism_readhhPh>
//	  // Configure FIFO BDR for acc and gyro
	  AccGyr.FIFO_ACC_Set_BDR(SENSOR_ODR);
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002248 <_Z12StartBlink01Pv+0x100>
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fcc9 	bl	8000b90 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf>
	  AccGyr.FIFO_GYRO_Set_BDR(SENSOR_ODR);
 80021fe:	f107 030c 	add.w	r3, r7, #12
 8002202:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002248 <_Z12StartBlink01Pv+0x100>
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fd52 	bl	8000cb0 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf>
//	  // Set FIFO in Continuous mode
	  AccGyr.FIFO_Set_Mode(ISM330DHCX_STREAM_MODE);
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	2106      	movs	r1, #6
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fddc 	bl	8000dd0 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh>
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8002218:	2001      	movs	r0, #1
 800221a:	f005 fb39 	bl	8007890 <osDelay>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800221e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002222:	480a      	ldr	r0, [pc, #40]	; (800224c <_Z12StartBlink01Pv+0x104>)
 8002224:	f001 ffe0 	bl	80041e8 <HAL_GPIO_TogglePin>


		AccGyr.ACC_GetAxes(accelerometer);
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4908      	ldr	r1, [pc, #32]	; (8002250 <_Z12StartBlink01Pv+0x108>)
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fa6e 	bl	8000710 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl>
		AccGyr.GYRO_GetAxes(gyroscope);
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	4906      	ldr	r1, [pc, #24]	; (8002254 <_Z12StartBlink01Pv+0x10c>)
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fc49 	bl	8000ad2 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl>
		osDelay(1);
 8002240:	e7ea      	b.n	8002218 <_Z12StartBlink01Pv+0xd0>
 8002242:	bf00      	nop
 8002244:	2000002c 	.word	0x2000002c
 8002248:	42500000 	.word	0x42500000
 800224c:	48000400 	.word	0x48000400
 8002250:	20000208 	.word	0x20000208
 8002254:	20000214 	.word	0x20000214

08002258 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800226a:	f000 faa3 	bl	80027b4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40001000 	.word	0x40001000

0800227c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002280:	b672      	cpsid	i
}
 8002282:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002284:	e7fe      	b.n	8002284 <Error_Handler+0x8>
	...

08002288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_MspInit+0x5c>)
 8002290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002292:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <HAL_MspInit+0x5c>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6613      	str	r3, [r2, #96]	; 0x60
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_MspInit+0x5c>)
 800229c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_MspInit+0x5c>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_MspInit+0x5c>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b0:	6593      	str	r3, [r2, #88]	; 0x58
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_MspInit+0x5c>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	210f      	movs	r1, #15
 80022c2:	f06f 0001 	mvn.w	r0, #1
 80022c6:	f001 fc01 	bl	8003acc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 5, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2105      	movs	r1, #5
 80022ce:	2001      	movs	r0, #1
 80022d0:	f001 fbfc 	bl	8003acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f001 fc15 	bl	8003b04 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b0b0      	sub	sp, #192	; 0xc0
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2298      	movs	r2, #152	; 0x98
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f007 ff67 	bl	800a1dc <memset>
  if(hadc->Instance==ADC1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a3c      	ldr	r2, [pc, #240]	; (8002404 <HAL_ADC_MspInit+0x11c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d171      	bne.n	80023fc <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002318:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800231c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800231e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800232a:	2301      	movs	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800232e:	2310      	movs	r3, #16
 8002330:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002332:	2302      	movs	r3, #2
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002336:	2302      	movs	r3, #2
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800233a:	2302      	movs	r3, #2
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800233e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4618      	mov	r0, r3
 800234a:	f002 ffe3 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002354:	f7ff ff92 	bl	800227c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002358:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <HAL_ADC_MspInit+0x120>)
 800235a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235c:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <HAL_ADC_MspInit+0x120>)
 800235e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_ADC_MspInit+0x120>)
 8002366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002370:	4b25      	ldr	r3, [pc, #148]	; (8002408 <HAL_ADC_MspInit+0x120>)
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	4a24      	ldr	r2, [pc, #144]	; (8002408 <HAL_ADC_MspInit+0x120>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_ADC_MspInit+0x120>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 8002388:	233f      	movs	r3, #63	; 0x3f
 800238a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |ADC4_Pin|ADC5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800238e:	230b      	movs	r3, #11
 8002390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800239e:	4619      	mov	r1, r3
 80023a0:	481a      	ldr	r0, [pc, #104]	; (800240c <HAL_ADC_MspInit+0x124>)
 80023a2:	f001 fd77 	bl	8003e94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023a8:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <HAL_ADC_MspInit+0x12c>)
 80023aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023ae:	2205      	movs	r2, #5
 80023b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023d6:	2220      	movs	r2, #32
 80023d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023e0:	480b      	ldr	r0, [pc, #44]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023e2:	f001 fb9d 	bl	8003b20 <HAL_DMA_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80023ec:	f7ff ff46 	bl	800227c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023f4:	651a      	str	r2, [r3, #80]	; 0x50
 80023f6:	4a06      	ldr	r2, [pc, #24]	; (8002410 <HAL_ADC_MspInit+0x128>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023fc:	bf00      	nop
 80023fe:	37c0      	adds	r7, #192	; 0xc0
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	50040000 	.word	0x50040000
 8002408:	40021000 	.word	0x40021000
 800240c:	48000800 	.word	0x48000800
 8002410:	200000f8 	.word	0x200000f8
 8002414:	40020008 	.word	0x40020008

08002418 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a17      	ldr	r2, [pc, #92]	; (8002494 <HAL_CAN_MspInit+0x7c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d128      	bne.n	800248c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_CAN_MspInit+0x80>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	4a16      	ldr	r2, [pc, #88]	; (8002498 <HAL_CAN_MspInit+0x80>)
 8002440:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002444:	6593      	str	r3, [r2, #88]	; 0x58
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_CAN_MspInit+0x80>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_CAN_MspInit+0x80>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	4a10      	ldr	r2, [pc, #64]	; (8002498 <HAL_CAN_MspInit+0x80>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <HAL_CAN_MspInit+0x80>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800246a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800247c:	2309      	movs	r3, #9
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_CAN_MspInit+0x84>)
 8002488:	f001 fd04 	bl	8003e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40006400 	.word	0x40006400
 8002498:	40021000 	.word	0x40021000
 800249c:	48000400 	.word	0x48000400

080024a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b0aa      	sub	sp, #168	; 0xa8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	2298      	movs	r2, #152	; 0x98
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f007 fe93 	bl	800a1dc <memset>
  if(hrtc->Instance==RTC)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a16      	ldr	r2, [pc, #88]	; (8002514 <HAL_RTC_MspInit+0x74>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d124      	bne.n	800250a <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ce:	f107 0310 	add.w	r3, r7, #16
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 ff1e 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80024de:	f7ff fecd 	bl	800227c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <HAL_RTC_MspInit+0x78>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <HAL_RTC_MspInit+0x78>)
 80024ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RTC_MspInit+0x78>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_RTC_MspInit+0x78>)
 80024f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_RTC_MspInit+0x78>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	37a8      	adds	r7, #168	; 0xa8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40002800 	.word	0x40002800
 8002518:	40021000 	.word	0x40021000

0800251c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	; 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a17      	ldr	r2, [pc, #92]	; (8002598 <HAL_SPI_MspInit+0x7c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d128      	bne.n	8002590 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <HAL_SPI_MspInit+0x80>)
 8002540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002542:	4a16      	ldr	r2, [pc, #88]	; (800259c <HAL_SPI_MspInit+0x80>)
 8002544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002548:	6613      	str	r3, [r2, #96]	; 0x60
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_SPI_MspInit+0x80>)
 800254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_SPI_MspInit+0x80>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	4a10      	ldr	r2, [pc, #64]	; (800259c <HAL_SPI_MspInit+0x80>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <HAL_SPI_MspInit+0x80>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800256e:	23e0      	movs	r3, #224	; 0xe0
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800257e:	2305      	movs	r3, #5
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800258c:	f001 fc82 	bl	8003e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	; 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40013000 	.word	0x40013000
 800259c:	40021000 	.word	0x40021000

080025a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <HAL_TIM_Base_MspInit+0x44>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d113      	bne.n	80025da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_TIM_Base_MspInit+0x48>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_TIM_Base_MspInit+0x48>)
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_TIM_Base_MspInit+0x48>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2105      	movs	r1, #5
 80025ce:	201d      	movs	r0, #29
 80025d0:	f001 fa7c 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025d4:	201d      	movs	r0, #29
 80025d6:	f001 fa95 	bl	8003b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40000400 	.word	0x40000400
 80025e8:	40021000 	.word	0x40021000

080025ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80025fc:	2200      	movs	r2, #0
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	2036      	movs	r0, #54	; 0x36
 8002602:	f001 fa63 	bl	8003acc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002606:	2036      	movs	r0, #54	; 0x36
 8002608:	f001 fa7c 	bl	8003b04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_InitTick+0x9c>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_InitTick+0x9c>)
 8002612:	f043 0310 	orr.w	r3, r3, #16
 8002616:	6593      	str	r3, [r2, #88]	; 0x58
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_InitTick+0x9c>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002624:	f107 0210 	add.w	r2, r7, #16
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f002 fd7c 	bl	800512c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002634:	f002 fd64 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8002638:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	4a13      	ldr	r2, [pc, #76]	; (800268c <HAL_InitTick+0xa0>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0c9b      	lsrs	r3, r3, #18
 8002644:	3b01      	subs	r3, #1
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_InitTick+0xa4>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <HAL_InitTick+0xa8>)
 800264c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_InitTick+0xa4>)
 8002650:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002654:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002656:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <HAL_InitTick+0xa4>)
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_InitTick+0xa4>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_InitTick+0xa4>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002668:	4809      	ldr	r0, [pc, #36]	; (8002690 <HAL_InitTick+0xa4>)
 800266a:	f004 fd29 	bl	80070c0 <HAL_TIM_Base_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d104      	bne.n	800267e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002674:	4806      	ldr	r0, [pc, #24]	; (8002690 <HAL_InitTick+0xa4>)
 8002676:	f004 fd7b 	bl	8007170 <HAL_TIM_Base_Start_IT>
 800267a:	4603      	mov	r3, r0
 800267c:	e000      	b.n	8002680 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	3730      	adds	r7, #48	; 0x30
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	431bde83 	.word	0x431bde83
 8002690:	20001ae8 	.word	0x20001ae8
 8002694:	40001000 	.word	0x40001000

08002698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800269c:	e7fe      	b.n	800269c <NMI_Handler+0x4>

0800269e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a2:	e7fe      	b.n	80026a2 <HardFault_Handler+0x4>

080026a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <MemManage_Handler+0x4>

080026aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ae:	e7fe      	b.n	80026ae <BusFault_Handler+0x4>

080026b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <UsageFault_Handler+0x4>

080026b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80026c8:	f001 fe74 	bl	80043b4 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <DMA1_Channel1_IRQHandler+0x10>)
 80026d6:	f001 facb 	bl	8003c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200000f8 	.word	0x200000f8

080026e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <TIM3_IRQHandler+0x10>)
 80026ea:	f004 fdb1 	bl	8007250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200001b4 	.word	0x200001b4

080026f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <TIM6_DAC_IRQHandler+0x10>)
 80026fe:	f004 fda7 	bl	8007250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20001ae8 	.word	0x20001ae8

0800270c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <SystemInit+0x20>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <SystemInit+0x20>)
 8002718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800271c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002768 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002734:	f7ff ffea 	bl	800270c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002738:	480c      	ldr	r0, [pc, #48]	; (800276c <LoopForever+0x6>)
  ldr r1, =_edata
 800273a:	490d      	ldr	r1, [pc, #52]	; (8002770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <LoopForever+0xe>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002740:	e002      	b.n	8002748 <LoopCopyDataInit>

08002742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002746:	3304      	adds	r3, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800274c:	d3f9      	bcc.n	8002742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002750:	4c0a      	ldr	r4, [pc, #40]	; (800277c <LoopForever+0x16>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002754:	e001      	b.n	800275a <LoopFillZerobss>

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002758:	3204      	adds	r2, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275e:	f007 fd0b 	bl	800a178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002762:	f7ff f997 	bl	8001a94 <main>

08002766 <LoopForever>:

LoopForever:
    b LoopForever
 8002766:	e7fe      	b.n	8002766 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002768:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800276c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002770:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002774:	0800a2e0 	.word	0x0800a2e0
  ldr r2, =_sbss
 8002778:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800277c:	20001b78 	.word	0x20001b78

08002780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC1_2_IRQHandler>

08002782 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278c:	2003      	movs	r0, #3
 800278e:	f001 f992 	bl	8003ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002792:	200f      	movs	r0, #15
 8002794:	f7ff ff2a 	bl	80025ec <HAL_InitTick>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	71fb      	strb	r3, [r7, #7]
 80027a2:	e001      	b.n	80027a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a4:	f7ff fd70 	bl	8002288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027a8:	79fb      	ldrb	r3, [r7, #7]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_IncTick+0x20>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_IncTick+0x24>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <HAL_IncTick+0x24>)
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000008 	.word	0x20000008
 80027d8:	20001b34 	.word	0x20001b34

080027dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return uwTick;
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_GetTick+0x14>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20001b34 	.word	0x20001b34

080027f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	609a      	str	r2, [r3, #8]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3360      	adds	r3, #96	; 0x60
 800286e:	461a      	mov	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <LL_ADC_SetOffset+0x44>)
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	4313      	orrs	r3, r2
 800288c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	03fff000 	.word	0x03fff000

080028a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3360      	adds	r3, #96	; 0x60
 80028b2:	461a      	mov	r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3360      	adds	r3, #96	; 0x60
 80028e0:	461a      	mov	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	615a      	str	r2, [r3, #20]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3330      	adds	r3, #48	; 0x30
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	4413      	add	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	211f      	movs	r1, #31
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	401a      	ands	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	f003 011f 	and.w	r1, r3, #31
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	431a      	orrs	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3314      	adds	r3, #20
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	0e5b      	lsrs	r3, r3, #25
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	4413      	add	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0d1b      	lsrs	r3, r3, #20
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2107      	movs	r1, #7
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	401a      	ands	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	0d1b      	lsrs	r3, r3, #20
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	431a      	orrs	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0318 	and.w	r3, r3, #24
 80029fe:	4908      	ldr	r1, [pc, #32]	; (8002a20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a00:	40d9      	lsrs	r1, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	400b      	ands	r3, r1
 8002a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	0007ffff 	.word	0x0007ffff

08002a24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6093      	str	r3, [r2, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a5c:	d101      	bne.n	8002a62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aac:	d101      	bne.n	8002ab2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <LL_ADC_IsEnabled+0x18>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <LL_ADC_IsEnabled+0x1a>
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d101      	bne.n	8002afe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d101      	bne.n	8002b24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e134      	b.n	8002db8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff fbc3 	bl	80022e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff67 	bl	8002a48 <LL_ADC_IsDeepPowerDownEnabled>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff4d 	bl	8002a24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff82 	bl	8002a98 <LL_ADC_IsInternalRegulatorEnabled>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d115      	bne.n	8002bc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ff66 	bl	8002a70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ba4:	4b86      	ldr	r3, [pc, #536]	; (8002dc0 <HAL_ADC_Init+0x28c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	4a86      	ldr	r2, [pc, #536]	; (8002dc4 <HAL_ADC_Init+0x290>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f9      	bne.n	8002bba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff64 	bl	8002a98 <LL_ADC_IsInternalRegulatorEnabled>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f043 0210 	orr.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff75 	bl	8002ae6 <LL_ADC_REG_IsConversionOngoing>
 8002bfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 80cd 	bne.w	8002da6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 80c9 	bne.w	8002da6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c1c:	f043 0202 	orr.w	r2, r3, #2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff49 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d110      	bne.n	8002c56 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c34:	4864      	ldr	r0, [pc, #400]	; (8002dc8 <HAL_ADC_Init+0x294>)
 8002c36:	f7ff ff43 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	4863      	ldr	r0, [pc, #396]	; (8002dcc <HAL_ADC_Init+0x298>)
 8002c3e:	f7ff ff3f 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4323      	orrs	r3, r4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	485f      	ldr	r0, [pc, #380]	; (8002dd0 <HAL_ADC_Init+0x29c>)
 8002c52:	f7ff fdcf 	bl	80027f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7e5b      	ldrb	r3, [r3, #25]
 8002c5a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c60:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c66:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c6c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c74:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	045b      	lsls	r3, r3, #17
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_ADC_Init+0x2a0>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	69b9      	ldr	r1, [r7, #24]
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff0d 	bl	8002ae6 <LL_ADC_REG_IsConversionOngoing>
 8002ccc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff1a 	bl	8002b0c <LL_ADC_INJ_IsConversionOngoing>
 8002cd8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d140      	bne.n	8002d62 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d13d      	bne.n	8002d62 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7e1b      	ldrb	r3, [r3, #24]
 8002cee:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cf0:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cf8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d08:	f023 0306 	bic.w	r3, r3, #6
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	69b9      	ldr	r1, [r7, #24]
 8002d12:	430b      	orrs	r3, r1
 8002d14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d118      	bne.n	8002d52 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d2a:	f023 0304 	bic.w	r3, r3, #4
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d3c:	4311      	orrs	r1, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d42:	430a      	orrs	r2, r1
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	611a      	str	r2, [r3, #16]
 8002d50:	e007      	b.n	8002d62 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d10c      	bne.n	8002d84 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f023 010f 	bic.w	r1, r3, #15
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	1e5a      	subs	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
 8002d82:	e007      	b.n	8002d94 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 020f 	bic.w	r2, r2, #15
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	f023 0303 	bic.w	r3, r3, #3
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	659a      	str	r2, [r3, #88]	; 0x58
 8002da4:	e007      	b.n	8002db6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f043 0210 	orr.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002db6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3724      	adds	r7, #36	; 0x24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	053e2d63 	.word	0x053e2d63
 8002dc8:	50040000 	.word	0x50040000
 8002dcc:	50040100 	.word	0x50040100
 8002dd0:	50040300 	.word	0x50040300
 8002dd4:	fff0c007 	.word	0xfff0c007

08002dd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b0b6      	sub	sp, #216	; 0xd8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x22>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e3d5      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x7ce>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fe6d 	bl	8002ae6 <LL_ADC_REG_IsConversionOngoing>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 83ba 	bne.w	8003588 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d824      	bhi.n	8002e66 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	3b02      	subs	r3, #2
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d81b      	bhi.n	8002e5e <HAL_ADC_ConfigChannel+0x86>
 8002e26:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <HAL_ADC_ConfigChannel+0x54>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e3d 	.word	0x08002e3d
 8002e30:	08002e45 	.word	0x08002e45
 8002e34:	08002e4d 	.word	0x08002e4d
 8002e38:	08002e55 	.word	0x08002e55
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	220c      	movs	r2, #12
 8002e40:	605a      	str	r2, [r3, #4]
          break;
 8002e42:	e011      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2212      	movs	r2, #18
 8002e48:	605a      	str	r2, [r3, #4]
          break;
 8002e4a:	e00d      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2218      	movs	r2, #24
 8002e50:	605a      	str	r2, [r3, #4]
          break;
 8002e52:	e009      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e5a:	605a      	str	r2, [r3, #4]
          break;
 8002e5c:	e004      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2206      	movs	r2, #6
 8002e62:	605a      	str	r2, [r3, #4]
          break;
 8002e64:	e000      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002e66:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f7ff fd59 	bl	800292c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fe31 	bl	8002ae6 <LL_ADC_REG_IsConversionOngoing>
 8002e84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fe3d 	bl	8002b0c <LL_ADC_INJ_IsConversionOngoing>
 8002e92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 81c1 	bne.w	8003222 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 81bc 	bne.w	8003222 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eb2:	d10f      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f7ff fd60 	bl	8002984 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fd1a 	bl	8002906 <LL_ADC_SetSamplingTimeCommonConfig>
 8002ed2:	e00e      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f7ff fd4f 	bl	8002984 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fd0a 	bl	8002906 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	08db      	lsrs	r3, r3, #3
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d00a      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6919      	ldr	r1, [r3, #16]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f24:	f7ff fc9a 	bl	800285c <LL_ADC_SetOffset>
 8002f28:	e17b      	b.n	8003222 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fcb7 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x17e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fcac 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	0e9b      	lsrs	r3, r3, #26
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	e01e      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x1bc>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fca1 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002f84:	2320      	movs	r3, #32
 8002f86:	e004      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d105      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x1d4>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0e9b      	lsrs	r3, r3, #26
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	e018      	b.n	8002fde <HAL_ADC_ConfigChannel+0x206>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002fc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e004      	b.n	8002fde <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002fd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d106      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fc70 	bl	80028d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fc54 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_ADC_ConfigChannel+0x244>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fc49 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	0e9b      	lsrs	r3, r3, #26
 8003016:	f003 021f 	and.w	r2, r3, #31
 800301a:	e01e      	b.n	800305a <HAL_ADC_ConfigChannel+0x282>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2101      	movs	r1, #1
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fc3e 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 8003028:	4603      	mov	r3, r0
 800302a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800303a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800303e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800304a:	2320      	movs	r3, #32
 800304c:	e004      	b.n	8003058 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800304e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x29a>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	0e9b      	lsrs	r3, r3, #26
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	e018      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x2cc>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003086:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800308a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800308e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003096:	2320      	movs	r3, #32
 8003098:	e004      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800309a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d106      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fc0d 	bl	80028d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2102      	movs	r1, #2
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fbf1 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x30a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2102      	movs	r1, #2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fbe6 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 80030d8:	4603      	mov	r3, r0
 80030da:	0e9b      	lsrs	r3, r3, #26
 80030dc:	f003 021f 	and.w	r2, r3, #31
 80030e0:	e01e      	b.n	8003120 <HAL_ADC_ConfigChannel+0x348>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2102      	movs	r1, #2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fbdb 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003110:	2320      	movs	r3, #32
 8003112:	e004      	b.n	800311e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003114:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x360>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	e016      	b.n	8003166 <HAL_ADC_ConfigChannel+0x38e>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800314a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800314c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e004      	b.n	8003166 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800315c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003166:	429a      	cmp	r2, r3
 8003168:	d106      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	2102      	movs	r1, #2
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fbac 	bl	80028d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2103      	movs	r1, #3
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fb90 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x3cc>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2103      	movs	r1, #3
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fb85 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 800319a:	4603      	mov	r3, r0
 800319c:	0e9b      	lsrs	r3, r3, #26
 800319e:	f003 021f 	and.w	r2, r3, #31
 80031a2:	e017      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x3fc>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2103      	movs	r1, #3
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fb7a 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 80031b0:	4603      	mov	r3, r0
 80031b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80031bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031be:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80031c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80031c6:	2320      	movs	r3, #32
 80031c8:	e003      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80031ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x414>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	e011      	b.n	8003210 <HAL_ADC_ConfigChannel+0x438>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80031fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003204:	2320      	movs	r3, #32
 8003206:	e003      	b.n	8003210 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003210:	429a      	cmp	r2, r3
 8003212:	d106      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2200      	movs	r2, #0
 800321a:	2103      	movs	r1, #3
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fb57 	bl	80028d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fc4a 	bl	8002ac0 <LL_ADC_IsEnabled>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 8140 	bne.w	80034b4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	461a      	mov	r2, r3
 8003242:	f7ff fbcb 	bl	80029dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	4a8f      	ldr	r2, [pc, #572]	; (8003488 <HAL_ADC_ConfigChannel+0x6b0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	f040 8131 	bne.w	80034b4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10b      	bne.n	800327a <HAL_ADC_ConfigChannel+0x4a2>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	0e9b      	lsrs	r3, r3, #26
 8003268:	3301      	adds	r3, #1
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	2b09      	cmp	r3, #9
 8003270:	bf94      	ite	ls
 8003272:	2301      	movls	r3, #1
 8003274:	2300      	movhi	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	e019      	b.n	80032ae <HAL_ADC_ConfigChannel+0x4d6>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800328a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800328c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003292:	2320      	movs	r3, #32
 8003294:	e003      	b.n	800329e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	2b09      	cmp	r3, #9
 80032a6:	bf94      	ite	ls
 80032a8:	2301      	movls	r3, #1
 80032aa:	2300      	movhi	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d079      	beq.n	80033a6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d107      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x4f6>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	0e9b      	lsrs	r3, r3, #26
 80032c4:	3301      	adds	r3, #1
 80032c6:	069b      	lsls	r3, r3, #26
 80032c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032cc:	e015      	b.n	80032fa <HAL_ADC_ConfigChannel+0x522>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032de:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80032e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e003      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80032ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	069b      	lsls	r3, r3, #26
 80032f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_ADC_ConfigChannel+0x542>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	3301      	adds	r3, #1
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2101      	movs	r1, #1
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	e017      	b.n	800334a <HAL_ADC_ConfigChannel+0x572>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800332c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003332:	2320      	movs	r3, #32
 8003334:	e003      	b.n	800333e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	3301      	adds	r3, #1
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	ea42 0103 	orr.w	r1, r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x598>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	3301      	adds	r3, #1
 8003362:	f003 021f 	and.w	r2, r3, #31
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	051b      	lsls	r3, r3, #20
 800336e:	e018      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x5ca>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800337e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003380:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003388:	2320      	movs	r3, #32
 800338a:	e003      	b.n	8003394 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	3301      	adds	r3, #1
 8003396:	f003 021f 	and.w	r2, r3, #31
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a2:	430b      	orrs	r3, r1
 80033a4:	e081      	b.n	80034aa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x5ea>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	0e9b      	lsrs	r3, r3, #26
 80033b8:	3301      	adds	r3, #1
 80033ba:	069b      	lsls	r3, r3, #26
 80033bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c0:	e015      	b.n	80033ee <HAL_ADC_ConfigChannel+0x616>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80033da:	2320      	movs	r3, #32
 80033dc:	e003      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	069b      	lsls	r3, r3, #26
 80033ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_ADC_ConfigChannel+0x636>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	0e9b      	lsrs	r3, r3, #26
 8003400:	3301      	adds	r3, #1
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2101      	movs	r1, #1
 8003408:	fa01 f303 	lsl.w	r3, r1, r3
 800340c:	e017      	b.n	800343e <HAL_ADC_ConfigChannel+0x666>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	61fb      	str	r3, [r7, #28]
  return result;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003426:	2320      	movs	r3, #32
 8003428:	e003      	b.n	8003432 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	ea42 0103 	orr.w	r1, r2, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_ADC_ConfigChannel+0x692>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	0e9b      	lsrs	r3, r3, #26
 8003454:	3301      	adds	r3, #1
 8003456:	f003 021f 	and.w	r2, r3, #31
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	3b1e      	subs	r3, #30
 8003462:	051b      	lsls	r3, r3, #20
 8003464:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003468:	e01e      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x6d0>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	613b      	str	r3, [r7, #16]
  return result;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d104      	bne.n	800348c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e006      	b.n	8003494 <HAL_ADC_ConfigChannel+0x6bc>
 8003486:	bf00      	nop
 8003488:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f003 021f 	and.w	r2, r3, #31
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	3b1e      	subs	r3, #30
 80034a2:	051b      	lsls	r3, r3, #20
 80034a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a8:	430b      	orrs	r3, r1
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	4619      	mov	r1, r3
 80034b0:	f7ff fa68 	bl	8002984 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d06c      	beq.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034c0:	483c      	ldr	r0, [pc, #240]	; (80035b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80034c2:	f7ff f9bd 	bl	8002840 <LL_ADC_GetCommonPathInternalCh>
 80034c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a3a      	ldr	r2, [pc, #232]	; (80035b8 <HAL_ADC_ConfigChannel+0x7e0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d127      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d121      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a35      	ldr	r2, [pc, #212]	; (80035bc <HAL_ADC_ConfigChannel+0x7e4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d157      	bne.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034f2:	4619      	mov	r1, r3
 80034f4:	482f      	ldr	r0, [pc, #188]	; (80035b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80034f6:	f7ff f990 	bl	800281a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_ADC_ConfigChannel+0x7e8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	4a30      	ldr	r2, [pc, #192]	; (80035c4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	4613      	mov	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003514:	e002      	b.n	800351c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3b01      	subs	r3, #1
 800351a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f9      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003522:	e03a      	b.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <HAL_ADC_ConfigChannel+0x7f0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d113      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x77e>
 800352e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10d      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <HAL_ADC_ConfigChannel+0x7e4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d12a      	bne.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354c:	4619      	mov	r1, r3
 800354e:	4819      	ldr	r0, [pc, #100]	; (80035b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003550:	f7ff f963 	bl	800281a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003554:	e021      	b.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <HAL_ADC_ConfigChannel+0x7f4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d11c      	bne.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d116      	bne.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a12      	ldr	r2, [pc, #72]	; (80035bc <HAL_ADC_ConfigChannel+0x7e4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d111      	bne.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800357a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800357e:	4619      	mov	r1, r3
 8003580:	480c      	ldr	r0, [pc, #48]	; (80035b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003582:	f7ff f94a 	bl	800281a <LL_ADC_SetCommonPathInternalCh>
 8003586:	e008      	b.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f043 0220 	orr.w	r2, r3, #32
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80035a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	37d8      	adds	r7, #216	; 0xd8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	80080000 	.word	0x80080000
 80035b4:	50040300 	.word	0x50040300
 80035b8:	c7520000 	.word	0xc7520000
 80035bc:	50040000 	.word	0x50040000
 80035c0:	20000000 	.word	0x20000000
 80035c4:	053e2d63 	.word	0x053e2d63
 80035c8:	cb840000 	.word	0xcb840000
 80035cc:	80000001 	.word	0x80000001

080035d0 <LL_ADC_IsEnabled>:
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <LL_ADC_IsEnabled+0x18>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <LL_ADC_IsEnabled+0x1a>
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d101      	bne.n	800360e <LL_ADC_REG_IsConversionOngoing+0x18>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b0a1      	sub	sp, #132	; 0x84
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003636:	2302      	movs	r3, #2
 8003638:	e089      	b.n	800374e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003642:	2300      	movs	r3, #0
 8003644:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003646:	2300      	movs	r3, #0
 8003648:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a42      	ldr	r2, [pc, #264]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d102      	bne.n	800365a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003654:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	e001      	b.n	800365e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e068      	b.n	800374e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ffb9 	bl	80035f6 <LL_ADC_REG_IsConversionOngoing>
 8003684:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ffb3 	bl	80035f6 <LL_ADC_REG_IsConversionOngoing>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d14a      	bne.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003698:	2b00      	cmp	r3, #0
 800369a:	d147      	bne.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800369c:	4b30      	ldr	r3, [pc, #192]	; (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800369e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d027      	beq.n	80036f8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ba:	035b      	lsls	r3, r3, #13
 80036bc:	430b      	orrs	r3, r1
 80036be:	431a      	orrs	r2, r3
 80036c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036c4:	4824      	ldr	r0, [pc, #144]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80036c6:	f7ff ff83 	bl	80035d0 <LL_ADC_IsEnabled>
 80036ca:	4604      	mov	r4, r0
 80036cc:	4823      	ldr	r0, [pc, #140]	; (800375c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036ce:	f7ff ff7f 	bl	80035d0 <LL_ADC_IsEnabled>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4323      	orrs	r3, r4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d132      	bne.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036e2:	f023 030f 	bic.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	6811      	ldr	r1, [r2, #0]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	6892      	ldr	r2, [r2, #8]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	431a      	orrs	r2, r3
 80036f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036f6:	e023      	b.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003702:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003704:	4814      	ldr	r0, [pc, #80]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003706:	f7ff ff63 	bl	80035d0 <LL_ADC_IsEnabled>
 800370a:	4604      	mov	r4, r0
 800370c:	4813      	ldr	r0, [pc, #76]	; (800375c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800370e:	f7ff ff5f 	bl	80035d0 <LL_ADC_IsEnabled>
 8003712:	4603      	mov	r3, r0
 8003714:	4323      	orrs	r3, r4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d112      	bne.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800371a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003722:	f023 030f 	bic.w	r3, r3, #15
 8003726:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003728:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800372a:	e009      	b.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800373e:	e000      	b.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003740:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800374a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800374e:	4618      	mov	r0, r3
 8003750:	3784      	adds	r7, #132	; 0x84
 8003752:	46bd      	mov	sp, r7
 8003754:	bd90      	pop	{r4, r7, pc}
 8003756:	bf00      	nop
 8003758:	50040000 	.word	0x50040000
 800375c:	50040100 	.word	0x50040100
 8003760:	50040300 	.word	0x50040300

08003764 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0ed      	b.n	8003952 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fe fe48 	bl	8002418 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003798:	f7ff f820 	bl	80027dc <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800379e:	e012      	b.n	80037c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037a0:	f7ff f81c 	bl	80027dc <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b0a      	cmp	r3, #10
 80037ac:	d90b      	bls.n	80037c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2205      	movs	r2, #5
 80037be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0c5      	b.n	8003952 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0e5      	beq.n	80037a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0202 	bic.w	r2, r2, #2
 80037e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037e4:	f7fe fffa 	bl	80027dc <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037ea:	e012      	b.n	8003812 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037ec:	f7fe fff6 	bl	80027dc <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b0a      	cmp	r3, #10
 80037f8:	d90b      	bls.n	8003812 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2205      	movs	r2, #5
 800380a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e09f      	b.n	8003952 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	7e1b      	ldrb	r3, [r3, #24]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d108      	bne.n	800383a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e007      	b.n	800384a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	7e5b      	ldrb	r3, [r3, #25]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d108      	bne.n	8003864 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e007      	b.n	8003874 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7e9b      	ldrb	r3, [r3, #26]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d108      	bne.n	800388e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0220 	orr.w	r2, r2, #32
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e007      	b.n	800389e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0220 	bic.w	r2, r2, #32
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	7edb      	ldrb	r3, [r3, #27]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d108      	bne.n	80038b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0210 	bic.w	r2, r2, #16
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e007      	b.n	80038c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0210 	orr.w	r2, r2, #16
 80038c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	7f1b      	ldrb	r3, [r3, #28]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d108      	bne.n	80038e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0208 	orr.w	r2, r2, #8
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	e007      	b.n	80038f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0208 	bic.w	r2, r2, #8
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	7f5b      	ldrb	r3, [r3, #29]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d108      	bne.n	800390c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0204 	orr.w	r2, r2, #4
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e007      	b.n	800391c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0204 	bic.w	r2, r2, #4
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	ea42 0103 	orr.w	r1, r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	1e5a      	subs	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <__NVIC_SetPriorityGrouping+0x44>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003978:	4013      	ands	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398e:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	60d3      	str	r3, [r2, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <__NVIC_GetPriorityGrouping+0x18>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	f003 0307 	and.w	r3, r3, #7
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db0b      	blt.n	80039ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	f003 021f 	and.w	r2, r3, #31
 80039d8:	4907      	ldr	r1, [pc, #28]	; (80039f8 <__NVIC_EnableIRQ+0x38>)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2001      	movs	r0, #1
 80039e2:	fa00 f202 	lsl.w	r2, r0, r2
 80039e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000e100 	.word	0xe000e100

080039fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	db0a      	blt.n	8003a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	490c      	ldr	r1, [pc, #48]	; (8003a48 <__NVIC_SetPriority+0x4c>)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	440b      	add	r3, r1
 8003a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a24:	e00a      	b.n	8003a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4908      	ldr	r1, [pc, #32]	; (8003a4c <__NVIC_SetPriority+0x50>)
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	3b04      	subs	r3, #4
 8003a34:	0112      	lsls	r2, r2, #4
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	440b      	add	r3, r1
 8003a3a:	761a      	strb	r2, [r3, #24]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000e100 	.word	0xe000e100
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	; 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f1c3 0307 	rsb	r3, r3, #7
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	bf28      	it	cs
 8003a6e:	2304      	movcs	r3, #4
 8003a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3304      	adds	r3, #4
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d902      	bls.n	8003a80 <NVIC_EncodePriority+0x30>
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3b03      	subs	r3, #3
 8003a7e:	e000      	b.n	8003a82 <NVIC_EncodePriority+0x32>
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	401a      	ands	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a98:	f04f 31ff 	mov.w	r1, #4294967295
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	43d9      	mvns	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	4313      	orrs	r3, r2
         );
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3724      	adds	r7, #36	; 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff ff4c 	bl	800395c <__NVIC_SetPriorityGrouping>
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ade:	f7ff ff61 	bl	80039a4 <__NVIC_GetPriorityGrouping>
 8003ae2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	6978      	ldr	r0, [r7, #20]
 8003aea:	f7ff ffb1 	bl	8003a50 <NVIC_EncodePriority>
 8003aee:	4602      	mov	r2, r0
 8003af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ff80 	bl	80039fc <__NVIC_SetPriority>
}
 8003afc:	bf00      	nop
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ff54 	bl	80039c0 <__NVIC_EnableIRQ>
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e08d      	b.n	8003c4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <HAL_DMA_Init+0x138>)
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d80f      	bhi.n	8003b5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b45      	ldr	r3, [pc, #276]	; (8003c5c <HAL_DMA_Init+0x13c>)
 8003b46:	4413      	add	r3, r2
 8003b48:	4a45      	ldr	r2, [pc, #276]	; (8003c60 <HAL_DMA_Init+0x140>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	009a      	lsls	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a42      	ldr	r2, [pc, #264]	; (8003c64 <HAL_DMA_Init+0x144>)
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b5c:	e00e      	b.n	8003b7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <HAL_DMA_Init+0x148>)
 8003b66:	4413      	add	r3, r2
 8003b68:	4a3d      	ldr	r2, [pc, #244]	; (8003c60 <HAL_DMA_Init+0x140>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	009a      	lsls	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a3c      	ldr	r2, [pc, #240]	; (8003c6c <HAL_DMA_Init+0x14c>)
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8fe 	bl	8003dd0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bdc:	d102      	bne.n	8003be4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bf8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d010      	beq.n	8003c24 <HAL_DMA_Init+0x104>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d80c      	bhi.n	8003c24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f91e 	bl	8003e4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	e008      	b.n	8003c36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40020407 	.word	0x40020407
 8003c5c:	bffdfff8 	.word	0xbffdfff8
 8003c60:	cccccccd 	.word	0xcccccccd
 8003c64:	40020000 	.word	0x40020000
 8003c68:	bffdfbf8 	.word	0xbffdfbf8
 8003c6c:	40020400 	.word	0x40020400

08003c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f003 031c 	and.w	r3, r3, #28
 8003c90:	2204      	movs	r2, #4
 8003c92:	409a      	lsls	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d026      	beq.n	8003cea <HAL_DMA_IRQHandler+0x7a>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d021      	beq.n	8003cea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0204 	bic.w	r2, r2, #4
 8003cc2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	f003 021c 	and.w	r2, r3, #28
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d071      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003ce8:	e06c      	b.n	8003dc4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	f003 031c 	and.w	r3, r3, #28
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d02e      	beq.n	8003d5c <HAL_DMA_IRQHandler+0xec>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d029      	beq.n	8003d5c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 020a 	bic.w	r2, r2, #10
 8003d24:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	f003 021c 	and.w	r2, r3, #28
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d40:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d038      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d5a:	e033      	b.n	8003dc4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	f003 031c 	and.w	r3, r3, #28
 8003d64:	2208      	movs	r2, #8
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02a      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x156>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d025      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 020e 	bic.w	r2, r2, #14
 8003d88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f003 021c 	and.w	r2, r3, #28
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	2101      	movs	r1, #1
 8003d98:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
}
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d80a      	bhi.n	8003dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003df0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6493      	str	r3, [r2, #72]	; 0x48
 8003df8:	e007      	b.n	8003e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	009a      	lsls	r2, r3, #2
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e04:	4413      	add	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	3b08      	subs	r3, #8
 8003e12:	4a0c      	ldr	r2, [pc, #48]	; (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e20:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2201      	movs	r2, #1
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40020407 	.word	0x40020407
 8003e40:	4002081c 	.word	0x4002081c
 8003e44:	cccccccd 	.word	0xcccccccd
 8003e48:	40020880 	.word	0x40020880

08003e4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e6e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	1000823f 	.word	0x1000823f
 8003e90:	40020940 	.word	0x40020940

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea2:	e166      	b.n	8004172 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8158 	beq.w	800416c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d005      	beq.n	8003ed4 <HAL_GPIO_Init+0x40>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d130      	bne.n	8003f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	091b      	lsrs	r3, r3, #4
 8003f20:	f003 0201 	and.w	r2, r3, #1
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d017      	beq.n	8003f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d123      	bne.n	8003fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	08da      	lsrs	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3208      	adds	r2, #8
 8003f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	220f      	movs	r2, #15
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	08da      	lsrs	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3208      	adds	r2, #8
 8003fc0:	6939      	ldr	r1, [r7, #16]
 8003fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0203 	and.w	r2, r3, #3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80b2 	beq.w	800416c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004008:	4b61      	ldr	r3, [pc, #388]	; (8004190 <HAL_GPIO_Init+0x2fc>)
 800400a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400c:	4a60      	ldr	r2, [pc, #384]	; (8004190 <HAL_GPIO_Init+0x2fc>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6613      	str	r3, [r2, #96]	; 0x60
 8004014:	4b5e      	ldr	r3, [pc, #376]	; (8004190 <HAL_GPIO_Init+0x2fc>)
 8004016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004020:	4a5c      	ldr	r2, [pc, #368]	; (8004194 <HAL_GPIO_Init+0x300>)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	3302      	adds	r3, #2
 8004028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	220f      	movs	r2, #15
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800404a:	d02b      	beq.n	80040a4 <HAL_GPIO_Init+0x210>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a52      	ldr	r2, [pc, #328]	; (8004198 <HAL_GPIO_Init+0x304>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d025      	beq.n	80040a0 <HAL_GPIO_Init+0x20c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a51      	ldr	r2, [pc, #324]	; (800419c <HAL_GPIO_Init+0x308>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d01f      	beq.n	800409c <HAL_GPIO_Init+0x208>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a50      	ldr	r2, [pc, #320]	; (80041a0 <HAL_GPIO_Init+0x30c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d019      	beq.n	8004098 <HAL_GPIO_Init+0x204>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a4f      	ldr	r2, [pc, #316]	; (80041a4 <HAL_GPIO_Init+0x310>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <HAL_GPIO_Init+0x200>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a4e      	ldr	r2, [pc, #312]	; (80041a8 <HAL_GPIO_Init+0x314>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00d      	beq.n	8004090 <HAL_GPIO_Init+0x1fc>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a4d      	ldr	r2, [pc, #308]	; (80041ac <HAL_GPIO_Init+0x318>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d007      	beq.n	800408c <HAL_GPIO_Init+0x1f8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a4c      	ldr	r2, [pc, #304]	; (80041b0 <HAL_GPIO_Init+0x31c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_GPIO_Init+0x1f4>
 8004084:	2307      	movs	r3, #7
 8004086:	e00e      	b.n	80040a6 <HAL_GPIO_Init+0x212>
 8004088:	2308      	movs	r3, #8
 800408a:	e00c      	b.n	80040a6 <HAL_GPIO_Init+0x212>
 800408c:	2306      	movs	r3, #6
 800408e:	e00a      	b.n	80040a6 <HAL_GPIO_Init+0x212>
 8004090:	2305      	movs	r3, #5
 8004092:	e008      	b.n	80040a6 <HAL_GPIO_Init+0x212>
 8004094:	2304      	movs	r3, #4
 8004096:	e006      	b.n	80040a6 <HAL_GPIO_Init+0x212>
 8004098:	2303      	movs	r3, #3
 800409a:	e004      	b.n	80040a6 <HAL_GPIO_Init+0x212>
 800409c:	2302      	movs	r3, #2
 800409e:	e002      	b.n	80040a6 <HAL_GPIO_Init+0x212>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <HAL_GPIO_Init+0x212>
 80040a4:	2300      	movs	r3, #0
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	f002 0203 	and.w	r2, r2, #3
 80040ac:	0092      	lsls	r2, r2, #2
 80040ae:	4093      	lsls	r3, r2
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040b6:	4937      	ldr	r1, [pc, #220]	; (8004194 <HAL_GPIO_Init+0x300>)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	3302      	adds	r3, #2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040c4:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <HAL_GPIO_Init+0x320>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4013      	ands	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040e8:	4a32      	ldr	r2, [pc, #200]	; (80041b4 <HAL_GPIO_Init+0x320>)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ee:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <HAL_GPIO_Init+0x320>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4013      	ands	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004112:	4a28      	ldr	r2, [pc, #160]	; (80041b4 <HAL_GPIO_Init+0x320>)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004118:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <HAL_GPIO_Init+0x320>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	43db      	mvns	r3, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800413c:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <HAL_GPIO_Init+0x320>)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004142:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <HAL_GPIO_Init+0x320>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	43db      	mvns	r3, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004166:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <HAL_GPIO_Init+0x320>)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	3301      	adds	r3, #1
 8004170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	f47f ae91 	bne.w	8003ea4 <HAL_GPIO_Init+0x10>
  }
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40021000 	.word	0x40021000
 8004194:	40010000 	.word	0x40010000
 8004198:	48000400 	.word	0x48000400
 800419c:	48000800 	.word	0x48000800
 80041a0:	48000c00 	.word	0x48000c00
 80041a4:	48001000 	.word	0x48001000
 80041a8:	48001400 	.word	0x48001400
 80041ac:	48001800 	.word	0x48001800
 80041b0:	48001c00 	.word	0x48001c00
 80041b4:	40010400 	.word	0x40010400

080041b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
 80041c4:	4613      	mov	r3, r2
 80041c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c8:	787b      	ldrb	r3, [r7, #1]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ce:	887a      	ldrh	r2, [r7, #2]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041d4:	e002      	b.n	80041dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4013      	ands	r3, r2
 8004200:	041a      	lsls	r2, r3, #16
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	43d9      	mvns	r1, r3
 8004206:	887b      	ldrh	r3, [r7, #2]
 8004208:	400b      	ands	r3, r1
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	619a      	str	r2, [r3, #24]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004230:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423c:	d102      	bne.n	8004244 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800423e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004242:	e00b      	b.n	800425c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004252:	d102      	bne.n	800425a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004258:	e000      	b.n	800425c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800425a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40007000 	.word	0x40007000

0800426c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d141      	bne.n	80042fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800427a:	4b4b      	ldr	r3, [pc, #300]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004286:	d131      	bne.n	80042ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004288:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428e:	4a46      	ldr	r2, [pc, #280]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004298:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042a0:	4a41      	ldr	r2, [pc, #260]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042a8:	4b40      	ldr	r3, [pc, #256]	; (80043ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2232      	movs	r2, #50	; 0x32
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	4a3f      	ldr	r2, [pc, #252]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	0c9b      	lsrs	r3, r3, #18
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042be:	e002      	b.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042c6:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d2:	d102      	bne.n	80042da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f2      	bne.n	80042c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042da:	4b33      	ldr	r3, [pc, #204]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d158      	bne.n	800439a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e057      	b.n	800439c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042ec:	4b2e      	ldr	r3, [pc, #184]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f2:	4a2d      	ldr	r2, [pc, #180]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042fc:	e04d      	b.n	800439a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004304:	d141      	bne.n	800438a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004306:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004312:	d131      	bne.n	8004378 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004314:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431a:	4a23      	ldr	r2, [pc, #140]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800432c:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004332:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004334:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2232      	movs	r2, #50	; 0x32
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	0c9b      	lsrs	r3, r3, #18
 8004346:	3301      	adds	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800434a:	e002      	b.n	8004352 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3b01      	subs	r3, #1
 8004350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435e:	d102      	bne.n	8004366 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f2      	bne.n	800434c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d112      	bne.n	800439a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e011      	b.n	800439c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437e:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004388:	e007      	b.n	800439a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004392:	4a05      	ldr	r2, [pc, #20]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004398:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40007000 	.word	0x40007000
 80043ac:	20000000 	.word	0x20000000
 80043b0:	431bde83 	.word	0x431bde83

080043b4 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 80043b8:	4b1c      	ldr	r3, [pc, #112]	; (800442c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80043c4:	f7ff ff2a 	bl	800421c <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80043c8:	4b18      	ldr	r3, [pc, #96]	; (800442c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80043ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043ce:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 80043d0:	4b16      	ldr	r3, [pc, #88]	; (800442c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 80043dc:	f000 f828 	bl	8004430 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 80043e0:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80043e2:	2208      	movs	r2, #8
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d004      	beq.n	80043fc <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 80043f2:	f000 f824 	bl	800443e <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 80043f6:	4b0d      	ldr	r3, [pc, #52]	; (800442c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80043f8:	2210      	movs	r2, #16
 80043fa:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004408:	f000 f820 	bl	800444c <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800440c:	4b07      	ldr	r3, [pc, #28]	; (800442c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800440e:	2220      	movs	r2, #32
 8004410:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8004412:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800441e:	f000 f81c 	bl	800445a <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8004422:	4b02      	ldr	r3, [pc, #8]	; (800442c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8004428:	bf00      	nop
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40010400 	.word	0x40010400

08004430 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800443e:	b480      	push	{r7}
 8004440:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800445a:	b480      	push	{r7}
 800445c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f000 bc76 	b.w	8004d68 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800447c:	4ba1      	ldr	r3, [pc, #644]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004486:	4b9f      	ldr	r3, [pc, #636]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80e6 	beq.w	800466a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_RCC_OscConfig+0x4c>
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	f040 808d 	bne.w	80045c6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	f040 8089 	bne.w	80045c6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044b4:	4b93      	ldr	r3, [pc, #588]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d006      	beq.n	80044ce <HAL_RCC_OscConfig+0x66>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f000 bc4d 	b.w	8004d68 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d2:	4b8c      	ldr	r3, [pc, #560]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d004      	beq.n	80044e8 <HAL_RCC_OscConfig+0x80>
 80044de:	4b89      	ldr	r3, [pc, #548]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e6:	e005      	b.n	80044f4 <HAL_RCC_OscConfig+0x8c>
 80044e8:	4b86      	ldr	r3, [pc, #536]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80044ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d224      	bcs.n	8004542 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fe47 	bl	8005190 <RCC_SetFlashLatencyFromMSIRange>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	f000 bc2d 	b.w	8004d68 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800450e:	4b7d      	ldr	r3, [pc, #500]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a7c      	ldr	r2, [pc, #496]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004514:	f043 0308 	orr.w	r3, r3, #8
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b7a      	ldr	r3, [pc, #488]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	4977      	ldr	r1, [pc, #476]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452c:	4b75      	ldr	r3, [pc, #468]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	4972      	ldr	r1, [pc, #456]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
 8004540:	e025      	b.n	800458e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004542:	4b70      	ldr	r3, [pc, #448]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a6f      	ldr	r2, [pc, #444]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004548:	f043 0308 	orr.w	r3, r3, #8
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b6d      	ldr	r3, [pc, #436]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	496a      	ldr	r1, [pc, #424]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004560:	4b68      	ldr	r3, [pc, #416]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	4965      	ldr	r1, [pc, #404]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fe06 	bl	8005190 <RCC_SetFlashLatencyFromMSIRange>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e3ec      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800458e:	f000 fd1f 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8004592:	4602      	mov	r2, r0
 8004594:	4b5b      	ldr	r3, [pc, #364]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	495a      	ldr	r1, [pc, #360]	; (8004708 <HAL_RCC_OscConfig+0x2a0>)
 80045a0:	5ccb      	ldrb	r3, [r1, r3]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	fa22 f303 	lsr.w	r3, r2, r3
 80045aa:	4a58      	ldr	r2, [pc, #352]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80045ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045ae:	4b58      	ldr	r3, [pc, #352]	; (8004710 <HAL_RCC_OscConfig+0x2a8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe f81a 	bl	80025ec <HAL_InitTick>
 80045b8:	4603      	mov	r3, r0
 80045ba:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d052      	beq.n	8004668 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80045c2:	7dfb      	ldrb	r3, [r7, #23]
 80045c4:	e3d0      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d032      	beq.n	8004634 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045ce:	4b4d      	ldr	r3, [pc, #308]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a4c      	ldr	r2, [pc, #304]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045da:	f7fe f8ff 	bl	80027dc <HAL_GetTick>
 80045de:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045e2:	f7fe f8fb 	bl	80027dc <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e3b9      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f4:	4b43      	ldr	r3, [pc, #268]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004600:	4b40      	ldr	r3, [pc, #256]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a3f      	ldr	r2, [pc, #252]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004606:	f043 0308 	orr.w	r3, r3, #8
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	4b3d      	ldr	r3, [pc, #244]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	493a      	ldr	r1, [pc, #232]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800461a:	4313      	orrs	r3, r2
 800461c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800461e:	4b39      	ldr	r3, [pc, #228]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	4935      	ldr	r1, [pc, #212]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]
 8004632:	e01a      	b.n	800466a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004634:	4b33      	ldr	r3, [pc, #204]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a32      	ldr	r2, [pc, #200]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004640:	f7fe f8cc 	bl	80027dc <HAL_GetTick>
 8004644:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004648:	f7fe f8c8 	bl	80027dc <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e386      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800465a:	4b2a      	ldr	r3, [pc, #168]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x1e0>
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004668:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d073      	beq.n	800475e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d005      	beq.n	8004688 <HAL_RCC_OscConfig+0x220>
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b0c      	cmp	r3, #12
 8004680:	d10e      	bne.n	80046a0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2b03      	cmp	r3, #3
 8004686:	d10b      	bne.n	80046a0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004688:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d063      	beq.n	800475c <HAL_RCC_OscConfig+0x2f4>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d15f      	bne.n	800475c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e363      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d106      	bne.n	80046b8 <HAL_RCC_OscConfig+0x250>
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a15      	ldr	r2, [pc, #84]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	e01d      	b.n	80046f4 <HAL_RCC_OscConfig+0x28c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCC_OscConfig+0x274>
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a0f      	ldr	r2, [pc, #60]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80046c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a0c      	ldr	r2, [pc, #48]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e00b      	b.n	80046f4 <HAL_RCC_OscConfig+0x28c>
 80046dc:	4b09      	ldr	r3, [pc, #36]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a08      	ldr	r2, [pc, #32]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a05      	ldr	r2, [pc, #20]	; (8004704 <HAL_RCC_OscConfig+0x29c>)
 80046ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fe f86e 	bl	80027dc <HAL_GetTick>
 8004700:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004702:	e010      	b.n	8004726 <HAL_RCC_OscConfig+0x2be>
 8004704:	40021000 	.word	0x40021000
 8004708:	0800a290 	.word	0x0800a290
 800470c:	20000000 	.word	0x20000000
 8004710:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004714:	f7fe f862 	bl	80027dc <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	; 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e320      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004726:	4ba0      	ldr	r3, [pc, #640]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x2ac>
 8004732:	e014      	b.n	800475e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fe f852 	bl	80027dc <HAL_GetTick>
 8004738:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800473c:	f7fe f84e 	bl	80027dc <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	; 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e30c      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800474e:	4b96      	ldr	r3, [pc, #600]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x2d4>
 800475a:	e000      	b.n	800475e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d060      	beq.n	800482c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d005      	beq.n	800477c <HAL_RCC_OscConfig+0x314>
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d119      	bne.n	80047aa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d116      	bne.n	80047aa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800477c:	4b8a      	ldr	r3, [pc, #552]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_OscConfig+0x32c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e2e9      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b84      	ldr	r3, [pc, #528]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	4981      	ldr	r1, [pc, #516]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a8:	e040      	b.n	800482c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d023      	beq.n	80047fa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b2:	4b7d      	ldr	r3, [pc, #500]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7c      	ldr	r2, [pc, #496]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80047b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fe f80d 	bl	80027dc <HAL_GetTick>
 80047c2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c6:	f7fe f809 	bl	80027dc <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e2c7      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d8:	4b73      	ldr	r3, [pc, #460]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e4:	4b70      	ldr	r3, [pc, #448]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	061b      	lsls	r3, r3, #24
 80047f2:	496d      	ldr	r1, [pc, #436]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
 80047f8:	e018      	b.n	800482c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fa:	4b6b      	ldr	r3, [pc, #428]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a6a      	ldr	r2, [pc, #424]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 8004800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004806:	f7fd ffe9 	bl	80027dc <HAL_GetTick>
 800480a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480e:	f7fd ffe5 	bl	80027dc <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e2a3      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004820:	4b61      	ldr	r3, [pc, #388]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f0      	bne.n	800480e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b00      	cmp	r3, #0
 8004836:	d07f      	beq.n	8004938 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d05f      	beq.n	8004900 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004840:	4b59      	ldr	r3, [pc, #356]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 8004842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004846:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699a      	ldr	r2, [r3, #24]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	429a      	cmp	r2, r3
 8004854:	d037      	beq.n	80048c6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e27c      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01b      	beq.n	80048b0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8004878:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 800487a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487e:	4a4a      	ldr	r2, [pc, #296]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004888:	f7fd ffa8 	bl	80027dc <HAL_GetTick>
 800488c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004890:	f7fd ffa4 	bl	80027dc <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b11      	cmp	r3, #17
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e262      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a2:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80048a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1ef      	bne.n	8004890 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80048b0:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80048b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b6:	f023 0210 	bic.w	r2, r3, #16
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	493a      	ldr	r1, [pc, #232]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c6:	4b38      	ldr	r3, [pc, #224]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80048c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048cc:	4a36      	ldr	r2, [pc, #216]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d6:	f7fd ff81 	bl	80027dc <HAL_GetTick>
 80048da:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048de:	f7fd ff7d 	bl	80027dc <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b11      	cmp	r3, #17
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e23b      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f0:	4b2d      	ldr	r3, [pc, #180]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 80048f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0ef      	beq.n	80048de <HAL_RCC_OscConfig+0x476>
 80048fe:	e01b      	b.n	8004938 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004900:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004906:	4a28      	ldr	r2, [pc, #160]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fd ff64 	bl	80027dc <HAL_GetTick>
 8004914:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004918:	f7fd ff60 	bl	80027dc <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b11      	cmp	r3, #17
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e21e      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800492a:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 800492c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1ef      	bne.n	8004918 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80c1 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800494c:	4b16      	ldr	r3, [pc, #88]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10e      	bne.n	8004976 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004958:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 800495e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004962:	6593      	str	r3, [r2, #88]	; 0x58
 8004964:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <HAL_RCC_OscConfig+0x540>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <HAL_RCC_OscConfig+0x544>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d11c      	bne.n	80049bc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <HAL_RCC_OscConfig+0x544>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a09      	ldr	r2, [pc, #36]	; (80049ac <HAL_RCC_OscConfig+0x544>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498e:	f7fd ff25 	bl	80027dc <HAL_GetTick>
 8004992:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004994:	e00c      	b.n	80049b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004996:	f7fd ff21 	bl	80027dc <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d905      	bls.n	80049b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e1df      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b0:	4b99      	ldr	r3, [pc, #612]	; (8004c18 <HAL_RCC_OscConfig+0x7b0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ec      	beq.n	8004996 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02c      	beq.n	8004a22 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80049c8:	4b94      	ldr	r3, [pc, #592]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	4990      	ldr	r1, [pc, #576]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d010      	beq.n	8004a10 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049ee:	4b8b      	ldr	r3, [pc, #556]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	4a89      	ldr	r2, [pc, #548]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 80049f6:	f043 0304 	orr.w	r3, r3, #4
 80049fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049fe:	4b87      	ldr	r3, [pc, #540]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	4a85      	ldr	r2, [pc, #532]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a0e:	e018      	b.n	8004a42 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a10:	4b82      	ldr	r3, [pc, #520]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	4a81      	ldr	r2, [pc, #516]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a20:	e00f      	b.n	8004a42 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a22:	4b7e      	ldr	r3, [pc, #504]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	4a7c      	ldr	r2, [pc, #496]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a32:	4b7a      	ldr	r3, [pc, #488]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a38:	4a78      	ldr	r2, [pc, #480]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004a3a:	f023 0304 	bic.w	r3, r3, #4
 8004a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d016      	beq.n	8004a78 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4a:	f7fd fec7 	bl	80027dc <HAL_GetTick>
 8004a4e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fd fec3 	bl	80027dc <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e17f      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a68:	4b6c      	ldr	r3, [pc, #432]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0ed      	beq.n	8004a52 <HAL_RCC_OscConfig+0x5ea>
 8004a76:	e01d      	b.n	8004ab4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a78:	f7fd feb0 	bl	80027dc <HAL_GetTick>
 8004a7c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a80:	f7fd feac 	bl	80027dc <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e168      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a96:	4b61      	ldr	r3, [pc, #388]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ed      	bne.n	8004a80 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004aa4:	4b5d      	ldr	r3, [pc, #372]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aaa:	4a5c      	ldr	r2, [pc, #368]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d105      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004abc:	4b57      	ldr	r3, [pc, #348]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	4a56      	ldr	r2, [pc, #344]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d03c      	beq.n	8004b4e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01c      	beq.n	8004b16 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004adc:	4b4f      	ldr	r3, [pc, #316]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ae2:	4a4e      	ldr	r2, [pc, #312]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aec:	f7fd fe76 	bl	80027dc <HAL_GetTick>
 8004af0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004af4:	f7fd fe72 	bl	80027dc <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e130      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b06:	4b45      	ldr	r3, [pc, #276]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0ef      	beq.n	8004af4 <HAL_RCC_OscConfig+0x68c>
 8004b14:	e01b      	b.n	8004b4e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b16:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b1c:	4a3f      	ldr	r2, [pc, #252]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b26:	f7fd fe59 	bl	80027dc <HAL_GetTick>
 8004b2a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b2e:	f7fd fe55 	bl	80027dc <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e113      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b40:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1ef      	bne.n	8004b2e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 8107 	beq.w	8004d66 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	f040 80cf 	bne.w	8004d00 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b62:	4b2e      	ldr	r3, [pc, #184]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f003 0203 	and.w	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d12c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	3b01      	subs	r3, #1
 8004b82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d123      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d11b      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d113      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d109      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d071      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d06c      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bd6:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004be2:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0ba      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a09      	ldr	r2, [pc, #36]	; (8004c1c <HAL_RCC_OscConfig+0x7b4>)
 8004bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bfe:	f7fd fded 	bl	80027dc <HAL_GetTick>
 8004c02:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c04:	e00c      	b.n	8004c20 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c06:	f7fd fde9 	bl	80027dc <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d905      	bls.n	8004c20 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0a7      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
 8004c18:	40007000 	.word	0x40007000
 8004c1c:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c20:	4b53      	ldr	r3, [pc, #332]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ec      	bne.n	8004c06 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c2c:	4b50      	ldr	r3, [pc, #320]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	4b50      	ldr	r3, [pc, #320]	; (8004d74 <HAL_RCC_OscConfig+0x90c>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c3c:	3a01      	subs	r2, #1
 8004c3e:	0112      	lsls	r2, r2, #4
 8004c40:	4311      	orrs	r1, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c46:	0212      	lsls	r2, r2, #8
 8004c48:	4311      	orrs	r1, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c4e:	0852      	lsrs	r2, r2, #1
 8004c50:	3a01      	subs	r2, #1
 8004c52:	0552      	lsls	r2, r2, #21
 8004c54:	4311      	orrs	r1, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c5a:	0852      	lsrs	r2, r2, #1
 8004c5c:	3a01      	subs	r2, #1
 8004c5e:	0652      	lsls	r2, r2, #25
 8004c60:	4311      	orrs	r1, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c66:	06d2      	lsls	r2, r2, #27
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	4941      	ldr	r1, [pc, #260]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c70:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a3e      	ldr	r2, [pc, #248]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c7c:	4b3c      	ldr	r3, [pc, #240]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a3b      	ldr	r2, [pc, #236]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c88:	f7fd fda8 	bl	80027dc <HAL_GetTick>
 8004c8c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fd fda4 	bl	80027dc <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e062      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca2:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cae:	e05a      	b.n	8004d66 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e059      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb4:	4b2e      	ldr	r3, [pc, #184]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d152      	bne.n	8004d66 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2a      	ldr	r2, [pc, #168]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ccc:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4a27      	ldr	r2, [pc, #156]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cd8:	f7fd fd80 	bl	80027dc <HAL_GetTick>
 8004cdc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fd fd7c 	bl	80027dc <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e03a      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x878>
 8004cfe:	e032      	b.n	8004d66 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d02d      	beq.n	8004d62 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d06:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a19      	ldr	r2, [pc, #100]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d10:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004d12:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d1e:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004d24:	f023 0303 	bic.w	r3, r3, #3
 8004d28:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	4a10      	ldr	r2, [pc, #64]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004d30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d38:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3a:	f7fd fd4f 	bl	80027dc <HAL_GetTick>
 8004d3e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d42:	f7fd fd4b 	bl	80027dc <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e009      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <HAL_RCC_OscConfig+0x908>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f0      	bne.n	8004d42 <HAL_RCC_OscConfig+0x8da>
 8004d60:	e001      	b.n	8004d66 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40021000 	.word	0x40021000
 8004d74:	019d800c 	.word	0x019d800c

08004d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e10f      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d90:	4b89      	ldr	r3, [pc, #548]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d910      	bls.n	8004dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b86      	ldr	r3, [pc, #536]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f023 020f 	bic.w	r2, r3, #15
 8004da6:	4984      	ldr	r1, [pc, #528]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	4b82      	ldr	r3, [pc, #520]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0f7      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 8089 	beq.w	8004ee0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d133      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd6:	4b79      	ldr	r3, [pc, #484]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e0e4      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004de6:	f000 fa2d 	bl	8005244 <RCC_GetSysClockFreqFromPLLSource>
 8004dea:	4603      	mov	r3, r0
 8004dec:	4a74      	ldr	r2, [pc, #464]	; (8004fc0 <HAL_RCC_ClockConfig+0x248>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d955      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004df2:	4b72      	ldr	r3, [pc, #456]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dfe:	4b6f      	ldr	r3, [pc, #444]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e06:	4a6d      	ldr	r2, [pc, #436]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e044      	b.n	8004e9e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d03e      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x126>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d13a      	bne.n	8004e9e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e28:	4b64      	ldr	r3, [pc, #400]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e30:	4a62      	ldr	r2, [pc, #392]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e36:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e02f      	b.n	8004e9e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d107      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e46:	4b5d      	ldr	r3, [pc, #372]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d115      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e0ac      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e5e:	4b57      	ldr	r3, [pc, #348]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e0a0      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e6e:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e098      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004e7e:	f000 f8a7 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4a4e      	ldr	r2, [pc, #312]	; (8004fc0 <HAL_RCC_ClockConfig+0x248>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d909      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e8a:	4b4c      	ldr	r3, [pc, #304]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e92:	4a4a      	ldr	r2, [pc, #296]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e9e:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f023 0203 	bic.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4944      	ldr	r1, [pc, #272]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb0:	f7fd fc94 	bl	80027dc <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb8:	f7fd fc90 	bl	80027dc <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e070      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ece:	4b3b      	ldr	r3, [pc, #236]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 020c 	and.w	r2, r3, #12
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d1eb      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eec:	4b33      	ldr	r3, [pc, #204]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4930      	ldr	r1, [pc, #192]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d105      	bne.n	8004f12 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f06:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	4a2c      	ldr	r2, [pc, #176]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f10:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f12:	4b29      	ldr	r3, [pc, #164]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d210      	bcs.n	8004f42 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 020f 	bic.w	r2, r3, #15
 8004f28:	4923      	ldr	r1, [pc, #140]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f30:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e036      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	4918      	ldr	r1, [pc, #96]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f6c:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4910      	ldr	r1, [pc, #64]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f80:	f000 f826 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	490c      	ldr	r1, [pc, #48]	; (8004fc4 <HAL_RCC_ClockConfig+0x24c>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9c:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <HAL_RCC_ClockConfig+0x250>)
 8004f9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <HAL_RCC_ClockConfig+0x254>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fd fb21 	bl	80025ec <HAL_InitTick>
 8004faa:	4603      	mov	r3, r0
 8004fac:	73fb      	strb	r3, [r7, #15]

  return status;
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40022000 	.word	0x40022000
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	04c4b400 	.word	0x04c4b400
 8004fc4:	0800a290 	.word	0x0800a290
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	20000004 	.word	0x20000004

08004fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fde:	4b3e      	ldr	r3, [pc, #248]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
 8004fe6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fe8:	4b3b      	ldr	r3, [pc, #236]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x34>
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	d121      	bne.n	8005042 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d11e      	bne.n	8005042 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005004:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005010:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005016:	0a1b      	lsrs	r3, r3, #8
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	e005      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005020:	4b2d      	ldr	r3, [pc, #180]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800502c:	4a2b      	ldr	r2, [pc, #172]	; (80050dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005034:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10d      	bne.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005040:	e00a      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b04      	cmp	r3, #4
 8005046:	d102      	bne.n	800504e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	e004      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d101      	bne.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005054:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005056:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d134      	bne.n	80050c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800505e:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d003      	beq.n	8005076 <HAL_RCC_GetSysClockFreq+0xa6>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d003      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0xac>
 8005074:	e005      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005076:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005078:	617b      	str	r3, [r7, #20]
      break;
 800507a:	e005      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800507c:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800507e:	617b      	str	r3, [r7, #20]
      break;
 8005080:	e002      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	617b      	str	r3, [r7, #20]
      break;
 8005086:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005088:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	3301      	adds	r3, #1
 8005094:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	fb02 f203 	mul.w	r2, r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ae:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	0e5b      	lsrs	r3, r3, #25
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	3301      	adds	r3, #1
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050c8:	69bb      	ldr	r3, [r7, #24]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3724      	adds	r7, #36	; 0x24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	0800a2a8 	.word	0x0800a2a8
 80050e0:	00f42400 	.word	0x00f42400
 80050e4:	007a1200 	.word	0x007a1200

080050e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ec:	4b03      	ldr	r3, [pc, #12]	; (80050fc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000000 	.word	0x20000000

08005100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005104:	f7ff fff0 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4904      	ldr	r1, [pc, #16]	; (8005128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	0800a2a0 	.word	0x0800a2a0

0800512c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	220f      	movs	r2, #15
 800513a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0203 	and.w	r2, r3, #3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005148:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005154:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	08db      	lsrs	r3, r3, #3
 8005166:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <HAL_RCC_GetClockConfig+0x60>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 020f 	and.w	r2, r3, #15
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	40022000 	.word	0x40022000

08005190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005198:	2300      	movs	r3, #0
 800519a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800519c:	4b27      	ldr	r3, [pc, #156]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051a8:	f7ff f840 	bl	800422c <HAL_PWREx_GetVoltageRange>
 80051ac:	6178      	str	r0, [r7, #20]
 80051ae:	e014      	b.n	80051da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b0:	4b22      	ldr	r3, [pc, #136]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	4a21      	ldr	r2, [pc, #132]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ba:	6593      	str	r3, [r2, #88]	; 0x58
 80051bc:	4b1f      	ldr	r3, [pc, #124]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051c8:	f7ff f830 	bl	800422c <HAL_PWREx_GetVoltageRange>
 80051cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051ce:	4b1b      	ldr	r3, [pc, #108]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d2:	4a1a      	ldr	r2, [pc, #104]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e0:	d10b      	bne.n	80051fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b80      	cmp	r3, #128	; 0x80
 80051e6:	d913      	bls.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2ba0      	cmp	r3, #160	; 0xa0
 80051ec:	d902      	bls.n	80051f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051ee:	2302      	movs	r3, #2
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e00d      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051f4:	2301      	movs	r3, #1
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	e00a      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b7f      	cmp	r3, #127	; 0x7f
 80051fe:	d902      	bls.n	8005206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005200:	2302      	movs	r3, #2
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	e004      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b70      	cmp	r3, #112	; 0x70
 800520a:	d101      	bne.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800520c:	2301      	movs	r3, #1
 800520e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 020f 	bic.w	r2, r3, #15
 8005218:	4909      	ldr	r1, [pc, #36]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	429a      	cmp	r2, r3
 800522c:	d001      	beq.n	8005232 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000
 8005240:	40022000 	.word	0x40022000

08005244 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800524e:	4b2d      	ldr	r3, [pc, #180]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b01      	cmp	r3, #1
 8005258:	d118      	bne.n	800528c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800525a:	4b2a      	ldr	r3, [pc, #168]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005266:	4b27      	ldr	r3, [pc, #156]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e005      	b.n	8005282 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005276:	4b23      	ldr	r3, [pc, #140]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005282:	4a21      	ldr	r2, [pc, #132]	; (8005308 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d003      	beq.n	80052a4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d003      	beq.n	80052aa <RCC_GetSysClockFreqFromPLLSource+0x66>
 80052a2:	e005      	b.n	80052b0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80052a4:	4b19      	ldr	r3, [pc, #100]	; (800530c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80052a6:	613b      	str	r3, [r7, #16]
    break;
 80052a8:	e005      	b.n	80052b6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80052aa:	4b19      	ldr	r3, [pc, #100]	; (8005310 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80052ac:	613b      	str	r3, [r7, #16]
    break;
 80052ae:	e002      	b.n	80052b6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	613b      	str	r3, [r7, #16]
    break;
 80052b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052b6:	4b13      	ldr	r3, [pc, #76]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	091b      	lsrs	r3, r3, #4
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	3301      	adds	r3, #1
 80052c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052c4:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	fb02 f203 	mul.w	r2, r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052dc:	4b09      	ldr	r3, [pc, #36]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	0e5b      	lsrs	r3, r3, #25
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	3301      	adds	r3, #1
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80052f6:	683b      	ldr	r3, [r7, #0]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	40021000 	.word	0x40021000
 8005308:	0800a2a8 	.word	0x0800a2a8
 800530c:	00f42400 	.word	0x00f42400
 8005310:	007a1200 	.word	0x007a1200

08005314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800531c:	2300      	movs	r3, #0
 800531e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005320:	2300      	movs	r3, #0
 8005322:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532c:	2b00      	cmp	r3, #0
 800532e:	d040      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d02a      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005338:	2b80      	cmp	r3, #128	; 0x80
 800533a:	d825      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800533c:	2b60      	cmp	r3, #96	; 0x60
 800533e:	d026      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005340:	2b60      	cmp	r3, #96	; 0x60
 8005342:	d821      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d006      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005348:	2b40      	cmp	r3, #64	; 0x40
 800534a:	d81d      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d009      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005350:	2b20      	cmp	r3, #32
 8005352:	d010      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005354:	e018      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005356:	4b89      	ldr	r3, [pc, #548]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	4a88      	ldr	r2, [pc, #544]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005362:	e015      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fb3e 	bl	80059ec <RCCEx_PLLSAI1_Config>
 8005370:	4603      	mov	r3, r0
 8005372:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005374:	e00c      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3320      	adds	r3, #32
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fc29 	bl	8005bd4 <RCCEx_PLLSAI2_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005386:	e003      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	74fb      	strb	r3, [r7, #19]
      break;
 800538c:	e000      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800538e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10b      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005396:	4b79      	ldr	r3, [pc, #484]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005398:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800539c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053a4:	4975      	ldr	r1, [pc, #468]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80053ac:	e001      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d047      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c6:	d030      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80053c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053cc:	d82a      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80053ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d2:	d02a      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80053d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d8:	d824      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80053da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053de:	d008      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80053e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e4:	d81e      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80053ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ee:	d010      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80053f0:	e018      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053f2:	4b62      	ldr	r3, [pc, #392]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	4a61      	ldr	r2, [pc, #388]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053fe:	e015      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	2100      	movs	r1, #0
 8005406:	4618      	mov	r0, r3
 8005408:	f000 faf0 	bl	80059ec <RCCEx_PLLSAI1_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005410:	e00c      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3320      	adds	r3, #32
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fbdb 	bl	8005bd4 <RCCEx_PLLSAI2_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	74fb      	strb	r3, [r7, #19]
      break;
 8005428:	e000      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800542a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800542c:	7cfb      	ldrb	r3, [r7, #19]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005432:	4b52      	ldr	r3, [pc, #328]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005434:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005440:	494e      	ldr	r1, [pc, #312]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005448:	e001      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544a:	7cfb      	ldrb	r3, [r7, #19]
 800544c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 809f 	beq.w	800559a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800545c:	2300      	movs	r3, #0
 800545e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005460:	4b46      	ldr	r3, [pc, #280]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00d      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005476:	4b41      	ldr	r3, [pc, #260]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547a:	4a40      	ldr	r2, [pc, #256]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800547c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005480:	6593      	str	r3, [r2, #88]	; 0x58
 8005482:	4b3e      	ldr	r3, [pc, #248]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800548e:	2301      	movs	r3, #1
 8005490:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005492:	4b3b      	ldr	r3, [pc, #236]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a3a      	ldr	r2, [pc, #232]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800549e:	f7fd f99d 	bl	80027dc <HAL_GetTick>
 80054a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054a4:	e009      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a6:	f7fd f999 	bl	80027dc <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d902      	bls.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	74fb      	strb	r3, [r7, #19]
        break;
 80054b8:	e005      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054ba:	4b31      	ldr	r3, [pc, #196]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0ef      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80054c6:	7cfb      	ldrb	r3, [r7, #19]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d15b      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054cc:	4b2b      	ldr	r3, [pc, #172]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d01f      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d019      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054f6:	4b21      	ldr	r3, [pc, #132]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	4a1f      	ldr	r2, [pc, #124]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005506:	4b1d      	ldr	r3, [pc, #116]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	4a1b      	ldr	r2, [pc, #108]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800550e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005516:	4a19      	ldr	r2, [pc, #100]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d016      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fd f958 	bl	80027dc <HAL_GetTick>
 800552c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800552e:	e00b      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005530:	f7fd f954 	bl	80027dc <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	f241 3288 	movw	r2, #5000	; 0x1388
 800553e:	4293      	cmp	r3, r2
 8005540:	d902      	bls.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	74fb      	strb	r3, [r7, #19]
            break;
 8005546:	e006      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0ec      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005556:	7cfb      	ldrb	r3, [r7, #19]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10c      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800555c:	4b07      	ldr	r3, [pc, #28]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800556c:	4903      	ldr	r1, [pc, #12]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005574:	e008      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005576:	7cfb      	ldrb	r3, [r7, #19]
 8005578:	74bb      	strb	r3, [r7, #18]
 800557a:	e005      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800557c:	40021000 	.word	0x40021000
 8005580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005588:	7c7b      	ldrb	r3, [r7, #17]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d105      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558e:	4ba0      	ldr	r3, [pc, #640]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005592:	4a9f      	ldr	r2, [pc, #636]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005598:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055a6:	4b9a      	ldr	r3, [pc, #616]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ac:	f023 0203 	bic.w	r2, r3, #3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b4:	4996      	ldr	r1, [pc, #600]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055c8:	4b91      	ldr	r3, [pc, #580]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	f023 020c 	bic.w	r2, r3, #12
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	498e      	ldr	r1, [pc, #568]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ea:	4b89      	ldr	r3, [pc, #548]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f8:	4985      	ldr	r1, [pc, #532]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800560c:	4b80      	ldr	r3, [pc, #512]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	497d      	ldr	r1, [pc, #500]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800562e:	4b78      	ldr	r3, [pc, #480]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563c:	4974      	ldr	r1, [pc, #464]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005650:	4b6f      	ldr	r3, [pc, #444]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565e:	496c      	ldr	r1, [pc, #432]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005672:	4b67      	ldr	r3, [pc, #412]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005680:	4963      	ldr	r1, [pc, #396]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005694:	4b5e      	ldr	r3, [pc, #376]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056a2:	495b      	ldr	r1, [pc, #364]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056b6:	4b56      	ldr	r3, [pc, #344]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	4952      	ldr	r1, [pc, #328]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056d8:	4b4d      	ldr	r3, [pc, #308]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e6:	494a      	ldr	r1, [pc, #296]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056fa:	4b45      	ldr	r3, [pc, #276]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005708:	4941      	ldr	r1, [pc, #260]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800571c:	4b3c      	ldr	r3, [pc, #240]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800571e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005722:	f023 0203 	bic.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572a:	4939      	ldr	r1, [pc, #228]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d028      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800573e:	4b34      	ldr	r3, [pc, #208]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005744:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574c:	4930      	ldr	r1, [pc, #192]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800575c:	d106      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800575e:	4b2c      	ldr	r3, [pc, #176]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4a2b      	ldr	r2, [pc, #172]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005768:	60d3      	str	r3, [r2, #12]
 800576a:	e011      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005774:	d10c      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3304      	adds	r3, #4
 800577a:	2101      	movs	r1, #1
 800577c:	4618      	mov	r0, r3
 800577e:	f000 f935 	bl	80059ec <RCCEx_PLLSAI1_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005786:	7cfb      	ldrb	r3, [r7, #19]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800578c:	7cfb      	ldrb	r3, [r7, #19]
 800578e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d04d      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057a4:	d108      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80057a6:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057ac:	4a18      	ldr	r2, [pc, #96]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80057b6:	e012      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80057b8:	4b15      	ldr	r3, [pc, #84]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057be:	4a14      	ldr	r2, [pc, #80]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80057c8:	4b11      	ldr	r3, [pc, #68]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057d6:	490e      	ldr	r1, [pc, #56]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e6:	d106      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4a08      	ldr	r2, [pc, #32]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057f2:	60d3      	str	r3, [r2, #12]
 80057f4:	e020      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057fe:	d109      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4a02      	ldr	r2, [pc, #8]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580a:	60d3      	str	r3, [r2, #12]
 800580c:	e014      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800580e:	bf00      	nop
 8005810:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800581c:	d10c      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3304      	adds	r3, #4
 8005822:	2101      	movs	r1, #1
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f8e1 	bl	80059ec <RCCEx_PLLSAI1_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800582e:	7cfb      	ldrb	r3, [r7, #19]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d028      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005844:	4b68      	ldr	r3, [pc, #416]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005852:	4965      	ldr	r1, [pc, #404]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005862:	d106      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005864:	4b60      	ldr	r3, [pc, #384]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4a5f      	ldr	r2, [pc, #380]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800586a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800586e:	60d3      	str	r3, [r2, #12]
 8005870:	e011      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800587a:	d10c      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	2101      	movs	r1, #1
 8005882:	4618      	mov	r0, r3
 8005884:	f000 f8b2 	bl	80059ec <RCCEx_PLLSAI1_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800588c:	7cfb      	ldrb	r3, [r7, #19]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005892:	7cfb      	ldrb	r3, [r7, #19]
 8005894:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d01e      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058a2:	4b51      	ldr	r3, [pc, #324]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b2:	494d      	ldr	r1, [pc, #308]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058c4:	d10c      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3304      	adds	r3, #4
 80058ca:	2102      	movs	r1, #2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 f88d 	bl	80059ec <RCCEx_PLLSAI1_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058d6:	7cfb      	ldrb	r3, [r7, #19]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80058dc:	7cfb      	ldrb	r3, [r7, #19]
 80058de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058ec:	4b3e      	ldr	r3, [pc, #248]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058f2:	f023 0204 	bic.w	r2, r3, #4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fc:	493a      	ldr	r1, [pc, #232]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005910:	4b35      	ldr	r3, [pc, #212]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005916:	f023 0218 	bic.w	r2, r3, #24
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	4931      	ldr	r1, [pc, #196]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d035      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005934:	4b2c      	ldr	r3, [pc, #176]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2b      	ldr	r2, [pc, #172]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800593a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005940:	f7fc ff4c 	bl	80027dc <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005946:	e009      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005948:	f7fc ff48 	bl	80027dc <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d902      	bls.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	74fb      	strb	r3, [r7, #19]
        break;
 800595a:	e005      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800595c:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1ef      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005968:	7cfb      	ldrb	r3, [r7, #19]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d113      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800596e:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005970:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800597e:	491a      	ldr	r1, [pc, #104]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3320      	adds	r3, #32
 800598a:	2102      	movs	r1, #2
 800598c:	4618      	mov	r0, r3
 800598e:	f000 f921 	bl	8005bd4 <RCCEx_PLLSAI2_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005996:	7cfb      	ldrb	r3, [r7, #19]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800599c:	7cfb      	ldrb	r3, [r7, #19]
 800599e:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d017      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059bc:	490a      	ldr	r1, [pc, #40]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ce:	d105      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a04      	ldr	r2, [pc, #16]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40021000 	.word	0x40021000

080059ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059fa:	4b72      	ldr	r3, [pc, #456]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a06:	4b6f      	ldr	r3, [pc, #444]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0203 	and.w	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d103      	bne.n	8005a1e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
       ||
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d142      	bne.n	8005aa4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
 8005a22:	e03f      	b.n	8005aa4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d018      	beq.n	8005a5e <RCCEx_PLLSAI1_Config+0x72>
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d825      	bhi.n	8005a7c <RCCEx_PLLSAI1_Config+0x90>
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d002      	beq.n	8005a3a <RCCEx_PLLSAI1_Config+0x4e>
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d009      	beq.n	8005a4c <RCCEx_PLLSAI1_Config+0x60>
 8005a38:	e020      	b.n	8005a7c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a3a:	4b62      	ldr	r3, [pc, #392]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d11d      	bne.n	8005a82 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a4a:	e01a      	b.n	8005a82 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a4c:	4b5d      	ldr	r3, [pc, #372]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d116      	bne.n	8005a86 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a5c:	e013      	b.n	8005a86 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a5e:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10f      	bne.n	8005a8a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a6a:	4b56      	ldr	r3, [pc, #344]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a7a:	e006      	b.n	8005a8a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a80:	e004      	b.n	8005a8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a82:	bf00      	nop
 8005a84:	e002      	b.n	8005a8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d108      	bne.n	8005aa4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005a92:	4b4c      	ldr	r3, [pc, #304]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f023 0203 	bic.w	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4949      	ldr	r1, [pc, #292]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f040 8086 	bne.w	8005bb8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005aac:	4b45      	ldr	r3, [pc, #276]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a44      	ldr	r2, [pc, #272]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ab2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab8:	f7fc fe90 	bl	80027dc <HAL_GetTick>
 8005abc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005abe:	e009      	b.n	8005ad4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ac0:	f7fc fe8c 	bl	80027dc <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d902      	bls.n	8005ad4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ad2:	e005      	b.n	8005ae0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ad4:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1ef      	bne.n	8005ac0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d168      	bne.n	8005bb8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d113      	bne.n	8005b14 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aec:	4b35      	ldr	r3, [pc, #212]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	4b35      	ldr	r3, [pc, #212]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6892      	ldr	r2, [r2, #8]
 8005af8:	0211      	lsls	r1, r2, #8
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68d2      	ldr	r2, [r2, #12]
 8005afe:	06d2      	lsls	r2, r2, #27
 8005b00:	4311      	orrs	r1, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6852      	ldr	r2, [r2, #4]
 8005b06:	3a01      	subs	r2, #1
 8005b08:	0112      	lsls	r2, r2, #4
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	492d      	ldr	r1, [pc, #180]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	610b      	str	r3, [r1, #16]
 8005b12:	e02d      	b.n	8005b70 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d115      	bne.n	8005b46 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b1a:	4b2a      	ldr	r3, [pc, #168]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6892      	ldr	r2, [r2, #8]
 8005b26:	0211      	lsls	r1, r2, #8
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6912      	ldr	r2, [r2, #16]
 8005b2c:	0852      	lsrs	r2, r2, #1
 8005b2e:	3a01      	subs	r2, #1
 8005b30:	0552      	lsls	r2, r2, #21
 8005b32:	4311      	orrs	r1, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6852      	ldr	r2, [r2, #4]
 8005b38:	3a01      	subs	r2, #1
 8005b3a:	0112      	lsls	r2, r2, #4
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	4921      	ldr	r1, [pc, #132]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	610b      	str	r3, [r1, #16]
 8005b44:	e014      	b.n	8005b70 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b46:	4b1f      	ldr	r3, [pc, #124]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6892      	ldr	r2, [r2, #8]
 8005b52:	0211      	lsls	r1, r2, #8
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6952      	ldr	r2, [r2, #20]
 8005b58:	0852      	lsrs	r2, r2, #1
 8005b5a:	3a01      	subs	r2, #1
 8005b5c:	0652      	lsls	r2, r2, #25
 8005b5e:	4311      	orrs	r1, r2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6852      	ldr	r2, [r2, #4]
 8005b64:	3a01      	subs	r2, #1
 8005b66:	0112      	lsls	r2, r2, #4
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	4916      	ldr	r1, [pc, #88]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b70:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fc fe2e 	bl	80027dc <HAL_GetTick>
 8005b80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b82:	e009      	b.n	8005b98 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b84:	f7fc fe2a 	bl	80027dc <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d902      	bls.n	8005b98 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	73fb      	strb	r3, [r7, #15]
          break;
 8005b96:	e005      	b.n	8005ba4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0ef      	beq.n	8005b84 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	4904      	ldr	r1, [pc, #16]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	07ff800f 	.word	0x07ff800f
 8005bcc:	ff9f800f 	.word	0xff9f800f
 8005bd0:	f9ff800f 	.word	0xf9ff800f

08005bd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005be2:	4b72      	ldr	r3, [pc, #456]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00e      	beq.n	8005c0c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005bee:	4b6f      	ldr	r3, [pc, #444]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0203 	and.w	r2, r3, #3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d103      	bne.n	8005c06 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
       ||
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d142      	bne.n	8005c8c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	73fb      	strb	r3, [r7, #15]
 8005c0a:	e03f      	b.n	8005c8c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d018      	beq.n	8005c46 <RCCEx_PLLSAI2_Config+0x72>
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d825      	bhi.n	8005c64 <RCCEx_PLLSAI2_Config+0x90>
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d002      	beq.n	8005c22 <RCCEx_PLLSAI2_Config+0x4e>
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d009      	beq.n	8005c34 <RCCEx_PLLSAI2_Config+0x60>
 8005c20:	e020      	b.n	8005c64 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c22:	4b62      	ldr	r3, [pc, #392]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d11d      	bne.n	8005c6a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c32:	e01a      	b.n	8005c6a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c34:	4b5d      	ldr	r3, [pc, #372]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d116      	bne.n	8005c6e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c44:	e013      	b.n	8005c6e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c46:	4b59      	ldr	r3, [pc, #356]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10f      	bne.n	8005c72 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c52:	4b56      	ldr	r3, [pc, #344]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c62:	e006      	b.n	8005c72 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
      break;
 8005c68:	e004      	b.n	8005c74 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c72:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d108      	bne.n	8005c8c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005c7a:	4b4c      	ldr	r3, [pc, #304]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f023 0203 	bic.w	r2, r3, #3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4949      	ldr	r1, [pc, #292]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f040 8086 	bne.w	8005da0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c94:	4b45      	ldr	r3, [pc, #276]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a44      	ldr	r2, [pc, #272]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fc fd9c 	bl	80027dc <HAL_GetTick>
 8005ca4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ca6:	e009      	b.n	8005cbc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ca8:	f7fc fd98 	bl	80027dc <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d902      	bls.n	8005cbc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cba:	e005      	b.n	8005cc8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cbc:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1ef      	bne.n	8005ca8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d168      	bne.n	8005da0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d113      	bne.n	8005cfc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cd4:	4b35      	ldr	r3, [pc, #212]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cd6:	695a      	ldr	r2, [r3, #20]
 8005cd8:	4b35      	ldr	r3, [pc, #212]	; (8005db0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6892      	ldr	r2, [r2, #8]
 8005ce0:	0211      	lsls	r1, r2, #8
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68d2      	ldr	r2, [r2, #12]
 8005ce6:	06d2      	lsls	r2, r2, #27
 8005ce8:	4311      	orrs	r1, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6852      	ldr	r2, [r2, #4]
 8005cee:	3a01      	subs	r2, #1
 8005cf0:	0112      	lsls	r2, r2, #4
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	492d      	ldr	r1, [pc, #180]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	614b      	str	r3, [r1, #20]
 8005cfa:	e02d      	b.n	8005d58 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d115      	bne.n	8005d2e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d02:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	4b2b      	ldr	r3, [pc, #172]	; (8005db4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6892      	ldr	r2, [r2, #8]
 8005d0e:	0211      	lsls	r1, r2, #8
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6912      	ldr	r2, [r2, #16]
 8005d14:	0852      	lsrs	r2, r2, #1
 8005d16:	3a01      	subs	r2, #1
 8005d18:	0552      	lsls	r2, r2, #21
 8005d1a:	4311      	orrs	r1, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6852      	ldr	r2, [r2, #4]
 8005d20:	3a01      	subs	r2, #1
 8005d22:	0112      	lsls	r2, r2, #4
 8005d24:	430a      	orrs	r2, r1
 8005d26:	4921      	ldr	r1, [pc, #132]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	614b      	str	r3, [r1, #20]
 8005d2c:	e014      	b.n	8005d58 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d2e:	4b1f      	ldr	r3, [pc, #124]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6892      	ldr	r2, [r2, #8]
 8005d3a:	0211      	lsls	r1, r2, #8
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6952      	ldr	r2, [r2, #20]
 8005d40:	0852      	lsrs	r2, r2, #1
 8005d42:	3a01      	subs	r2, #1
 8005d44:	0652      	lsls	r2, r2, #25
 8005d46:	4311      	orrs	r1, r2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6852      	ldr	r2, [r2, #4]
 8005d4c:	3a01      	subs	r2, #1
 8005d4e:	0112      	lsls	r2, r2, #4
 8005d50:	430a      	orrs	r2, r1
 8005d52:	4916      	ldr	r1, [pc, #88]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d58:	4b14      	ldr	r3, [pc, #80]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a13      	ldr	r2, [pc, #76]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d64:	f7fc fd3a 	bl	80027dc <HAL_GetTick>
 8005d68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d6a:	e009      	b.n	8005d80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d6c:	f7fc fd36 	bl	80027dc <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d902      	bls.n	8005d80 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	73fb      	strb	r3, [r7, #15]
          break;
 8005d7e:	e005      	b.n	8005d8c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0ef      	beq.n	8005d6c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d92:	4b06      	ldr	r3, [pc, #24]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	4904      	ldr	r1, [pc, #16]	; (8005dac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40021000 	.word	0x40021000
 8005db0:	07ff800f 	.word	0x07ff800f
 8005db4:	ff9f800f 	.word	0xff9f800f
 8005db8:	f9ff800f 	.word	0xf9ff800f

08005dbc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d07f      	beq.n	8005ece <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fc fb5c 	bl	80024a0 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005dee:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	22ca      	movs	r2, #202	; 0xca
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2253      	movs	r2, #83	; 0x53
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f9b5 	bl	8006178 <RTC_EnterInitMode>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d15a      	bne.n	8005ece <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e2a:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6999      	ldr	r1, [r3, #24]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6912      	ldr	r2, [r2, #16]
 8005e52:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6919      	ldr	r1, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	041a      	lsls	r2, r3, #16
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <HAL_RTC_Init+0x11c>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	4917      	ldr	r1, [pc, #92]	; (8005ed8 <HAL_RTC_Init+0x11c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f9af 	bl	80061e4 <RTC_ExitInitMode>
 8005e86:	4603      	mov	r3, r0
 8005e88:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11e      	bne.n	8005ece <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005e9e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6999      	ldr	r1, [r3, #24]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	22ff      	movs	r2, #255	; 0xff
 8005ec4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40002800 	.word	0x40002800

08005edc <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RTC_SetTime+0x1a>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e08b      	b.n	800600e <HAL_RTC_SetTime+0x132>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	22ca      	movs	r2, #202	; 0xca
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2253      	movs	r2, #83	; 0x53
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f92e 	bl	8006178 <RTC_EnterInitMode>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005f20:	7cfb      	ldrb	r3, [r7, #19]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d15e      	bne.n	8005fe4 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005f26:	4b3c      	ldr	r3, [pc, #240]	; (8006018 <HAL_RTC_SetTime+0x13c>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f32:	d057      	beq.n	8005fe4 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d125      	bne.n	8005f86 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005f3a:	4b37      	ldr	r3, [pc, #220]	; (8006018 <HAL_RTC_SetTime+0x13c>)
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 f985 	bl	8006260 <RTC_ByteToBcd2>
 8005f56:	4603      	mov	r3, r0
 8005f58:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f97e 	bl	8006260 <RTC_ByteToBcd2>
 8005f64:	4603      	mov	r3, r0
 8005f66:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f68:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	789b      	ldrb	r3, [r3, #2]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 f976 	bl	8006260 <RTC_ByteToBcd2>
 8005f74:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f76:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	78db      	ldrb	r3, [r3, #3]
 8005f7e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	e017      	b.n	8005fb6 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005f86:	4b24      	ldr	r3, [pc, #144]	; (8006018 <HAL_RTC_SetTime+0x13c>)
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2200      	movs	r2, #0
 8005f96:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005fa4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005faa:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	78db      	ldrb	r3, [r3, #3]
 8005fb0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005fb6:	4a18      	ldr	r2, [pc, #96]	; (8006018 <HAL_RTC_SetTime+0x13c>)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005fbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fc2:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005fc4:	4b14      	ldr	r3, [pc, #80]	; (8006018 <HAL_RTC_SetTime+0x13c>)
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	4a13      	ldr	r2, [pc, #76]	; (8006018 <HAL_RTC_SetTime+0x13c>)
 8005fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fce:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005fd0:	4b11      	ldr	r3, [pc, #68]	; (8006018 <HAL_RTC_SetTime+0x13c>)
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	68d9      	ldr	r1, [r3, #12]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	490e      	ldr	r1, [pc, #56]	; (8006018 <HAL_RTC_SetTime+0x13c>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f8fd 	bl	80061e4 <RTC_ExitInitMode>
 8005fea:	4603      	mov	r3, r0
 8005fec:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	22ff      	movs	r2, #255	; 0xff
 8005ff4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005ff6:	7cfb      	ldrb	r3, [r7, #19]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d103      	bne.n	8006004 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800600c:	7cfb      	ldrb	r3, [r7, #19]
}
 800600e:	4618      	mov	r0, r3
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	bd90      	pop	{r4, r7, pc}
 8006016:	bf00      	nop
 8006018:	40002800 	.word	0x40002800

0800601c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_RTC_SetDate+0x1a>
 8006032:	2302      	movs	r3, #2
 8006034:	e074      	b.n	8006120 <HAL_RTC_SetDate+0x104>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2202      	movs	r2, #2
 8006042:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10e      	bne.n	800606a <HAL_RTC_SetDate+0x4e>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	f023 0310 	bic.w	r3, r3, #16
 8006060:	b2db      	uxtb	r3, r3
 8006062:	330a      	adds	r3, #10
 8006064:	b2da      	uxtb	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d11c      	bne.n	80060aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	78db      	ldrb	r3, [r3, #3]
 8006074:	4618      	mov	r0, r3
 8006076:	f000 f8f3 	bl	8006260 <RTC_ByteToBcd2>
 800607a:	4603      	mov	r3, r0
 800607c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f8ec 	bl	8006260 <RTC_ByteToBcd2>
 8006088:	4603      	mov	r3, r0
 800608a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800608c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	789b      	ldrb	r3, [r3, #2]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 f8e4 	bl	8006260 <RTC_ByteToBcd2>
 8006098:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800609a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	e00e      	b.n	80060c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	78db      	ldrb	r3, [r3, #3]
 80060ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	785b      	ldrb	r3, [r3, #1]
 80060b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80060b6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80060bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	22ca      	movs	r2, #202	; 0xca
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2253      	movs	r2, #83	; 0x53
 80060d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 f84d 	bl	8006178 <RTC_EnterInitMode>
 80060de:	4603      	mov	r3, r0
 80060e0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80060e2:	7cfb      	ldrb	r3, [r7, #19]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80060e8:	4a0f      	ldr	r2, [pc, #60]	; (8006128 <HAL_RTC_SetDate+0x10c>)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f874 	bl	80061e4 <RTC_ExitInitMode>
 80060fc:	4603      	mov	r3, r0
 80060fe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	22ff      	movs	r2, #255	; 0xff
 8006106:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800611e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006120:	4618      	mov	r0, r3
 8006122:	371c      	adds	r7, #28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd90      	pop	{r4, r7, pc}
 8006128:	40002800 	.word	0x40002800

0800612c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006142:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8006144:	f7fc fb4a 	bl	80027dc <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800614a:	e009      	b.n	8006160 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800614c:	f7fc fb46 	bl	80027dc <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800615a:	d901      	bls.n	8006160 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e007      	b.n	8006170 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ee      	beq.n	800614c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d123      	bne.n	80061da <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061a2:	f7fc fb1b 	bl	80027dc <HAL_GetTick>
 80061a6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80061a8:	e00d      	b.n	80061c6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80061aa:	f7fc fb17 	bl	80027dc <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b8:	d905      	bls.n	80061c6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2203      	movs	r2, #3
 80061c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <RTC_EnterInitMode+0x62>
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d1e7      	bne.n	80061aa <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80061da:	7bfb      	ldrb	r3, [r7, #15]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80061f0:	4b1a      	ldr	r3, [pc, #104]	; (800625c <RTC_ExitInitMode+0x78>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <RTC_ExitInitMode+0x78>)
 80061f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fa:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80061fc:	4b17      	ldr	r3, [pc, #92]	; (800625c <RTC_ExitInitMode+0x78>)
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10c      	bne.n	8006222 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff ff8f 	bl	800612c <HAL_RTC_WaitForSynchro>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01e      	beq.n	8006252 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2203      	movs	r2, #3
 8006218:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	73fb      	strb	r3, [r7, #15]
 8006220:	e017      	b.n	8006252 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006222:	4b0e      	ldr	r3, [pc, #56]	; (800625c <RTC_ExitInitMode+0x78>)
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	4a0d      	ldr	r2, [pc, #52]	; (800625c <RTC_ExitInitMode+0x78>)
 8006228:	f023 0320 	bic.w	r3, r3, #32
 800622c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff ff7c 	bl	800612c <HAL_RTC_WaitForSynchro>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2203      	movs	r2, #3
 800623e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006246:	4b05      	ldr	r3, [pc, #20]	; (800625c <RTC_ExitInitMode+0x78>)
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	4a04      	ldr	r2, [pc, #16]	; (800625c <RTC_ExitInitMode+0x78>)
 800624c:	f043 0320 	orr.w	r3, r3, #32
 8006250:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006252:	7bfb      	ldrb	r3, [r7, #15]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40002800 	.word	0x40002800

08006260 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006272:	e005      	b.n	8006280 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3301      	adds	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800627a:	7afb      	ldrb	r3, [r7, #11]
 800627c:	3b0a      	subs	r3, #10
 800627e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006280:	7afb      	ldrb	r3, [r7, #11]
 8006282:	2b09      	cmp	r3, #9
 8006284:	d8f6      	bhi.n	8006274 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	b2da      	uxtb	r2, r3
 800628e:	7afb      	ldrb	r3, [r7, #11]
 8006290:	4313      	orrs	r3, r2
 8006292:	b2db      	uxtb	r3, r3
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e095      	b.n	80063de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d108      	bne.n	80062cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c2:	d009      	beq.n	80062d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	61da      	str	r2, [r3, #28]
 80062ca:	e005      	b.n	80062d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fc f912 	bl	800251c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800630e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006318:	d902      	bls.n	8006320 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e002      	b.n	8006326 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006324:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800632e:	d007      	beq.n	8006340 <HAL_SPI_Init+0xa0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006338:	d002      	beq.n	8006340 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	ea42 0103 	orr.w	r1, r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	0c1b      	lsrs	r3, r3, #16
 800639c:	f003 0204 	and.w	r2, r3, #4
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063bc:	ea42 0103 	orr.w	r1, r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b088      	sub	sp, #32
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	603b      	str	r3, [r7, #0]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_SPI_Transmit+0x22>
 8006404:	2302      	movs	r3, #2
 8006406:	e158      	b.n	80066ba <HAL_SPI_Transmit+0x2d4>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006410:	f7fc f9e4 	bl	80027dc <HAL_GetTick>
 8006414:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	d002      	beq.n	800642c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006426:	2302      	movs	r3, #2
 8006428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800642a:	e13d      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_SPI_Transmit+0x52>
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800643c:	e134      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2203      	movs	r2, #3
 8006442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006488:	d10f      	bne.n	80064aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d007      	beq.n	80064c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064d0:	d94b      	bls.n	800656a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_SPI_Transmit+0xfa>
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d13e      	bne.n	800655e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	881a      	ldrh	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006504:	e02b      	b.n	800655e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d112      	bne.n	800653a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	881a      	ldrh	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	1c9a      	adds	r2, r3, #2
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006538:	e011      	b.n	800655e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800653a:	f7fc f94f 	bl	80027dc <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d803      	bhi.n	8006552 <HAL_SPI_Transmit+0x16c>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d102      	bne.n	8006558 <HAL_SPI_Transmit+0x172>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800655c:	e0a4      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ce      	bne.n	8006506 <HAL_SPI_Transmit+0x120>
 8006568:	e07c      	b.n	8006664 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_SPI_Transmit+0x192>
 8006572:	8afb      	ldrh	r3, [r7, #22]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d170      	bne.n	800665a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	d912      	bls.n	80065a8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	881a      	ldrh	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	1c9a      	adds	r2, r3, #2
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b02      	subs	r3, #2
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065a6:	e058      	b.n	800665a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	7812      	ldrb	r2, [r2, #0]
 80065b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80065ce:	e044      	b.n	800665a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d12b      	bne.n	8006636 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d912      	bls.n	800660e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	881a      	ldrh	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	1c9a      	adds	r2, r3, #2
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b02      	subs	r3, #2
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800660c:	e025      	b.n	800665a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006634:	e011      	b.n	800665a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006636:	f7fc f8d1 	bl	80027dc <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d803      	bhi.n	800664e <HAL_SPI_Transmit+0x268>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d102      	bne.n	8006654 <HAL_SPI_Transmit+0x26e>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006658:	e026      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1b5      	bne.n	80065d0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fce3 	bl	8007034 <SPI_EndRxTxTransaction>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006682:	2300      	movs	r3, #0
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e000      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80066a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b088      	sub	sp, #32
 80066c6:	af02      	add	r7, sp, #8
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066de:	d112      	bne.n	8006706 <HAL_SPI_Receive+0x44>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10e      	bne.n	8006706 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2204      	movs	r2, #4
 80066ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066f0:	88fa      	ldrh	r2, [r7, #6]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	4613      	mov	r3, r2
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f910 	bl	8006922 <HAL_SPI_TransmitReceive>
 8006702:	4603      	mov	r3, r0
 8006704:	e109      	b.n	800691a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_SPI_Receive+0x52>
 8006710:	2302      	movs	r3, #2
 8006712:	e102      	b.n	800691a <HAL_SPI_Receive+0x258>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800671c:	f7fc f85e 	bl	80027dc <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b01      	cmp	r3, #1
 800672c:	d002      	beq.n	8006734 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800672e:	2302      	movs	r3, #2
 8006730:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006732:	e0e9      	b.n	8006908 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_SPI_Receive+0x7e>
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006744:	e0e0      	b.n	8006908 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2204      	movs	r2, #4
 800674a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	88fa      	ldrh	r2, [r7, #6]
 800675e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	88fa      	ldrh	r2, [r7, #6]
 8006766:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006790:	d908      	bls.n	80067a4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	e007      	b.n	80067b4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067b2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067bc:	d10f      	bne.n	80067de <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	d007      	beq.n	80067fc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006804:	d867      	bhi.n	80068d6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006806:	e030      	b.n	800686a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d117      	bne.n	8006846 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f103 020c 	add.w	r2, r3, #12
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	7812      	ldrb	r2, [r2, #0]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006838:	b29b      	uxth	r3, r3
 800683a:	3b01      	subs	r3, #1
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006844:	e011      	b.n	800686a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006846:	f7fb ffc9 	bl	80027dc <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d803      	bhi.n	800685e <HAL_SPI_Receive+0x19c>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685c:	d102      	bne.n	8006864 <HAL_SPI_Receive+0x1a2>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006868:	e04e      	b.n	8006908 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1c8      	bne.n	8006808 <HAL_SPI_Receive+0x146>
 8006876:	e034      	b.n	80068e2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b01      	cmp	r3, #1
 8006884:	d115      	bne.n	80068b2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	b292      	uxth	r2, r2
 8006892:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	1c9a      	adds	r2, r3, #2
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80068b0:	e011      	b.n	80068d6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068b2:	f7fb ff93 	bl	80027dc <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d803      	bhi.n	80068ca <HAL_SPI_Receive+0x208>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d102      	bne.n	80068d0 <HAL_SPI_Receive+0x20e>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068d4:	e018      	b.n	8006908 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1ca      	bne.n	8006878 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fb4c 	bl	8006f84 <SPI_EndRxTransaction>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	75fb      	strb	r3, [r7, #23]
 8006904:	e000      	b.n	8006908 <HAL_SPI_Receive+0x246>
  }

error :
 8006906:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006918:	7dfb      	ldrb	r3, [r7, #23]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b08a      	sub	sp, #40	; 0x28
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	607a      	str	r2, [r7, #4]
 800692e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006930:	2301      	movs	r3, #1
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x26>
 8006944:	2302      	movs	r3, #2
 8006946:	e1fb      	b.n	8006d40 <HAL_SPI_TransmitReceive+0x41e>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006950:	f7fb ff44 	bl	80027dc <HAL_GetTick>
 8006954:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800695c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006964:	887b      	ldrh	r3, [r7, #2]
 8006966:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006968:	887b      	ldrh	r3, [r7, #2]
 800696a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800696c:	7efb      	ldrb	r3, [r7, #27]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d00e      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x6e>
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006978:	d106      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x66>
 8006982:	7efb      	ldrb	r3, [r7, #27]
 8006984:	2b04      	cmp	r3, #4
 8006986:	d003      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006988:	2302      	movs	r3, #2
 800698a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800698e:	e1cd      	b.n	8006d2c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0x80>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0x80>
 800699c:	887b      	ldrh	r3, [r7, #2]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80069a8:	e1c0      	b.n	8006d2c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d003      	beq.n	80069be <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2205      	movs	r2, #5
 80069ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	887a      	ldrh	r2, [r7, #2]
 80069ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	887a      	ldrh	r2, [r7, #2]
 80069d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	887a      	ldrh	r2, [r7, #2]
 80069e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	887a      	ldrh	r2, [r7, #2]
 80069ea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a00:	d802      	bhi.n	8006a08 <HAL_SPI_TransmitReceive+0xe6>
 8006a02:	8a3b      	ldrh	r3, [r7, #16]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d908      	bls.n	8006a1a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a16:	605a      	str	r2, [r3, #4]
 8006a18:	e007      	b.n	8006a2a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a28:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b40      	cmp	r3, #64	; 0x40
 8006a36:	d007      	beq.n	8006a48 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a50:	d97c      	bls.n	8006b4c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_SPI_TransmitReceive+0x13e>
 8006a5a:	8a7b      	ldrh	r3, [r7, #18]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d169      	bne.n	8006b34 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	881a      	ldrh	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	1c9a      	adds	r2, r3, #2
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a84:	e056      	b.n	8006b34 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d11b      	bne.n	8006acc <HAL_SPI_TransmitReceive+0x1aa>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d016      	beq.n	8006acc <HAL_SPI_TransmitReceive+0x1aa>
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d113      	bne.n	8006acc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d11c      	bne.n	8006b14 <HAL_SPI_TransmitReceive+0x1f2>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d016      	beq.n	8006b14 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	b292      	uxth	r2, r2
 8006af2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	1c9a      	adds	r2, r3, #2
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b10:	2301      	movs	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b14:	f7fb fe62 	bl	80027dc <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d807      	bhi.n	8006b34 <HAL_SPI_TransmitReceive+0x212>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d003      	beq.n	8006b34 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006b32:	e0fb      	b.n	8006d2c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1a3      	bne.n	8006a86 <HAL_SPI_TransmitReceive+0x164>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d19d      	bne.n	8006a86 <HAL_SPI_TransmitReceive+0x164>
 8006b4a:	e0df      	b.n	8006d0c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_SPI_TransmitReceive+0x23a>
 8006b54:	8a7b      	ldrh	r3, [r7, #18]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	f040 80cb 	bne.w	8006cf2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d912      	bls.n	8006b8c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	881a      	ldrh	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	1c9a      	adds	r2, r3, #2
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b02      	subs	r3, #2
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b8a:	e0b2      	b.n	8006cf2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	7812      	ldrb	r2, [r2, #0]
 8006b98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb2:	e09e      	b.n	8006cf2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d134      	bne.n	8006c2c <HAL_SPI_TransmitReceive+0x30a>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d02f      	beq.n	8006c2c <HAL_SPI_TransmitReceive+0x30a>
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d12c      	bne.n	8006c2c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d912      	bls.n	8006c02 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	881a      	ldrh	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	1c9a      	adds	r2, r3, #2
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b02      	subs	r3, #2
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c00:	e012      	b.n	8006c28 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d148      	bne.n	8006ccc <HAL_SPI_TransmitReceive+0x3aa>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d042      	beq.n	8006ccc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d923      	bls.n	8006c9a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	b292      	uxth	r2, r2
 8006c5e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	1c9a      	adds	r2, r3, #2
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b02      	subs	r3, #2
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d81f      	bhi.n	8006cc8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c96:	605a      	str	r2, [r3, #4]
 8006c98:	e016      	b.n	8006cc8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f103 020c 	add.w	r2, r3, #12
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ccc:	f7fb fd86 	bl	80027dc <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d803      	bhi.n	8006ce4 <HAL_SPI_TransmitReceive+0x3c2>
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce2:	d102      	bne.n	8006cea <HAL_SPI_TransmitReceive+0x3c8>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006cf0:	e01c      	b.n	8006d2c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f47f af5b 	bne.w	8006bb4 <HAL_SPI_TransmitReceive+0x292>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f47f af54 	bne.w	8006bb4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f98f 	bl	8007034 <SPI_EndRxTxTransaction>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d006      	beq.n	8006d2a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	661a      	str	r2, [r3, #96]	; 0x60
 8006d28:	e000      	b.n	8006d2c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006d2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3728      	adds	r7, #40	; 0x28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d58:	f7fb fd40 	bl	80027dc <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	4413      	add	r3, r2
 8006d66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d68:	f7fb fd38 	bl	80027dc <HAL_GetTick>
 8006d6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d6e:	4b39      	ldr	r3, [pc, #228]	; (8006e54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	015b      	lsls	r3, r3, #5
 8006d74:	0d1b      	lsrs	r3, r3, #20
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	fb02 f303 	mul.w	r3, r2, r3
 8006d7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d7e:	e054      	b.n	8006e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d050      	beq.n	8006e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d88:	f7fb fd28 	bl	80027dc <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d902      	bls.n	8006d9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d13d      	bne.n	8006e1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006db6:	d111      	bne.n	8006ddc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc0:	d004      	beq.n	8006dcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dca:	d107      	bne.n	8006ddc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de4:	d10f      	bne.n	8006e06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e017      	b.n	8006e4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4013      	ands	r3, r2
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	bf0c      	ite	eq
 8006e3a:	2301      	moveq	r3, #1
 8006e3c:	2300      	movne	r3, #0
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	461a      	mov	r2, r3
 8006e42:	79fb      	ldrb	r3, [r7, #7]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d19b      	bne.n	8006d80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000000 	.word	0x20000000

08006e58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08a      	sub	sp, #40	; 0x28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e6a:	f7fb fcb7 	bl	80027dc <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	4413      	add	r3, r2
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006e7a:	f7fb fcaf 	bl	80027dc <HAL_GetTick>
 8006e7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	330c      	adds	r3, #12
 8006e86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e88:	4b3d      	ldr	r3, [pc, #244]	; (8006f80 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	00da      	lsls	r2, r3, #3
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	0d1b      	lsrs	r3, r3, #20
 8006e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9a:	fb02 f303 	mul.w	r3, r2, r3
 8006e9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ea0:	e060      	b.n	8006f64 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ea8:	d107      	bne.n	8006eba <SPI_WaitFifoStateUntilTimeout+0x62>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d050      	beq.n	8006f64 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ec2:	f7fb fc8b 	bl	80027dc <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d902      	bls.n	8006ed8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d13d      	bne.n	8006f54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ee6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ef0:	d111      	bne.n	8006f16 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006efa:	d004      	beq.n	8006f06 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f04:	d107      	bne.n	8006f16 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1e:	d10f      	bne.n	8006f40 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e010      	b.n	8006f76 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d196      	bne.n	8006ea2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3728      	adds	r7, #40	; 0x28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000000 	.word	0x20000000

08006f84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f98:	d111      	bne.n	8006fbe <SPI_EndRxTransaction+0x3a>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa2:	d004      	beq.n	8006fae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fac:	d107      	bne.n	8006fbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fbc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2180      	movs	r1, #128	; 0x80
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff febd 	bl	8006d48 <SPI_WaitFlagStateUntilTimeout>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd8:	f043 0220 	orr.w	r2, r3, #32
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e023      	b.n	800702c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fec:	d11d      	bne.n	800702a <SPI_EndRxTransaction+0xa6>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff6:	d004      	beq.n	8007002 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007000:	d113      	bne.n	800702a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2200      	movs	r2, #0
 800700a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff ff22 	bl	8006e58 <SPI_WaitFifoStateUntilTimeout>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800701e:	f043 0220 	orr.w	r2, r3, #32
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e000      	b.n	800702c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af02      	add	r7, sp, #8
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2200      	movs	r2, #0
 8007048:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff ff03 	bl	8006e58 <SPI_WaitFifoStateUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800705c:	f043 0220 	orr.w	r2, r3, #32
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e027      	b.n	80070b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2200      	movs	r2, #0
 8007070:	2180      	movs	r1, #128	; 0x80
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff fe68 	bl	8006d48 <SPI_WaitFlagStateUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e014      	b.n	80070b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2200      	movs	r2, #0
 8007096:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff fedc 	bl	8006e58 <SPI_WaitFifoStateUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070aa:	f043 0220 	orr.w	r2, r3, #32
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e000      	b.n	80070b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e049      	b.n	8007166 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fb fa5a 	bl	80025a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3304      	adds	r3, #4
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f000 f9ee 	bl	80074e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b01      	cmp	r3, #1
 8007182:	d001      	beq.n	8007188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e04f      	b.n	8007228 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a23      	ldr	r2, [pc, #140]	; (8007234 <HAL_TIM_Base_Start_IT+0xc4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01d      	beq.n	80071e6 <HAL_TIM_Base_Start_IT+0x76>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b2:	d018      	beq.n	80071e6 <HAL_TIM_Base_Start_IT+0x76>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1f      	ldr	r2, [pc, #124]	; (8007238 <HAL_TIM_Base_Start_IT+0xc8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d013      	beq.n	80071e6 <HAL_TIM_Base_Start_IT+0x76>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1e      	ldr	r2, [pc, #120]	; (800723c <HAL_TIM_Base_Start_IT+0xcc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00e      	beq.n	80071e6 <HAL_TIM_Base_Start_IT+0x76>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1c      	ldr	r2, [pc, #112]	; (8007240 <HAL_TIM_Base_Start_IT+0xd0>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d009      	beq.n	80071e6 <HAL_TIM_Base_Start_IT+0x76>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <HAL_TIM_Base_Start_IT+0xd4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d004      	beq.n	80071e6 <HAL_TIM_Base_Start_IT+0x76>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a19      	ldr	r2, [pc, #100]	; (8007248 <HAL_TIM_Base_Start_IT+0xd8>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d115      	bne.n	8007212 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	4b17      	ldr	r3, [pc, #92]	; (800724c <HAL_TIM_Base_Start_IT+0xdc>)
 80071ee:	4013      	ands	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b06      	cmp	r3, #6
 80071f6:	d015      	beq.n	8007224 <HAL_TIM_Base_Start_IT+0xb4>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071fe:	d011      	beq.n	8007224 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007210:	e008      	b.n	8007224 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 0201 	orr.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e000      	b.n	8007226 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007224:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	40012c00 	.word	0x40012c00
 8007238:	40000400 	.word	0x40000400
 800723c:	40000800 	.word	0x40000800
 8007240:	40000c00 	.word	0x40000c00
 8007244:	40013400 	.word	0x40013400
 8007248:	40014000 	.word	0x40014000
 800724c:	00010007 	.word	0x00010007

08007250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b02      	cmp	r3, #2
 8007264:	d122      	bne.n	80072ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b02      	cmp	r3, #2
 8007272:	d11b      	bne.n	80072ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f06f 0202 	mvn.w	r2, #2
 800727c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f905 	bl	80074a2 <HAL_TIM_IC_CaptureCallback>
 8007298:	e005      	b.n	80072a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f8f7 	bl	800748e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f908 	bl	80074b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f003 0304 	and.w	r3, r3, #4
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d122      	bne.n	8007300 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d11b      	bne.n	8007300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f06f 0204 	mvn.w	r2, #4
 80072d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f8db 	bl	80074a2 <HAL_TIM_IC_CaptureCallback>
 80072ec:	e005      	b.n	80072fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f8cd 	bl	800748e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f8de 	bl	80074b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b08      	cmp	r3, #8
 800730c:	d122      	bne.n	8007354 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f003 0308 	and.w	r3, r3, #8
 8007318:	2b08      	cmp	r3, #8
 800731a:	d11b      	bne.n	8007354 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f06f 0208 	mvn.w	r2, #8
 8007324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2204      	movs	r2, #4
 800732a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f8b1 	bl	80074a2 <HAL_TIM_IC_CaptureCallback>
 8007340:	e005      	b.n	800734e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f8a3 	bl	800748e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f8b4 	bl	80074b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0310 	and.w	r3, r3, #16
 800735e:	2b10      	cmp	r3, #16
 8007360:	d122      	bne.n	80073a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b10      	cmp	r3, #16
 800736e:	d11b      	bne.n	80073a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f06f 0210 	mvn.w	r2, #16
 8007378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2208      	movs	r2, #8
 800737e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f887 	bl	80074a2 <HAL_TIM_IC_CaptureCallback>
 8007394:	e005      	b.n	80073a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f879 	bl	800748e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f88a 	bl	80074b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d10e      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d107      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f06f 0201 	mvn.w	r2, #1
 80073cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fa ff42 	bl	8002258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073de:	2b80      	cmp	r3, #128	; 0x80
 80073e0:	d10e      	bne.n	8007400 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ec:	2b80      	cmp	r3, #128	; 0x80
 80073ee:	d107      	bne.n	8007400 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f914 	bl	8007628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800740e:	d10e      	bne.n	800742e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741a:	2b80      	cmp	r3, #128	; 0x80
 800741c:	d107      	bne.n	800742e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f907 	bl	800763c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d10e      	bne.n	800745a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d107      	bne.n	800745a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f838 	bl	80074ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b20      	cmp	r3, #32
 8007466:	d10e      	bne.n	8007486 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b20      	cmp	r3, #32
 8007474:	d107      	bne.n	8007486 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f06f 0220 	mvn.w	r2, #32
 800747e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f8c7 	bl	8007614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a40      	ldr	r2, [pc, #256]	; (80075f4 <TIM_Base_SetConfig+0x114>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d013      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fe:	d00f      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a3d      	ldr	r2, [pc, #244]	; (80075f8 <TIM_Base_SetConfig+0x118>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00b      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a3c      	ldr	r2, [pc, #240]	; (80075fc <TIM_Base_SetConfig+0x11c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d007      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a3b      	ldr	r2, [pc, #236]	; (8007600 <TIM_Base_SetConfig+0x120>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a3a      	ldr	r2, [pc, #232]	; (8007604 <TIM_Base_SetConfig+0x124>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d108      	bne.n	8007532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2f      	ldr	r2, [pc, #188]	; (80075f4 <TIM_Base_SetConfig+0x114>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d01f      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007540:	d01b      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a2c      	ldr	r2, [pc, #176]	; (80075f8 <TIM_Base_SetConfig+0x118>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d017      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a2b      	ldr	r2, [pc, #172]	; (80075fc <TIM_Base_SetConfig+0x11c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d013      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a2a      	ldr	r2, [pc, #168]	; (8007600 <TIM_Base_SetConfig+0x120>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00f      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a29      	ldr	r2, [pc, #164]	; (8007604 <TIM_Base_SetConfig+0x124>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00b      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a28      	ldr	r2, [pc, #160]	; (8007608 <TIM_Base_SetConfig+0x128>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d007      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a27      	ldr	r2, [pc, #156]	; (800760c <TIM_Base_SetConfig+0x12c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d003      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a26      	ldr	r2, [pc, #152]	; (8007610 <TIM_Base_SetConfig+0x130>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d108      	bne.n	800758c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a10      	ldr	r2, [pc, #64]	; (80075f4 <TIM_Base_SetConfig+0x114>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00f      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a12      	ldr	r2, [pc, #72]	; (8007604 <TIM_Base_SetConfig+0x124>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00b      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a11      	ldr	r2, [pc, #68]	; (8007608 <TIM_Base_SetConfig+0x128>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d007      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a10      	ldr	r2, [pc, #64]	; (800760c <TIM_Base_SetConfig+0x12c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a0f      	ldr	r2, [pc, #60]	; (8007610 <TIM_Base_SetConfig+0x130>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d103      	bne.n	80075e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	615a      	str	r2, [r3, #20]
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40013400 	.word	0x40013400
 8007608:	40014000 	.word	0x40014000
 800760c:	40014400 	.word	0x40014400
 8007610:	40014800 	.word	0x40014800

08007614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <__NVIC_SetPriority>:
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	6039      	str	r1, [r7, #0]
 800765a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800765c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007660:	2b00      	cmp	r3, #0
 8007662:	db0a      	blt.n	800767a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	b2da      	uxtb	r2, r3
 8007668:	490c      	ldr	r1, [pc, #48]	; (800769c <__NVIC_SetPriority+0x4c>)
 800766a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800766e:	0112      	lsls	r2, r2, #4
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	440b      	add	r3, r1
 8007674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007678:	e00a      	b.n	8007690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	b2da      	uxtb	r2, r3
 800767e:	4908      	ldr	r1, [pc, #32]	; (80076a0 <__NVIC_SetPriority+0x50>)
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	3b04      	subs	r3, #4
 8007688:	0112      	lsls	r2, r2, #4
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	440b      	add	r3, r1
 800768e:	761a      	strb	r2, [r3, #24]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	e000e100 	.word	0xe000e100
 80076a0:	e000ed00 	.word	0xe000ed00

080076a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80076a8:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <SysTick_Handler+0x1c>)
 80076aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80076ac:	f002 f936 	bl	800991c <xTaskGetSchedulerState>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d001      	beq.n	80076ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80076b6:	f000 fd97 	bl	80081e8 <xPortSysTickHandler>
  }
}
 80076ba:	bf00      	nop
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	e000e010 	.word	0xe000e010

080076c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80076c8:	2100      	movs	r1, #0
 80076ca:	f06f 0004 	mvn.w	r0, #4
 80076ce:	f7ff ffbf 	bl	8007650 <__NVIC_SetPriority>
#endif
}
 80076d2:	bf00      	nop
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076de:	f3ef 8305 	mrs	r3, IPSR
 80076e2:	603b      	str	r3, [r7, #0]
  return(result);
 80076e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076ea:	f06f 0305 	mvn.w	r3, #5
 80076ee:	607b      	str	r3, [r7, #4]
 80076f0:	e00c      	b.n	800770c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076f2:	4b0a      	ldr	r3, [pc, #40]	; (800771c <osKernelInitialize+0x44>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076fa:	4b08      	ldr	r3, [pc, #32]	; (800771c <osKernelInitialize+0x44>)
 80076fc:	2201      	movs	r2, #1
 80076fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007700:	2300      	movs	r3, #0
 8007702:	607b      	str	r3, [r7, #4]
 8007704:	e002      	b.n	800770c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007706:	f04f 33ff 	mov.w	r3, #4294967295
 800770a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800770c:	687b      	ldr	r3, [r7, #4]
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	20000220 	.word	0x20000220

08007720 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007726:	f3ef 8305 	mrs	r3, IPSR
 800772a:	603b      	str	r3, [r7, #0]
  return(result);
 800772c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007732:	f06f 0305 	mvn.w	r3, #5
 8007736:	607b      	str	r3, [r7, #4]
 8007738:	e010      	b.n	800775c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800773a:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <osKernelStart+0x48>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d109      	bne.n	8007756 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007742:	f7ff ffbf 	bl	80076c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007746:	4b08      	ldr	r3, [pc, #32]	; (8007768 <osKernelStart+0x48>)
 8007748:	2202      	movs	r2, #2
 800774a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800774c:	f001 fc9e 	bl	800908c <vTaskStartScheduler>
      stat = osOK;
 8007750:	2300      	movs	r3, #0
 8007752:	607b      	str	r3, [r7, #4]
 8007754:	e002      	b.n	800775c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007756:	f04f 33ff 	mov.w	r3, #4294967295
 800775a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800775c:	687b      	ldr	r3, [r7, #4]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000220 	.word	0x20000220

0800776c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800776c:	b580      	push	{r7, lr}
 800776e:	b08e      	sub	sp, #56	; 0x38
 8007770:	af04      	add	r7, sp, #16
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800777c:	f3ef 8305 	mrs	r3, IPSR
 8007780:	617b      	str	r3, [r7, #20]
  return(result);
 8007782:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007784:	2b00      	cmp	r3, #0
 8007786:	d17e      	bne.n	8007886 <osThreadNew+0x11a>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d07b      	beq.n	8007886 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800778e:	2380      	movs	r3, #128	; 0x80
 8007790:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007792:	2318      	movs	r3, #24
 8007794:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800779a:	f04f 33ff 	mov.w	r3, #4294967295
 800779e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d045      	beq.n	8007832 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <osThreadNew+0x48>
        name = attr->name;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d008      	beq.n	80077da <osThreadNew+0x6e>
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	2b38      	cmp	r3, #56	; 0x38
 80077cc:	d805      	bhi.n	80077da <osThreadNew+0x6e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <osThreadNew+0x72>
        return (NULL);
 80077da:	2300      	movs	r3, #0
 80077dc:	e054      	b.n	8007888 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	089b      	lsrs	r3, r3, #2
 80077ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00e      	beq.n	8007814 <osThreadNew+0xa8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	2b5b      	cmp	r3, #91	; 0x5b
 80077fc:	d90a      	bls.n	8007814 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007802:	2b00      	cmp	r3, #0
 8007804:	d006      	beq.n	8007814 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <osThreadNew+0xa8>
        mem = 1;
 800780e:	2301      	movs	r3, #1
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	e010      	b.n	8007836 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10c      	bne.n	8007836 <osThreadNew+0xca>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d108      	bne.n	8007836 <osThreadNew+0xca>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d104      	bne.n	8007836 <osThreadNew+0xca>
          mem = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	e001      	b.n	8007836 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d110      	bne.n	800785e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007844:	9202      	str	r2, [sp, #8]
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	6a3a      	ldr	r2, [r7, #32]
 8007850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f001 fa44 	bl	8008ce0 <xTaskCreateStatic>
 8007858:	4603      	mov	r3, r0
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	e013      	b.n	8007886 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d110      	bne.n	8007886 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	b29a      	uxth	r2, r3
 8007868:	f107 0310 	add.w	r3, r7, #16
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f001 fa8f 	bl	8008d9a <xTaskCreate>
 800787c:	4603      	mov	r3, r0
 800787e:	2b01      	cmp	r3, #1
 8007880:	d001      	beq.n	8007886 <osThreadNew+0x11a>
            hTask = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007886:	693b      	ldr	r3, [r7, #16]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3728      	adds	r7, #40	; 0x28
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007898:	f3ef 8305 	mrs	r3, IPSR
 800789c:	60bb      	str	r3, [r7, #8]
  return(result);
 800789e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <osDelay+0x1c>
    stat = osErrorISR;
 80078a4:	f06f 0305 	mvn.w	r3, #5
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	e007      	b.n	80078bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 fbb4 	bl	8009024 <vTaskDelay>
    }
  }

  return (stat);
 80078bc:	68fb      	ldr	r3, [r7, #12]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4a07      	ldr	r2, [pc, #28]	; (80078f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80078d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	4a06      	ldr	r2, [pc, #24]	; (80078f8 <vApplicationGetIdleTaskMemory+0x30>)
 80078de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2280      	movs	r2, #128	; 0x80
 80078e4:	601a      	str	r2, [r3, #0]
}
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20000224 	.word	0x20000224
 80078f8:	20000280 	.word	0x20000280

080078fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4a07      	ldr	r2, [pc, #28]	; (8007928 <vApplicationGetTimerTaskMemory+0x2c>)
 800790c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	4a06      	ldr	r2, [pc, #24]	; (800792c <vApplicationGetTimerTaskMemory+0x30>)
 8007912:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800791a:	601a      	str	r2, [r3, #0]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	20000480 	.word	0x20000480
 800792c:	200004dc 	.word	0x200004dc

08007930 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08a      	sub	sp, #40	; 0x28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007938:	2300      	movs	r3, #0
 800793a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800793c:	f001 fc0c 	bl	8009158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007940:	4b5b      	ldr	r3, [pc, #364]	; (8007ab0 <pvPortMalloc+0x180>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007948:	f000 f920 	bl	8007b8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800794c:	4b59      	ldr	r3, [pc, #356]	; (8007ab4 <pvPortMalloc+0x184>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4013      	ands	r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 8093 	bne.w	8007a80 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01d      	beq.n	800799c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007960:	2208      	movs	r2, #8
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4413      	add	r3, r2
 8007966:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b00      	cmp	r3, #0
 8007970:	d014      	beq.n	800799c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f023 0307 	bic.w	r3, r3, #7
 8007978:	3308      	adds	r3, #8
 800797a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d06e      	beq.n	8007a80 <pvPortMalloc+0x150>
 80079a2:	4b45      	ldr	r3, [pc, #276]	; (8007ab8 <pvPortMalloc+0x188>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d869      	bhi.n	8007a80 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079ac:	4b43      	ldr	r3, [pc, #268]	; (8007abc <pvPortMalloc+0x18c>)
 80079ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079b0:	4b42      	ldr	r3, [pc, #264]	; (8007abc <pvPortMalloc+0x18c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079b6:	e004      	b.n	80079c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d903      	bls.n	80079d4 <pvPortMalloc+0xa4>
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f1      	bne.n	80079b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079d4:	4b36      	ldr	r3, [pc, #216]	; (8007ab0 <pvPortMalloc+0x180>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079da:	429a      	cmp	r2, r3
 80079dc:	d050      	beq.n	8007a80 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2208      	movs	r2, #8
 80079e4:	4413      	add	r3, r2
 80079e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	1ad2      	subs	r2, r2, r3
 80079f8:	2308      	movs	r3, #8
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d91f      	bls.n	8007a40 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <pvPortMalloc+0xf8>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	613b      	str	r3, [r7, #16]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	1ad2      	subs	r2, r2, r3
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a3a:	69b8      	ldr	r0, [r7, #24]
 8007a3c:	f000 f908 	bl	8007c50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a40:	4b1d      	ldr	r3, [pc, #116]	; (8007ab8 <pvPortMalloc+0x188>)
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	4a1b      	ldr	r2, [pc, #108]	; (8007ab8 <pvPortMalloc+0x188>)
 8007a4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a4e:	4b1a      	ldr	r3, [pc, #104]	; (8007ab8 <pvPortMalloc+0x188>)
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4b1b      	ldr	r3, [pc, #108]	; (8007ac0 <pvPortMalloc+0x190>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d203      	bcs.n	8007a62 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a5a:	4b17      	ldr	r3, [pc, #92]	; (8007ab8 <pvPortMalloc+0x188>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a18      	ldr	r2, [pc, #96]	; (8007ac0 <pvPortMalloc+0x190>)
 8007a60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	4b13      	ldr	r3, [pc, #76]	; (8007ab4 <pvPortMalloc+0x184>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a76:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <pvPortMalloc+0x194>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <pvPortMalloc+0x194>)
 8007a7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a80:	f001 fb78 	bl	8009174 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <pvPortMalloc+0x174>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	60fb      	str	r3, [r7, #12]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <pvPortMalloc+0x172>
	return pvReturn;
 8007aa4:	69fb      	ldr	r3, [r7, #28]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3728      	adds	r7, #40	; 0x28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	2000149c 	.word	0x2000149c
 8007ab4:	200014b0 	.word	0x200014b0
 8007ab8:	200014a0 	.word	0x200014a0
 8007abc:	20001494 	.word	0x20001494
 8007ac0:	200014a4 	.word	0x200014a4
 8007ac4:	200014a8 	.word	0x200014a8

08007ac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d04d      	beq.n	8007b76 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ada:	2308      	movs	r3, #8
 8007adc:	425b      	negs	r3, r3
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	4b24      	ldr	r3, [pc, #144]	; (8007b80 <vPortFree+0xb8>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4013      	ands	r3, r2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <vPortFree+0x44>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	60fb      	str	r3, [r7, #12]
}
 8007b08:	bf00      	nop
 8007b0a:	e7fe      	b.n	8007b0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <vPortFree+0x62>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	60bb      	str	r3, [r7, #8]
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	4b14      	ldr	r3, [pc, #80]	; (8007b80 <vPortFree+0xb8>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4013      	ands	r3, r2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01e      	beq.n	8007b76 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11a      	bne.n	8007b76 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <vPortFree+0xb8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	43db      	mvns	r3, r3
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b50:	f001 fb02 	bl	8009158 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <vPortFree+0xbc>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <vPortFree+0xbc>)
 8007b60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b62:	6938      	ldr	r0, [r7, #16]
 8007b64:	f000 f874 	bl	8007c50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b68:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <vPortFree+0xc0>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	4a06      	ldr	r2, [pc, #24]	; (8007b88 <vPortFree+0xc0>)
 8007b70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b72:	f001 faff 	bl	8009174 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b76:	bf00      	nop
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	200014b0 	.word	0x200014b0
 8007b84:	200014a0 	.word	0x200014a0
 8007b88:	200014ac 	.word	0x200014ac

08007b8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b92:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007b96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b98:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <prvHeapInit+0xac>)
 8007b9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00c      	beq.n	8007bc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3307      	adds	r3, #7
 8007baa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0307 	bic.w	r3, r3, #7
 8007bb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	4a1f      	ldr	r2, [pc, #124]	; (8007c38 <prvHeapInit+0xac>)
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bc4:	4a1d      	ldr	r2, [pc, #116]	; (8007c3c <prvHeapInit+0xb0>)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bca:	4b1c      	ldr	r3, [pc, #112]	; (8007c3c <prvHeapInit+0xb0>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bd8:	2208      	movs	r2, #8
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0307 	bic.w	r3, r3, #7
 8007be6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a15      	ldr	r2, [pc, #84]	; (8007c40 <prvHeapInit+0xb4>)
 8007bec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bee:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <prvHeapInit+0xb4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bf6:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <prvHeapInit+0xb4>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	1ad2      	subs	r2, r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c0c:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <prvHeapInit+0xb4>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4a0a      	ldr	r2, [pc, #40]	; (8007c44 <prvHeapInit+0xb8>)
 8007c1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	4a09      	ldr	r2, [pc, #36]	; (8007c48 <prvHeapInit+0xbc>)
 8007c22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c24:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <prvHeapInit+0xc0>)
 8007c26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c2a:	601a      	str	r2, [r3, #0]
}
 8007c2c:	bf00      	nop
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	200008dc 	.word	0x200008dc
 8007c3c:	20001494 	.word	0x20001494
 8007c40:	2000149c 	.word	0x2000149c
 8007c44:	200014a4 	.word	0x200014a4
 8007c48:	200014a0 	.word	0x200014a0
 8007c4c:	200014b0 	.word	0x200014b0

08007c50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c58:	4b28      	ldr	r3, [pc, #160]	; (8007cfc <prvInsertBlockIntoFreeList+0xac>)
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	e002      	b.n	8007c64 <prvInsertBlockIntoFreeList+0x14>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d8f7      	bhi.n	8007c5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4413      	add	r3, r2
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d108      	bne.n	8007c92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	441a      	add	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	441a      	add	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d118      	bne.n	8007cd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <prvInsertBlockIntoFreeList+0xb0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d00d      	beq.n	8007cce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	441a      	add	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	e008      	b.n	8007ce0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cce:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <prvInsertBlockIntoFreeList+0xb0>)
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	e003      	b.n	8007ce0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d002      	beq.n	8007cee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	20001494 	.word	0x20001494
 8007d00:	2000149c 	.word	0x2000149c

08007d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f103 0208 	add.w	r2, r3, #8
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f103 0208 	add.w	r2, r3, #8
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f103 0208 	add.w	r2, r3, #8
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	601a      	str	r2, [r3, #0]
}
 8007d9a:	bf00      	nop
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbc:	d103      	bne.n	8007dc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	e00c      	b.n	8007de0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3308      	adds	r3, #8
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	e002      	b.n	8007dd4 <vListInsert+0x2e>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d2f6      	bcs.n	8007dce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	601a      	str	r2, [r3, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6892      	ldr	r2, [r2, #8]
 8007e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6852      	ldr	r2, [r2, #4]
 8007e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d103      	bne.n	8007e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	1e5a      	subs	r2, r3, #1
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3b04      	subs	r3, #4
 8007e7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3b04      	subs	r3, #4
 8007e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f023 0201 	bic.w	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3b04      	subs	r3, #4
 8007e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e9c:	4a0c      	ldr	r2, [pc, #48]	; (8007ed0 <pxPortInitialiseStack+0x64>)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3b14      	subs	r3, #20
 8007ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3b04      	subs	r3, #4
 8007eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f06f 0202 	mvn.w	r2, #2
 8007eba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3b20      	subs	r3, #32
 8007ec0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	08007ed5 	.word	0x08007ed5

08007ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ede:	4b12      	ldr	r3, [pc, #72]	; (8007f28 <prvTaskExitError+0x54>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d00a      	beq.n	8007efe <prvTaskExitError+0x2a>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	60fb      	str	r3, [r7, #12]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <prvTaskExitError+0x28>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	60bb      	str	r3, [r7, #8]
}
 8007f10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f12:	bf00      	nop
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0fc      	beq.n	8007f14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	2000000c 	.word	0x2000000c
 8007f2c:	00000000 	.word	0x00000000

08007f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <pxCurrentTCBConst2>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	f380 8809 	msr	PSP, r0
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8811 	msr	BASEPRI, r0
 8007f4a:	4770      	bx	lr
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst2>:
 8007f50:	200014bc 	.word	0x200014bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f58:	4808      	ldr	r0, [pc, #32]	; (8007f7c <prvPortStartFirstTask+0x24>)
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f380 8808 	msr	MSP, r0
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8814 	msr	CONTROL, r0
 8007f6a:	b662      	cpsie	i
 8007f6c:	b661      	cpsie	f
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	df00      	svc	0
 8007f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f7a:	bf00      	nop
 8007f7c:	e000ed08 	.word	0xe000ed08

08007f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f86:	4b46      	ldr	r3, [pc, #280]	; (80080a0 <xPortStartScheduler+0x120>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a46      	ldr	r2, [pc, #280]	; (80080a4 <xPortStartScheduler+0x124>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10a      	bne.n	8007fa6 <xPortStartScheduler+0x26>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	613b      	str	r3, [r7, #16]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fa6:	4b3e      	ldr	r3, [pc, #248]	; (80080a0 <xPortStartScheduler+0x120>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a3f      	ldr	r2, [pc, #252]	; (80080a8 <xPortStartScheduler+0x128>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d10a      	bne.n	8007fc6 <xPortStartScheduler+0x46>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	60fb      	str	r3, [r7, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fc6:	4b39      	ldr	r3, [pc, #228]	; (80080ac <xPortStartScheduler+0x12c>)
 8007fc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	22ff      	movs	r2, #255	; 0xff
 8007fd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	4b31      	ldr	r3, [pc, #196]	; (80080b0 <xPortStartScheduler+0x130>)
 8007fec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fee:	4b31      	ldr	r3, [pc, #196]	; (80080b4 <xPortStartScheduler+0x134>)
 8007ff0:	2207      	movs	r2, #7
 8007ff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ff4:	e009      	b.n	800800a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ff6:	4b2f      	ldr	r3, [pc, #188]	; (80080b4 <xPortStartScheduler+0x134>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	4a2d      	ldr	r2, [pc, #180]	; (80080b4 <xPortStartScheduler+0x134>)
 8007ffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	b2db      	uxtb	r3, r3
 8008008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	b2db      	uxtb	r3, r3
 800800e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008012:	2b80      	cmp	r3, #128	; 0x80
 8008014:	d0ef      	beq.n	8007ff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008016:	4b27      	ldr	r3, [pc, #156]	; (80080b4 <xPortStartScheduler+0x134>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f1c3 0307 	rsb	r3, r3, #7
 800801e:	2b04      	cmp	r3, #4
 8008020:	d00a      	beq.n	8008038 <xPortStartScheduler+0xb8>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	60bb      	str	r3, [r7, #8]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008038:	4b1e      	ldr	r3, [pc, #120]	; (80080b4 <xPortStartScheduler+0x134>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	4a1d      	ldr	r2, [pc, #116]	; (80080b4 <xPortStartScheduler+0x134>)
 8008040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008042:	4b1c      	ldr	r3, [pc, #112]	; (80080b4 <xPortStartScheduler+0x134>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800804a:	4a1a      	ldr	r2, [pc, #104]	; (80080b4 <xPortStartScheduler+0x134>)
 800804c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	b2da      	uxtb	r2, r3
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008056:	4b18      	ldr	r3, [pc, #96]	; (80080b8 <xPortStartScheduler+0x138>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a17      	ldr	r2, [pc, #92]	; (80080b8 <xPortStartScheduler+0x138>)
 800805c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008062:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <xPortStartScheduler+0x138>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a14      	ldr	r2, [pc, #80]	; (80080b8 <xPortStartScheduler+0x138>)
 8008068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800806c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800806e:	f000 f8dd 	bl	800822c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008072:	4b12      	ldr	r3, [pc, #72]	; (80080bc <xPortStartScheduler+0x13c>)
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008078:	f000 f8fc 	bl	8008274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <xPortStartScheduler+0x140>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a0f      	ldr	r2, [pc, #60]	; (80080c0 <xPortStartScheduler+0x140>)
 8008082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008088:	f7ff ff66 	bl	8007f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800808c:	f001 f9da 	bl	8009444 <vTaskSwitchContext>
	prvTaskExitError();
 8008090:	f7ff ff20 	bl	8007ed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	e000ed00 	.word	0xe000ed00
 80080a4:	410fc271 	.word	0x410fc271
 80080a8:	410fc270 	.word	0x410fc270
 80080ac:	e000e400 	.word	0xe000e400
 80080b0:	200014b4 	.word	0x200014b4
 80080b4:	200014b8 	.word	0x200014b8
 80080b8:	e000ed20 	.word	0xe000ed20
 80080bc:	2000000c 	.word	0x2000000c
 80080c0:	e000ef34 	.word	0xe000ef34

080080c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	607b      	str	r3, [r7, #4]
}
 80080dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080de:	4b0f      	ldr	r3, [pc, #60]	; (800811c <vPortEnterCritical+0x58>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	4a0d      	ldr	r2, [pc, #52]	; (800811c <vPortEnterCritical+0x58>)
 80080e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080e8:	4b0c      	ldr	r3, [pc, #48]	; (800811c <vPortEnterCritical+0x58>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d10f      	bne.n	8008110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <vPortEnterCritical+0x5c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <vPortEnterCritical+0x4c>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	603b      	str	r3, [r7, #0]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <vPortEnterCritical+0x4a>
	}
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	2000000c 	.word	0x2000000c
 8008120:	e000ed04 	.word	0xe000ed04

08008124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800812a:	4b12      	ldr	r3, [pc, #72]	; (8008174 <vPortExitCritical+0x50>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <vPortExitCritical+0x24>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	607b      	str	r3, [r7, #4]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008148:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <vPortExitCritical+0x50>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3b01      	subs	r3, #1
 800814e:	4a09      	ldr	r2, [pc, #36]	; (8008174 <vPortExitCritical+0x50>)
 8008150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008152:	4b08      	ldr	r3, [pc, #32]	; (8008174 <vPortExitCritical+0x50>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <vPortExitCritical+0x42>
 800815a:	2300      	movs	r3, #0
 800815c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	2000000c 	.word	0x2000000c
	...

08008180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008180:	f3ef 8009 	mrs	r0, PSP
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <pxCurrentTCBConst>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	f01e 0f10 	tst.w	lr, #16
 8008190:	bf08      	it	eq
 8008192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	6010      	str	r0, [r2, #0]
 800819c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081a4:	f380 8811 	msr	BASEPRI, r0
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f001 f948 	bl	8009444 <vTaskSwitchContext>
 80081b4:	f04f 0000 	mov.w	r0, #0
 80081b8:	f380 8811 	msr	BASEPRI, r0
 80081bc:	bc09      	pop	{r0, r3}
 80081be:	6819      	ldr	r1, [r3, #0]
 80081c0:	6808      	ldr	r0, [r1, #0]
 80081c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c6:	f01e 0f10 	tst.w	lr, #16
 80081ca:	bf08      	it	eq
 80081cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081d0:	f380 8809 	msr	PSP, r0
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	f3af 8000 	nop.w

080081e0 <pxCurrentTCBConst>:
 80081e0:	200014bc 	.word	0x200014bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	607b      	str	r3, [r7, #4]
}
 8008200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008202:	f001 f865 	bl	80092d0 <xTaskIncrementTick>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800820c:	4b06      	ldr	r3, [pc, #24]	; (8008228 <xPortSysTickHandler+0x40>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	2300      	movs	r3, #0
 8008216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f383 8811 	msr	BASEPRI, r3
}
 800821e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008230:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008236:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <vPortSetupTimerInterrupt+0x38>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <vPortSetupTimerInterrupt+0x3c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a0a      	ldr	r2, [pc, #40]	; (800826c <vPortSetupTimerInterrupt+0x40>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	099b      	lsrs	r3, r3, #6
 8008248:	4a09      	ldr	r2, [pc, #36]	; (8008270 <vPortSetupTimerInterrupt+0x44>)
 800824a:	3b01      	subs	r3, #1
 800824c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800824e:	4b04      	ldr	r3, [pc, #16]	; (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008250:	2207      	movs	r2, #7
 8008252:	601a      	str	r2, [r3, #0]
}
 8008254:	bf00      	nop
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	e000e010 	.word	0xe000e010
 8008264:	e000e018 	.word	0xe000e018
 8008268:	20000000 	.word	0x20000000
 800826c:	10624dd3 	.word	0x10624dd3
 8008270:	e000e014 	.word	0xe000e014

08008274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008284 <vPortEnableVFP+0x10>
 8008278:	6801      	ldr	r1, [r0, #0]
 800827a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800827e:	6001      	str	r1, [r0, #0]
 8008280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008282:	bf00      	nop
 8008284:	e000ed88 	.word	0xe000ed88

08008288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800828e:	f3ef 8305 	mrs	r3, IPSR
 8008292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b0f      	cmp	r3, #15
 8008298:	d914      	bls.n	80082c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800829a:	4a17      	ldr	r2, [pc, #92]	; (80082f8 <vPortValidateInterruptPriority+0x70>)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082a4:	4b15      	ldr	r3, [pc, #84]	; (80082fc <vPortValidateInterruptPriority+0x74>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	7afa      	ldrb	r2, [r7, #11]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d20a      	bcs.n	80082c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082c4:	4b0e      	ldr	r3, [pc, #56]	; (8008300 <vPortValidateInterruptPriority+0x78>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082cc:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <vPortValidateInterruptPriority+0x7c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d90a      	bls.n	80082ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	603b      	str	r3, [r7, #0]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <vPortValidateInterruptPriority+0x60>
	}
 80082ea:	bf00      	nop
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	e000e3f0 	.word	0xe000e3f0
 80082fc:	200014b4 	.word	0x200014b4
 8008300:	e000ed0c 	.word	0xe000ed0c
 8008304:	200014b8 	.word	0x200014b8

08008308 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <xQueueGenericReset+0x2a>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	60bb      	str	r3, [r7, #8]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008332:	f7ff fec7 	bl	80080c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833e:	68f9      	ldr	r1, [r7, #12]
 8008340:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008342:	fb01 f303 	mul.w	r3, r1, r3
 8008346:	441a      	add	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008362:	3b01      	subs	r3, #1
 8008364:	68f9      	ldr	r1, [r7, #12]
 8008366:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	441a      	add	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	22ff      	movs	r2, #255	; 0xff
 8008376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	22ff      	movs	r2, #255	; 0xff
 800837e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d114      	bne.n	80083b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01a      	beq.n	80083c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3310      	adds	r3, #16
 8008394:	4618      	mov	r0, r3
 8008396:	f001 f903 	bl	80095a0 <xTaskRemoveFromEventList>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d012      	beq.n	80083c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083a0:	4b0c      	ldr	r3, [pc, #48]	; (80083d4 <xQueueGenericReset+0xcc>)
 80083a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	e009      	b.n	80083c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3310      	adds	r3, #16
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff fca4 	bl	8007d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3324      	adds	r3, #36	; 0x24
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff fc9f 	bl	8007d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083c6:	f7ff fead 	bl	8008124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083ca:	2301      	movs	r3, #1
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	e000ed04 	.word	0xe000ed04

080083d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08e      	sub	sp, #56	; 0x38
 80083dc:	af02      	add	r7, sp, #8
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10a      	bne.n	8008402 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083fe:	bf00      	nop
 8008400:	e7fe      	b.n	8008400 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10a      	bne.n	800841e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
}
 800841a:	bf00      	nop
 800841c:	e7fe      	b.n	800841c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <xQueueGenericCreateStatic+0x52>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <xQueueGenericCreateStatic+0x56>
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <xQueueGenericCreateStatic+0x58>
 800842e:	2300      	movs	r3, #0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	623b      	str	r3, [r7, #32]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d102      	bne.n	8008456 <xQueueGenericCreateStatic+0x7e>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <xQueueGenericCreateStatic+0x82>
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <xQueueGenericCreateStatic+0x84>
 800845a:	2300      	movs	r3, #0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	61fb      	str	r3, [r7, #28]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008476:	2350      	movs	r3, #80	; 0x50
 8008478:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2b50      	cmp	r3, #80	; 0x50
 800847e:	d00a      	beq.n	8008496 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	61bb      	str	r3, [r7, #24]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008496:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00d      	beq.n	80084be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80084ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	4613      	mov	r3, r2
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	68b9      	ldr	r1, [r7, #8]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 f805 	bl	80084c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3730      	adds	r7, #48	; 0x30
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d103      	bne.n	80084e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e002      	b.n	80084ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084f6:	2101      	movs	r1, #1
 80084f8:	69b8      	ldr	r0, [r7, #24]
 80084fa:	f7ff ff05 	bl	8008308 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	78fa      	ldrb	r2, [r7, #3]
 8008502:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08e      	sub	sp, #56	; 0x38
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800851e:	2300      	movs	r3, #0
 8008520:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xQueueGenericSend+0x32>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d103      	bne.n	8008550 <xQueueGenericSend+0x40>
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <xQueueGenericSend+0x44>
 8008550:	2301      	movs	r3, #1
 8008552:	e000      	b.n	8008556 <xQueueGenericSend+0x46>
 8008554:	2300      	movs	r3, #0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <xQueueGenericSend+0x60>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d103      	bne.n	800857e <xQueueGenericSend+0x6e>
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <xQueueGenericSend+0x72>
 800857e:	2301      	movs	r3, #1
 8008580:	e000      	b.n	8008584 <xQueueGenericSend+0x74>
 8008582:	2300      	movs	r3, #0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <xQueueGenericSend+0x8e>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	623b      	str	r3, [r7, #32]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800859e:	f001 f9bd 	bl	800991c <xTaskGetSchedulerState>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <xQueueGenericSend+0x9e>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <xQueueGenericSend+0xa2>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <xQueueGenericSend+0xa4>
 80085b2:	2300      	movs	r3, #0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10a      	bne.n	80085ce <xQueueGenericSend+0xbe>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	61fb      	str	r3, [r7, #28]
}
 80085ca:	bf00      	nop
 80085cc:	e7fe      	b.n	80085cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085ce:	f7ff fd79 	bl	80080c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085da:	429a      	cmp	r2, r3
 80085dc:	d302      	bcc.n	80085e4 <xQueueGenericSend+0xd4>
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d129      	bne.n	8008638 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	68b9      	ldr	r1, [r7, #8]
 80085e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ea:	f000 fa0b 	bl	8008a04 <prvCopyDataToQueue>
 80085ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d010      	beq.n	800861a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	3324      	adds	r3, #36	; 0x24
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 ffcf 	bl	80095a0 <xTaskRemoveFromEventList>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d013      	beq.n	8008630 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008608:	4b3f      	ldr	r3, [pc, #252]	; (8008708 <xQueueGenericSend+0x1f8>)
 800860a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	e00a      	b.n	8008630 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	2b00      	cmp	r3, #0
 800861e:	d007      	beq.n	8008630 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008620:	4b39      	ldr	r3, [pc, #228]	; (8008708 <xQueueGenericSend+0x1f8>)
 8008622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008630:	f7ff fd78 	bl	8008124 <vPortExitCritical>
				return pdPASS;
 8008634:	2301      	movs	r3, #1
 8008636:	e063      	b.n	8008700 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d103      	bne.n	8008646 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800863e:	f7ff fd71 	bl	8008124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008642:	2300      	movs	r3, #0
 8008644:	e05c      	b.n	8008700 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	2b00      	cmp	r3, #0
 800864a:	d106      	bne.n	800865a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800864c:	f107 0314 	add.w	r3, r7, #20
 8008650:	4618      	mov	r0, r3
 8008652:	f001 f809 	bl	8009668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008656:	2301      	movs	r3, #1
 8008658:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800865a:	f7ff fd63 	bl	8008124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800865e:	f000 fd7b 	bl	8009158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008662:	f7ff fd2f 	bl	80080c4 <vPortEnterCritical>
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800866c:	b25b      	sxtb	r3, r3
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d103      	bne.n	800867c <xQueueGenericSend+0x16c>
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008682:	b25b      	sxtb	r3, r3
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008688:	d103      	bne.n	8008692 <xQueueGenericSend+0x182>
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008692:	f7ff fd47 	bl	8008124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008696:	1d3a      	adds	r2, r7, #4
 8008698:	f107 0314 	add.w	r3, r7, #20
 800869c:	4611      	mov	r1, r2
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 fff8 	bl	8009694 <xTaskCheckForTimeOut>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d124      	bne.n	80086f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086ac:	f000 faa2 	bl	8008bf4 <prvIsQueueFull>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d018      	beq.n	80086e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	3310      	adds	r3, #16
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 ff1e 	bl	8009500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086c6:	f000 fa2d 	bl	8008b24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086ca:	f000 fd53 	bl	8009174 <xTaskResumeAll>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f47f af7c 	bne.w	80085ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80086d6:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <xQueueGenericSend+0x1f8>)
 80086d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	e772      	b.n	80085ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086ea:	f000 fa1b 	bl	8008b24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086ee:	f000 fd41 	bl	8009174 <xTaskResumeAll>
 80086f2:	e76c      	b.n	80085ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086f6:	f000 fa15 	bl	8008b24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086fa:	f000 fd3b 	bl	8009174 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008700:	4618      	mov	r0, r3
 8008702:	3738      	adds	r7, #56	; 0x38
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	e000ed04 	.word	0xe000ed04

0800870c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b090      	sub	sp, #64	; 0x40
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d103      	bne.n	8008748 <xQueueGenericSendFromISR+0x3c>
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <xQueueGenericSendFromISR+0x40>
 8008748:	2301      	movs	r3, #1
 800874a:	e000      	b.n	800874e <xQueueGenericSendFromISR+0x42>
 800874c:	2300      	movs	r3, #0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008764:	bf00      	nop
 8008766:	e7fe      	b.n	8008766 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d103      	bne.n	8008776 <xQueueGenericSendFromISR+0x6a>
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008772:	2b01      	cmp	r3, #1
 8008774:	d101      	bne.n	800877a <xQueueGenericSendFromISR+0x6e>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <xQueueGenericSendFromISR+0x70>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	623b      	str	r3, [r7, #32]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008796:	f7ff fd77 	bl	8008288 <vPortValidateInterruptPriority>
	__asm volatile
 800879a:	f3ef 8211 	mrs	r2, BASEPRI
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	61fa      	str	r2, [r7, #28]
 80087b0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80087b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087be:	429a      	cmp	r2, r3
 80087c0:	d302      	bcc.n	80087c8 <xQueueGenericSendFromISR+0xbc>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d12f      	bne.n	8008828 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	68b9      	ldr	r1, [r7, #8]
 80087dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087de:	f000 f911 	bl	8008a04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80087e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ea:	d112      	bne.n	8008812 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d016      	beq.n	8008822 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	3324      	adds	r3, #36	; 0x24
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fed1 	bl	80095a0 <xTaskRemoveFromEventList>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00e      	beq.n	8008822 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00b      	beq.n	8008822 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e007      	b.n	8008822 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008812:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008816:	3301      	adds	r3, #1
 8008818:	b2db      	uxtb	r3, r3
 800881a:	b25a      	sxtb	r2, r3
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008822:	2301      	movs	r3, #1
 8008824:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008826:	e001      	b.n	800882c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f383 8811 	msr	BASEPRI, r3
}
 8008836:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800883a:	4618      	mov	r0, r3
 800883c:	3740      	adds	r7, #64	; 0x40
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08c      	sub	sp, #48	; 0x30
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008850:	2300      	movs	r3, #0
 8008852:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10a      	bne.n	8008874 <xQueueReceive+0x30>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	623b      	str	r3, [r7, #32]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d103      	bne.n	8008882 <xQueueReceive+0x3e>
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <xQueueReceive+0x42>
 8008882:	2301      	movs	r3, #1
 8008884:	e000      	b.n	8008888 <xQueueReceive+0x44>
 8008886:	2300      	movs	r3, #0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <xQueueReceive+0x5e>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	61fb      	str	r3, [r7, #28]
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088a2:	f001 f83b 	bl	800991c <xTaskGetSchedulerState>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <xQueueReceive+0x6e>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <xQueueReceive+0x72>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e000      	b.n	80088b8 <xQueueReceive+0x74>
 80088b6:	2300      	movs	r3, #0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10a      	bne.n	80088d2 <xQueueReceive+0x8e>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	61bb      	str	r3, [r7, #24]
}
 80088ce:	bf00      	nop
 80088d0:	e7fe      	b.n	80088d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088d2:	f7ff fbf7 	bl	80080c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d01f      	beq.n	8008922 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088e6:	f000 f8f7 	bl	8008ad8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	1e5a      	subs	r2, r3, #1
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00f      	beq.n	800891a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	3310      	adds	r3, #16
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fe4e 	bl	80095a0 <xTaskRemoveFromEventList>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d007      	beq.n	800891a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800890a:	4b3d      	ldr	r3, [pc, #244]	; (8008a00 <xQueueReceive+0x1bc>)
 800890c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800891a:	f7ff fc03 	bl	8008124 <vPortExitCritical>
				return pdPASS;
 800891e:	2301      	movs	r3, #1
 8008920:	e069      	b.n	80089f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d103      	bne.n	8008930 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008928:	f7ff fbfc 	bl	8008124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800892c:	2300      	movs	r3, #0
 800892e:	e062      	b.n	80089f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008936:	f107 0310 	add.w	r3, r7, #16
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fe94 	bl	8009668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008940:	2301      	movs	r3, #1
 8008942:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008944:	f7ff fbee 	bl	8008124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008948:	f000 fc06 	bl	8009158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800894c:	f7ff fbba 	bl	80080c4 <vPortEnterCritical>
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008956:	b25b      	sxtb	r3, r3
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d103      	bne.n	8008966 <xQueueReceive+0x122>
 800895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800896c:	b25b      	sxtb	r3, r3
 800896e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008972:	d103      	bne.n	800897c <xQueueReceive+0x138>
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	2200      	movs	r2, #0
 8008978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800897c:	f7ff fbd2 	bl	8008124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008980:	1d3a      	adds	r2, r7, #4
 8008982:	f107 0310 	add.w	r3, r7, #16
 8008986:	4611      	mov	r1, r2
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fe83 	bl	8009694 <xTaskCheckForTimeOut>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d123      	bne.n	80089dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008996:	f000 f917 	bl	8008bc8 <prvIsQueueEmpty>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d017      	beq.n	80089d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	3324      	adds	r3, #36	; 0x24
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4611      	mov	r1, r2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fda9 	bl	8009500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089b0:	f000 f8b8 	bl	8008b24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089b4:	f000 fbde 	bl	8009174 <xTaskResumeAll>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d189      	bne.n	80088d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80089be:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <xQueueReceive+0x1bc>)
 80089c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	e780      	b.n	80088d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089d2:	f000 f8a7 	bl	8008b24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089d6:	f000 fbcd 	bl	8009174 <xTaskResumeAll>
 80089da:	e77a      	b.n	80088d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089de:	f000 f8a1 	bl	8008b24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089e2:	f000 fbc7 	bl	8009174 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089e8:	f000 f8ee 	bl	8008bc8 <prvIsQueueEmpty>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f43f af6f 	beq.w	80088d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3730      	adds	r7, #48	; 0x30
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	e000ed04 	.word	0xe000ed04

08008a04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10d      	bne.n	8008a3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d14d      	bne.n	8008ac6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 ff92 	bl	8009958 <xTaskPriorityDisinherit>
 8008a34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	609a      	str	r2, [r3, #8]
 8008a3c:	e043      	b.n	8008ac6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d119      	bne.n	8008a78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6858      	ldr	r0, [r3, #4]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	f001 fbb6 	bl	800a1c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	441a      	add	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d32b      	bcc.n	8008ac6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	605a      	str	r2, [r3, #4]
 8008a76:	e026      	b.n	8008ac6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68d8      	ldr	r0, [r3, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a80:	461a      	mov	r2, r3
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	f001 fb9c 	bl	800a1c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	425b      	negs	r3, r3
 8008a92:	441a      	add	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d207      	bcs.n	8008ab4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	425b      	negs	r3, r3
 8008aae:	441a      	add	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d105      	bne.n	8008ac6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ace:	697b      	ldr	r3, [r7, #20]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d018      	beq.n	8008b1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	441a      	add	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d303      	bcc.n	8008b0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68d9      	ldr	r1, [r3, #12]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	461a      	mov	r2, r3
 8008b16:	6838      	ldr	r0, [r7, #0]
 8008b18:	f001 fb52 	bl	800a1c0 <memcpy>
	}
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b2c:	f7ff faca 	bl	80080c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b38:	e011      	b.n	8008b5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d012      	beq.n	8008b68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3324      	adds	r3, #36	; 0x24
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fd2a 	bl	80095a0 <xTaskRemoveFromEventList>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b52:	f000 fe01 	bl	8009758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dce9      	bgt.n	8008b3a <prvUnlockQueue+0x16>
 8008b66:	e000      	b.n	8008b6a <prvUnlockQueue+0x46>
					break;
 8008b68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	22ff      	movs	r2, #255	; 0xff
 8008b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b72:	f7ff fad7 	bl	8008124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b76:	f7ff faa5 	bl	80080c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b82:	e011      	b.n	8008ba8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d012      	beq.n	8008bb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3310      	adds	r3, #16
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fd05 	bl	80095a0 <xTaskRemoveFromEventList>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b9c:	f000 fddc 	bl	8009758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dce9      	bgt.n	8008b84 <prvUnlockQueue+0x60>
 8008bb0:	e000      	b.n	8008bb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008bb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	22ff      	movs	r2, #255	; 0xff
 8008bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008bbc:	f7ff fab2 	bl	8008124 <vPortExitCritical>
}
 8008bc0:	bf00      	nop
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bd0:	f7ff fa78 	bl	80080c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	e001      	b.n	8008be6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008be6:	f7ff fa9d 	bl	8008124 <vPortExitCritical>

	return xReturn;
 8008bea:	68fb      	ldr	r3, [r7, #12]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bfc:	f7ff fa62 	bl	80080c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d102      	bne.n	8008c12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	e001      	b.n	8008c16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c16:	f7ff fa85 	bl	8008124 <vPortExitCritical>

	return xReturn;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	e014      	b.n	8008c5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c34:	4a0f      	ldr	r2, [pc, #60]	; (8008c74 <vQueueAddToRegistry+0x50>)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10b      	bne.n	8008c58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c40:	490c      	ldr	r1, [pc, #48]	; (8008c74 <vQueueAddToRegistry+0x50>)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c4a:	4a0a      	ldr	r2, [pc, #40]	; (8008c74 <vQueueAddToRegistry+0x50>)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	4413      	add	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c56:	e006      	b.n	8008c66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b07      	cmp	r3, #7
 8008c62:	d9e7      	bls.n	8008c34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20001b38 	.word	0x20001b38

08008c78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c88:	f7ff fa1c 	bl	80080c4 <vPortEnterCritical>
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c92:	b25b      	sxtb	r3, r3
 8008c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c98:	d103      	bne.n	8008ca2 <vQueueWaitForMessageRestricted+0x2a>
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ca8:	b25b      	sxtb	r3, r3
 8008caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cae:	d103      	bne.n	8008cb8 <vQueueWaitForMessageRestricted+0x40>
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cb8:	f7ff fa34 	bl	8008124 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	3324      	adds	r3, #36	; 0x24
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fc3b 	bl	8009548 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008cd2:	6978      	ldr	r0, [r7, #20]
 8008cd4:	f7ff ff26 	bl	8008b24 <prvUnlockQueue>
	}
 8008cd8:	bf00      	nop
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08e      	sub	sp, #56	; 0x38
 8008ce4:	af04      	add	r7, sp, #16
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	623b      	str	r3, [r7, #32]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xTaskCreateStatic+0x46>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	61fb      	str	r3, [r7, #28]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d26:	235c      	movs	r3, #92	; 0x5c
 8008d28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b5c      	cmp	r3, #92	; 0x5c
 8008d2e:	d00a      	beq.n	8008d46 <xTaskCreateStatic+0x66>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	61bb      	str	r3, [r7, #24]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01e      	beq.n	8008d8c <xTaskCreateStatic+0xac>
 8008d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d01b      	beq.n	8008d8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	2202      	movs	r2, #2
 8008d62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d66:	2300      	movs	r3, #0
 8008d68:	9303      	str	r3, [sp, #12]
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	9302      	str	r3, [sp, #8]
 8008d6e:	f107 0314 	add.w	r3, r7, #20
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	68b9      	ldr	r1, [r7, #8]
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 f850 	bl	8008e24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d86:	f000 f8dd 	bl	8008f44 <prvAddNewTaskToReadyList>
 8008d8a:	e001      	b.n	8008d90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d90:	697b      	ldr	r3, [r7, #20]
	}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3728      	adds	r7, #40	; 0x28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b08c      	sub	sp, #48	; 0x30
 8008d9e:	af04      	add	r7, sp, #16
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	603b      	str	r3, [r7, #0]
 8008da6:	4613      	mov	r3, r2
 8008da8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008daa:	88fb      	ldrh	r3, [r7, #6]
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fdbe 	bl	8007930 <pvPortMalloc>
 8008db4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00e      	beq.n	8008dda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008dbc:	205c      	movs	r0, #92	; 0x5c
 8008dbe:	f7fe fdb7 	bl	8007930 <pvPortMalloc>
 8008dc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	631a      	str	r2, [r3, #48]	; 0x30
 8008dd0:	e005      	b.n	8008dde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008dd2:	6978      	ldr	r0, [r7, #20]
 8008dd4:	f7fe fe78 	bl	8007ac8 <vPortFree>
 8008dd8:	e001      	b.n	8008dde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d017      	beq.n	8008e14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dec:	88fa      	ldrh	r2, [r7, #6]
 8008dee:	2300      	movs	r3, #0
 8008df0:	9303      	str	r3, [sp, #12]
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	9302      	str	r3, [sp, #8]
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	68b9      	ldr	r1, [r7, #8]
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 f80e 	bl	8008e24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e08:	69f8      	ldr	r0, [r7, #28]
 8008e0a:	f000 f89b 	bl	8008f44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	61bb      	str	r3, [r7, #24]
 8008e12:	e002      	b.n	8008e1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e14:	f04f 33ff 	mov.w	r3, #4294967295
 8008e18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e1a:	69bb      	ldr	r3, [r7, #24]
	}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3720      	adds	r7, #32
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	21a5      	movs	r1, #165	; 0xa5
 8008e3e:	f001 f9cd 	bl	800a1dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	f023 0307 	bic.w	r3, r3, #7
 8008e5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f003 0307 	and.w	r3, r3, #7
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	617b      	str	r3, [r7, #20]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01f      	beq.n	8008ec2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e82:	2300      	movs	r3, #0
 8008e84:	61fb      	str	r3, [r7, #28]
 8008e86:	e012      	b.n	8008eae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	7819      	ldrb	r1, [r3, #0]
 8008e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	4413      	add	r3, r2
 8008e96:	3334      	adds	r3, #52	; 0x34
 8008e98:	460a      	mov	r2, r1
 8008e9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d006      	beq.n	8008eb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	61fb      	str	r3, [r7, #28]
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	2b0f      	cmp	r3, #15
 8008eb2:	d9e9      	bls.n	8008e88 <prvInitialiseNewTask+0x64>
 8008eb4:	e000      	b.n	8008eb8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008eb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ec0:	e003      	b.n	8008eca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	2b37      	cmp	r3, #55	; 0x37
 8008ece:	d901      	bls.n	8008ed4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ed0:	2337      	movs	r3, #55	; 0x37
 8008ed2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ed8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ede:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	3304      	adds	r3, #4
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe ff2a 	bl	8007d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	3318      	adds	r3, #24
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe ff25 	bl	8007d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	2200      	movs	r2, #0
 8008f14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	68f9      	ldr	r1, [r7, #12]
 8008f22:	69b8      	ldr	r0, [r7, #24]
 8008f24:	f7fe ffa2 	bl	8007e6c <pxPortInitialiseStack>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f3a:	bf00      	nop
 8008f3c:	3720      	adds	r7, #32
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f4c:	f7ff f8ba 	bl	80080c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f50:	4b2d      	ldr	r3, [pc, #180]	; (8009008 <prvAddNewTaskToReadyList+0xc4>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3301      	adds	r3, #1
 8008f56:	4a2c      	ldr	r2, [pc, #176]	; (8009008 <prvAddNewTaskToReadyList+0xc4>)
 8008f58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f5a:	4b2c      	ldr	r3, [pc, #176]	; (800900c <prvAddNewTaskToReadyList+0xc8>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d109      	bne.n	8008f76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f62:	4a2a      	ldr	r2, [pc, #168]	; (800900c <prvAddNewTaskToReadyList+0xc8>)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f68:	4b27      	ldr	r3, [pc, #156]	; (8009008 <prvAddNewTaskToReadyList+0xc4>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d110      	bne.n	8008f92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f70:	f000 fc16 	bl	80097a0 <prvInitialiseTaskLists>
 8008f74:	e00d      	b.n	8008f92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f76:	4b26      	ldr	r3, [pc, #152]	; (8009010 <prvAddNewTaskToReadyList+0xcc>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d109      	bne.n	8008f92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f7e:	4b23      	ldr	r3, [pc, #140]	; (800900c <prvAddNewTaskToReadyList+0xc8>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d802      	bhi.n	8008f92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f8c:	4a1f      	ldr	r2, [pc, #124]	; (800900c <prvAddNewTaskToReadyList+0xc8>)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f92:	4b20      	ldr	r3, [pc, #128]	; (8009014 <prvAddNewTaskToReadyList+0xd0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3301      	adds	r3, #1
 8008f98:	4a1e      	ldr	r2, [pc, #120]	; (8009014 <prvAddNewTaskToReadyList+0xd0>)
 8008f9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f9c:	4b1d      	ldr	r3, [pc, #116]	; (8009014 <prvAddNewTaskToReadyList+0xd0>)
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa8:	4b1b      	ldr	r3, [pc, #108]	; (8009018 <prvAddNewTaskToReadyList+0xd4>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d903      	bls.n	8008fb8 <prvAddNewTaskToReadyList+0x74>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	4a18      	ldr	r2, [pc, #96]	; (8009018 <prvAddNewTaskToReadyList+0xd4>)
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4a15      	ldr	r2, [pc, #84]	; (800901c <prvAddNewTaskToReadyList+0xd8>)
 8008fc6:	441a      	add	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4610      	mov	r0, r2
 8008fd0:	f7fe fec5 	bl	8007d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fd4:	f7ff f8a6 	bl	8008124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <prvAddNewTaskToReadyList+0xcc>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00e      	beq.n	8008ffe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fe0:	4b0a      	ldr	r3, [pc, #40]	; (800900c <prvAddNewTaskToReadyList+0xc8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d207      	bcs.n	8008ffe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fee:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <prvAddNewTaskToReadyList+0xdc>)
 8008ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20001990 	.word	0x20001990
 800900c:	200014bc 	.word	0x200014bc
 8009010:	2000199c 	.word	0x2000199c
 8009014:	200019ac 	.word	0x200019ac
 8009018:	20001998 	.word	0x20001998
 800901c:	200014c0 	.word	0x200014c0
 8009020:	e000ed04 	.word	0xe000ed04

08009024 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800902c:	2300      	movs	r3, #0
 800902e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d017      	beq.n	8009066 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009036:	4b13      	ldr	r3, [pc, #76]	; (8009084 <vTaskDelay+0x60>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00a      	beq.n	8009054 <vTaskDelay+0x30>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	60bb      	str	r3, [r7, #8]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009054:	f000 f880 	bl	8009158 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009058:	2100      	movs	r1, #0
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fcea 	bl	8009a34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009060:	f000 f888 	bl	8009174 <xTaskResumeAll>
 8009064:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d107      	bne.n	800907c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800906c:	4b06      	ldr	r3, [pc, #24]	; (8009088 <vTaskDelay+0x64>)
 800906e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800907c:	bf00      	nop
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	200019b8 	.word	0x200019b8
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08a      	sub	sp, #40	; 0x28
 8009090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009092:	2300      	movs	r3, #0
 8009094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009096:	2300      	movs	r3, #0
 8009098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800909a:	463a      	mov	r2, r7
 800909c:	1d39      	adds	r1, r7, #4
 800909e:	f107 0308 	add.w	r3, r7, #8
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe fc10 	bl	80078c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	9202      	str	r2, [sp, #8]
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	2300      	movs	r3, #0
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	2300      	movs	r3, #0
 80090b8:	460a      	mov	r2, r1
 80090ba:	4921      	ldr	r1, [pc, #132]	; (8009140 <vTaskStartScheduler+0xb4>)
 80090bc:	4821      	ldr	r0, [pc, #132]	; (8009144 <vTaskStartScheduler+0xb8>)
 80090be:	f7ff fe0f 	bl	8008ce0 <xTaskCreateStatic>
 80090c2:	4603      	mov	r3, r0
 80090c4:	4a20      	ldr	r2, [pc, #128]	; (8009148 <vTaskStartScheduler+0xbc>)
 80090c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090c8:	4b1f      	ldr	r3, [pc, #124]	; (8009148 <vTaskStartScheduler+0xbc>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090d0:	2301      	movs	r3, #1
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	e001      	b.n	80090da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d102      	bne.n	80090e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090e0:	f000 fcfc 	bl	8009adc <xTimerCreateTimerTask>
 80090e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d116      	bne.n	800911a <vTaskStartScheduler+0x8e>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	613b      	str	r3, [r7, #16]
}
 80090fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009100:	4b12      	ldr	r3, [pc, #72]	; (800914c <vTaskStartScheduler+0xc0>)
 8009102:	f04f 32ff 	mov.w	r2, #4294967295
 8009106:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009108:	4b11      	ldr	r3, [pc, #68]	; (8009150 <vTaskStartScheduler+0xc4>)
 800910a:	2201      	movs	r2, #1
 800910c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800910e:	4b11      	ldr	r3, [pc, #68]	; (8009154 <vTaskStartScheduler+0xc8>)
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009114:	f7fe ff34 	bl	8007f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009118:	e00e      	b.n	8009138 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009120:	d10a      	bne.n	8009138 <vTaskStartScheduler+0xac>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	60fb      	str	r3, [r7, #12]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <vTaskStartScheduler+0xaa>
}
 8009138:	bf00      	nop
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	0800a230 	.word	0x0800a230
 8009144:	08009771 	.word	0x08009771
 8009148:	200019b4 	.word	0x200019b4
 800914c:	200019b0 	.word	0x200019b0
 8009150:	2000199c 	.word	0x2000199c
 8009154:	20001994 	.word	0x20001994

08009158 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800915c:	4b04      	ldr	r3, [pc, #16]	; (8009170 <vTaskSuspendAll+0x18>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3301      	adds	r3, #1
 8009162:	4a03      	ldr	r2, [pc, #12]	; (8009170 <vTaskSuspendAll+0x18>)
 8009164:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009166:	bf00      	nop
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	200019b8 	.word	0x200019b8

08009174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009182:	4b42      	ldr	r3, [pc, #264]	; (800928c <xTaskResumeAll+0x118>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10a      	bne.n	80091a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	603b      	str	r3, [r7, #0]
}
 800919c:	bf00      	nop
 800919e:	e7fe      	b.n	800919e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091a0:	f7fe ff90 	bl	80080c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091a4:	4b39      	ldr	r3, [pc, #228]	; (800928c <xTaskResumeAll+0x118>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	4a38      	ldr	r2, [pc, #224]	; (800928c <xTaskResumeAll+0x118>)
 80091ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ae:	4b37      	ldr	r3, [pc, #220]	; (800928c <xTaskResumeAll+0x118>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d162      	bne.n	800927c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091b6:	4b36      	ldr	r3, [pc, #216]	; (8009290 <xTaskResumeAll+0x11c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d05e      	beq.n	800927c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091be:	e02f      	b.n	8009220 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c0:	4b34      	ldr	r3, [pc, #208]	; (8009294 <xTaskResumeAll+0x120>)
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3318      	adds	r3, #24
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fe fe23 	bl	8007e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3304      	adds	r3, #4
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe fe1e 	bl	8007e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e0:	4b2d      	ldr	r3, [pc, #180]	; (8009298 <xTaskResumeAll+0x124>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d903      	bls.n	80091f0 <xTaskResumeAll+0x7c>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ec:	4a2a      	ldr	r2, [pc, #168]	; (8009298 <xTaskResumeAll+0x124>)
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f4:	4613      	mov	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4a27      	ldr	r2, [pc, #156]	; (800929c <xTaskResumeAll+0x128>)
 80091fe:	441a      	add	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3304      	adds	r3, #4
 8009204:	4619      	mov	r1, r3
 8009206:	4610      	mov	r0, r2
 8009208:	f7fe fda9 	bl	8007d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	4b23      	ldr	r3, [pc, #140]	; (80092a0 <xTaskResumeAll+0x12c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009216:	429a      	cmp	r2, r3
 8009218:	d302      	bcc.n	8009220 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800921a:	4b22      	ldr	r3, [pc, #136]	; (80092a4 <xTaskResumeAll+0x130>)
 800921c:	2201      	movs	r2, #1
 800921e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009220:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <xTaskResumeAll+0x120>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1cb      	bne.n	80091c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800922e:	f000 fb55 	bl	80098dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009232:	4b1d      	ldr	r3, [pc, #116]	; (80092a8 <xTaskResumeAll+0x134>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d010      	beq.n	8009260 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800923e:	f000 f847 	bl	80092d0 <xTaskIncrementTick>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009248:	4b16      	ldr	r3, [pc, #88]	; (80092a4 <xTaskResumeAll+0x130>)
 800924a:	2201      	movs	r2, #1
 800924c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3b01      	subs	r3, #1
 8009252:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1f1      	bne.n	800923e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800925a:	4b13      	ldr	r3, [pc, #76]	; (80092a8 <xTaskResumeAll+0x134>)
 800925c:	2200      	movs	r2, #0
 800925e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009260:	4b10      	ldr	r3, [pc, #64]	; (80092a4 <xTaskResumeAll+0x130>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d009      	beq.n	800927c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009268:	2301      	movs	r3, #1
 800926a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800926c:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <xTaskResumeAll+0x138>)
 800926e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800927c:	f7fe ff52 	bl	8008124 <vPortExitCritical>

	return xAlreadyYielded;
 8009280:	68bb      	ldr	r3, [r7, #8]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	200019b8 	.word	0x200019b8
 8009290:	20001990 	.word	0x20001990
 8009294:	20001950 	.word	0x20001950
 8009298:	20001998 	.word	0x20001998
 800929c:	200014c0 	.word	0x200014c0
 80092a0:	200014bc 	.word	0x200014bc
 80092a4:	200019a4 	.word	0x200019a4
 80092a8:	200019a0 	.word	0x200019a0
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092b6:	4b05      	ldr	r3, [pc, #20]	; (80092cc <xTaskGetTickCount+0x1c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092bc:	687b      	ldr	r3, [r7, #4]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	20001994 	.word	0x20001994

080092d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092da:	4b4f      	ldr	r3, [pc, #316]	; (8009418 <xTaskIncrementTick+0x148>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f040 808f 	bne.w	8009402 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092e4:	4b4d      	ldr	r3, [pc, #308]	; (800941c <xTaskIncrementTick+0x14c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3301      	adds	r3, #1
 80092ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092ec:	4a4b      	ldr	r2, [pc, #300]	; (800941c <xTaskIncrementTick+0x14c>)
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d120      	bne.n	800933a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80092f8:	4b49      	ldr	r3, [pc, #292]	; (8009420 <xTaskIncrementTick+0x150>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <xTaskIncrementTick+0x48>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	603b      	str	r3, [r7, #0]
}
 8009314:	bf00      	nop
 8009316:	e7fe      	b.n	8009316 <xTaskIncrementTick+0x46>
 8009318:	4b41      	ldr	r3, [pc, #260]	; (8009420 <xTaskIncrementTick+0x150>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	60fb      	str	r3, [r7, #12]
 800931e:	4b41      	ldr	r3, [pc, #260]	; (8009424 <xTaskIncrementTick+0x154>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a3f      	ldr	r2, [pc, #252]	; (8009420 <xTaskIncrementTick+0x150>)
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	4a3f      	ldr	r2, [pc, #252]	; (8009424 <xTaskIncrementTick+0x154>)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	4b3e      	ldr	r3, [pc, #248]	; (8009428 <xTaskIncrementTick+0x158>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3301      	adds	r3, #1
 8009332:	4a3d      	ldr	r2, [pc, #244]	; (8009428 <xTaskIncrementTick+0x158>)
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	f000 fad1 	bl	80098dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800933a:	4b3c      	ldr	r3, [pc, #240]	; (800942c <xTaskIncrementTick+0x15c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	429a      	cmp	r2, r3
 8009342:	d349      	bcc.n	80093d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009344:	4b36      	ldr	r3, [pc, #216]	; (8009420 <xTaskIncrementTick+0x150>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d104      	bne.n	8009358 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800934e:	4b37      	ldr	r3, [pc, #220]	; (800942c <xTaskIncrementTick+0x15c>)
 8009350:	f04f 32ff 	mov.w	r2, #4294967295
 8009354:	601a      	str	r2, [r3, #0]
					break;
 8009356:	e03f      	b.n	80093d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009358:	4b31      	ldr	r3, [pc, #196]	; (8009420 <xTaskIncrementTick+0x150>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	429a      	cmp	r2, r3
 800936e:	d203      	bcs.n	8009378 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009370:	4a2e      	ldr	r2, [pc, #184]	; (800942c <xTaskIncrementTick+0x15c>)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009376:	e02f      	b.n	80093d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	3304      	adds	r3, #4
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fd4b 	bl	8007e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	2b00      	cmp	r3, #0
 8009388:	d004      	beq.n	8009394 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3318      	adds	r3, #24
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fd42 	bl	8007e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009398:	4b25      	ldr	r3, [pc, #148]	; (8009430 <xTaskIncrementTick+0x160>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d903      	bls.n	80093a8 <xTaskIncrementTick+0xd8>
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a4:	4a22      	ldr	r2, [pc, #136]	; (8009430 <xTaskIncrementTick+0x160>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4a1f      	ldr	r2, [pc, #124]	; (8009434 <xTaskIncrementTick+0x164>)
 80093b6:	441a      	add	r2, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f7fe fccd 	bl	8007d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c8:	4b1b      	ldr	r3, [pc, #108]	; (8009438 <xTaskIncrementTick+0x168>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d3b8      	bcc.n	8009344 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80093d2:	2301      	movs	r3, #1
 80093d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093d6:	e7b5      	b.n	8009344 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093d8:	4b17      	ldr	r3, [pc, #92]	; (8009438 <xTaskIncrementTick+0x168>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093de:	4915      	ldr	r1, [pc, #84]	; (8009434 <xTaskIncrementTick+0x164>)
 80093e0:	4613      	mov	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	440b      	add	r3, r1
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d901      	bls.n	80093f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80093f0:	2301      	movs	r3, #1
 80093f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093f4:	4b11      	ldr	r3, [pc, #68]	; (800943c <xTaskIncrementTick+0x16c>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d007      	beq.n	800940c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80093fc:	2301      	movs	r3, #1
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	e004      	b.n	800940c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009402:	4b0f      	ldr	r3, [pc, #60]	; (8009440 <xTaskIncrementTick+0x170>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3301      	adds	r3, #1
 8009408:	4a0d      	ldr	r2, [pc, #52]	; (8009440 <xTaskIncrementTick+0x170>)
 800940a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800940c:	697b      	ldr	r3, [r7, #20]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	200019b8 	.word	0x200019b8
 800941c:	20001994 	.word	0x20001994
 8009420:	20001948 	.word	0x20001948
 8009424:	2000194c 	.word	0x2000194c
 8009428:	200019a8 	.word	0x200019a8
 800942c:	200019b0 	.word	0x200019b0
 8009430:	20001998 	.word	0x20001998
 8009434:	200014c0 	.word	0x200014c0
 8009438:	200014bc 	.word	0x200014bc
 800943c:	200019a4 	.word	0x200019a4
 8009440:	200019a0 	.word	0x200019a0

08009444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800944a:	4b28      	ldr	r3, [pc, #160]	; (80094ec <vTaskSwitchContext+0xa8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009452:	4b27      	ldr	r3, [pc, #156]	; (80094f0 <vTaskSwitchContext+0xac>)
 8009454:	2201      	movs	r2, #1
 8009456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009458:	e041      	b.n	80094de <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800945a:	4b25      	ldr	r3, [pc, #148]	; (80094f0 <vTaskSwitchContext+0xac>)
 800945c:	2200      	movs	r2, #0
 800945e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009460:	4b24      	ldr	r3, [pc, #144]	; (80094f4 <vTaskSwitchContext+0xb0>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	e010      	b.n	800948a <vTaskSwitchContext+0x46>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10a      	bne.n	8009484 <vTaskSwitchContext+0x40>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	607b      	str	r3, [r7, #4]
}
 8009480:	bf00      	nop
 8009482:	e7fe      	b.n	8009482 <vTaskSwitchContext+0x3e>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3b01      	subs	r3, #1
 8009488:	60fb      	str	r3, [r7, #12]
 800948a:	491b      	ldr	r1, [pc, #108]	; (80094f8 <vTaskSwitchContext+0xb4>)
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0e4      	beq.n	8009468 <vTaskSwitchContext+0x24>
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4a13      	ldr	r2, [pc, #76]	; (80094f8 <vTaskSwitchContext+0xb4>)
 80094aa:	4413      	add	r3, r2
 80094ac:	60bb      	str	r3, [r7, #8]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	605a      	str	r2, [r3, #4]
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	3308      	adds	r3, #8
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d104      	bne.n	80094ce <vTaskSwitchContext+0x8a>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	605a      	str	r2, [r3, #4]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	4a09      	ldr	r2, [pc, #36]	; (80094fc <vTaskSwitchContext+0xb8>)
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	4a06      	ldr	r2, [pc, #24]	; (80094f4 <vTaskSwitchContext+0xb0>)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6013      	str	r3, [r2, #0]
}
 80094de:	bf00      	nop
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	200019b8 	.word	0x200019b8
 80094f0:	200019a4 	.word	0x200019a4
 80094f4:	20001998 	.word	0x20001998
 80094f8:	200014c0 	.word	0x200014c0
 80094fc:	200014bc 	.word	0x200014bc

08009500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10a      	bne.n	8009526 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	60fb      	str	r3, [r7, #12]
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009526:	4b07      	ldr	r3, [pc, #28]	; (8009544 <vTaskPlaceOnEventList+0x44>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3318      	adds	r3, #24
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7fe fc39 	bl	8007da6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009534:	2101      	movs	r1, #1
 8009536:	6838      	ldr	r0, [r7, #0]
 8009538:	f000 fa7c 	bl	8009a34 <prvAddCurrentTaskToDelayedList>
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	200014bc 	.word	0x200014bc

08009548 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10a      	bne.n	8009570 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	617b      	str	r3, [r7, #20]
}
 800956c:	bf00      	nop
 800956e:	e7fe      	b.n	800956e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009570:	4b0a      	ldr	r3, [pc, #40]	; (800959c <vTaskPlaceOnEventListRestricted+0x54>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3318      	adds	r3, #24
 8009576:	4619      	mov	r1, r3
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7fe fbf0 	bl	8007d5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009584:	f04f 33ff 	mov.w	r3, #4294967295
 8009588:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	68b8      	ldr	r0, [r7, #8]
 800958e:	f000 fa51 	bl	8009a34 <prvAddCurrentTaskToDelayedList>
	}
 8009592:	bf00      	nop
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	200014bc 	.word	0x200014bc

080095a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10a      	bne.n	80095cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	60fb      	str	r3, [r7, #12]
}
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	3318      	adds	r3, #24
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fc21 	bl	8007e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095d6:	4b1e      	ldr	r3, [pc, #120]	; (8009650 <xTaskRemoveFromEventList+0xb0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d11d      	bne.n	800961a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3304      	adds	r3, #4
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe fc18 	bl	8007e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ec:	4b19      	ldr	r3, [pc, #100]	; (8009654 <xTaskRemoveFromEventList+0xb4>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d903      	bls.n	80095fc <xTaskRemoveFromEventList+0x5c>
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f8:	4a16      	ldr	r2, [pc, #88]	; (8009654 <xTaskRemoveFromEventList+0xb4>)
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4a13      	ldr	r2, [pc, #76]	; (8009658 <xTaskRemoveFromEventList+0xb8>)
 800960a:	441a      	add	r2, r3
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	3304      	adds	r3, #4
 8009610:	4619      	mov	r1, r3
 8009612:	4610      	mov	r0, r2
 8009614:	f7fe fba3 	bl	8007d5e <vListInsertEnd>
 8009618:	e005      	b.n	8009626 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	3318      	adds	r3, #24
 800961e:	4619      	mov	r1, r3
 8009620:	480e      	ldr	r0, [pc, #56]	; (800965c <xTaskRemoveFromEventList+0xbc>)
 8009622:	f7fe fb9c 	bl	8007d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962a:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <xTaskRemoveFromEventList+0xc0>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	429a      	cmp	r2, r3
 8009632:	d905      	bls.n	8009640 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009634:	2301      	movs	r3, #1
 8009636:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009638:	4b0a      	ldr	r3, [pc, #40]	; (8009664 <xTaskRemoveFromEventList+0xc4>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	e001      	b.n	8009644 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009640:	2300      	movs	r3, #0
 8009642:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009644:	697b      	ldr	r3, [r7, #20]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	200019b8 	.word	0x200019b8
 8009654:	20001998 	.word	0x20001998
 8009658:	200014c0 	.word	0x200014c0
 800965c:	20001950 	.word	0x20001950
 8009660:	200014bc 	.word	0x200014bc
 8009664:	200019a4 	.word	0x200019a4

08009668 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009670:	4b06      	ldr	r3, [pc, #24]	; (800968c <vTaskInternalSetTimeOutState+0x24>)
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009678:	4b05      	ldr	r3, [pc, #20]	; (8009690 <vTaskInternalSetTimeOutState+0x28>)
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	605a      	str	r2, [r3, #4]
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	200019a8 	.word	0x200019a8
 8009690:	20001994 	.word	0x20001994

08009694 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10a      	bne.n	80096ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	613b      	str	r3, [r7, #16]
}
 80096b6:	bf00      	nop
 80096b8:	e7fe      	b.n	80096b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	60fb      	str	r3, [r7, #12]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80096d6:	f7fe fcf5 	bl	80080c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096da:	4b1d      	ldr	r3, [pc, #116]	; (8009750 <xTaskCheckForTimeOut+0xbc>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	69ba      	ldr	r2, [r7, #24]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f2:	d102      	bne.n	80096fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80096f4:	2300      	movs	r3, #0
 80096f6:	61fb      	str	r3, [r7, #28]
 80096f8:	e023      	b.n	8009742 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	4b15      	ldr	r3, [pc, #84]	; (8009754 <xTaskCheckForTimeOut+0xc0>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d007      	beq.n	8009716 <xTaskCheckForTimeOut+0x82>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	429a      	cmp	r2, r3
 800970e:	d302      	bcc.n	8009716 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009710:	2301      	movs	r3, #1
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	e015      	b.n	8009742 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	429a      	cmp	r2, r3
 800971e:	d20b      	bcs.n	8009738 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	1ad2      	subs	r2, r2, r3
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff ff9b 	bl	8009668 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009732:	2300      	movs	r3, #0
 8009734:	61fb      	str	r3, [r7, #28]
 8009736:	e004      	b.n	8009742 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800973e:	2301      	movs	r3, #1
 8009740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009742:	f7fe fcef 	bl	8008124 <vPortExitCritical>

	return xReturn;
 8009746:	69fb      	ldr	r3, [r7, #28]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3720      	adds	r7, #32
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20001994 	.word	0x20001994
 8009754:	200019a8 	.word	0x200019a8

08009758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800975c:	4b03      	ldr	r3, [pc, #12]	; (800976c <vTaskMissedYield+0x14>)
 800975e:	2201      	movs	r2, #1
 8009760:	601a      	str	r2, [r3, #0]
}
 8009762:	bf00      	nop
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	200019a4 	.word	0x200019a4

08009770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009778:	f000 f852 	bl	8009820 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <prvIdleTask+0x28>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d9f9      	bls.n	8009778 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009784:	4b05      	ldr	r3, [pc, #20]	; (800979c <prvIdleTask+0x2c>)
 8009786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009794:	e7f0      	b.n	8009778 <prvIdleTask+0x8>
 8009796:	bf00      	nop
 8009798:	200014c0 	.word	0x200014c0
 800979c:	e000ed04 	.word	0xe000ed04

080097a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097a6:	2300      	movs	r3, #0
 80097a8:	607b      	str	r3, [r7, #4]
 80097aa:	e00c      	b.n	80097c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	4613      	mov	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4a12      	ldr	r2, [pc, #72]	; (8009800 <prvInitialiseTaskLists+0x60>)
 80097b8:	4413      	add	r3, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fe faa2 	bl	8007d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3301      	adds	r3, #1
 80097c4:	607b      	str	r3, [r7, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b37      	cmp	r3, #55	; 0x37
 80097ca:	d9ef      	bls.n	80097ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097cc:	480d      	ldr	r0, [pc, #52]	; (8009804 <prvInitialiseTaskLists+0x64>)
 80097ce:	f7fe fa99 	bl	8007d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097d2:	480d      	ldr	r0, [pc, #52]	; (8009808 <prvInitialiseTaskLists+0x68>)
 80097d4:	f7fe fa96 	bl	8007d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097d8:	480c      	ldr	r0, [pc, #48]	; (800980c <prvInitialiseTaskLists+0x6c>)
 80097da:	f7fe fa93 	bl	8007d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097de:	480c      	ldr	r0, [pc, #48]	; (8009810 <prvInitialiseTaskLists+0x70>)
 80097e0:	f7fe fa90 	bl	8007d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097e4:	480b      	ldr	r0, [pc, #44]	; (8009814 <prvInitialiseTaskLists+0x74>)
 80097e6:	f7fe fa8d 	bl	8007d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097ea:	4b0b      	ldr	r3, [pc, #44]	; (8009818 <prvInitialiseTaskLists+0x78>)
 80097ec:	4a05      	ldr	r2, [pc, #20]	; (8009804 <prvInitialiseTaskLists+0x64>)
 80097ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <prvInitialiseTaskLists+0x7c>)
 80097f2:	4a05      	ldr	r2, [pc, #20]	; (8009808 <prvInitialiseTaskLists+0x68>)
 80097f4:	601a      	str	r2, [r3, #0]
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	200014c0 	.word	0x200014c0
 8009804:	20001920 	.word	0x20001920
 8009808:	20001934 	.word	0x20001934
 800980c:	20001950 	.word	0x20001950
 8009810:	20001964 	.word	0x20001964
 8009814:	2000197c 	.word	0x2000197c
 8009818:	20001948 	.word	0x20001948
 800981c:	2000194c 	.word	0x2000194c

08009820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009826:	e019      	b.n	800985c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009828:	f7fe fc4c 	bl	80080c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800982c:	4b10      	ldr	r3, [pc, #64]	; (8009870 <prvCheckTasksWaitingTermination+0x50>)
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3304      	adds	r3, #4
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe faed 	bl	8007e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800983e:	4b0d      	ldr	r3, [pc, #52]	; (8009874 <prvCheckTasksWaitingTermination+0x54>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3b01      	subs	r3, #1
 8009844:	4a0b      	ldr	r2, [pc, #44]	; (8009874 <prvCheckTasksWaitingTermination+0x54>)
 8009846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009848:	4b0b      	ldr	r3, [pc, #44]	; (8009878 <prvCheckTasksWaitingTermination+0x58>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3b01      	subs	r3, #1
 800984e:	4a0a      	ldr	r2, [pc, #40]	; (8009878 <prvCheckTasksWaitingTermination+0x58>)
 8009850:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009852:	f7fe fc67 	bl	8008124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f810 	bl	800987c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800985c:	4b06      	ldr	r3, [pc, #24]	; (8009878 <prvCheckTasksWaitingTermination+0x58>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e1      	bne.n	8009828 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */

}
 8009864:	bf00      	nop
 8009866:	bf00      	nop
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20001964 	.word	0x20001964
 8009874:	20001990 	.word	0x20001990
 8009878:	20001978 	.word	0x20001978

0800987c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800988a:	2b00      	cmp	r3, #0
 800988c:	d108      	bne.n	80098a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe f918 	bl	8007ac8 <vPortFree>
				vPortFree( pxTCB );
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7fe f915 	bl	8007ac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800989e:	e018      	b.n	80098d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d103      	bne.n	80098b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f7fe f90c 	bl	8007ac8 <vPortFree>
	}
 80098b0:	e00f      	b.n	80098d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d00a      	beq.n	80098d2 <prvDeleteTCB+0x56>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	60fb      	str	r3, [r7, #12]
}
 80098ce:	bf00      	nop
 80098d0:	e7fe      	b.n	80098d0 <prvDeleteTCB+0x54>
	}
 80098d2:	bf00      	nop
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098e2:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <prvResetNextTaskUnblockTime+0x38>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098ec:	4b0a      	ldr	r3, [pc, #40]	; (8009918 <prvResetNextTaskUnblockTime+0x3c>)
 80098ee:	f04f 32ff 	mov.w	r2, #4294967295
 80098f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098f4:	e008      	b.n	8009908 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098f6:	4b07      	ldr	r3, [pc, #28]	; (8009914 <prvResetNextTaskUnblockTime+0x38>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	4a04      	ldr	r2, [pc, #16]	; (8009918 <prvResetNextTaskUnblockTime+0x3c>)
 8009906:	6013      	str	r3, [r2, #0]
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	20001948 	.word	0x20001948
 8009918:	200019b0 	.word	0x200019b0

0800991c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009922:	4b0b      	ldr	r3, [pc, #44]	; (8009950 <xTaskGetSchedulerState+0x34>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d102      	bne.n	8009930 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800992a:	2301      	movs	r3, #1
 800992c:	607b      	str	r3, [r7, #4]
 800992e:	e008      	b.n	8009942 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009930:	4b08      	ldr	r3, [pc, #32]	; (8009954 <xTaskGetSchedulerState+0x38>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d102      	bne.n	800993e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009938:	2302      	movs	r3, #2
 800993a:	607b      	str	r3, [r7, #4]
 800993c:	e001      	b.n	8009942 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800993e:	2300      	movs	r3, #0
 8009940:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009942:	687b      	ldr	r3, [r7, #4]
	}
 8009944:	4618      	mov	r0, r3
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	2000199c 	.word	0x2000199c
 8009954:	200019b8 	.word	0x200019b8

08009958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009964:	2300      	movs	r3, #0
 8009966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d056      	beq.n	8009a1c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800996e:	4b2e      	ldr	r3, [pc, #184]	; (8009a28 <xTaskPriorityDisinherit+0xd0>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	429a      	cmp	r2, r3
 8009976:	d00a      	beq.n	800998e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	60fb      	str	r3, [r7, #12]
}
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10a      	bne.n	80099ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	60bb      	str	r3, [r7, #8]
}
 80099a8:	bf00      	nop
 80099aa:	e7fe      	b.n	80099aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b0:	1e5a      	subs	r2, r3, #1
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099be:	429a      	cmp	r2, r3
 80099c0:	d02c      	beq.n	8009a1c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d128      	bne.n	8009a1c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	3304      	adds	r3, #4
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe fa22 	bl	8007e18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ec:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <xTaskPriorityDisinherit+0xd4>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d903      	bls.n	80099fc <xTaskPriorityDisinherit+0xa4>
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f8:	4a0c      	ldr	r2, [pc, #48]	; (8009a2c <xTaskPriorityDisinherit+0xd4>)
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4a09      	ldr	r2, [pc, #36]	; (8009a30 <xTaskPriorityDisinherit+0xd8>)
 8009a0a:	441a      	add	r2, r3
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	3304      	adds	r3, #4
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f7fe f9a3 	bl	8007d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a1c:	697b      	ldr	r3, [r7, #20]
	}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3718      	adds	r7, #24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	200014bc 	.word	0x200014bc
 8009a2c:	20001998 	.word	0x20001998
 8009a30:	200014c0 	.word	0x200014c0

08009a34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a3e:	4b21      	ldr	r3, [pc, #132]	; (8009ac4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a44:	4b20      	ldr	r3, [pc, #128]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe f9e4 	bl	8007e18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a56:	d10a      	bne.n	8009a6e <prvAddCurrentTaskToDelayedList+0x3a>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d007      	beq.n	8009a6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a5e:	4b1a      	ldr	r3, [pc, #104]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3304      	adds	r3, #4
 8009a64:	4619      	mov	r1, r3
 8009a66:	4819      	ldr	r0, [pc, #100]	; (8009acc <prvAddCurrentTaskToDelayedList+0x98>)
 8009a68:	f7fe f979 	bl	8007d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a6c:	e026      	b.n	8009abc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4413      	add	r3, r2
 8009a74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a76:	4b14      	ldr	r3, [pc, #80]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d209      	bcs.n	8009a9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a86:	4b12      	ldr	r3, [pc, #72]	; (8009ad0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4619      	mov	r1, r3
 8009a92:	4610      	mov	r0, r2
 8009a94:	f7fe f987 	bl	8007da6 <vListInsert>
}
 8009a98:	e010      	b.n	8009abc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a9a:	4b0e      	ldr	r3, [pc, #56]	; (8009ad4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	4b0a      	ldr	r3, [pc, #40]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	f7fe f97d 	bl	8007da6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009aac:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d202      	bcs.n	8009abc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ab6:	4a08      	ldr	r2, [pc, #32]	; (8009ad8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	6013      	str	r3, [r2, #0]
}
 8009abc:	bf00      	nop
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20001994 	.word	0x20001994
 8009ac8:	200014bc 	.word	0x200014bc
 8009acc:	2000197c 	.word	0x2000197c
 8009ad0:	2000194c 	.word	0x2000194c
 8009ad4:	20001948 	.word	0x20001948
 8009ad8:	200019b0 	.word	0x200019b0

08009adc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08a      	sub	sp, #40	; 0x28
 8009ae0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ae6:	f000 fb07 	bl	800a0f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009aea:	4b1c      	ldr	r3, [pc, #112]	; (8009b5c <xTimerCreateTimerTask+0x80>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d021      	beq.n	8009b36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009afa:	1d3a      	adds	r2, r7, #4
 8009afc:	f107 0108 	add.w	r1, r7, #8
 8009b00:	f107 030c 	add.w	r3, r7, #12
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fd fef9 	bl	80078fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	9202      	str	r2, [sp, #8]
 8009b12:	9301      	str	r3, [sp, #4]
 8009b14:	2302      	movs	r3, #2
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	460a      	mov	r2, r1
 8009b1c:	4910      	ldr	r1, [pc, #64]	; (8009b60 <xTimerCreateTimerTask+0x84>)
 8009b1e:	4811      	ldr	r0, [pc, #68]	; (8009b64 <xTimerCreateTimerTask+0x88>)
 8009b20:	f7ff f8de 	bl	8008ce0 <xTaskCreateStatic>
 8009b24:	4603      	mov	r3, r0
 8009b26:	4a10      	ldr	r2, [pc, #64]	; (8009b68 <xTimerCreateTimerTask+0x8c>)
 8009b28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b2a:	4b0f      	ldr	r3, [pc, #60]	; (8009b68 <xTimerCreateTimerTask+0x8c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b32:	2301      	movs	r3, #1
 8009b34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10a      	bne.n	8009b52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	613b      	str	r3, [r7, #16]
}
 8009b4e:	bf00      	nop
 8009b50:	e7fe      	b.n	8009b50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b52:	697b      	ldr	r3, [r7, #20]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	200019ec 	.word	0x200019ec
 8009b60:	0800a238 	.word	0x0800a238
 8009b64:	08009ca1 	.word	0x08009ca1
 8009b68:	200019f0 	.word	0x200019f0

08009b6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08a      	sub	sp, #40	; 0x28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	623b      	str	r3, [r7, #32]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b9a:	4b1a      	ldr	r3, [pc, #104]	; (8009c04 <xTimerGenericCommand+0x98>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d02a      	beq.n	8009bf8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2b05      	cmp	r3, #5
 8009bb2:	dc18      	bgt.n	8009be6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bb4:	f7ff feb2 	bl	800991c <xTaskGetSchedulerState>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d109      	bne.n	8009bd2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bbe:	4b11      	ldr	r3, [pc, #68]	; (8009c04 <xTimerGenericCommand+0x98>)
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	f107 0110 	add.w	r1, r7, #16
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bca:	f7fe fca1 	bl	8008510 <xQueueGenericSend>
 8009bce:	6278      	str	r0, [r7, #36]	; 0x24
 8009bd0:	e012      	b.n	8009bf8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bd2:	4b0c      	ldr	r3, [pc, #48]	; (8009c04 <xTimerGenericCommand+0x98>)
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	f107 0110 	add.w	r1, r7, #16
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f7fe fc97 	bl	8008510 <xQueueGenericSend>
 8009be2:	6278      	str	r0, [r7, #36]	; 0x24
 8009be4:	e008      	b.n	8009bf8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009be6:	4b07      	ldr	r3, [pc, #28]	; (8009c04 <xTimerGenericCommand+0x98>)
 8009be8:	6818      	ldr	r0, [r3, #0]
 8009bea:	f107 0110 	add.w	r1, r7, #16
 8009bee:	2300      	movs	r3, #0
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	f7fe fd8b 	bl	800870c <xQueueGenericSendFromISR>
 8009bf6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3728      	adds	r7, #40	; 0x28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	200019ec 	.word	0x200019ec

08009c08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b088      	sub	sp, #32
 8009c0c:	af02      	add	r7, sp, #8
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c12:	4b22      	ldr	r3, [pc, #136]	; (8009c9c <prvProcessExpiredTimer+0x94>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe f8f9 	bl	8007e18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d022      	beq.n	8009c7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	699a      	ldr	r2, [r3, #24]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	18d1      	adds	r1, r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	6978      	ldr	r0, [r7, #20]
 8009c42:	f000 f8d1 	bl	8009de8 <prvInsertTimerInActiveList>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d01f      	beq.n	8009c8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	2300      	movs	r3, #0
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	2100      	movs	r1, #0
 8009c56:	6978      	ldr	r0, [r7, #20]
 8009c58:	f7ff ff88 	bl	8009b6c <xTimerGenericCommand>
 8009c5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d113      	bne.n	8009c8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	60fb      	str	r3, [r7, #12]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c80:	f023 0301 	bic.w	r3, r3, #1
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	6978      	ldr	r0, [r7, #20]
 8009c92:	4798      	blx	r3
}
 8009c94:	bf00      	nop
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	200019e4 	.word	0x200019e4

08009ca0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ca8:	f107 0308 	add.w	r3, r7, #8
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 f857 	bl	8009d60 <prvGetNextExpireTime>
 8009cb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 f803 	bl	8009cc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cbe:	f000 f8d5 	bl	8009e6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cc2:	e7f1      	b.n	8009ca8 <prvTimerTask+0x8>

08009cc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009cce:	f7ff fa43 	bl	8009158 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cd2:	f107 0308 	add.w	r3, r7, #8
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 f866 	bl	8009da8 <prvSampleTimeNow>
 8009cdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d130      	bne.n	8009d46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10a      	bne.n	8009d00 <prvProcessTimerOrBlockTask+0x3c>
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d806      	bhi.n	8009d00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cf2:	f7ff fa3f 	bl	8009174 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cf6:	68f9      	ldr	r1, [r7, #12]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff ff85 	bl	8009c08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009cfe:	e024      	b.n	8009d4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d008      	beq.n	8009d18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d06:	4b13      	ldr	r3, [pc, #76]	; (8009d54 <prvProcessTimerOrBlockTask+0x90>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <prvProcessTimerOrBlockTask+0x50>
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <prvProcessTimerOrBlockTask+0x52>
 8009d14:	2300      	movs	r3, #0
 8009d16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d18:	4b0f      	ldr	r3, [pc, #60]	; (8009d58 <prvProcessTimerOrBlockTask+0x94>)
 8009d1a:	6818      	ldr	r0, [r3, #0]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	4619      	mov	r1, r3
 8009d26:	f7fe ffa7 	bl	8008c78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d2a:	f7ff fa23 	bl	8009174 <xTaskResumeAll>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d34:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <prvProcessTimerOrBlockTask+0x98>)
 8009d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	f3bf 8f6f 	isb	sy
}
 8009d44:	e001      	b.n	8009d4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d46:	f7ff fa15 	bl	8009174 <xTaskResumeAll>
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200019e8 	.word	0x200019e8
 8009d58:	200019ec 	.word	0x200019ec
 8009d5c:	e000ed04 	.word	0xe000ed04

08009d60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d68:	4b0e      	ldr	r3, [pc, #56]	; (8009da4 <prvGetNextExpireTime+0x44>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <prvGetNextExpireTime+0x16>
 8009d72:	2201      	movs	r2, #1
 8009d74:	e000      	b.n	8009d78 <prvGetNextExpireTime+0x18>
 8009d76:	2200      	movs	r2, #0
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d105      	bne.n	8009d90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d84:	4b07      	ldr	r3, [pc, #28]	; (8009da4 <prvGetNextExpireTime+0x44>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	60fb      	str	r3, [r7, #12]
 8009d8e:	e001      	b.n	8009d94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d94:	68fb      	ldr	r3, [r7, #12]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	200019e4 	.word	0x200019e4

08009da8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009db0:	f7ff fa7e 	bl	80092b0 <xTaskGetTickCount>
 8009db4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009db6:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <prvSampleTimeNow+0x3c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d205      	bcs.n	8009dcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009dc0:	f000 f936 	bl	800a030 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	e002      	b.n	8009dd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009dd2:	4a04      	ldr	r2, [pc, #16]	; (8009de4 <prvSampleTimeNow+0x3c>)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	200019f4 	.word	0x200019f4

08009de8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009df6:	2300      	movs	r3, #0
 8009df8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d812      	bhi.n	8009e34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	1ad2      	subs	r2, r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d302      	bcc.n	8009e22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	e01b      	b.n	8009e5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e22:	4b10      	ldr	r3, [pc, #64]	; (8009e64 <prvInsertTimerInActiveList+0x7c>)
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	f7fd ffba 	bl	8007da6 <vListInsert>
 8009e32:	e012      	b.n	8009e5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d206      	bcs.n	8009e4a <prvInsertTimerInActiveList+0x62>
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d302      	bcc.n	8009e4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e44:	2301      	movs	r3, #1
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	e007      	b.n	8009e5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e4a:	4b07      	ldr	r3, [pc, #28]	; (8009e68 <prvInsertTimerInActiveList+0x80>)
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3304      	adds	r3, #4
 8009e52:	4619      	mov	r1, r3
 8009e54:	4610      	mov	r0, r2
 8009e56:	f7fd ffa6 	bl	8007da6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e5a:	697b      	ldr	r3, [r7, #20]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	200019e8 	.word	0x200019e8
 8009e68:	200019e4 	.word	0x200019e4

08009e6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08e      	sub	sp, #56	; 0x38
 8009e70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e72:	e0ca      	b.n	800a00a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	da18      	bge.n	8009eac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e7a:	1d3b      	adds	r3, r7, #4
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	61fb      	str	r3, [r7, #28]
}
 8009e98:	bf00      	nop
 8009e9a:	e7fe      	b.n	8009e9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ea2:	6850      	ldr	r0, [r2, #4]
 8009ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ea6:	6892      	ldr	r2, [r2, #8]
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f2c0 80aa 	blt.w	800a008 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d004      	beq.n	8009eca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fd ffa7 	bl	8007e18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009eca:	463b      	mov	r3, r7
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7ff ff6b 	bl	8009da8 <prvSampleTimeNow>
 8009ed2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b09      	cmp	r3, #9
 8009ed8:	f200 8097 	bhi.w	800a00a <prvProcessReceivedCommands+0x19e>
 8009edc:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <prvProcessReceivedCommands+0x78>)
 8009ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee2:	bf00      	nop
 8009ee4:	08009f0d 	.word	0x08009f0d
 8009ee8:	08009f0d 	.word	0x08009f0d
 8009eec:	08009f0d 	.word	0x08009f0d
 8009ef0:	08009f81 	.word	0x08009f81
 8009ef4:	08009f95 	.word	0x08009f95
 8009ef8:	08009fdf 	.word	0x08009fdf
 8009efc:	08009f0d 	.word	0x08009f0d
 8009f00:	08009f0d 	.word	0x08009f0d
 8009f04:	08009f81 	.word	0x08009f81
 8009f08:	08009f95 	.word	0x08009f95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f12:	f043 0301 	orr.w	r3, r3, #1
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	18d1      	adds	r1, r2, r3
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f2c:	f7ff ff5c 	bl	8009de8 <prvInsertTimerInActiveList>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d069      	beq.n	800a00a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f44:	f003 0304 	and.w	r3, r3, #4
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d05e      	beq.n	800a00a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	441a      	add	r2, r3
 8009f54:	2300      	movs	r3, #0
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	2300      	movs	r3, #0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f5e:	f7ff fe05 	bl	8009b6c <xTimerGenericCommand>
 8009f62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f64:	6a3b      	ldr	r3, [r7, #32]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d14f      	bne.n	800a00a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	61bb      	str	r3, [r7, #24]
}
 8009f7c:	bf00      	nop
 8009f7e:	e7fe      	b.n	8009f7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f86:	f023 0301 	bic.w	r3, r3, #1
 8009f8a:	b2da      	uxtb	r2, r3
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f92:	e03a      	b.n	800a00a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f9a:	f043 0301 	orr.w	r3, r3, #1
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10a      	bne.n	8009fca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	617b      	str	r3, [r7, #20]
}
 8009fc6:	bf00      	nop
 8009fc8:	e7fe      	b.n	8009fc8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	699a      	ldr	r2, [r3, #24]
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	18d1      	adds	r1, r2, r3
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fd8:	f7ff ff06 	bl	8009de8 <prvInsertTimerInActiveList>
					break;
 8009fdc:	e015      	b.n	800a00a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d103      	bne.n	8009ff4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fee:	f7fd fd6b 	bl	8007ac8 <vPortFree>
 8009ff2:	e00a      	b.n	800a00a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ffa:	f023 0301 	bic.w	r3, r3, #1
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a006:	e000      	b.n	800a00a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a008:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a00a:	4b08      	ldr	r3, [pc, #32]	; (800a02c <prvProcessReceivedCommands+0x1c0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	1d39      	adds	r1, r7, #4
 800a010:	2200      	movs	r2, #0
 800a012:	4618      	mov	r0, r3
 800a014:	f7fe fc16 	bl	8008844 <xQueueReceive>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f47f af2a 	bne.w	8009e74 <prvProcessReceivedCommands+0x8>
	}
}
 800a020:	bf00      	nop
 800a022:	bf00      	nop
 800a024:	3730      	adds	r7, #48	; 0x30
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	200019ec 	.word	0x200019ec

0800a030 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b088      	sub	sp, #32
 800a034:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a036:	e048      	b.n	800a0ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a038:	4b2d      	ldr	r3, [pc, #180]	; (800a0f0 <prvSwitchTimerLists+0xc0>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a042:	4b2b      	ldr	r3, [pc, #172]	; (800a0f0 <prvSwitchTimerLists+0xc0>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3304      	adds	r3, #4
 800a050:	4618      	mov	r0, r3
 800a052:	f7fd fee1 	bl	8007e18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a064:	f003 0304 	and.w	r3, r3, #4
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d02e      	beq.n	800a0ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4413      	add	r3, r2
 800a074:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d90e      	bls.n	800a09c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a08a:	4b19      	ldr	r3, [pc, #100]	; (800a0f0 <prvSwitchTimerLists+0xc0>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3304      	adds	r3, #4
 800a092:	4619      	mov	r1, r3
 800a094:	4610      	mov	r0, r2
 800a096:	f7fd fe86 	bl	8007da6 <vListInsert>
 800a09a:	e016      	b.n	800a0ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a09c:	2300      	movs	r3, #0
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7ff fd60 	bl	8009b6c <xTimerGenericCommand>
 800a0ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	603b      	str	r3, [r7, #0]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0ca:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <prvSwitchTimerLists+0xc0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1b1      	bne.n	800a038 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <prvSwitchTimerLists+0xc0>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a0da:	4b06      	ldr	r3, [pc, #24]	; (800a0f4 <prvSwitchTimerLists+0xc4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a04      	ldr	r2, [pc, #16]	; (800a0f0 <prvSwitchTimerLists+0xc0>)
 800a0e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0e2:	4a04      	ldr	r2, [pc, #16]	; (800a0f4 <prvSwitchTimerLists+0xc4>)
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	6013      	str	r3, [r2, #0]
}
 800a0e8:	bf00      	nop
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	200019e4 	.word	0x200019e4
 800a0f4:	200019e8 	.word	0x200019e8

0800a0f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0fe:	f7fd ffe1 	bl	80080c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a102:	4b15      	ldr	r3, [pc, #84]	; (800a158 <prvCheckForValidListAndQueue+0x60>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d120      	bne.n	800a14c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a10a:	4814      	ldr	r0, [pc, #80]	; (800a15c <prvCheckForValidListAndQueue+0x64>)
 800a10c:	f7fd fdfa 	bl	8007d04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a110:	4813      	ldr	r0, [pc, #76]	; (800a160 <prvCheckForValidListAndQueue+0x68>)
 800a112:	f7fd fdf7 	bl	8007d04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a116:	4b13      	ldr	r3, [pc, #76]	; (800a164 <prvCheckForValidListAndQueue+0x6c>)
 800a118:	4a10      	ldr	r2, [pc, #64]	; (800a15c <prvCheckForValidListAndQueue+0x64>)
 800a11a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a11c:	4b12      	ldr	r3, [pc, #72]	; (800a168 <prvCheckForValidListAndQueue+0x70>)
 800a11e:	4a10      	ldr	r2, [pc, #64]	; (800a160 <prvCheckForValidListAndQueue+0x68>)
 800a120:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a122:	2300      	movs	r3, #0
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	4b11      	ldr	r3, [pc, #68]	; (800a16c <prvCheckForValidListAndQueue+0x74>)
 800a128:	4a11      	ldr	r2, [pc, #68]	; (800a170 <prvCheckForValidListAndQueue+0x78>)
 800a12a:	2110      	movs	r1, #16
 800a12c:	200a      	movs	r0, #10
 800a12e:	f7fe f953 	bl	80083d8 <xQueueGenericCreateStatic>
 800a132:	4603      	mov	r3, r0
 800a134:	4a08      	ldr	r2, [pc, #32]	; (800a158 <prvCheckForValidListAndQueue+0x60>)
 800a136:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a138:	4b07      	ldr	r3, [pc, #28]	; (800a158 <prvCheckForValidListAndQueue+0x60>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d005      	beq.n	800a14c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a140:	4b05      	ldr	r3, [pc, #20]	; (800a158 <prvCheckForValidListAndQueue+0x60>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	490b      	ldr	r1, [pc, #44]	; (800a174 <prvCheckForValidListAndQueue+0x7c>)
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe fd6c 	bl	8008c24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a14c:	f7fd ffea 	bl	8008124 <vPortExitCritical>
}
 800a150:	bf00      	nop
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	200019ec 	.word	0x200019ec
 800a15c:	200019bc 	.word	0x200019bc
 800a160:	200019d0 	.word	0x200019d0
 800a164:	200019e4 	.word	0x200019e4
 800a168:	200019e8 	.word	0x200019e8
 800a16c:	20001a98 	.word	0x20001a98
 800a170:	200019f8 	.word	0x200019f8
 800a174:	0800a240 	.word	0x0800a240

0800a178 <__libc_init_array>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	4d0d      	ldr	r5, [pc, #52]	; (800a1b0 <__libc_init_array+0x38>)
 800a17c:	4c0d      	ldr	r4, [pc, #52]	; (800a1b4 <__libc_init_array+0x3c>)
 800a17e:	1b64      	subs	r4, r4, r5
 800a180:	10a4      	asrs	r4, r4, #2
 800a182:	2600      	movs	r6, #0
 800a184:	42a6      	cmp	r6, r4
 800a186:	d109      	bne.n	800a19c <__libc_init_array+0x24>
 800a188:	4d0b      	ldr	r5, [pc, #44]	; (800a1b8 <__libc_init_array+0x40>)
 800a18a:	4c0c      	ldr	r4, [pc, #48]	; (800a1bc <__libc_init_array+0x44>)
 800a18c:	f000 f82e 	bl	800a1ec <_init>
 800a190:	1b64      	subs	r4, r4, r5
 800a192:	10a4      	asrs	r4, r4, #2
 800a194:	2600      	movs	r6, #0
 800a196:	42a6      	cmp	r6, r4
 800a198:	d105      	bne.n	800a1a6 <__libc_init_array+0x2e>
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a0:	4798      	blx	r3
 800a1a2:	3601      	adds	r6, #1
 800a1a4:	e7ee      	b.n	800a184 <__libc_init_array+0xc>
 800a1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1aa:	4798      	blx	r3
 800a1ac:	3601      	adds	r6, #1
 800a1ae:	e7f2      	b.n	800a196 <__libc_init_array+0x1e>
 800a1b0:	0800a2d8 	.word	0x0800a2d8
 800a1b4:	0800a2d8 	.word	0x0800a2d8
 800a1b8:	0800a2d8 	.word	0x0800a2d8
 800a1bc:	0800a2dc 	.word	0x0800a2dc

0800a1c0 <memcpy>:
 800a1c0:	440a      	add	r2, r1
 800a1c2:	4291      	cmp	r1, r2
 800a1c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1c8:	d100      	bne.n	800a1cc <memcpy+0xc>
 800a1ca:	4770      	bx	lr
 800a1cc:	b510      	push	{r4, lr}
 800a1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1d6:	4291      	cmp	r1, r2
 800a1d8:	d1f9      	bne.n	800a1ce <memcpy+0xe>
 800a1da:	bd10      	pop	{r4, pc}

0800a1dc <memset>:
 800a1dc:	4402      	add	r2, r0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d100      	bne.n	800a1e6 <memset+0xa>
 800a1e4:	4770      	bx	lr
 800a1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ea:	e7f9      	b.n	800a1e0 <memset+0x4>

0800a1ec <_init>:
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	bf00      	nop
 800a1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f2:	bc08      	pop	{r3}
 800a1f4:	469e      	mov	lr, r3
 800a1f6:	4770      	bx	lr

0800a1f8 <_fini>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	bf00      	nop
 800a1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fe:	bc08      	pop	{r3}
 800a200:	469e      	mov	lr, r3
 800a202:	4770      	bx	lr
