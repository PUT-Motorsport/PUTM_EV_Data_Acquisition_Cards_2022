
data_aqusition_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a268  0800a268  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a268  0800a268  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a268  0800a268  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a268  0800a268  0001a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a26c  0800a26c  0001a26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b68  20000010  0800a280  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  0800a280  00021b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040879  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d7a  00000000  00000000  000608b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b08  00000000  00000000  00065638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002930  00000000  00000000  00068140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032a95  00000000  00000000  0006aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ac6  00000000  00000000  0009d505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00143b5c  00000000  00000000  000c5fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00209b27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba94  00000000  00000000  00209b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a17c 	.word	0x0800a17c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	0800a17c 	.word	0x0800a17c

08000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>:
	 * @param  pBuffer: pointer to data to be read.
	 * @param  RegisterAddr: specifies internal address register to be read.
	 * @param  NumByteToRead: number of bytes to be read.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Read(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4611      	mov	r1, r2
 800020c:	461a      	mov	r2, r3
 800020e:	460b      	mov	r3, r1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4613      	mov	r3, r2
 8000214:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToRead) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f003 ff8f 	bl	8004140 <HAL_GPIO_WritePin>
		uint8_t msg = RegisterAddr | 0x80;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000228:	b2db      	uxtb	r3, r3
 800022a:	75fb      	strb	r3, [r7, #23]
		/* Write Reg Address */
		HAL_SPI_Transmit(&hspi1, &msg, 1, 100);
 800022c:	f107 0117 	add.w	r1, r7, #23
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	2201      	movs	r2, #1
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000236:	f006 f89a 	bl	800636e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, pBuffer, nBytesToRead, 100);
 800023a:	88ba      	ldrh	r2, [r7, #4]
 800023c:	2364      	movs	r3, #100	; 0x64
 800023e:	68b9      	ldr	r1, [r7, #8]
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000242:	f006 fa02 	bl	800664a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2110      	movs	r1, #16
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f003 ff77 	bl	8004140 <HAL_GPIO_WritePin>

		return 0;
 8000252:	2300      	movs	r3, #0
	}
 8000254:	4618      	mov	r0, r3
 8000256:	3718      	adds	r7, #24
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000150 	.word	0x20000150

08000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>:
	 * @param  pBuffer: pointer to data to be written.
	 * @param  RegisterAddr: specifies internal address register to be written.
	 * @param  NumByteToWrite: number of bytes to write.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Write(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	4611      	mov	r1, r2
 800026c:	461a      	mov	r2, r3
 800026e:	460b      	mov	r3, r1
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	4613      	mov	r3, r2
 8000274:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToWrite) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f003 ff5f 	bl	8004140 <HAL_GPIO_WritePin>
		/* Write Reg Address */
		uint8_t data[2];
		data[0] = RegisterAddr;  // multibyte write
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	753b      	strb	r3, [r7, #20]
		data[1] = *pBuffer;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	757b      	strb	r3, [r7, #21]

		HAL_SPI_Transmit(&hspi1, data, 2, 100);
 800028c:	f107 0114 	add.w	r1, r7, #20
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2202      	movs	r2, #2
 8000294:	4806      	ldr	r0, [pc, #24]	; (80002b0 <_ZN16ISM330DHCXSensor8IO_WriteEPhht+0x50>)
 8000296:	f006 f86a 	bl	800636e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f003 ff4d 	bl	8004140 <HAL_GPIO_WritePin>

		return 0;
 80002a6:	2300      	movs	r3, #0
	}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000150 	.word	0x20000150

080002b4 <_ZN16ISM330DHCXSensorC1Ev>:
/** Constructor SPI
 *  @param spi object
 *  @param cs_pin the chip select pin
 *  @param spi_speed the SPI speed
 */
ISM330DHCXSensor::ISM330DHCXSensor() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(&hspi1);
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <_ZN16ISM330DHCXSensorC1Ev+0x3c>)
 80002be:	f005 ffb3 	bl	8006228 <HAL_SPI_Init>
	reg_ctx.write_reg = ISM330DHCX_io_write;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <_ZN16ISM330DHCXSensorC1Ev+0x40>)
 80002c6:	611a      	str	r2, [r3, #16]
	reg_ctx.read_reg = ISM330DHCX_io_read;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <_ZN16ISM330DHCXSensorC1Ev+0x44>)
 80002cc:	615a      	str	r2, [r3, #20]
	reg_ctx.handle = (void*) this;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	619a      	str	r2, [r3, #24]
	address = 0U;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
	acc_is_enabled = 0U;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	735a      	strb	r2, [r3, #13]
}
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000150 	.word	0x20000150
 80002f4:	08000e71 	.word	0x08000e71
 80002f8:	08000e9b 	.word	0x08000e9b

080002fc <_ZN16ISM330DHCXSensor4InitEv>:

/**
 *  @brief Initialize the sensor
 *  @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::Init() {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]

	/* SW reset */
	if (ism330dhcx_reset_set(&(reg_ctx), PROPERTY_ENABLE) != ISM330DHCX_OK) {
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3310      	adds	r3, #16
 8000308:	2101      	movs	r1, #1
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fa2e 	bl	800176c <ism330dhcx_reset_set>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	bf14      	ite	ne
 8000316:	2301      	movne	r3, #1
 8000318:	2300      	moveq	r3, #0
 800031a:	b2db      	uxtb	r3, r3
 800031c:	2b00      	cmp	r3, #0
 800031e:	d002      	beq.n	8000326 <_ZN16ISM330DHCXSensor4InitEv+0x2a>
		return ISM330DHCX_ERROR;
 8000320:	f04f 33ff 	mov.w	r3, #4294967295
 8000324:	e07d      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* Enable register address automatically incremented during a multiple byte
	 access with a serial interface */
	if (ism330dhcx_auto_increment_set(&(reg_ctx), PROPERTY_ENABLE)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3310      	adds	r3, #16
 800032a:	2101      	movs	r1, #1
 800032c:	4618      	mov	r0, r3
 800032e:	f001 fa43 	bl	80017b8 <ism330dhcx_auto_increment_set>
 8000332:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000334:	2b00      	cmp	r3, #0
 8000336:	bf14      	ite	ne
 8000338:	2301      	movne	r3, #1
 800033a:	2300      	moveq	r3, #0
 800033c:	b2db      	uxtb	r3, r3
	if (ism330dhcx_auto_increment_set(&(reg_ctx), PROPERTY_ENABLE)
 800033e:	2b00      	cmp	r3, #0
 8000340:	d002      	beq.n	8000348 <_ZN16ISM330DHCXSensor4InitEv+0x4c>
		return ISM330DHCX_ERROR;
 8000342:	f04f 33ff 	mov.w	r3, #4294967295
 8000346:	e06c      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* Enable BDU */
	if (ism330dhcx_block_data_update_set(&(reg_ctx), PROPERTY_ENABLE)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3310      	adds	r3, #16
 800034c:	2101      	movs	r1, #1
 800034e:	4618      	mov	r0, r3
 8000350:	f001 f99e 	bl	8001690 <ism330dhcx_block_data_update_set>
 8000354:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000356:	2b00      	cmp	r3, #0
 8000358:	bf14      	ite	ne
 800035a:	2301      	movne	r3, #1
 800035c:	2300      	moveq	r3, #0
 800035e:	b2db      	uxtb	r3, r3
	if (ism330dhcx_block_data_update_set(&(reg_ctx), PROPERTY_ENABLE)
 8000360:	2b00      	cmp	r3, #0
 8000362:	d002      	beq.n	800036a <_ZN16ISM330DHCXSensor4InitEv+0x6e>
		return ISM330DHCX_ERROR;
 8000364:	f04f 33ff 	mov.w	r3, #4294967295
 8000368:	e05b      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* FIFO mode selection */
	if (ism330dhcx_fifo_mode_set(&(reg_ctx), ISM330DHCX_BYPASS_MODE)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3310      	adds	r3, #16
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f001 fa93 	bl	800189c <ism330dhcx_fifo_mode_set>
 8000376:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000378:	2b00      	cmp	r3, #0
 800037a:	bf14      	ite	ne
 800037c:	2301      	movne	r3, #1
 800037e:	2300      	moveq	r3, #0
 8000380:	b2db      	uxtb	r3, r3
	if (ism330dhcx_fifo_mode_set(&(reg_ctx), ISM330DHCX_BYPASS_MODE)
 8000382:	2b00      	cmp	r3, #0
 8000384:	d002      	beq.n	800038c <_ZN16ISM330DHCXSensor4InitEv+0x90>
		return ISM330DHCX_ERROR;
 8000386:	f04f 33ff 	mov.w	r3, #4294967295
 800038a:	e04a      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* ACCELEROMETER Output data rate selection - power down */
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_OFF)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3310      	adds	r3, #16
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fe24 	bl	8000fe0 <ism330dhcx_xl_data_rate_set>
 8000398:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 800039a:	2b00      	cmp	r3, #0
 800039c:	bf14      	ite	ne
 800039e:	2301      	movne	r3, #1
 80003a0:	2300      	moveq	r3, #0
 80003a2:	b2db      	uxtb	r3, r3
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_OFF)
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d002      	beq.n	80003ae <_ZN16ISM330DHCXSensor4InitEv+0xb2>
		return ISM330DHCX_ERROR;
 80003a8:	f04f 33ff 	mov.w	r3, #4294967295
 80003ac:	e039      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* ACCELEROMETER Full scale selection */
	if (ism330dhcx_xl_full_scale_set(&(reg_ctx), ISM330DHCX_2g)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3310      	adds	r3, #16
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fdb5 	bl	8000f24 <ism330dhcx_xl_full_scale_set>
 80003ba:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80003bc:	2b00      	cmp	r3, #0
 80003be:	bf14      	ite	ne
 80003c0:	2301      	movne	r3, #1
 80003c2:	2300      	moveq	r3, #0
 80003c4:	b2db      	uxtb	r3, r3
	if (ism330dhcx_xl_full_scale_set(&(reg_ctx), ISM330DHCX_2g)
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d002      	beq.n	80003d0 <_ZN16ISM330DHCXSensor4InitEv+0xd4>
		return ISM330DHCX_ERROR;
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295
 80003ce:	e028      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* GYROSCOPE Output data rate selection - power down */
	if (ism330dhcx_gy_data_rate_set(&(reg_ctx), ISM330DHCX_GY_ODR_OFF)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3310      	adds	r3, #16
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 ffea 	bl	80013b0 <ism330dhcx_gy_data_rate_set>
 80003dc:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80003de:	2b00      	cmp	r3, #0
 80003e0:	bf14      	ite	ne
 80003e2:	2301      	movne	r3, #1
 80003e4:	2300      	moveq	r3, #0
 80003e6:	b2db      	uxtb	r3, r3
	if (ism330dhcx_gy_data_rate_set(&(reg_ctx), ISM330DHCX_GY_ODR_OFF)
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <_ZN16ISM330DHCXSensor4InitEv+0xf6>
		return ISM330DHCX_ERROR;
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295
 80003f0:	e017      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	/* GYROSCOPE Full scale selection */
	if (ism330dhcx_gy_full_scale_set(&(reg_ctx), ISM330DHCX_2000dps)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3310      	adds	r3, #16
 80003f6:	210c      	movs	r1, #12
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 ff61 	bl	80012c0 <ism330dhcx_gy_full_scale_set>
 80003fe:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000400:	2b00      	cmp	r3, #0
 8000402:	bf14      	ite	ne
 8000404:	2301      	movne	r3, #1
 8000406:	2300      	moveq	r3, #0
 8000408:	b2db      	uxtb	r3, r3
	if (ism330dhcx_gy_full_scale_set(&(reg_ctx), ISM330DHCX_2000dps)
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <_ZN16ISM330DHCXSensor4InitEv+0x118>
		return ISM330DHCX_ERROR;
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
 8000412:	e006      	b.n	8000422 <_ZN16ISM330DHCXSensor4InitEv+0x126>
	}

	acc_is_enabled = 0U;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2200      	movs	r2, #0
 8000418:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2200      	movs	r2, #0
 800041e:	735a      	strb	r2, [r3, #13]

	return ISM330DHCX_OK;
 8000420:	2300      	movs	r3, #0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <_ZN16ISM330DHCXSensor5beginEv>:

/**
 * @brief  Configure the sensor in order to be used
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::begin() {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000434:	4812      	ldr	r0, [pc, #72]	; (8000480 <_ZN16ISM330DHCXSensor5beginEv+0x54>)
 8000436:	f005 fef7 	bl	8006228 <HAL_SPI_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	bf14      	ite	ne
 8000440:	2301      	movne	r3, #1
 8000442:	2300      	moveq	r3, #0
 8000444:	b2db      	uxtb	r3, r3
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <_ZN16ISM330DHCXSensor5beginEv+0x22>
		Error_Handler();
 800044a:	f001 fedb 	bl	8002204 <Error_Handler>
	}
	// Configure CS pin
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800044e:	2201      	movs	r2, #1
 8000450:	2110      	movs	r1, #16
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f003 fe73 	bl	8004140 <HAL_GPIO_WritePin>

	if (Init() != ISM330DHCX_OK) {
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f7ff ff4e 	bl	80002fc <_ZN16ISM330DHCXSensor4InitEv>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	bf14      	ite	ne
 8000466:	2301      	movne	r3, #1
 8000468:	2300      	moveq	r3, #0
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d002      	beq.n	8000476 <_ZN16ISM330DHCXSensor5beginEv+0x4a>
		return ISM330DHCX_ERROR;
 8000470:	f04f 33ff 	mov.w	r3, #4294967295
 8000474:	e000      	b.n	8000478 <_ZN16ISM330DHCXSensor5beginEv+0x4c>
	}

	return ISM330DHCX_OK;
 8000476:	2300      	movs	r3, #0
}
 8000478:	4618      	mov	r0, r3
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000150 	.word	0x20000150

08000484 <_ZN16ISM330DHCXSensor10ACC_EnableEv>:

/**
 * @brief Enabled the ISM330DHCX accelerometer sensor
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_Enable() {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	if (acc_is_enabled == 1U) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	7b1b      	ldrb	r3, [r3, #12]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d101      	bne.n	8000498 <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x14>
		return ISM330DHCX_OK;
 8000494:	2300      	movs	r3, #0
 8000496:	e014      	b.n	80004c2 <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x3e>
	}

	/*ODR selection*/
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_104Hz)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3310      	adds	r3, #16
 800049c:	2104      	movs	r1, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 fd9e 	bl	8000fe0 <ism330dhcx_xl_data_rate_set>
 80004a4:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	bf14      	ite	ne
 80004aa:	2301      	movne	r3, #1
 80004ac:	2300      	moveq	r3, #0
 80004ae:	b2db      	uxtb	r3, r3
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), ISM330DHCX_XL_ODR_104Hz)
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d002      	beq.n	80004ba <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x36>
		return ISM330DHCX_ERROR;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	e003      	b.n	80004c2 <_ZN16ISM330DHCXSensor10ACC_EnableEv+0x3e>
	}

	acc_is_enabled = 1U;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2201      	movs	r2, #1
 80004be:	731a      	strb	r2, [r3, #12]
	return ISM330DHCX_OK;
 80004c0:	2300      	movs	r3, #0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf>:
 * @brief Get the ISM330DHCX accelerometer sensitivity
 * @param Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_GetSensitivity(
		float *Sensitivity) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_xl_t full_scale;
	ISM330DHCXStatusTypeDef ret = ISM330DHCX_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]

	/**Read actual full scale selection from sensor  */
	if (ism330dhcx_xl_full_scale_get(&reg_ctx, &full_scale) != ISM330DHCX_OK) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3310      	adds	r3, #16
 80004de:	f107 020e 	add.w	r2, r7, #14
 80004e2:	4611      	mov	r1, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fd43 	bl	8000f70 <ism330dhcx_xl_full_scale_get>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	bf14      	ite	ne
 80004f0:	2301      	movne	r3, #1
 80004f2:	2300      	moveq	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d002      	beq.n	8000500 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x34>
		return ISM330DHCX_ERROR;
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	e022      	b.n	8000546 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x7a>
	}

	/*Store the value of Sensitivity based on actual full scale*/
	switch (full_scale) {
 8000500:	7bbb      	ldrb	r3, [r7, #14]
 8000502:	2b03      	cmp	r3, #3
 8000504:	d81a      	bhi.n	800053c <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x70>
 8000506:	a201      	add	r2, pc, #4	; (adr r2, 800050c <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x40>)
 8000508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050c:	0800051d 	.word	0x0800051d
 8000510:	08000535 	.word	0x08000535
 8000514:	08000525 	.word	0x08000525
 8000518:	0800052d 	.word	0x0800052d
	case ISM330DHCX_2g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x84>)
 8000520:	601a      	str	r2, [r3, #0]
		break;
 8000522:	e00e      	b.n	8000542 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	case ISM330DHCX_4g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x88>)
 8000528:	601a      	str	r2, [r3, #0]
		break;
 800052a:	e00a      	b.n	8000542 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	case ISM330DHCX_8g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x8c>)
 8000530:	601a      	str	r2, [r3, #0]
		break;
 8000532:	e006      	b.n	8000542 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	case ISM330DHCX_16g:
		*Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x90>)
 8000538:	601a      	str	r2, [r3, #0]
		break;
 800053a:	e002      	b.n	8000542 <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf+0x76>

	default:
		ret = ISM330DHCX_ERROR;
 800053c:	23ff      	movs	r3, #255	; 0xff
 800053e:	73fb      	strb	r3, [r7, #15]
		break;
 8000540:	bf00      	nop
	}
	return ret;
 8000542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	3d79db23 	.word	0x3d79db23
 8000554:	3df9db23 	.word	0x3df9db23
 8000558:	3e79db23 	.word	0x3e79db23
 800055c:	3ef9db23 	.word	0x3ef9db23

08000560 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf>:
/**
 * @brief Set the ISM330DHCX accelerometer Output Data Rate
 * @param Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_SetOutputDataRate(float Odr) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_odr_xl_t new_odr;

	new_odr =
			(Odr <= 12.5f) ? ISM330DHCX_XL_ODR_12Hz5 :
 800056c:	edd7 7a00 	vldr	s15, [r7]
 8000570:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057c:	d801      	bhi.n	8000582 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x22>
 800057e:	2301      	movs	r3, #1
 8000580:	e058      	b.n	8000634 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 26.0f) ? ISM330DHCX_XL_ODR_26Hz :
 8000582:	edd7 7a00 	vldr	s15, [r7]
 8000586:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800058a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800058e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000592:	d801      	bhi.n	8000598 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x38>
 8000594:	2302      	movs	r3, #2
 8000596:	e04d      	b.n	8000634 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 52.0f) ? ISM330DHCX_XL_ODR_52Hz :
 8000598:	edd7 7a00 	vldr	s15, [r7]
 800059c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000664 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x104>
 80005a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a8:	d801      	bhi.n	80005ae <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x4e>
 80005aa:	2303      	movs	r3, #3
 80005ac:	e042      	b.n	8000634 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 104.0f) ? ISM330DHCX_XL_ODR_104Hz :
 80005ae:	edd7 7a00 	vldr	s15, [r7]
 80005b2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000668 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x108>
 80005b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	d801      	bhi.n	80005c4 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x64>
 80005c0:	2304      	movs	r3, #4
 80005c2:	e037      	b.n	8000634 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 208.0f) ? ISM330DHCX_XL_ODR_208Hz :
 80005c4:	edd7 7a00 	vldr	s15, [r7]
 80005c8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800066c <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x10c>
 80005cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	d801      	bhi.n	80005da <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x7a>
 80005d6:	2305      	movs	r3, #5
 80005d8:	e02c      	b.n	8000634 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 417.0f) ? ISM330DHCX_XL_ODR_417Hz :
 80005da:	edd7 7a00 	vldr	s15, [r7]
 80005de:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000670 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x110>
 80005e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ea:	d801      	bhi.n	80005f0 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x90>
 80005ec:	2306      	movs	r3, #6
 80005ee:	e021      	b.n	8000634 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 833.0f) ? ISM330DHCX_XL_ODR_833Hz :
 80005f0:	edd7 7a00 	vldr	s15, [r7]
 80005f4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000674 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x114>
 80005f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000600:	d801      	bhi.n	8000606 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xa6>
 8000602:	2307      	movs	r3, #7
 8000604:	e016      	b.n	8000634 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz :
 8000606:	edd7 7a00 	vldr	s15, [r7]
 800060a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000678 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x118>
 800060e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000616:	d801      	bhi.n	800061c <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xbc>
 8000618:	2308      	movs	r3, #8
 800061a:	e00b      	b.n	8000634 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
			(Odr <= 3333.0f) ?
 800061c:	edd7 7a00 	vldr	s15, [r7]
 8000620:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800067c <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0x11c>
 8000624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062c:	d801      	bhi.n	8000632 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd2>
 800062e:	2309      	movs	r3, #9
 8000630:	e000      	b.n	8000634 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xd4>
 8000632:	230a      	movs	r3, #10
	new_odr =
 8000634:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_XL_ODR_3333Hz : ISM330DHCX_XL_ODR_6667Hz;

	/* Output data rate selection */
	if (ism330dhcx_xl_data_rate_set(&(reg_ctx), new_odr) != ISM330DHCX_OK) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3310      	adds	r3, #16
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	4611      	mov	r1, r2
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fcce 	bl	8000fe0 <ism330dhcx_xl_data_rate_set>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	bf14      	ite	ne
 800064a:	2301      	movne	r3, #1
 800064c:	2300      	moveq	r3, #0
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xfa>
		return ISM330DHCX_ERROR;
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	e000      	b.n	800065c <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf+0xfc>
	}

	return ISM330DHCX_OK;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	42500000 	.word	0x42500000
 8000668:	42d00000 	.word	0x42d00000
 800066c:	43500000 	.word	0x43500000
 8000670:	43d08000 	.word	0x43d08000
 8000674:	44504000 	.word	0x44504000
 8000678:	44d06000 	.word	0x44d06000
 800067c:	45505000 	.word	0x45505000

08000680 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl>:
/**
 * @brief Set the ISM330DHCX accelerometer sensor full scale
 * @param fullscale the fullscale to be set
 * @retval  0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_SetFullScale(int32_t FullScale) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_xl_t new_fs;

	new_fs = (FullScale <= 2) ? ISM330DHCX_2g :
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b02      	cmp	r3, #2
 800068e:	dd0b      	ble.n	80006a8 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x28>
				(FullScale <= 4) ? ISM330DHCX_4g :
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2b04      	cmp	r3, #4
 8000694:	dd06      	ble.n	80006a4 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x24>
				(FullScale <= 8) ? ISM330DHCX_8g : ISM330DHCX_16g;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b08      	cmp	r3, #8
 800069a:	dc01      	bgt.n	80006a0 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x20>
 800069c:	2303      	movs	r3, #3
 800069e:	e004      	b.n	80006aa <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x2a>
 80006a0:	2301      	movs	r3, #1
 80006a2:	e002      	b.n	80006aa <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x2a>
				(FullScale <= 4) ? ISM330DHCX_4g :
 80006a4:	2302      	movs	r3, #2
 80006a6:	e000      	b.n	80006aa <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x2a>
	new_fs = (FullScale <= 2) ? ISM330DHCX_2g :
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]

	if (ism330dhcx_xl_full_scale_set(&(reg_ctx), new_fs) != ISM330DHCX_OK) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3310      	adds	r3, #16
 80006b0:	7bfa      	ldrb	r2, [r7, #15]
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fc35 	bl	8000f24 <ism330dhcx_xl_full_scale_set>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf14      	ite	ne
 80006c0:	2301      	movne	r3, #1
 80006c2:	2300      	moveq	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x50>
		return ISM330DHCX_ERROR;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	e000      	b.n	80006d2 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl+0x52>
	}

	return ISM330DHCX_OK;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs>:
/**
 * @brief Get the ISM330DHCX accelerometer sensor raw axes
 * @param value pointer where the raw values are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_GetAxesRaw(int16_t *Value) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
	axis3bit16_t data_raw;

	/*Read raw data values */
	if (ism330dhcx_acceleration_raw_get(&reg_ctx, data_raw.u8bit)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3310      	adds	r3, #16
 80006e8:	f107 0208 	add.w	r2, r7, #8
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f805 	bl	80016fe <ism330dhcx_acceleration_raw_get>
 80006f4:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
	if (ism330dhcx_acceleration_raw_get(&reg_ctx, data_raw.u8bit)
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs+0x30>
		return ISM330DHCX_ERROR;
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	e00e      	b.n	8000728 <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs+0x4e>
	}

	/*Formatting data */
	Value[0] = data_raw.i16bit[0];
 800070a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	801a      	strh	r2, [r3, #0]
	Value[1] = data_raw.i16bit[1];
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	3302      	adds	r3, #2
 8000716:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800071a:	801a      	strh	r2, [r3, #0]
	Value[2] = data_raw.i16bit[2];
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	3304      	adds	r3, #4
 8000720:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000724:	801a      	strh	r2, [r3, #0]

	return ISM330DHCX_OK;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl>:
/**
 * @brief Get the ISM330DHCX accelerometer sensor axes
 * @param acceleration pointer where the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::ACC_GetAxes(int32_t *Acceleration) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
	float sensitivity = 0.0f;
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
	int16_t data_raw[3];

	/* Get actualSensitivity */
	if (ACC_GetSensitivity(&sensitivity) != ISM330DHCX_OK) {
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff fec0 	bl	80004cc <_ZN16ISM330DHCXSensor18ACC_GetSensitivityEPf>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf14      	ite	ne
 8000752:	2301      	movne	r3, #1
 8000754:	2300      	moveq	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d002      	beq.n	8000762 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0x32>
		return ISM330DHCX_ERROR;
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
 8000760:	e043      	b.n	80007ea <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0xba>
	}

	/*Get Data Raw*/
	if (ACC_GetAxesRaw(data_raw) != ISM330DHCX_OK) {
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ffb6 	bl	80006da <_ZN16ISM330DHCXSensor14ACC_GetAxesRawEPs>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0x54>
		return ISM330DHCX_ERROR;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	e032      	b.n	80007ea <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl+0xba>
	}

	/*Calculate data */
	Acceleration[0] = (int32_t) ((float) data_raw[0] * sensitivity);
 8000784:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000788:	ee07 3a90 	vmov	s15, r3
 800078c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000790:	edd7 7a05 	vldr	s15, [r7, #20]
 8000794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800079c:	ee17 2a90 	vmov	r2, s15
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	601a      	str	r2, [r3, #0]
	Acceleration[1] = (int32_t) ((float) data_raw[1] * sensitivity);
 80007a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	3304      	adds	r3, #4
 80007bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007c0:	ee17 2a90 	vmov	r2, s15
 80007c4:	601a      	str	r2, [r3, #0]
	Acceleration[2] = (int32_t) ((float) data_raw[2] * sensitivity);
 80007c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80007ca:	ee07 3a90 	vmov	s15, r3
 80007ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80007d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	3308      	adds	r3, #8
 80007de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007e2:	ee17 2a90 	vmov	r2, s15
 80007e6:	601a      	str	r2, [r3, #0]

	return ISM330DHCX_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_ZN16ISM330DHCXSensor11GYRO_EnableEv>:

/**
 * @brief Enabled the ISM330DHCX gyroscope sensor
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_Enable() {
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	/*Check if the component is already enabled*/
	if (gyro_is_enabled == 1U) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7b5b      	ldrb	r3, [r3, #13]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d101      	bne.n	8000806 <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x14>
		return ISM330DHCX_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	e014      	b.n	8000830 <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x3e>
	}

	/*Output data rate selection */
	if (ism330dhcx_gy_data_rate_set(&reg_ctx, ISM330DHCX_GY_ODR_104Hz)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3310      	adds	r3, #16
 800080a:	2104      	movs	r1, #4
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fdcf 	bl	80013b0 <ism330dhcx_gy_data_rate_set>
 8000812:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf14      	ite	ne
 8000818:	2301      	movne	r3, #1
 800081a:	2300      	moveq	r3, #0
 800081c:	b2db      	uxtb	r3, r3
	if (ism330dhcx_gy_data_rate_set(&reg_ctx, ISM330DHCX_GY_ODR_104Hz)
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x36>
		return ISM330DHCX_ERROR;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	e003      	b.n	8000830 <_ZN16ISM330DHCXSensor11GYRO_EnableEv+0x3e>
	}

	gyro_is_enabled = 1U;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2201      	movs	r2, #1
 800082c:	735a      	strb	r2, [r3, #13]

	return ISM330DHCX_OK;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf>:
 * @brief Get the ISM330DHCX gyroscope sensitivity
 * @param Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_GetSensitivity(
		float *Sensitivity) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_g_t full_scale;
	ISM330DHCXStatusTypeDef ret = ISM330DHCX_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	73fb      	strb	r3, [r7, #15]

	if (ism330dhcx_gy_full_scale_get(&reg_ctx, &full_scale) != ISM330DHCX_OK) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3310      	adds	r3, #16
 800084a:	f107 020e 	add.w	r2, r7, #14
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fd5b 	bl	800130c <ism330dhcx_gy_full_scale_get>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf14      	ite	ne
 800085c:	2301      	movne	r3, #1
 800085e:	2300      	moveq	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0x34>
		return ISM330DHCX_ERROR;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	e03c      	b.n	80008e6 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xae>
	}

	switch (full_scale) {
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	2b0c      	cmp	r3, #12
 8000870:	d834      	bhi.n	80008dc <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xa4>
 8000872:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0x40>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	080008b5 	.word	0x080008b5
 800087c:	080008d5 	.word	0x080008d5
 8000880:	080008ad 	.word	0x080008ad
 8000884:	080008dd 	.word	0x080008dd
 8000888:	080008bd 	.word	0x080008bd
 800088c:	080008dd 	.word	0x080008dd
 8000890:	080008dd 	.word	0x080008dd
 8000894:	080008dd 	.word	0x080008dd
 8000898:	080008c5 	.word	0x080008c5
 800089c:	080008dd 	.word	0x080008dd
 80008a0:	080008dd 	.word	0x080008dd
 80008a4:	080008dd 	.word	0x080008dd
 80008a8:	080008cd 	.word	0x080008cd
	case ISM330DHCX_125dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xb8>)
 80008b0:	601a      	str	r2, [r3, #0]
		break;
 80008b2:	e016      	b.n	80008e2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_250dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xbc>)
 80008b8:	601a      	str	r2, [r3, #0]
		break;
 80008ba:	e012      	b.n	80008e2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_500dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xc0>)
 80008c0:	601a      	str	r2, [r3, #0]
		break;
 80008c2:	e00e      	b.n	80008e2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_1000dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xc4>)
 80008c8:	601a      	str	r2, [r3, #0]
		break;
 80008ca:	e00a      	b.n	80008e2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_2000dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xc8>)
 80008d0:	601a      	str	r2, [r3, #0]
		break;
 80008d2:	e006      	b.n	80008e2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	case ISM330DHCX_4000dps:
		*Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xcc>)
 80008d8:	601a      	str	r2, [r3, #0]
		break;
 80008da:	e002      	b.n	80008e2 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf+0xaa>
	default:
		ret = ISM330DHCX_ERROR;
 80008dc:	23ff      	movs	r3, #255	; 0xff
 80008de:	73fb      	strb	r3, [r7, #15]
		break;
 80008e0:	bf00      	nop
	}
	return ret;
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	408c0000 	.word	0x408c0000
 80008f4:	410c0000 	.word	0x410c0000
 80008f8:	418c0000 	.word	0x418c0000
 80008fc:	420c0000 	.word	0x420c0000
 8000900:	428c0000 	.word	0x428c0000
 8000904:	430c0000 	.word	0x430c0000

08000908 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf>:
/**
 * @brief Set the ISM330DHCX gyroscope Output Data Rate
 * @param Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_SetOutputDataRate(float Odr) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_odr_g_t new_odr;

	new_odr =
			(Odr <= 12.5f) ? ISM330DHCX_GY_ODR_12Hz5 :
 8000914:	edd7 7a00 	vldr	s15, [r7]
 8000918:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800091c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000924:	d801      	bhi.n	800092a <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x22>
 8000926:	2301      	movs	r3, #1
 8000928:	e058      	b.n	80009dc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 26.0f) ? ISM330DHCX_GY_ODR_26Hz :
 800092a:	edd7 7a00 	vldr	s15, [r7]
 800092e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093a:	d801      	bhi.n	8000940 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x38>
 800093c:	2302      	movs	r3, #2
 800093e:	e04d      	b.n	80009dc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 52.0f) ? ISM330DHCX_GY_ODR_52Hz :
 8000940:	edd7 7a00 	vldr	s15, [r7]
 8000944:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000a0c <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x104>
 8000948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000950:	d801      	bhi.n	8000956 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x4e>
 8000952:	2303      	movs	r3, #3
 8000954:	e042      	b.n	80009dc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 104.0f) ? ISM330DHCX_GY_ODR_104Hz :
 8000956:	edd7 7a00 	vldr	s15, [r7]
 800095a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000a10 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x108>
 800095e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	d801      	bhi.n	800096c <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x64>
 8000968:	2304      	movs	r3, #4
 800096a:	e037      	b.n	80009dc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 208.0f) ? ISM330DHCX_GY_ODR_208Hz :
 800096c:	edd7 7a00 	vldr	s15, [r7]
 8000970:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000a14 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x10c>
 8000974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097c:	d801      	bhi.n	8000982 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x7a>
 800097e:	2305      	movs	r3, #5
 8000980:	e02c      	b.n	80009dc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 417.0f) ? ISM330DHCX_GY_ODR_417Hz :
 8000982:	edd7 7a00 	vldr	s15, [r7]
 8000986:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000a18 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x110>
 800098a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800098e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000992:	d801      	bhi.n	8000998 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x90>
 8000994:	2306      	movs	r3, #6
 8000996:	e021      	b.n	80009dc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 833.0f) ? ISM330DHCX_GY_ODR_833Hz :
 8000998:	edd7 7a00 	vldr	s15, [r7]
 800099c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000a1c <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x114>
 80009a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a8:	d801      	bhi.n	80009ae <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xa6>
 80009aa:	2307      	movs	r3, #7
 80009ac:	e016      	b.n	80009dc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz :
 80009ae:	edd7 7a00 	vldr	s15, [r7]
 80009b2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000a20 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x118>
 80009b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	d801      	bhi.n	80009c4 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xbc>
 80009c0:	2308      	movs	r3, #8
 80009c2:	e00b      	b.n	80009dc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
			(Odr <= 3333.0f) ?
 80009c4:	edd7 7a00 	vldr	s15, [r7]
 80009c8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000a24 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0x11c>
 80009cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d4:	d801      	bhi.n	80009da <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd2>
 80009d6:	2309      	movs	r3, #9
 80009d8:	e000      	b.n	80009dc <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xd4>
 80009da:	230a      	movs	r3, #10
	new_odr =
 80009dc:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_GY_ODR_3333Hz : ISM330DHCX_GY_ODR_6667Hz;

	/* Output data rate selection */
	if (ism330dhcx_gy_data_rate_set(&reg_ctx, new_odr) != ISM330DHCX_OK) {
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3310      	adds	r3, #16
 80009e2:	7bfa      	ldrb	r2, [r7, #15]
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fce2 	bl	80013b0 <ism330dhcx_gy_data_rate_set>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xfa>
		return ISM330DHCX_ERROR;
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	e000      	b.n	8000a04 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf+0xfc>
	}

	return ISM330DHCX_OK;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	42500000 	.word	0x42500000
 8000a10:	42d00000 	.word	0x42d00000
 8000a14:	43500000 	.word	0x43500000
 8000a18:	43d08000 	.word	0x43d08000
 8000a1c:	44504000 	.word	0x44504000
 8000a20:	44d06000 	.word	0x44d06000
 8000a24:	45505000 	.word	0x45505000

08000a28 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl>:
/**
 * @brief Set the ISM330DHCX gyroscope sensor full scale
 * @param fullscale the fullscale to be set
 * @retval  0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_SetFullScale(int32_t FullScale) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	ism330dhcx_fs_g_t new_fs;

	new_fs = (FullScale <= 125) ? ISM330DHCX_125dps :
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	2b7d      	cmp	r3, #125	; 0x7d
 8000a36:	dd18      	ble.n	8000a6a <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x42>
				(FullScale <= 250) ? ISM330DHCX_250dps :
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	2bfa      	cmp	r3, #250	; 0xfa
 8000a3c:	dd13      	ble.n	8000a66 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x3e>
				(FullScale <= 500) ? ISM330DHCX_500dps :
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a44:	dd0d      	ble.n	8000a62 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x3a>
				(FullScale <= 1000) ? ISM330DHCX_1000dps :
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a4c:	dd07      	ble.n	8000a5e <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x36>
				(FullScale <= 2000) ? ISM330DHCX_2000dps : ISM330DHCX_4000dps;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a54:	dc01      	bgt.n	8000a5a <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x32>
 8000a56:	230c      	movs	r3, #12
 8000a58:	e008      	b.n	8000a6c <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e006      	b.n	8000a6c <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
				(FullScale <= 1000) ? ISM330DHCX_1000dps :
 8000a5e:	2308      	movs	r3, #8
 8000a60:	e004      	b.n	8000a6c <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
				(FullScale <= 500) ? ISM330DHCX_500dps :
 8000a62:	2304      	movs	r3, #4
 8000a64:	e002      	b.n	8000a6c <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
				(FullScale <= 250) ? ISM330DHCX_250dps :
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x44>
	new_fs = (FullScale <= 125) ? ISM330DHCX_125dps :
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	73fb      	strb	r3, [r7, #15]

	if (ism330dhcx_gy_full_scale_set(&reg_ctx, new_fs) != ISM330DHCX_OK) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3310      	adds	r3, #16
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fc22 	bl	80012c0 <ism330dhcx_gy_full_scale_set>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	bf14      	ite	ne
 8000a82:	2301      	movne	r3, #1
 8000a84:	2300      	moveq	r3, #0
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x6a>
		return ISM330DHCX_ERROR;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	e000      	b.n	8000a94 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl+0x6c>
	}

	return ISM330DHCX_OK;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs>:
/**
 * @brief Get the ISM330DHCX gyroscope sensor raw axes
 * @param value pointer where the raw values are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_GetAxesRaw(int16_t *Value) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	axis3bit16_t data_raw;

	/* Read raw data values */
	if (ism330dhcx_angular_rate_raw_get(&reg_ctx, data_raw.u8bit)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3310      	adds	r3, #16
 8000aaa:	f107 0208 	add.w	r2, r7, #8
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fe13 	bl	80016dc <ism330dhcx_angular_rate_raw_get>
 8000ab6:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf14      	ite	ne
 8000abc:	2301      	movne	r3, #1
 8000abe:	2300      	moveq	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
	if (ism330dhcx_angular_rate_raw_get(&reg_ctx, data_raw.u8bit)
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs+0x30>
		return ISM330DHCX_ERROR;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	e00e      	b.n	8000aea <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs+0x4e>
	}

	/* Format the data */
	Value[0] = data_raw.i16bit[0];
 8000acc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	801a      	strh	r2, [r3, #0]
	Value[1] = data_raw.i16bit[1];
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000adc:	801a      	strh	r2, [r3, #0]
	Value[2] = data_raw.i16bit[2];
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ae6:	801a      	strh	r2, [r3, #0]

	return ISM330DHCX_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl>:
/**
 * @brief Get the ISM330DHCX gyroscope sensor axes
 * @param acceleration pointer where the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::GYRO_GetAxes(int32_t *AngularRate) {
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
	float sensitivity;
	int16_t raw_data[3];

	/*Read raw data values */
	if (GYRO_GetAxesRaw(raw_data) != ISM330DHCX_OK) {
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffca 	bl	8000a9c <_ZN16ISM330DHCXSensor15GYRO_GetAxesRawEPs>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bf14      	ite	ne
 8000b0e:	2301      	movne	r3, #1
 8000b10:	2300      	moveq	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0x2c>
		return ISM330DHCX_ERROR;
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1c:	e043      	b.n	8000ba6 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0xb4>
	}

	/*Read actual sensitivity */
	if (GYRO_GetSensitivity(&sensitivity) != ISM330DHCX_OK) {
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fe87 	bl	8000838 <_ZN16ISM330DHCXSensor19GYRO_GetSensitivityEPf>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf14      	ite	ne
 8000b30:	2301      	movne	r3, #1
 8000b32:	2300      	moveq	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0x4e>
		return ISM330DHCX_ERROR;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e032      	b.n	8000ba6 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl+0xb4>
	}

	AngularRate[0] = (int32_t) ((float) raw_data[0] * sensitivity);
 8000b40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b58:	ee17 2a90 	vmov	r2, s15
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	601a      	str	r2, [r3, #0]
	AngularRate[1] = (int32_t) ((float) raw_data[1] * sensitivity);
 8000b60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b64:	ee07 3a90 	vmov	s15, r3
 8000b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	3304      	adds	r3, #4
 8000b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7c:	ee17 2a90 	vmov	r2, s15
 8000b80:	601a      	str	r2, [r3, #0]
	AngularRate[2] = (int32_t) ((float) raw_data[2] * sensitivity);
 8000b82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	3308      	adds	r3, #8
 8000b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b9e:	ee17 2a90 	vmov	r2, s15
 8000ba2:	601a      	str	r2, [r3, #0]

	return ISM330DHCX_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf>:
/**
 * @brief  Set the ISM330DHCX FIFO ACC ODR value
 * @param  Odr FIFO ODR value
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::FIFO_ACC_Set_BDR(float Bdr) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_bdr_xl_t new_odr;

	new_odr =
			(Bdr <= 12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5 :
 8000bbc:	edd7 7a00 	vldr	s15, [r7]
 8000bc0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bcc:	d801      	bhi.n	8000bd2 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x22>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e058      	b.n	8000c84 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz :
 8000bd2:	edd7 7a00 	vldr	s15, [r7]
 8000bd6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be2:	d801      	bhi.n	8000be8 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x38>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e04d      	b.n	8000c84 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 52.0f) ? ISM330DHCX_XL_BATCHED_AT_52Hz :
 8000be8:	edd7 7a00 	vldr	s15, [r7]
 8000bec:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000cb4 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x104>
 8000bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf8:	d801      	bhi.n	8000bfe <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x4e>
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e042      	b.n	8000c84 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 104.0f) ? ISM330DHCX_XL_BATCHED_AT_104Hz :
 8000bfe:	edd7 7a00 	vldr	s15, [r7]
 8000c02:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000cb8 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x108>
 8000c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	d801      	bhi.n	8000c14 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x64>
 8000c10:	2304      	movs	r3, #4
 8000c12:	e037      	b.n	8000c84 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 208.0f) ? ISM330DHCX_XL_BATCHED_AT_208Hz :
 8000c14:	edd7 7a00 	vldr	s15, [r7]
 8000c18:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000cbc <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x10c>
 8000c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c24:	d801      	bhi.n	8000c2a <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x7a>
 8000c26:	2305      	movs	r3, #5
 8000c28:	e02c      	b.n	8000c84 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 417.0f) ? ISM330DHCX_XL_BATCHED_AT_417Hz :
 8000c2a:	edd7 7a00 	vldr	s15, [r7]
 8000c2e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000cc0 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x110>
 8000c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3a:	d801      	bhi.n	8000c40 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x90>
 8000c3c:	2306      	movs	r3, #6
 8000c3e:	e021      	b.n	8000c84 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 833.0f) ? ISM330DHCX_XL_BATCHED_AT_833Hz :
 8000c40:	edd7 7a00 	vldr	s15, [r7]
 8000c44:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000cc4 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x114>
 8000c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c50:	d801      	bhi.n	8000c56 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xa6>
 8000c52:	2307      	movs	r3, #7
 8000c54:	e016      	b.n	8000c84 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 1667.0f) ? ISM330DHCX_XL_BATCHED_AT_1667Hz :
 8000c56:	edd7 7a00 	vldr	s15, [r7]
 8000c5a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000cc8 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x118>
 8000c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c66:	d801      	bhi.n	8000c6c <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xbc>
 8000c68:	2308      	movs	r3, #8
 8000c6a:	e00b      	b.n	8000c84 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
			(Bdr <= 3333.0f) ?
 8000c6c:	edd7 7a00 	vldr	s15, [r7]
 8000c70:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000ccc <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0x11c>
 8000c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7c:	d801      	bhi.n	8000c82 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd2>
 8000c7e:	2309      	movs	r3, #9
 8000c80:	e000      	b.n	8000c84 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xd4>
 8000c82:	230a      	movs	r3, #10
	new_odr =
 8000c84:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_XL_BATCHED_AT_3333Hz :
					ISM330DHCX_XL_BATCHED_AT_6667Hz;

	if (ism330dhcx_fifo_xl_batch_set(&reg_ctx, new_odr) != ISM330DHCX_OK) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3310      	adds	r3, #16
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fdb8 	bl	8001804 <ism330dhcx_fifo_xl_batch_set>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xfa>
		return ISM330DHCX_ERROR;
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	e000      	b.n	8000cac <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf+0xfc>
	}

	return ISM330DHCX_OK;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	42500000 	.word	0x42500000
 8000cb8:	42d00000 	.word	0x42d00000
 8000cbc:	43500000 	.word	0x43500000
 8000cc0:	43d08000 	.word	0x43d08000
 8000cc4:	44504000 	.word	0x44504000
 8000cc8:	44d06000 	.word	0x44d06000
 8000ccc:	45505000 	.word	0x45505000

08000cd0 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf>:
/**
 * @brief  Set the ISM330DHCX FIFO GYRO ODR value
 * @param  Odr FIFO ODR value
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::FIFO_GYRO_Set_BDR(float Bdr) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	ed87 0a00 	vstr	s0, [r7]
	ism330dhcx_bdr_gy_t new_odr;

	new_odr =
			(Bdr <= 12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5 :
 8000cdc:	edd7 7a00 	vldr	s15, [r7]
 8000ce0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cec:	d801      	bhi.n	8000cf2 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x22>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e058      	b.n	8000da4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz :
 8000cf2:	edd7 7a00 	vldr	s15, [r7]
 8000cf6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	d801      	bhi.n	8000d08 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x38>
 8000d04:	2302      	movs	r3, #2
 8000d06:	e04d      	b.n	8000da4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 52.0f) ? ISM330DHCX_GY_BATCHED_AT_52Hz :
 8000d08:	edd7 7a00 	vldr	s15, [r7]
 8000d0c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000dd4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x104>
 8000d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d18:	d801      	bhi.n	8000d1e <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x4e>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e042      	b.n	8000da4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 104.0f) ? ISM330DHCX_GY_BATCHED_AT_104Hz :
 8000d1e:	edd7 7a00 	vldr	s15, [r7]
 8000d22:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000dd8 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x108>
 8000d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	d801      	bhi.n	8000d34 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x64>
 8000d30:	2304      	movs	r3, #4
 8000d32:	e037      	b.n	8000da4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 208.0f) ? ISM330DHCX_GY_BATCHED_AT_208Hz :
 8000d34:	edd7 7a00 	vldr	s15, [r7]
 8000d38:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000ddc <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x10c>
 8000d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d44:	d801      	bhi.n	8000d4a <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x7a>
 8000d46:	2305      	movs	r3, #5
 8000d48:	e02c      	b.n	8000da4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 417.0f) ? ISM330DHCX_GY_BATCHED_AT_417Hz :
 8000d4a:	edd7 7a00 	vldr	s15, [r7]
 8000d4e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000de0 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x110>
 8000d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5a:	d801      	bhi.n	8000d60 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x90>
 8000d5c:	2306      	movs	r3, #6
 8000d5e:	e021      	b.n	8000da4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 833.0f) ? ISM330DHCX_GY_BATCHED_AT_833Hz :
 8000d60:	edd7 7a00 	vldr	s15, [r7]
 8000d64:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000de4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x114>
 8000d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d70:	d801      	bhi.n	8000d76 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xa6>
 8000d72:	2307      	movs	r3, #7
 8000d74:	e016      	b.n	8000da4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 1667.0f) ? ISM330DHCX_GY_BATCHED_AT_1667Hz :
 8000d76:	edd7 7a00 	vldr	s15, [r7]
 8000d7a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000de8 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x118>
 8000d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d86:	d801      	bhi.n	8000d8c <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xbc>
 8000d88:	2308      	movs	r3, #8
 8000d8a:	e00b      	b.n	8000da4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
			(Bdr <= 3333.0f) ?
 8000d8c:	edd7 7a00 	vldr	s15, [r7]
 8000d90:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000dec <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0x11c>
 8000d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9c:	d801      	bhi.n	8000da2 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd2>
 8000d9e:	2309      	movs	r3, #9
 8000da0:	e000      	b.n	8000da4 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xd4>
 8000da2:	230a      	movs	r3, #10
	new_odr =
 8000da4:	73fb      	strb	r3, [r7, #15]
					ISM330DHCX_GY_BATCHED_AT_3333Hz :
					ISM330DHCX_GY_BATCHED_AT_6667Hz;

	if (ism330dhcx_fifo_gy_batch_set(&reg_ctx, new_odr) != ISM330DHCX_OK) {
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3310      	adds	r3, #16
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 fd4e 	bl	8001850 <ism330dhcx_fifo_gy_batch_set>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	bf14      	ite	ne
 8000dba:	2301      	movne	r3, #1
 8000dbc:	2300      	moveq	r3, #0
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xfa>
		return ISM330DHCX_ERROR;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	e000      	b.n	8000dcc <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf+0xfc>
	}

	return ISM330DHCX_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	42500000 	.word	0x42500000
 8000dd8:	42d00000 	.word	0x42d00000
 8000ddc:	43500000 	.word	0x43500000
 8000de0:	43d08000 	.word	0x43d08000
 8000de4:	44504000 	.word	0x44504000
 8000de8:	44d06000 	.word	0x44d06000
 8000dec:	45505000 	.word	0x45505000

08000df0 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh>:
/**
 * @brief  Set the ISM330DHCX FIFO mode
 * @param  Mode FIFO mode
 * @retval 0 in case of success, an error code otherwise
 */
ISM330DHCXStatusTypeDef ISM330DHCXSensor::FIFO_Set_Mode(uint8_t Mode) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
	ISM330DHCXStatusTypeDef ret = ISM330DHCX_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

	/* Verify that the passed parameter contains one of the valid values */
	switch ((ism330dhcx_fifo_mode_t) Mode) {
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	bf8c      	ite	hi
 8000e06:	2201      	movhi	r2, #1
 8000e08:	2200      	movls	r2, #0
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d10b      	bne.n	8000e28 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x38>
 8000e10:	2201      	movs	r2, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bf14      	ite	ne
 8000e1e:	2301      	movne	r3, #1
 8000e20:	2300      	moveq	r3, #0
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x3e>
	case ISM330DHCX_BYPASS_TO_STREAM_MODE:
	case ISM330DHCX_STREAM_MODE:
		break;

	default:
		ret = ISM330DHCX_ERROR;
 8000e28:	23ff      	movs	r3, #255	; 0xff
 8000e2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e2c:	e000      	b.n	8000e30 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x40>
		break;
 8000e2e:	bf00      	nop
	}

	if (ret == ISM330DHCX_ERROR) {
 8000e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d102      	bne.n	8000e40 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x50>
		return ret;
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	e013      	b.n	8000e68 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x78>
	}

	if (ism330dhcx_fifo_mode_set(&reg_ctx, (ism330dhcx_fifo_mode_t) Mode)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3310      	adds	r3, #16
 8000e44:	78fa      	ldrb	r2, [r7, #3]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fd27 	bl	800189c <ism330dhcx_fifo_mode_set>
 8000e4e:	4603      	mov	r3, r0
			!= ISM330DHCX_OK) {
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf14      	ite	ne
 8000e54:	2301      	movne	r3, #1
 8000e56:	2300      	moveq	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
	if (ism330dhcx_fifo_mode_set(&reg_ctx, (ism330dhcx_fifo_mode_t) Mode)
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x74>
		return ISM330DHCX_ERROR;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e001      	b.n	8000e68 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh+0x78>
	}

	return ret;
 8000e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <ISM330DHCX_io_write>:

	return ISM330DHCX_OK;
}

int32_t ISM330DHCX_io_write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer,
		uint16_t nBytesToWrite) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	72fb      	strb	r3, [r7, #11]
 8000e80:	4613      	mov	r3, r2
 8000e82:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Write(pBuffer, WriteAddr,
 8000e84:	893b      	ldrh	r3, [r7, #8]
 8000e86:	7afa      	ldrb	r2, [r7, #11]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f7ff f9e8 	bl	8000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>
 8000e90:	4603      	mov	r3, r0
			nBytesToWrite);
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <ISM330DHCX_io_read>:

int32_t ISM330DHCX_io_read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer,
		uint16_t nBytesToRead) {
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	72fb      	strb	r3, [r7, #11]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Read(pBuffer, ReadAddr,
 8000eae:	893b      	ldrh	r3, [r7, #8]
 8000eb0:	7afa      	ldrb	r2, [r7, #11]
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff f9a3 	bl	8000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>
 8000eba:	4603      	mov	r3, r0
			nBytesToRead);
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <ism330dhcx_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330dhcx_read_reg(ism330dhcx_ctx_t *ctx, uint8_t reg, uint8_t *data,
                            uint16_t len)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	72fb      	strb	r3, [r7, #11]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	685c      	ldr	r4, [r3, #4]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6898      	ldr	r0, [r3, #8]
 8000ee0:	893b      	ldrh	r3, [r7, #8]
 8000ee2:	7af9      	ldrb	r1, [r7, #11]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	47a0      	blx	r4
 8000ee8:	6178      	str	r0, [r7, #20]
  return ret;
 8000eea:	697b      	ldr	r3, [r7, #20]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}

08000ef4 <ism330dhcx_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330dhcx_write_reg(ism330dhcx_ctx_t *ctx, uint8_t reg, uint8_t *data,
                             uint16_t len)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	461a      	mov	r2, r3
 8000f00:	460b      	mov	r3, r1
 8000f02:	72fb      	strb	r3, [r7, #11]
 8000f04:	4613      	mov	r3, r2
 8000f06:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681c      	ldr	r4, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6898      	ldr	r0, [r3, #8]
 8000f10:	893b      	ldrh	r3, [r7, #8]
 8000f12:	7af9      	ldrb	r1, [r7, #11]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	47a0      	blx	r4
 8000f18:	6178      	str	r0, [r7, #20]
  return ret;
 8000f1a:	697b      	ldr	r3, [r7, #20]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}

08000f24 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000f30:	f107 0208 	add.w	r2, r7, #8
 8000f34:	2301      	movs	r3, #1
 8000f36:	2110      	movs	r1, #16
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ffc3 	bl	8000ec4 <ism330dhcx_read_reg>
 8000f3e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10f      	bne.n	8000f66 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	7a3b      	ldrb	r3, [r7, #8]
 8000f50:	f362 0383 	bfi	r3, r2, #2, #2
 8000f54:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8000f56:	f107 0208 	add.w	r2, r7, #8
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffc8 	bl	8000ef4 <ism330dhcx_write_reg>
 8000f64:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }
  return ret;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000f7a:	f107 0208 	add.w	r2, r7, #8
 8000f7e:	2301      	movs	r3, #1
 8000f80:	2110      	movs	r1, #16
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff9e 	bl	8000ec4 <ism330dhcx_read_reg>
 8000f88:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8000f8a:	7a3b      	ldrb	r3, [r7, #8]
 8000f8c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d81a      	bhi.n	8000fcc <ism330dhcx_xl_full_scale_get+0x5c>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <ism330dhcx_xl_full_scale_get+0x2c>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fad 	.word	0x08000fad
 8000fa0:	08000fb5 	.word	0x08000fb5
 8000fa4:	08000fbd 	.word	0x08000fbd
 8000fa8:	08000fc5 	.word	0x08000fc5
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
      break;
 8000fb2:	e00f      	b.n	8000fd4 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
      break;
 8000fba:	e00b      	b.n	8000fd4 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
      break;
 8000fc2:	e007      	b.n	8000fd4 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	701a      	strb	r2, [r3, #0]
      break;
 8000fca:	e003      	b.n	8000fd4 <ism330dhcx_xl_full_scale_get+0x64>
    default:
      *val = ISM330DHCX_2g;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
      break;
 8000fd2:	bf00      	nop
  }
  return ret;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop

08000fe0 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(ism330dhcx_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	75fb      	strb	r3, [r7, #23]
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 fc76 	bl	80018e8 <ism330dhcx_fsm_enable_get>
 8000ffc:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f040 80c4 	bne.w	800118e <ism330dhcx_xl_data_rate_set+0x1ae>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800100c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001014:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001016:	4313      	orrs	r3, r2
 8001018:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800101a:	7b3b      	ldrb	r3, [r7, #12]
 800101c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001020:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001022:	4313      	orrs	r3, r2
 8001024:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800102c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800102e:	4313      	orrs	r3, r2
 8001030:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001032:	7b3b      	ldrb	r3, [r7, #12]
 8001034:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001038:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800103a:	4313      	orrs	r3, r2
 800103c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800103e:	7b3b      	ldrb	r3, [r7, #12]
 8001040:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001044:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001046:	4313      	orrs	r3, r2
 8001048:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800104a:	7b3b      	ldrb	r3, [r7, #12]
 800104c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001050:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001052:	4313      	orrs	r3, r2
 8001054:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800105c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800105e:	4313      	orrs	r3, r2
 8001060:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001068:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800106a:	4313      	orrs	r3, r2
 800106c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001074:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001076:	4313      	orrs	r3, r2
 8001078:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001082:	4313      	orrs	r3, r2
 8001084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001086:	7b7b      	ldrb	r3, [r7, #13]
 8001088:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800108c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800108e:	4313      	orrs	r3, r2
 8001090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001092:	7b7b      	ldrb	r3, [r7, #13]
 8001094:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001098:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800109a:	4313      	orrs	r3, r2
 800109c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800109e:	7b7b      	ldrb	r3, [r7, #13]
 80010a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80010a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80010aa:	7b7b      	ldrb	r3, [r7, #13]
 80010ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80010b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE) {
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80010bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80010be:	4313      	orrs	r3, r2
 80010c0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d163      	bne.n	800118e <ism330dhcx_xl_data_rate_set+0x1ae>

      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80010c6:	f107 030b 	add.w	r3, r7, #11
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 fc37 	bl	8001940 <ism330dhcx_fsm_data_rate_get>
 80010d2:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d159      	bne.n	800118e <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80010da:	7afb      	ldrb	r3, [r7, #11]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d853      	bhi.n	8001188 <ism330dhcx_xl_data_rate_set+0x1a8>
 80010e0:	a201      	add	r2, pc, #4	; (adr r2, 80010e8 <ism330dhcx_xl_data_rate_set+0x108>)
 80010e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e6:	bf00      	nop
 80010e8:	080010f9 	.word	0x080010f9
 80010ec:	0800110b 	.word	0x0800110b
 80010f0:	08001129 	.word	0x08001129
 80010f4:	08001153 	.word	0x08001153
          case ISM330DHCX_ODR_FSM_12Hz5:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80010fe:	2301      	movs	r3, #1
 8001100:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 8001102:	e045      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	75fb      	strb	r3, [r7, #23]
            break;
 8001108:	e042      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_26Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001110:	2302      	movs	r3, #2
 8001112:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001114:	e03c      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d102      	bne.n	8001122 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800111c:	2302      	movs	r3, #2
 800111e:	75fb      	strb	r3, [r7, #23]
            break;
 8001120:	e036      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	75fb      	strb	r3, [r7, #23]
            break;
 8001126:	e033      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_52Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800112e:	2303      	movs	r3, #3
 8001130:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001132:	e02d      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d102      	bne.n	8001140 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800113a:	2303      	movs	r3, #3
 800113c:	75fb      	strb	r3, [r7, #23]
            break;
 800113e:	e027      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d102      	bne.n	800114c <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001146:	2303      	movs	r3, #3
 8001148:	75fb      	strb	r3, [r7, #23]
            break;
 800114a:	e021      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	75fb      	strb	r3, [r7, #23]
            break;
 8001150:	e01e      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_104Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001158:	2304      	movs	r3, #4
 800115a:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 800115c:	e018      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d102      	bne.n	800116a <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001164:	2304      	movs	r3, #4
 8001166:	75fb      	strb	r3, [r7, #23]
            break;
 8001168:	e012      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d102      	bne.n	8001176 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001170:	2304      	movs	r3, #4
 8001172:	75fb      	strb	r3, [r7, #23]
            break;
 8001174:	e00c      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d102      	bne.n	8001182 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800117c:	2304      	movs	r3, #4
 800117e:	75fb      	strb	r3, [r7, #23]
            break;
 8001180:	e006      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	75fb      	strb	r3, [r7, #23]
            break;
 8001186:	e003      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	75fb      	strb	r3, [r7, #23]
            break;
 800118c:	e000      	b.n	8001190 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 800118e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d16d      	bne.n	8001276 <ism330dhcx_xl_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800119a:	f107 030a 	add.w	r3, r7, #10
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 fc15 	bl	80019d0 <ism330dhcx_mlc_get>
 80011a6:	6138      	str	r0, [r7, #16]
    if (mlc_enable == PROPERTY_ENABLE) {
 80011a8:	7abb      	ldrb	r3, [r7, #10]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d163      	bne.n	8001276 <ism330dhcx_xl_data_rate_set+0x296>

      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80011ae:	f107 0309 	add.w	r3, r7, #9
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fc35 	bl	8001a24 <ism330dhcx_mlc_data_rate_get>
 80011ba:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d159      	bne.n	8001276 <ism330dhcx_xl_data_rate_set+0x296>
        switch (mlc_odr) {
 80011c2:	7a7b      	ldrb	r3, [r7, #9]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d853      	bhi.n	8001270 <ism330dhcx_xl_data_rate_set+0x290>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <ism330dhcx_xl_data_rate_set+0x1f0>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	080011f3 	.word	0x080011f3
 80011d8:	08001211 	.word	0x08001211
 80011dc:	0800123b 	.word	0x0800123b
          case ISM330DHCX_ODR_PRGS_12Hz5:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <ism330dhcx_xl_data_rate_set+0x20c>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80011e6:	2301      	movs	r3, #1
 80011e8:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80011ea:	e045      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	75fb      	strb	r3, [r7, #23]
            break;
 80011f0:	e042      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <ism330dhcx_xl_data_rate_set+0x21e>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80011f8:	2302      	movs	r3, #2
 80011fa:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80011fc:	e03c      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d102      	bne.n	800120a <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001204:	2302      	movs	r3, #2
 8001206:	75fb      	strb	r3, [r7, #23]
            break;
 8001208:	e036      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	75fb      	strb	r3, [r7, #23]
            break;
 800120e:	e033      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_52Hz:

            if (val == ISM330DHCX_XL_ODR_OFF) {
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <ism330dhcx_xl_data_rate_set+0x23c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001216:	2303      	movs	r3, #3
 8001218:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 800121a:	e02d      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d102      	bne.n	8001228 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001222:	2303      	movs	r3, #3
 8001224:	75fb      	strb	r3, [r7, #23]
            break;
 8001226:	e027      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d102      	bne.n	8001234 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800122e:	2303      	movs	r3, #3
 8001230:	75fb      	strb	r3, [r7, #23]
            break;
 8001232:	e021      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	75fb      	strb	r3, [r7, #23]
            break;
 8001238:	e01e      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <ism330dhcx_xl_data_rate_set+0x266>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001240:	2304      	movs	r3, #4
 8001242:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001244:	e018      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800124c:	2304      	movs	r3, #4
 800124e:	75fb      	strb	r3, [r7, #23]
            break;
 8001250:	e012      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d102      	bne.n	800125e <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001258:	2304      	movs	r3, #4
 800125a:	75fb      	strb	r3, [r7, #23]
            break;
 800125c:	e00c      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_52Hz) {
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d102      	bne.n	800126a <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001264:	2304      	movs	r3, #4
 8001266:	75fb      	strb	r3, [r7, #23]
            break;
 8001268:	e006      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	75fb      	strb	r3, [r7, #23]
            break;
 800126e:	e003      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
          default:
            odr_xl = val;
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	75fb      	strb	r3, [r7, #23]
            break;
 8001274:	e000      	b.n	8001278 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8001276:	bf00      	nop
    }
  }
  if (ret == 0) {
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d107      	bne.n	800128e <ism330dhcx_xl_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800127e:	f107 0208 	add.w	r2, r7, #8
 8001282:	2301      	movs	r3, #1
 8001284:	2110      	movs	r1, #16
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fe1c 	bl	8000ec4 <ism330dhcx_read_reg>
 800128c:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }
  if (ret == 0) {
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10f      	bne.n	80012b4 <ism330dhcx_xl_data_rate_set+0x2d4>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	b2da      	uxtb	r2, r3
 800129c:	7a3b      	ldrb	r3, [r7, #8]
 800129e:	f362 1307 	bfi	r3, r2, #4, #4
 80012a2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80012a4:	f107 0208 	add.w	r2, r7, #8
 80012a8:	2301      	movs	r3, #1
 80012aa:	2110      	movs	r1, #16
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fe21 	bl	8000ef4 <ism330dhcx_write_reg>
 80012b2:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }
  return ret;
 80012b4:	693b      	ldr	r3, [r7, #16]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop

080012c0 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80012cc:	f107 0208 	add.w	r2, r7, #8
 80012d0:	2301      	movs	r3, #1
 80012d2:	2111      	movs	r1, #17
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fdf5 	bl	8000ec4 <ism330dhcx_read_reg>
 80012da:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	7a3b      	ldrb	r3, [r7, #8]
 80012ec:	f362 0303 	bfi	r3, r2, #0, #4
 80012f0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80012f2:	f107 0208 	add.w	r2, r7, #8
 80012f6:	2301      	movs	r3, #1
 80012f8:	2111      	movs	r1, #17
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fdfa 	bl	8000ef4 <ism330dhcx_write_reg>
 8001300:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001316:	f107 0208 	add.w	r2, r7, #8
 800131a:	2301      	movs	r3, #1
 800131c:	2111      	movs	r1, #17
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fdd0 	bl	8000ec4 <ism330dhcx_read_reg>
 8001324:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8001326:	7a3b      	ldrb	r3, [r7, #8]
 8001328:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d834      	bhi.n	800139c <ism330dhcx_gy_full_scale_get+0x90>
 8001332:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <ism330dhcx_gy_full_scale_get+0x2c>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	08001375 	.word	0x08001375
 800133c:	08001395 	.word	0x08001395
 8001340:	0800136d 	.word	0x0800136d
 8001344:	0800139d 	.word	0x0800139d
 8001348:	0800137d 	.word	0x0800137d
 800134c:	0800139d 	.word	0x0800139d
 8001350:	0800139d 	.word	0x0800139d
 8001354:	0800139d 	.word	0x0800139d
 8001358:	08001385 	.word	0x08001385
 800135c:	0800139d 	.word	0x0800139d
 8001360:	0800139d 	.word	0x0800139d
 8001364:	0800139d 	.word	0x0800139d
 8001368:	0800138d 	.word	0x0800138d
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2202      	movs	r2, #2
 8001370:	701a      	strb	r2, [r3, #0]
      break;
 8001372:	e017      	b.n	80013a4 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
      break;
 800137a:	e013      	b.n	80013a4 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2204      	movs	r2, #4
 8001380:	701a      	strb	r2, [r3, #0]
      break;
 8001382:	e00f      	b.n	80013a4 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2208      	movs	r2, #8
 8001388:	701a      	strb	r2, [r3, #0]
      break;
 800138a:	e00b      	b.n	80013a4 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	220c      	movs	r2, #12
 8001390:	701a      	strb	r2, [r3, #0]
      break;
 8001392:	e007      	b.n	80013a4 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
      break;
 800139a:	e003      	b.n	80013a4 <ism330dhcx_gy_full_scale_get+0x98>
    default:
      *val = ISM330DHCX_125dps;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2202      	movs	r2, #2
 80013a0:	701a      	strb	r2, [r3, #0]
      break;
 80013a2:	bf00      	nop
  }
  return ret;
 80013a4:	68fb      	ldr	r3, [r7, #12]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop

080013b0 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(ism330dhcx_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	75fb      	strb	r3, [r7, #23]
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fa8e 	bl	80018e8 <ism330dhcx_fsm_enable_get>
 80013cc:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f040 80c4 	bne.w	800155e <ism330dhcx_gy_data_rate_set+0x1ae>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80013d6:	7b3b      	ldrb	r3, [r7, #12]
 80013d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013e4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80013ea:	7b3b      	ldrb	r3, [r7, #12]
 80013ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80013f6:	7b3b      	ldrb	r3, [r7, #12]
 80013f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80013fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80013fe:	4313      	orrs	r3, r2
 8001400:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001402:	7b3b      	ldrb	r3, [r7, #12]
 8001404:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001408:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800140a:	4313      	orrs	r3, r2
 800140c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800140e:	7b3b      	ldrb	r3, [r7, #12]
 8001410:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001414:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001416:	4313      	orrs	r3, r2
 8001418:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800141a:	7b3b      	ldrb	r3, [r7, #12]
 800141c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001420:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001422:	4313      	orrs	r3, r2
 8001424:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001426:	7b3b      	ldrb	r3, [r7, #12]
 8001428:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800142c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800142e:	4313      	orrs	r3, r2
 8001430:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001432:	7b7b      	ldrb	r3, [r7, #13]
 8001434:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001438:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800143a:	4313      	orrs	r3, r2
 800143c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001444:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001446:	4313      	orrs	r3, r2
 8001448:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800144a:	7b7b      	ldrb	r3, [r7, #13]
 800144c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001450:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001452:	4313      	orrs	r3, r2
 8001454:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001456:	7b7b      	ldrb	r3, [r7, #13]
 8001458:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800145c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800145e:	4313      	orrs	r3, r2
 8001460:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001468:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800146a:	4313      	orrs	r3, r2
 800146c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800146e:	7b7b      	ldrb	r3, [r7, #13]
 8001470:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001474:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001476:	4313      	orrs	r3, r2
 8001478:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800147a:	7b7b      	ldrb	r3, [r7, #13]
 800147c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001480:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001482:	4313      	orrs	r3, r2
 8001484:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE) {
 8001486:	7b7b      	ldrb	r3, [r7, #13]
 8001488:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800148c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800148e:	4313      	orrs	r3, r2
 8001490:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001492:	2b01      	cmp	r3, #1
 8001494:	d163      	bne.n	800155e <ism330dhcx_gy_data_rate_set+0x1ae>

      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8001496:	f107 030b 	add.w	r3, r7, #11
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fa4f 	bl	8001940 <ism330dhcx_fsm_data_rate_get>
 80014a2:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d159      	bne.n	800155e <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80014aa:	7afb      	ldrb	r3, [r7, #11]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d853      	bhi.n	8001558 <ism330dhcx_gy_data_rate_set+0x1a8>
 80014b0:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <ism330dhcx_gy_data_rate_set+0x108>)
 80014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014c9 	.word	0x080014c9
 80014bc:	080014db 	.word	0x080014db
 80014c0:	080014f9 	.word	0x080014f9
 80014c4:	08001523 	.word	0x08001523
          case ISM330DHCX_ODR_FSM_12Hz5:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 80014d2:	e045      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	75fb      	strb	r3, [r7, #23]
            break;
 80014d8:	e042      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_26Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80014e0:	2302      	movs	r3, #2
 80014e2:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 80014e4:	e03c      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d102      	bne.n	80014f2 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80014ec:	2302      	movs	r3, #2
 80014ee:	75fb      	strb	r3, [r7, #23]
            break;
 80014f0:	e036      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	75fb      	strb	r3, [r7, #23]
            break;
 80014f6:	e033      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_52Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80014fe:	2303      	movs	r3, #3
 8001500:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8001502:	e02d      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800150a:	2303      	movs	r3, #3
 800150c:	75fb      	strb	r3, [r7, #23]
            break;
 800150e:	e027      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d102      	bne.n	800151c <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8001516:	2303      	movs	r3, #3
 8001518:	75fb      	strb	r3, [r7, #23]
            break;
 800151a:	e021      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	75fb      	strb	r3, [r7, #23]
            break;
 8001520:	e01e      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_104Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001528:	2304      	movs	r3, #4
 800152a:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 800152c:	e018      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d102      	bne.n	800153a <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001534:	2304      	movs	r3, #4
 8001536:	75fb      	strb	r3, [r7, #23]
            break;
 8001538:	e012      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d102      	bne.n	8001546 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001540:	2304      	movs	r3, #4
 8001542:	75fb      	strb	r3, [r7, #23]
            break;
 8001544:	e00c      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d102      	bne.n	8001552 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800154c:	2304      	movs	r3, #4
 800154e:	75fb      	strb	r3, [r7, #23]
            break;
 8001550:	e006      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	75fb      	strb	r3, [r7, #23]
            break;
 8001556:	e003      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	75fb      	strb	r3, [r7, #23]
            break;
 800155c:	e000      	b.n	8001560 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 800155e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d16d      	bne.n	8001646 <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800156a:	f107 030a 	add.w	r3, r7, #10
 800156e:	4619      	mov	r1, r3
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fa2d 	bl	80019d0 <ism330dhcx_mlc_get>
 8001576:	6138      	str	r0, [r7, #16]
    if (mlc_enable == PROPERTY_ENABLE) {
 8001578:	7abb      	ldrb	r3, [r7, #10]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d163      	bne.n	8001646 <ism330dhcx_gy_data_rate_set+0x296>

      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800157e:	f107 0309 	add.w	r3, r7, #9
 8001582:	4619      	mov	r1, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fa4d 	bl	8001a24 <ism330dhcx_mlc_data_rate_get>
 800158a:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d159      	bne.n	8001646 <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 8001592:	7a7b      	ldrb	r3, [r7, #9]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d853      	bhi.n	8001640 <ism330dhcx_gy_data_rate_set+0x290>
 8001598:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <ism330dhcx_gy_data_rate_set+0x1f0>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	080015c3 	.word	0x080015c3
 80015a8:	080015e1 	.word	0x080015e1
 80015ac:	0800160b 	.word	0x0800160b
          case ISM330DHCX_ODR_PRGS_12Hz5:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 80015ba:	e045      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	75fb      	strb	r3, [r7, #23]
            break;
 80015c0:	e042      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_26Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80015c8:	2302      	movs	r3, #2
 80015ca:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 80015cc:	e03c      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d102      	bne.n	80015da <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80015d4:	2302      	movs	r3, #2
 80015d6:	75fb      	strb	r3, [r7, #23]
            break;
 80015d8:	e036      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	75fb      	strb	r3, [r7, #23]
            break;
 80015de:	e033      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_52Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80015e6:	2303      	movs	r3, #3
 80015e8:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 80015ea:	e02d      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d102      	bne.n	80015f8 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80015f2:	2303      	movs	r3, #3
 80015f4:	75fb      	strb	r3, [r7, #23]
            break;
 80015f6:	e027      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d102      	bne.n	8001604 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80015fe:	2303      	movs	r3, #3
 8001600:	75fb      	strb	r3, [r7, #23]
            break;
 8001602:	e021      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	75fb      	strb	r3, [r7, #23]
            break;
 8001608:	e01e      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_104Hz:

            if (val == ISM330DHCX_GY_ODR_OFF) {
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001610:	2304      	movs	r3, #4
 8001612:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8001614:	e018      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d102      	bne.n	8001622 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800161c:	2304      	movs	r3, #4
 800161e:	75fb      	strb	r3, [r7, #23]
            break;
 8001620:	e012      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d102      	bne.n	800162e <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001628:	2304      	movs	r3, #4
 800162a:	75fb      	strb	r3, [r7, #23]
            break;
 800162c:	e00c      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_52Hz) {
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d102      	bne.n	800163a <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001634:	2304      	movs	r3, #4
 8001636:	75fb      	strb	r3, [r7, #23]
            break;
 8001638:	e006      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	75fb      	strb	r3, [r7, #23]
            break;
 800163e:	e003      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
          default:
            odr_gy = val;
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	75fb      	strb	r3, [r7, #23]
            break;
 8001644:	e000      	b.n	8001648 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8001646:	bf00      	nop
    }
  }
  if (ret == 0) {
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d107      	bne.n	800165e <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800164e:	f107 0208 	add.w	r2, r7, #8
 8001652:	2301      	movs	r3, #1
 8001654:	2111      	movs	r1, #17
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fc34 	bl	8000ec4 <ism330dhcx_read_reg>
 800165c:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10f      	bne.n	8001684 <ism330dhcx_gy_data_rate_set+0x2d4>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	b2da      	uxtb	r2, r3
 800166c:	7a3b      	ldrb	r3, [r7, #8]
 800166e:	f362 1307 	bfi	r3, r2, #4, #4
 8001672:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001674:	f107 0208 	add.w	r2, r7, #8
 8001678:	2301      	movs	r3, #1
 800167a:	2111      	movs	r1, #17
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fc39 	bl	8000ef4 <ism330dhcx_write_reg>
 8001682:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8001684:	693b      	ldr	r3, [r7, #16]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop

08001690 <ism330dhcx_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(ism330dhcx_ctx_t *ctx, uint8_t val)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800169c:	f107 0208 	add.w	r2, r7, #8
 80016a0:	2301      	movs	r3, #1
 80016a2:	2112      	movs	r1, #18
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fc0d 	bl	8000ec4 <ism330dhcx_read_reg>
 80016aa:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10f      	bne.n	80016d2 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	7a3b      	ldrb	r3, [r7, #8]
 80016bc:	f362 1386 	bfi	r3, r2, #6, #1
 80016c0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016c2:	f107 0208 	add.w	r2, r7, #8
 80016c6:	2301      	movs	r3, #1
 80016c8:	2112      	movs	r1, #18
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fc12 	bl	8000ef4 <ism330dhcx_write_reg>
 80016d0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <ism330dhcx_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(ism330dhcx_ctx_t *ctx, uint8_t *buff)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 80016e6:	2306      	movs	r3, #6
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	2122      	movs	r1, #34	; 0x22
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fbe9 	bl	8000ec4 <ism330dhcx_read_reg>
 80016f2:	60f8      	str	r0, [r7, #12]
  return ret;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <ism330dhcx_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(ism330dhcx_ctx_t *ctx, uint8_t *buff)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8001708:	2306      	movs	r3, #6
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	2128      	movs	r1, #40	; 0x28
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fbd8 	bl	8000ec4 <ism330dhcx_read_reg>
 8001714:	60f8      	str	r0, [r7, #12]
  return ret;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(ism330dhcx_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800172c:	f107 0208 	add.w	r2, r7, #8
 8001730:	2301      	movs	r3, #1
 8001732:	2101      	movs	r1, #1
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fbc5 	bl	8000ec4 <ism330dhcx_read_reg>
 800173a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  if (ret == 0) {
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	b2da      	uxtb	r2, r3
 800174a:	7a3b      	ldrb	r3, [r7, #8]
 800174c:	f362 1387 	bfi	r3, r2, #6, #2
 8001750:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8001752:	f107 0208 	add.w	r2, r7, #8
 8001756:	2301      	movs	r3, #1
 8001758:	2101      	movs	r1, #1
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fbca 	bl	8000ef4 <ism330dhcx_write_reg>
 8001760:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }
  return ret;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(ism330dhcx_ctx_t *ctx, uint8_t val)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001778:	f107 0208 	add.w	r2, r7, #8
 800177c:	2301      	movs	r3, #1
 800177e:	2112      	movs	r1, #18
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fb9f 	bl	8000ec4 <ism330dhcx_read_reg>
 8001786:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	7a3b      	ldrb	r3, [r7, #8]
 8001798:	f362 0300 	bfi	r3, r2, #0, #1
 800179c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800179e:	f107 0208 	add.w	r2, r7, #8
 80017a2:	2301      	movs	r3, #1
 80017a4:	2112      	movs	r1, #18
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fba4 	bl	8000ef4 <ism330dhcx_write_reg>
 80017ac:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }
  return ret;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(ism330dhcx_ctx_t *ctx, uint8_t val)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80017c4:	f107 0208 	add.w	r2, r7, #8
 80017c8:	2301      	movs	r3, #1
 80017ca:	2112      	movs	r1, #18
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fb79 	bl	8000ec4 <ism330dhcx_read_reg>
 80017d2:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10f      	bne.n	80017fa <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	7a3b      	ldrb	r3, [r7, #8]
 80017e4:	f362 0382 	bfi	r3, r2, #2, #1
 80017e8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80017ea:	f107 0208 	add.w	r2, r7, #8
 80017ee:	2301      	movs	r3, #1
 80017f0:	2112      	movs	r1, #18
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fb7e 	bl	8000ef4 <ism330dhcx_write_reg>
 80017f8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8001810:	f107 0208 	add.w	r2, r7, #8
 8001814:	2301      	movs	r3, #1
 8001816:	2109      	movs	r1, #9
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fb53 	bl	8000ec4 <ism330dhcx_read_reg>
 800181e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  if (ret == 0) {
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10f      	bne.n	8001846 <ism330dhcx_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	b2da      	uxtb	r2, r3
 800182e:	7a3b      	ldrb	r3, [r7, #8]
 8001830:	f362 0303 	bfi	r3, r2, #0, #4
 8001834:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8001836:	f107 0208 	add.w	r2, r7, #8
 800183a:	2301      	movs	r3, #1
 800183c:	2109      	movs	r1, #9
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fb58 	bl	8000ef4 <ism330dhcx_write_reg>
 8001844:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }
  return ret;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 800185c:	f107 0208 	add.w	r2, r7, #8
 8001860:	2301      	movs	r3, #1
 8001862:	2109      	movs	r1, #9
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fb2d 	bl	8000ec4 <ism330dhcx_read_reg>
 800186a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  if (ret == 0) {
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10f      	bne.n	8001892 <ism330dhcx_fifo_gy_batch_set+0x42>
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	b2da      	uxtb	r2, r3
 800187a:	7a3b      	ldrb	r3, [r7, #8]
 800187c:	f362 1307 	bfi	r3, r2, #4, #4
 8001880:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8001882:	f107 0208 	add.w	r2, r7, #8
 8001886:	2301      	movs	r3, #1
 8001888:	2109      	movs	r1, #9
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fb32 	bl	8000ef4 <ism330dhcx_write_reg>
 8001890:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }
  return ret;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(ism330dhcx_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80018a8:	f107 0208 	add.w	r2, r7, #8
 80018ac:	2301      	movs	r3, #1
 80018ae:	210a      	movs	r1, #10
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fb07 	bl	8000ec4 <ism330dhcx_read_reg>
 80018b6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  if (ret == 0) {
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10f      	bne.n	80018de <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	7a3b      	ldrb	r3, [r7, #8]
 80018c8:	f362 0302 	bfi	r3, r2, #0, #3
 80018cc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80018ce:	f107 0208 	add.w	r2, r7, #8
 80018d2:	2301      	movs	r3, #1
 80018d4:	210a      	movs	r1, #10
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fb0c 	bl	8000ef4 <ism330dhcx_write_reg>
 80018dc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }
  return ret;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(ism330dhcx_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80018f2:	2102      	movs	r1, #2
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff13 	bl	8001720 <ism330dhcx_mem_bank_set>
 80018fa:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8001902:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8001904:	2301      	movs	r3, #1
 8001906:	2146      	movs	r1, #70	; 0x46
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff fadb 	bl	8000ec4 <ism330dhcx_read_reg>
 800190e:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 800191a:	2301      	movs	r3, #1
 800191c:	2147      	movs	r1, #71	; 0x47
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fad0 	bl	8000ec4 <ism330dhcx_read_reg>
 8001924:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d104      	bne.n	8001936 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800192c:	2100      	movs	r1, #0
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fef6 	bl	8001720 <ism330dhcx_mem_bank_set>
 8001934:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800194a:	2102      	movs	r1, #2
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fee7 	bl	8001720 <ism330dhcx_mem_bank_set>
 8001952:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d107      	bne.n	800196a <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800195a:	f107 0208 	add.w	r2, r7, #8
 800195e:	2301      	movs	r3, #1
 8001960:	215f      	movs	r1, #95	; 0x5f
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff faae 	bl	8000ec4 <ism330dhcx_read_reg>
 8001968:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }
  if (ret == 0) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d104      	bne.n	800197a <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8001970:	2100      	movs	r1, #0
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fed4 	bl	8001720 <ism330dhcx_mem_bank_set>
 8001978:	60f8      	str	r0, [r7, #12]
  }
  switch (emb_func_odr_cfg_b.fsm_odr) {
 800197a:	7a3b      	ldrb	r3, [r7, #8]
 800197c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b03      	cmp	r3, #3
 8001984:	d81a      	bhi.n	80019bc <ism330dhcx_fsm_data_rate_get+0x7c>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <ism330dhcx_fsm_data_rate_get+0x4c>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	0800199d 	.word	0x0800199d
 8001990:	080019a5 	.word	0x080019a5
 8001994:	080019ad 	.word	0x080019ad
 8001998:	080019b5 	.word	0x080019b5
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
      break;
 80019a2:	e00f      	b.n	80019c4 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
      break;
 80019aa:	e00b      	b.n	80019c4 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2202      	movs	r2, #2
 80019b0:	701a      	strb	r2, [r3, #0]
      break;
 80019b2:	e007      	b.n	80019c4 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2203      	movs	r2, #3
 80019b8:	701a      	strb	r2, [r3, #0]
      break;
 80019ba:	e003      	b.n	80019c4 <ism330dhcx_fsm_data_rate_get+0x84>
    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
      break;
 80019c2:	bf00      	nop
  }
  return ret;
 80019c4:	68fb      	ldr	r3, [r7, #12]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop

080019d0 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(ism330dhcx_ctx_t *ctx, uint8_t *val)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80019da:	2102      	movs	r1, #2
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fe9f 	bl	8001720 <ism330dhcx_mem_bank_set>
 80019e2:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80019ea:	f107 0208 	add.w	r2, r7, #8
 80019ee:	2301      	movs	r3, #1
 80019f0:	2105      	movs	r1, #5
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fa66 	bl	8000ec4 <ism330dhcx_read_reg>
 80019f8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }
  if (ret == 0) {
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10b      	bne.n	8001a18 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8001a00:	2100      	movs	r1, #0
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fe8c 	bl	8001720 <ism330dhcx_mem_bank_set>
 8001a08:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8001a0a:	7a3b      	ldrb	r3, [r7, #8]
 8001a0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8001a18:	68fb      	ldr	r3, [r7, #12]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(ism330dhcx_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8001a2e:	2102      	movs	r1, #2
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fe75 	bl	8001720 <ism330dhcx_mem_bank_set>
 8001a36:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d107      	bne.n	8001a4e <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8001a3e:	f107 0208 	add.w	r2, r7, #8
 8001a42:	2301      	movs	r3, #1
 8001a44:	2160      	movs	r1, #96	; 0x60
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fa3c 	bl	8000ec4 <ism330dhcx_read_reg>
 8001a4c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }
  if (ret == 0) {
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d12a      	bne.n	8001aaa <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8001a54:	7a3b      	ldrb	r3, [r7, #8]
 8001a56:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d81b      	bhi.n	8001a98 <ism330dhcx_mlc_data_rate_get+0x74>
 8001a60:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <ism330dhcx_mlc_data_rate_get+0x44>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001a81 	.word	0x08001a81
 8001a70:	08001a89 	.word	0x08001a89
 8001a74:	08001a91 	.word	0x08001a91
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
        break;
 8001a7e:	e00f      	b.n	8001aa0 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
        break;
 8001a86:	e00b      	b.n	8001aa0 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	701a      	strb	r2, [r3, #0]
        break;
 8001a8e:	e007      	b.n	8001aa0 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2203      	movs	r2, #3
 8001a94:	701a      	strb	r2, [r3, #0]
        break;
 8001a96:	e003      	b.n	8001aa0 <ism330dhcx_mlc_data_rate_get+0x7c>
      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
        break;
 8001a9e:	bf00      	nop
    }
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fe3c 	bl	8001720 <ism330dhcx_mem_bank_set>
 8001aa8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001ab8:	f000 fe27 	bl	800270a <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001abc:	f000 f82e 	bl	8001b1c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ac0:	f000 fa6c 	bl	8001f9c <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8001ac4:	f000 fa40 	bl	8001f48 <_ZL11MX_DMA_Initv>
	MX_ADC1_Init();
 8001ac8:	f000 f88a 	bl	8001be0 <_ZL12MX_ADC1_Initv>
	MX_CAN1_Init();
 8001acc:	f000 f94e 	bl	8001d6c <_ZL12MX_CAN1_Initv>
	MX_RTC_Init();
 8001ad0:	f000 f988 	bl	8001de4 <_ZL11MX_RTC_Initv>
	MX_SPI1_Init();
 8001ad4:	f000 f9f6 	bl	8001ec4 <_ZL12MX_SPI1_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001ad8:	f005 fdc2 	bl	8007660 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8001adc:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <main+0x50>)
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4809      	ldr	r0, [pc, #36]	; (8001b08 <main+0x54>)
 8001ae2:	f005 fe07 	bl	80076f4 <osThreadNew>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <main+0x58>)
 8001aea:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of blink01 */
	blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8001aec:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <main+0x5c>)
 8001aee:	2100      	movs	r1, #0
 8001af0:	4808      	ldr	r0, [pc, #32]	; (8001b14 <main+0x60>)
 8001af2:	f005 fdff 	bl	80076f4 <osThreadNew>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <main+0x64>)
 8001afa:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001afc:	f005 fdd4 	bl	80076a8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001b00:	e7fe      	b.n	8001b00 <main+0x4c>
 8001b02:	bf00      	nop
 8001b04:	0800a1d8 	.word	0x0800a1d8
 8001b08:	080020fd 	.word	0x080020fd
 8001b0c:	20000200 	.word	0x20000200
 8001b10:	0800a1fc 	.word	0x0800a1fc
 8001b14:	0800210d 	.word	0x0800210d
 8001b18:	20000204 	.word	0x20000204

08001b1c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b098      	sub	sp, #96	; 0x60
 8001b20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	2248      	movs	r2, #72	; 0x48
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f008 fb1e 	bl	800a16c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f002 fb58 	bl	80041f4 <HAL_PWREx_ControlVoltageScaling>
 8001b44:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf14      	ite	ne
 8001b4a:	2301      	movne	r3, #1
 8001b4c:	2300      	moveq	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <_Z18SystemClock_Configv+0x3c>
		Error_Handler();
 8001b54:	f000 fb56 	bl	8002204 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001b58:	2318      	movs	r3, #24
 8001b5a:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b60:	2301      	movs	r3, #1
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b68:	2360      	movs	r3, #96	; 0x60
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b70:	2301      	movs	r3, #1
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 60;
 8001b78:	233c      	movs	r3, #60	; 0x3c
 8001b7a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b80:	2302      	movs	r3, #2
 8001b82:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 fc2f 	bl	80043f0 <HAL_RCC_OscConfig>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf14      	ite	ne
 8001b98:	2301      	movne	r3, #1
 8001b9a:	2300      	moveq	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <_Z18SystemClock_Configv+0x8a>
		Error_Handler();
 8001ba2:	f000 fb2f 	bl	8002204 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ba6:	230f      	movs	r3, #15
 8001ba8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001baa:	2303      	movs	r3, #3
 8001bac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 f89e 	bl	8004d00 <HAL_RCC_ClockConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 8001bd4:	f000 fb16 	bl	8002204 <Error_Handler>
	}
}
 8001bd8:	bf00      	nop
 8001bda:	3760      	adds	r7, #96	; 0x60
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
 8001c00:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001c02:	4b54      	ldr	r3, [pc, #336]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c04:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <_ZL12MX_ADC1_Initv+0x178>)
 8001c06:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c0e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c10:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c1c:	4b4d      	ldr	r3, [pc, #308]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c24:	2204      	movs	r2, #4
 8001c26:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c28:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 4;
 8001c34:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c36:	2204      	movs	r2, #4
 8001c38:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c42:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c48:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001c5c:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001c64:	483b      	ldr	r0, [pc, #236]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c66:	f000 ff29 	bl	8002abc <HAL_ADC_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <_ZL12MX_ADC1_Initv+0x9e>
		Error_Handler();
 8001c7a:	f000 fac3 	bl	8002204 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	4832      	ldr	r0, [pc, #200]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001c8a:	f001 fc8b 	bl	80035a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <_ZL12MX_ADC1_Initv+0xc2>
		Error_Handler();
 8001c9e:	f000 fab1 	bl	8002204 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <_ZL12MX_ADC1_Initv+0x17c>)
 8001ca4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001caa:	2301      	movs	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cae:	237f      	movs	r3, #127	; 0x7f
 8001cb0:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4825      	ldr	r0, [pc, #148]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001cc0:	f001 f84e 	bl	8002d60 <HAL_ADC_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf14      	ite	ne
 8001cca:	2301      	movne	r3, #1
 8001ccc:	2300      	moveq	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <_ZL12MX_ADC1_Initv+0xf8>
		Error_Handler();
 8001cd4:	f000 fa96 	bl	8002204 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <_ZL12MX_ADC1_Initv+0x180>)
 8001cda:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cdc:	230c      	movs	r3, #12
 8001cde:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	481b      	ldr	r0, [pc, #108]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001ce6:	f001 f83b 	bl	8002d60 <HAL_ADC_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf14      	ite	ne
 8001cf0:	2301      	movne	r3, #1
 8001cf2:	2300      	moveq	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <_ZL12MX_ADC1_Initv+0x11e>
		Error_Handler();
 8001cfa:	f000 fa83 	bl	8002204 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <_ZL12MX_ADC1_Initv+0x184>)
 8001d00:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d02:	2312      	movs	r3, #18
 8001d04:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4812      	ldr	r0, [pc, #72]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001d0c:	f001 f828 	bl	8002d60 <HAL_ADC_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bf14      	ite	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	2300      	moveq	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <_ZL12MX_ADC1_Initv+0x144>
		Error_Handler();
 8001d20:	f000 fa70 	bl	8002204 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <_ZL12MX_ADC1_Initv+0x188>)
 8001d26:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d28:	2318      	movs	r3, #24
 8001d2a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4808      	ldr	r0, [pc, #32]	; (8001d54 <_ZL12MX_ADC1_Initv+0x174>)
 8001d32:	f001 f815 	bl	8002d60 <HAL_ADC_ConfigChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <_ZL12MX_ADC1_Initv+0x16a>
		Error_Handler();
 8001d46:	f000 fa5d 	bl	8002204 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000002c 	.word	0x2000002c
 8001d58:	50040000 	.word	0x50040000
 8001d5c:	04300002 	.word	0x04300002
 8001d60:	08600004 	.word	0x08600004
 8001d64:	0c900008 	.word	0x0c900008
 8001d68:	10c00010 	.word	0x10c00010

08001d6c <_ZL12MX_CAN1_Initv>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001d72:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <_ZL12MX_CAN1_Initv+0x74>)
 8001d74:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 8;
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001d78:	2208      	movs	r2, #8
 8001d7a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001d8a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001d8e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001d92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d96:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001dbc:	4807      	ldr	r0, [pc, #28]	; (8001ddc <_ZL12MX_CAN1_Initv+0x70>)
 8001dbe:	f001 fc95 	bl	80036ec <HAL_CAN_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <_ZL12MX_CAN1_Initv+0x6a>
		Error_Handler();
 8001dd2:	f000 fa17 	bl	8002204 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200000f4 	.word	0x200000f4
 8001de0:	40006400 	.word	0x40006400

08001de4 <_ZL11MX_RTC_Initv>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001df8:	2300      	movs	r3, #0
 8001dfa:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001dfe:	4a30      	ldr	r2, [pc, #192]	; (8001ec0 <_ZL11MX_RTC_Initv+0xdc>)
 8001e00:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e02:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8001e08:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e0a:	227f      	movs	r2, #127	; 0x7f
 8001e0c:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e10:	22ff      	movs	r2, #255	; 0xff
 8001e12:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e26:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e2c:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001e34:	4821      	ldr	r0, [pc, #132]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e36:	f003 ff85 	bl	8005d44 <HAL_RTC_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf14      	ite	ne
 8001e40:	2301      	movne	r3, #1
 8001e42:	2300      	moveq	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <_ZL11MX_RTC_Initv+0x6a>
		Error_Handler();
 8001e4a:	f000 f9db 	bl	8002204 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2201      	movs	r2, #1
 8001e66:	4619      	mov	r1, r3
 8001e68:	4814      	ldr	r0, [pc, #80]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e6a:	f003 fffb 	bl	8005e64 <HAL_RTC_SetTime>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf14      	ite	ne
 8001e74:	2301      	movne	r3, #1
 8001e76:	2300      	moveq	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <_ZL11MX_RTC_Initv+0x9e>
		Error_Handler();
 8001e7e:	f000 f9c1 	bl	8002204 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e82:	2301      	movs	r3, #1
 8001e84:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001e86:	2301      	movs	r3, #1
 8001e88:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001e92:	463b      	mov	r3, r7
 8001e94:	2201      	movs	r2, #1
 8001e96:	4619      	mov	r1, r3
 8001e98:	4808      	ldr	r0, [pc, #32]	; (8001ebc <_ZL11MX_RTC_Initv+0xd8>)
 8001e9a:	f004 f883 	bl	8005fa4 <HAL_RTC_SetDate>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <_ZL11MX_RTC_Initv+0xce>
		Error_Handler();
 8001eae:	f000 f9a9 	bl	8002204 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000011c 	.word	0x2000011c
 8001ec0:	40002800 	.word	0x40002800

08001ec4 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <_ZL12MX_SPI1_Initv+0x80>)
 8001ecc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ed4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ede:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ee2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001efa:	2230      	movs	r2, #48	; 0x30
 8001efc:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f12:	2207      	movs	r2, #7
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001f22:	4807      	ldr	r0, [pc, #28]	; (8001f40 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f24:	f004 f980 	bl	8006228 <HAL_SPI_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 8001f38:	f000 f964 	bl	8002204 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000150 	.word	0x20000150
 8001f44:	40013000 	.word	0x40013000

08001f48 <_ZL11MX_DMA_Initv>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <_ZL11MX_DMA_Initv+0x50>)
 8001f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f52:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <_ZL11MX_DMA_Initv+0x50>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	6493      	str	r3, [r2, #72]	; 0x48
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <_ZL11MX_DMA_Initv+0x50>)
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <_ZL11MX_DMA_Initv+0x50>)
 8001f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <_ZL11MX_DMA_Initv+0x50>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6493      	str	r3, [r2, #72]	; 0x48
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <_ZL11MX_DMA_Initv+0x50>)
 8001f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2105      	movs	r1, #5
 8001f82:	200b      	movs	r0, #11
 8001f84:	f001 fd66 	bl	8003a54 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f88:	200b      	movs	r0, #11
 8001f8a:	f001 fd7f 	bl	8003a8c <HAL_NVIC_EnableIRQ>

}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000

08001f9c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb2:	4b4f      	ldr	r3, [pc, #316]	; (80020f0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	4a48      	ldr	r2, [pc, #288]	; (80020f0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd6:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a42      	ldr	r2, [pc, #264]	; (80020f0 <_ZL12MX_GPIO_Initv+0x154>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <_ZL12MX_GPIO_Initv+0x154>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2110      	movs	r1, #16
 8001ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002002:	f002 f89d 	bl	8004140 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002006:	2200      	movs	r2, #0
 8002008:	f24f 0180 	movw	r1, #61568	; 0xf080
 800200c:	4839      	ldr	r0, [pc, #228]	; (80020f4 <_ZL12MX_GPIO_Initv+0x158>)
 800200e:	f002 f897 	bl	8004140 <HAL_GPIO_WritePin>
	LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin | GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8,
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002018:	4837      	ldr	r0, [pc, #220]	; (80020f8 <_ZL12MX_GPIO_Initv+0x15c>)
 800201a:	f002 f891 	bl	8004140 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800201e:	2310      	movs	r3, #16
 8002020:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002022:	2301      	movs	r3, #1
 8002024:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002026:	2302      	movs	r3, #2
 8002028:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	4619      	mov	r1, r3
 8002034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002038:	f001 fef0 	bl	8003e1c <HAL_GPIO_Init>

	/*Configure GPIO pins : EEPROM_SCL_Pin EEPROM_SDA_Pin */
	GPIO_InitStruct.Pin = EEPROM_SCL_Pin | EEPROM_SDA_Pin;
 800203c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002040:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002042:	2312      	movs	r3, #18
 8002044:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800204e:	2304      	movs	r3, #4
 8002050:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	4619      	mov	r1, r3
 8002058:	4826      	ldr	r0, [pc, #152]	; (80020f4 <_ZL12MX_GPIO_Initv+0x158>)
 800205a:	f001 fedf 	bl	8003e1c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
	 PB7 */
	GPIO_InitStruct.Pin =
 800205e:	f24f 0380 	movw	r3, #61568	; 0xf080
 8002062:	60fb      	str	r3, [r7, #12]
	LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4619      	mov	r1, r3
 8002076:	481f      	ldr	r0, [pc, #124]	; (80020f4 <_ZL12MX_GPIO_Initv+0x158>)
 8002078:	f001 fed0 	bl	8003e1c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 800207c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002080:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002082:	2301      	movs	r3, #1
 8002084:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	4619      	mov	r1, r3
 8002094:	4818      	ldr	r0, [pc, #96]	; (80020f8 <_ZL12MX_GPIO_Initv+0x15c>)
 8002096:	f001 fec1 	bl	8003e1c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800209a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800209e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	4619      	mov	r1, r3
 80020ae:	4812      	ldr	r0, [pc, #72]	; (80020f8 <_ZL12MX_GPIO_Initv+0x15c>)
 80020b0:	f001 feb4 	bl	8003e1c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80020b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020b8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020cc:	f001 fea6 	bl	8003e1c <HAL_GPIO_Init>

	/*Configure GPIO pin : ISM_INT1_Pin */
	GPIO_InitStruct.Pin = ISM_INT1_Pin;
 80020d0:	2340      	movs	r3, #64	; 0x40
 80020d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ISM_INT1_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	4619      	mov	r1, r3
 80020e2:	4804      	ldr	r0, [pc, #16]	; (80020f4 <_ZL12MX_GPIO_Initv+0x158>)
 80020e4:	f001 fe9a 	bl	8003e1c <HAL_GPIO_Init>

}
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	48000400 	.word	0x48000400
 80020f8:	48000800 	.word	0x48000800

080020fc <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	for (;;) {
		osDelay(1);
 8002104:	2001      	movs	r0, #1
 8002106:	f005 fb87 	bl	8007818 <osDelay>
 800210a:	e7fb      	b.n	8002104 <_Z16StartDefaultTaskPv+0x8>

0800210c <_Z12StartBlink01Pv>:
 * @brief Function implementing the blink01 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlink01 */
	HAL_SPI_Init(&hspi1);
 8002114:	482d      	ldr	r0, [pc, #180]	; (80021cc <_Z12StartBlink01Pv+0xc0>)
 8002116:	f004 f887 	bl	8006228 <HAL_SPI_Init>
	ISM330DHCXSensor AccGyr;
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f8c8 	bl	80002b4 <_ZN16ISM330DHCXSensorC1Ev>
	AccGyr.begin();
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe f97f 	bl	800042c <_ZN16ISM330DHCXSensor5beginEv>
	AccGyr.ACC_Enable();
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f9a6 	bl	8000484 <_ZN16ISM330DHCXSensor10ACC_EnableEv>

//	  ism_write(0x10U, 0b01110000);
//	  ism_write(0x14U, 0b1100000);
	AccGyr.GYRO_Enable();
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fb58 	bl	80007f2 <_ZN16ISM330DHCXSensor11GYRO_EnableEv>
	// Configure ODR and FS of the acc and gyro
	AccGyr.ACC_SetOutputDataRate(SENSOR_ODR);
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80021d0 <_Z12StartBlink01Pv+0xc4>
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fa08 	bl	8000560 <_ZN16ISM330DHCXSensor21ACC_SetOutputDataRateEf>
	AccGyr.ACC_SetFullScale(ACC_FS);
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	2102      	movs	r1, #2
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fa92 	bl	8000680 <_ZN16ISM330DHCXSensor16ACC_SetFullScaleEl>
	AccGyr.GYRO_SetOutputDataRate(SENSOR_ODR);
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80021d0 <_Z12StartBlink01Pv+0xc4>
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fbcf 	bl	8000908 <_ZN16ISM330DHCXSensor22GYRO_SetOutputDataRateEf>
	AccGyr.GYRO_SetFullScale(GYR_FS);
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fc58 	bl	8000a28 <_ZN16ISM330DHCXSensor17GYRO_SetFullScaleEl>
//	  // Configure FIFO BDR for acc and gyro
	AccGyr.FIFO_ACC_Set_BDR(SENSOR_ODR);
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80021d0 <_Z12StartBlink01Pv+0xc4>
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fd15 	bl	8000bb0 <_ZN16ISM330DHCXSensor16FIFO_ACC_Set_BDREf>
	AccGyr.FIFO_GYRO_Set_BDR(SENSOR_ODR);
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80021d0 <_Z12StartBlink01Pv+0xc4>
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fd9e 	bl	8000cd0 <_ZN16ISM330DHCXSensor17FIFO_GYRO_Set_BDREf>
//	  // Set FIFO in Continuous mode
	AccGyr.FIFO_Set_Mode(ISM330DHCX_STREAM_MODE);
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2106      	movs	r1, #6
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fe28 	bl	8000df0 <_ZN16ISM330DHCXSensor13FIFO_Set_ModeEh>
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f005 fb39 	bl	8007818 <osDelay>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80021a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021aa:	480a      	ldr	r0, [pc, #40]	; (80021d4 <_Z12StartBlink01Pv+0xc8>)
 80021ac:	f001 ffe0 	bl	8004170 <HAL_GPIO_TogglePin>

		AccGyr.ACC_GetAxes(accelerometer);
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	4908      	ldr	r1, [pc, #32]	; (80021d8 <_Z12StartBlink01Pv+0xcc>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe faba 	bl	8000730 <_ZN16ISM330DHCXSensor11ACC_GetAxesEPl>
		AccGyr.GYRO_GetAxes(gyroscope);
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	4906      	ldr	r1, [pc, #24]	; (80021dc <_Z12StartBlink01Pv+0xd0>)
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fc95 	bl	8000af2 <_ZN16ISM330DHCXSensor12GYRO_GetAxesEPl>
		osDelay(1);
 80021c8:	e7ea      	b.n	80021a0 <_Z12StartBlink01Pv+0x94>
 80021ca:	bf00      	nop
 80021cc:	20000150 	.word	0x20000150
 80021d0:	42500000 	.word	0x42500000
 80021d4:	48000400 	.word	0x48000400
 80021d8:	20000208 	.word	0x20000208
 80021dc:	20000214 	.word	0x20000214

080021e0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80021f2:	f000 faa3 	bl	800273c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40001000 	.word	0x40001000

08002204 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800220c:	e7fe      	b.n	800220c <Error_Handler+0x8>
	...

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_MspInit+0x5c>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_MspInit+0x5c>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6613      	str	r3, [r2, #96]	; 0x60
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_MspInit+0x5c>)
 8002224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_MspInit+0x5c>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_MspInit+0x5c>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_MspInit+0x5c>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	210f      	movs	r1, #15
 800224a:	f06f 0001 	mvn.w	r0, #1
 800224e:	f001 fc01 	bl	8003a54 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 5, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2105      	movs	r1, #5
 8002256:	2001      	movs	r0, #1
 8002258:	f001 fbfc 	bl	8003a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 800225c:	2001      	movs	r0, #1
 800225e:	f001 fc15 	bl	8003a8c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000

08002270 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b0b0      	sub	sp, #192	; 0xc0
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2298      	movs	r2, #152	; 0x98
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f007 ff6b 	bl	800a16c <memset>
  if(hadc->Instance==ADC1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a3c      	ldr	r2, [pc, #240]	; (800238c <HAL_ADC_MspInit+0x11c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d171      	bne.n	8002384 <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80022a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80022aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80022b6:	2310      	movs	r3, #16
 80022b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80022ba:	2302      	movs	r3, #2
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80022be:	2302      	movs	r3, #2
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022c2:	2302      	movs	r3, #2
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80022c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4618      	mov	r0, r3
 80022d2:	f002 ffe3 	bl	800529c <HAL_RCCEx_PeriphCLKConfig>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80022dc:	f7ff ff92 	bl	8002204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022e0:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_ADC_MspInit+0x120>)
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <HAL_ADC_MspInit+0x120>)
 80022e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ec:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_ADC_MspInit+0x120>)
 80022ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_ADC_MspInit+0x120>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	4a24      	ldr	r2, [pc, #144]	; (8002390 <HAL_ADC_MspInit+0x120>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_ADC_MspInit+0x120>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 8002310:	233f      	movs	r3, #63	; 0x3f
 8002312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |ADC4_Pin|ADC5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002316:	230b      	movs	r3, #11
 8002318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002322:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002326:	4619      	mov	r1, r3
 8002328:	481a      	ldr	r0, [pc, #104]	; (8002394 <HAL_ADC_MspInit+0x124>)
 800232a:	f001 fd77 	bl	8003e1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_ADC_MspInit+0x128>)
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_ADC_MspInit+0x12c>)
 8002332:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_ADC_MspInit+0x128>)
 8002336:	2205      	movs	r2, #5
 8002338:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_ADC_MspInit+0x128>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_ADC_MspInit+0x128>)
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_ADC_MspInit+0x128>)
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_ADC_MspInit+0x128>)
 800234e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002352:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_ADC_MspInit+0x128>)
 8002356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_ADC_MspInit+0x128>)
 800235e:	2220      	movs	r2, #32
 8002360:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_ADC_MspInit+0x128>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002368:	480b      	ldr	r0, [pc, #44]	; (8002398 <HAL_ADC_MspInit+0x128>)
 800236a:	f001 fb9d 	bl	8003aa8 <HAL_DMA_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8002374:	f7ff ff46 	bl	8002204 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_ADC_MspInit+0x128>)
 800237c:	651a      	str	r2, [r3, #80]	; 0x50
 800237e:	4a06      	ldr	r2, [pc, #24]	; (8002398 <HAL_ADC_MspInit+0x128>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	37c0      	adds	r7, #192	; 0xc0
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	50040000 	.word	0x50040000
 8002390:	40021000 	.word	0x40021000
 8002394:	48000800 	.word	0x48000800
 8002398:	20000094 	.word	0x20000094
 800239c:	40020008 	.word	0x40020008

080023a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_CAN_MspInit+0x7c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d128      	bne.n	8002414 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <HAL_CAN_MspInit+0x80>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	4a16      	ldr	r2, [pc, #88]	; (8002420 <HAL_CAN_MspInit+0x80>)
 80023c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023cc:	6593      	str	r3, [r2, #88]	; 0x58
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_CAN_MspInit+0x80>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_CAN_MspInit+0x80>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	4a10      	ldr	r2, [pc, #64]	; (8002420 <HAL_CAN_MspInit+0x80>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_CAN_MspInit+0x80>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002400:	2303      	movs	r3, #3
 8002402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002404:	2309      	movs	r3, #9
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	4619      	mov	r1, r3
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <HAL_CAN_MspInit+0x84>)
 8002410:	f001 fd04 	bl	8003e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002414:	bf00      	nop
 8002416:	3728      	adds	r7, #40	; 0x28
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40006400 	.word	0x40006400
 8002420:	40021000 	.word	0x40021000
 8002424:	48000400 	.word	0x48000400

08002428 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b0aa      	sub	sp, #168	; 0xa8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	2298      	movs	r2, #152	; 0x98
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f007 fe97 	bl	800a16c <memset>
  if(hrtc->Instance==RTC)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a16      	ldr	r2, [pc, #88]	; (800249c <HAL_RTC_MspInit+0x74>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d124      	bne.n	8002492 <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800244e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4618      	mov	r0, r3
 800245c:	f002 ff1e 	bl	800529c <HAL_RCCEx_PeriphCLKConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002466:	f7ff fecd 	bl	8002204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RTC_MspInit+0x78>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002470:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <HAL_RTC_MspInit+0x78>)
 8002472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RTC_MspInit+0x78>)
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_RTC_MspInit+0x78>)
 8002480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002484:	6593      	str	r3, [r2, #88]	; 0x58
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RTC_MspInit+0x78>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002492:	bf00      	nop
 8002494:	37a8      	adds	r7, #168	; 0xa8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40002800 	.word	0x40002800
 80024a0:	40021000 	.word	0x40021000

080024a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a17      	ldr	r2, [pc, #92]	; (8002520 <HAL_SPI_MspInit+0x7c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d128      	bne.n	8002518 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024d0:	6613      	str	r3, [r2, #96]	; 0x60
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_SPI_MspInit+0x80>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024f6:	23e0      	movs	r3, #224	; 0xe0
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002506:	2305      	movs	r3, #5
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002514:	f001 fc82 	bl	8003e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40013000 	.word	0x40013000
 8002524:	40021000 	.word	0x40021000

08002528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <HAL_TIM_Base_MspInit+0x44>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d113      	bne.n	8002562 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_TIM_Base_MspInit+0x48>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <HAL_TIM_Base_MspInit+0x48>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6593      	str	r3, [r2, #88]	; 0x58
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_TIM_Base_MspInit+0x48>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2105      	movs	r1, #5
 8002556:	201d      	movs	r0, #29
 8002558:	f001 fa7c 	bl	8003a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800255c:	201d      	movs	r0, #29
 800255e:	f001 fa95 	bl	8003a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40000400 	.word	0x40000400
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002584:	2200      	movs	r2, #0
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	2036      	movs	r0, #54	; 0x36
 800258a:	f001 fa63 	bl	8003a54 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800258e:	2036      	movs	r0, #54	; 0x36
 8002590:	f001 fa7c 	bl	8003a8c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_InitTick+0x9c>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_InitTick+0x9c>)
 800259a:	f043 0310 	orr.w	r3, r3, #16
 800259e:	6593      	str	r3, [r2, #88]	; 0x58
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_InitTick+0x9c>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025ac:	f107 0210 	add.w	r2, r7, #16
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fd7c 	bl	80050b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025bc:	f002 fd64 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 80025c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <HAL_InitTick+0xa0>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0c9b      	lsrs	r3, r3, #18
 80025cc:	3b01      	subs	r3, #1
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_InitTick+0xa4>)
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_InitTick+0xa8>)
 80025d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_InitTick+0xa4>)
 80025d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025de:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <HAL_InitTick+0xa4>)
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_InitTick+0xa4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_InitTick+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80025f0:	4809      	ldr	r0, [pc, #36]	; (8002618 <HAL_InitTick+0xa4>)
 80025f2:	f004 fd29 	bl	8007048 <HAL_TIM_Base_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d104      	bne.n	8002606 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80025fc:	4806      	ldr	r0, [pc, #24]	; (8002618 <HAL_InitTick+0xa4>)
 80025fe:	f004 fd7b 	bl	80070f8 <HAL_TIM_Base_Start_IT>
 8002602:	4603      	mov	r3, r0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3730      	adds	r7, #48	; 0x30
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	431bde83 	.word	0x431bde83
 8002618:	20001ae8 	.word	0x20001ae8
 800261c:	40001000 	.word	0x40001000

08002620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <NMI_Handler+0x4>

08002626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <HardFault_Handler+0x4>

0800262c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <MemManage_Handler+0x4>

08002632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <BusFault_Handler+0x4>

08002638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <UsageFault_Handler+0x4>

0800263e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8002650:	f001 fe74 	bl	800433c <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}

08002658 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <DMA1_Channel1_IRQHandler+0x10>)
 800265e:	f001 facb 	bl	8003bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000094 	.word	0x20000094

0800266c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <TIM3_IRQHandler+0x10>)
 8002672:	f004 fdb1 	bl	80071d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001b4 	.word	0x200001b4

08002680 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <TIM6_DAC_IRQHandler+0x10>)
 8002686:	f004 fda7 	bl	80071d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20001ae8 	.word	0x20001ae8

08002694 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <SystemInit+0x20>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <SystemInit+0x20>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026bc:	f7ff ffea 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c2:	490d      	ldr	r1, [pc, #52]	; (80026f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <LoopForever+0xe>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d8:	4c0a      	ldr	r4, [pc, #40]	; (8002704 <LoopForever+0x16>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026e6:	f007 fd0f 	bl	800a108 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ea:	f7ff f9e3 	bl	8001ab4 <main>

080026ee <LoopForever>:

LoopForever:
    b LoopForever
 80026ee:	e7fe      	b.n	80026ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80026fc:	0800a270 	.word	0x0800a270
  ldr r2, =_sbss
 8002700:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002704:	20001b78 	.word	0x20001b78

08002708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC1_2_IRQHandler>

0800270a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002714:	2003      	movs	r0, #3
 8002716:	f001 f992 	bl	8003a3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800271a:	200f      	movs	r0, #15
 800271c:	f7ff ff2a 	bl	8002574 <HAL_InitTick>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	e001      	b.n	8002730 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800272c:	f7ff fd70 	bl	8002210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002730:	79fb      	ldrb	r3, [r7, #7]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_IncTick+0x20>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_IncTick+0x24>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4413      	add	r3, r2
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_IncTick+0x24>)
 800274e:	6013      	str	r3, [r2, #0]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000008 	.word	0x20000008
 8002760:	20001b34 	.word	0x20001b34

08002764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return uwTick;
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_GetTick+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20001b34 	.word	0x20001b34

0800277c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3360      	adds	r3, #96	; 0x60
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <LL_ADC_SetOffset+0x44>)
 8002806:	4013      	ands	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	4313      	orrs	r3, r2
 8002814:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800281c:	bf00      	nop
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	03fff000 	.word	0x03fff000

0800282c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3360      	adds	r3, #96	; 0x60
 800283a:	461a      	mov	r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3360      	adds	r3, #96	; 0x60
 8002868:	461a      	mov	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	431a      	orrs	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	615a      	str	r2, [r3, #20]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3330      	adds	r3, #48	; 0x30
 80028c4:	461a      	mov	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	4413      	add	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	211f      	movs	r1, #31
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	401a      	ands	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0e9b      	lsrs	r3, r3, #26
 80028ec:	f003 011f 	and.w	r1, r3, #31
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	431a      	orrs	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002900:	bf00      	nop
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3314      	adds	r3, #20
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	0e5b      	lsrs	r3, r3, #25
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	4413      	add	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	0d1b      	lsrs	r3, r3, #20
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	2107      	movs	r1, #7
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	401a      	ands	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	0d1b      	lsrs	r3, r3, #20
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	431a      	orrs	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297c:	43db      	mvns	r3, r3
 800297e:	401a      	ands	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0318 	and.w	r3, r3, #24
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002988:	40d9      	lsrs	r1, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	400b      	ands	r3, r1
 800298e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002992:	431a      	orrs	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	0007ffff 	.word	0x0007ffff

080029ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6093      	str	r3, [r2, #8]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e4:	d101      	bne.n	80029ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a34:	d101      	bne.n	8002a3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <LL_ADC_IsEnabled+0x18>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <LL_ADC_IsEnabled+0x1a>
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d101      	bne.n	8002a86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d101      	bne.n	8002aac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e134      	b.n	8002d40 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fbc3 	bl	8002270 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff67 	bl	80029d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d004      	beq.n	8002b12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff4d 	bl	80029ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ff82 	bl	8002a20 <LL_ADC_IsInternalRegulatorEnabled>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d115      	bne.n	8002b4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff66 	bl	80029f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b2c:	4b86      	ldr	r3, [pc, #536]	; (8002d48 <HAL_ADC_Init+0x28c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	4a86      	ldr	r2, [pc, #536]	; (8002d4c <HAL_ADC_Init+0x290>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b40:	e002      	b.n	8002b48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f9      	bne.n	8002b42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff64 	bl	8002a20 <LL_ADC_IsInternalRegulatorEnabled>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	f043 0210 	orr.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff75 	bl	8002a6e <LL_ADC_REG_IsConversionOngoing>
 8002b84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 80cd 	bne.w	8002d2e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f040 80c9 	bne.w	8002d2e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ba4:	f043 0202 	orr.w	r2, r3, #2
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff49 	bl	8002a48 <LL_ADC_IsEnabled>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d110      	bne.n	8002bde <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bbc:	4864      	ldr	r0, [pc, #400]	; (8002d50 <HAL_ADC_Init+0x294>)
 8002bbe:	f7ff ff43 	bl	8002a48 <LL_ADC_IsEnabled>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4863      	ldr	r0, [pc, #396]	; (8002d54 <HAL_ADC_Init+0x298>)
 8002bc6:	f7ff ff3f 	bl	8002a48 <LL_ADC_IsEnabled>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4323      	orrs	r3, r4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	485f      	ldr	r0, [pc, #380]	; (8002d58 <HAL_ADC_Init+0x29c>)
 8002bda:	f7ff fdcf 	bl	800277c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7e5b      	ldrb	r3, [r3, #25]
 8002be2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002be8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002bee:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002bf4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfc:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d106      	bne.n	8002c1a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	3b01      	subs	r3, #1
 8002c12:	045b      	lsls	r3, r3, #17
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_ADC_Init+0x2a0>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	69b9      	ldr	r1, [r7, #24]
 8002c46:	430b      	orrs	r3, r1
 8002c48:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ff0d 	bl	8002a6e <LL_ADC_REG_IsConversionOngoing>
 8002c54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff1a 	bl	8002a94 <LL_ADC_INJ_IsConversionOngoing>
 8002c60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d140      	bne.n	8002cea <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d13d      	bne.n	8002cea <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7e1b      	ldrb	r3, [r3, #24]
 8002c76:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c78:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c80:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c90:	f023 0306 	bic.w	r3, r3, #6
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	69b9      	ldr	r1, [r7, #24]
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d118      	bne.n	8002cda <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	611a      	str	r2, [r3, #16]
 8002cd8:	e007      	b.n	8002cea <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10c      	bne.n	8002d0c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	f023 010f 	bic.w	r1, r3, #15
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	1e5a      	subs	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0a:	e007      	b.n	8002d1c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020f 	bic.w	r2, r2, #15
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	f023 0303 	bic.w	r3, r3, #3
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d2c:	e007      	b.n	8002d3e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	f043 0210 	orr.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3724      	adds	r7, #36	; 0x24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd90      	pop	{r4, r7, pc}
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	053e2d63 	.word	0x053e2d63
 8002d50:	50040000 	.word	0x50040000
 8002d54:	50040100 	.word	0x50040100
 8002d58:	50040300 	.word	0x50040300
 8002d5c:	fff0c007 	.word	0xfff0c007

08002d60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b0b6      	sub	sp, #216	; 0xd8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x22>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e3d5      	b.n	800352e <HAL_ADC_ConfigChannel+0x7ce>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fe6d 	bl	8002a6e <LL_ADC_REG_IsConversionOngoing>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 83ba 	bne.w	8003510 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d824      	bhi.n	8002dee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	3b02      	subs	r3, #2
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d81b      	bhi.n	8002de6 <HAL_ADC_ConfigChannel+0x86>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_ADC_ConfigChannel+0x54>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002dcd 	.word	0x08002dcd
 8002dbc:	08002dd5 	.word	0x08002dd5
 8002dc0:	08002ddd 	.word	0x08002ddd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	605a      	str	r2, [r3, #4]
          break;
 8002dca:	e011      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2212      	movs	r2, #18
 8002dd0:	605a      	str	r2, [r3, #4]
          break;
 8002dd2:	e00d      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2218      	movs	r2, #24
 8002dd8:	605a      	str	r2, [r3, #4]
          break;
 8002dda:	e009      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002de2:	605a      	str	r2, [r3, #4]
          break;
 8002de4:	e004      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2206      	movs	r2, #6
 8002dea:	605a      	str	r2, [r3, #4]
          break;
 8002dec:	e000      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002dee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f7ff fd59 	bl	80028b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fe31 	bl	8002a6e <LL_ADC_REG_IsConversionOngoing>
 8002e0c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fe3d 	bl	8002a94 <LL_ADC_INJ_IsConversionOngoing>
 8002e1a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 81c1 	bne.w	80031aa <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 81bc 	bne.w	80031aa <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e3a:	d10f      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2200      	movs	r2, #0
 8002e46:	4619      	mov	r1, r3
 8002e48:	f7ff fd60 	bl	800290c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fd1a 	bl	800288e <LL_ADC_SetSamplingTimeCommonConfig>
 8002e5a:	e00e      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f7ff fd4f 	bl	800290c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fd0a 	bl	800288e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	08db      	lsrs	r3, r3, #3
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6919      	ldr	r1, [r3, #16]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002eac:	f7ff fc9a 	bl	80027e4 <LL_ADC_SetOffset>
 8002eb0:	e17b      	b.n	80031aa <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fcb7 	bl	800282c <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x17e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fcac 	bl	800282c <LL_ADC_GetOffsetChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	0e9b      	lsrs	r3, r3, #26
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	e01e      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x1bc>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fca1 	bl	800282c <LL_ADC_GetOffsetChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002efc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e004      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002f10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1d4>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	e018      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x206>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e004      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002f5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d106      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fc70 	bl	8002858 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fc54 	bl	800282c <LL_ADC_GetOffsetChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x244>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2101      	movs	r1, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fc49 	bl	800282c <LL_ADC_GetOffsetChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	0e9b      	lsrs	r3, r3, #26
 8002f9e:	f003 021f 	and.w	r2, r3, #31
 8002fa2:	e01e      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x282>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fc3e 	bl	800282c <LL_ADC_GetOffsetChannel>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e004      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002fd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x29a>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	e018      	b.n	800302c <HAL_ADC_ConfigChannel+0x2cc>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800300e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003016:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e004      	b.n	800302c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003022:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800302c:	429a      	cmp	r2, r3
 800302e:	d106      	bne.n	800303e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2200      	movs	r2, #0
 8003036:	2101      	movs	r1, #1
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fc0d 	bl	8002858 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2102      	movs	r1, #2
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fbf1 	bl	800282c <LL_ADC_GetOffsetChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_ADC_ConfigChannel+0x30a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2102      	movs	r1, #2
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fbe6 	bl	800282c <LL_ADC_GetOffsetChannel>
 8003060:	4603      	mov	r3, r0
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	e01e      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x348>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2102      	movs	r1, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fbdb 	bl	800282c <LL_ADC_GetOffsetChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800308c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003090:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e004      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800309c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x360>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	0e9b      	lsrs	r3, r3, #26
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	e016      	b.n	80030ee <HAL_ADC_ConfigChannel+0x38e>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80030d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80030d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e004      	b.n	80030ee <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80030e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d106      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	2102      	movs	r1, #2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fbac 	bl	8002858 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2103      	movs	r1, #3
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fb90 	bl	800282c <LL_ADC_GetOffsetChannel>
 800310c:	4603      	mov	r3, r0
 800310e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <HAL_ADC_ConfigChannel+0x3cc>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2103      	movs	r1, #3
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fb85 	bl	800282c <LL_ADC_GetOffsetChannel>
 8003122:	4603      	mov	r3, r0
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	f003 021f 	and.w	r2, r3, #31
 800312a:	e017      	b.n	800315c <HAL_ADC_ConfigChannel+0x3fc>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2103      	movs	r1, #3
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fb7a 	bl	800282c <LL_ADC_GetOffsetChannel>
 8003138:	4603      	mov	r3, r0
 800313a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003146:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800314e:	2320      	movs	r3, #32
 8003150:	e003      	b.n	800315a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003154:	fab3 f383 	clz	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x414>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	0e9b      	lsrs	r3, r3, #26
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	e011      	b.n	8003198 <HAL_ADC_ConfigChannel+0x438>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003184:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800318c:	2320      	movs	r3, #32
 800318e:	e003      	b.n	8003198 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003198:	429a      	cmp	r2, r3
 800319a:	d106      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	2103      	movs	r1, #3
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fb57 	bl	8002858 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fc4a 	bl	8002a48 <LL_ADC_IsEnabled>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 8140 	bne.w	800343c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	461a      	mov	r2, r3
 80031ca:	f7ff fbcb 	bl	8002964 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	4a8f      	ldr	r2, [pc, #572]	; (8003410 <HAL_ADC_ConfigChannel+0x6b0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	f040 8131 	bne.w	800343c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x4a2>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	3301      	adds	r3, #1
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	2b09      	cmp	r3, #9
 80031f8:	bf94      	ite	ls
 80031fa:	2301      	movls	r3, #1
 80031fc:	2300      	movhi	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	e019      	b.n	8003236 <HAL_ADC_ConfigChannel+0x4d6>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003212:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800321a:	2320      	movs	r3, #32
 800321c:	e003      	b.n	8003226 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800321e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2b09      	cmp	r3, #9
 800322e:	bf94      	ite	ls
 8003230:	2301      	movls	r3, #1
 8003232:	2300      	movhi	r3, #0
 8003234:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003236:	2b00      	cmp	r3, #0
 8003238:	d079      	beq.n	800332e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x4f6>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	0e9b      	lsrs	r3, r3, #26
 800324c:	3301      	adds	r3, #1
 800324e:	069b      	lsls	r3, r3, #26
 8003250:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003254:	e015      	b.n	8003282 <HAL_ADC_ConfigChannel+0x522>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003266:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800326e:	2320      	movs	r3, #32
 8003270:	e003      	b.n	800327a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	3301      	adds	r3, #1
 800327c:	069b      	lsls	r3, r3, #26
 800327e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x542>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0e9b      	lsrs	r3, r3, #26
 8003294:	3301      	adds	r3, #1
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	2101      	movs	r1, #1
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	e017      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x572>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80032b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80032b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80032ba:	2320      	movs	r3, #32
 80032bc:	e003      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80032be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	2101      	movs	r1, #1
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	ea42 0103 	orr.w	r1, r2, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x598>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	0e9b      	lsrs	r3, r3, #26
 80032e8:	3301      	adds	r3, #1
 80032ea:	f003 021f 	and.w	r2, r3, #31
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	051b      	lsls	r3, r3, #20
 80032f6:	e018      	b.n	800332a <HAL_ADC_ConfigChannel+0x5ca>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003310:	2320      	movs	r3, #32
 8003312:	e003      	b.n	800331c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3301      	adds	r3, #1
 800331e:	f003 021f 	and.w	r2, r3, #31
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800332a:	430b      	orrs	r3, r1
 800332c:	e081      	b.n	8003432 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_ADC_ConfigChannel+0x5ea>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	0e9b      	lsrs	r3, r3, #26
 8003340:	3301      	adds	r3, #1
 8003342:	069b      	lsls	r3, r3, #26
 8003344:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003348:	e015      	b.n	8003376 <HAL_ADC_ConfigChannel+0x616>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003362:	2320      	movs	r3, #32
 8003364:	e003      	b.n	800336e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	3301      	adds	r3, #1
 8003370:	069b      	lsls	r3, r3, #26
 8003372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x636>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	0e9b      	lsrs	r3, r3, #26
 8003388:	3301      	adds	r3, #1
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	2101      	movs	r1, #1
 8003390:	fa01 f303 	lsl.w	r3, r1, r3
 8003394:	e017      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x666>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	61fb      	str	r3, [r7, #28]
  return result;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e003      	b.n	80033ba <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	ea42 0103 	orr.w	r1, r2, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x692>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	0e9b      	lsrs	r3, r3, #26
 80033dc:	3301      	adds	r3, #1
 80033de:	f003 021f 	and.w	r2, r3, #31
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	3b1e      	subs	r3, #30
 80033ea:	051b      	lsls	r3, r3, #20
 80033ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033f0:	e01e      	b.n	8003430 <HAL_ADC_ConfigChannel+0x6d0>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	613b      	str	r3, [r7, #16]
  return result;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800340a:	2320      	movs	r3, #32
 800340c:	e006      	b.n	800341c <HAL_ADC_ConfigChannel+0x6bc>
 800340e:	bf00      	nop
 8003410:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	3301      	adds	r3, #1
 800341e:	f003 021f 	and.w	r2, r3, #31
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	3b1e      	subs	r3, #30
 800342a:	051b      	lsls	r3, r3, #20
 800342c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003430:	430b      	orrs	r3, r1
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	6892      	ldr	r2, [r2, #8]
 8003436:	4619      	mov	r1, r3
 8003438:	f7ff fa68 	bl	800290c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <HAL_ADC_ConfigChannel+0x7d8>)
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d06c      	beq.n	8003522 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003448:	483c      	ldr	r0, [pc, #240]	; (800353c <HAL_ADC_ConfigChannel+0x7dc>)
 800344a:	f7ff f9bd 	bl	80027c8 <LL_ADC_GetCommonPathInternalCh>
 800344e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a3a      	ldr	r2, [pc, #232]	; (8003540 <HAL_ADC_ConfigChannel+0x7e0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d127      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800345c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d121      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a35      	ldr	r2, [pc, #212]	; (8003544 <HAL_ADC_ConfigChannel+0x7e4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d157      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003476:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800347a:	4619      	mov	r1, r3
 800347c:	482f      	ldr	r0, [pc, #188]	; (800353c <HAL_ADC_ConfigChannel+0x7dc>)
 800347e:	f7ff f990 	bl	80027a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_ADC_ConfigChannel+0x7e8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	4a30      	ldr	r2, [pc, #192]	; (800354c <HAL_ADC_ConfigChannel+0x7ec>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800349c:	e002      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f9      	bne.n	800349e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034aa:	e03a      	b.n	8003522 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a27      	ldr	r2, [pc, #156]	; (8003550 <HAL_ADC_ConfigChannel+0x7f0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d113      	bne.n	80034de <HAL_ADC_ConfigChannel+0x77e>
 80034b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_ADC_ConfigChannel+0x7e4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d12a      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d4:	4619      	mov	r1, r3
 80034d6:	4819      	ldr	r0, [pc, #100]	; (800353c <HAL_ADC_ConfigChannel+0x7dc>)
 80034d8:	f7ff f963 	bl	80027a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034dc:	e021      	b.n	8003522 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1c      	ldr	r2, [pc, #112]	; (8003554 <HAL_ADC_ConfigChannel+0x7f4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d11c      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d116      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a12      	ldr	r2, [pc, #72]	; (8003544 <HAL_ADC_ConfigChannel+0x7e4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d111      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003506:	4619      	mov	r1, r3
 8003508:	480c      	ldr	r0, [pc, #48]	; (800353c <HAL_ADC_ConfigChannel+0x7dc>)
 800350a:	f7ff f94a 	bl	80027a2 <LL_ADC_SetCommonPathInternalCh>
 800350e:	e008      	b.n	8003522 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800352a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800352e:	4618      	mov	r0, r3
 8003530:	37d8      	adds	r7, #216	; 0xd8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	80080000 	.word	0x80080000
 800353c:	50040300 	.word	0x50040300
 8003540:	c7520000 	.word	0xc7520000
 8003544:	50040000 	.word	0x50040000
 8003548:	20000000 	.word	0x20000000
 800354c:	053e2d63 	.word	0x053e2d63
 8003550:	cb840000 	.word	0xcb840000
 8003554:	80000001 	.word	0x80000001

08003558 <LL_ADC_IsEnabled>:
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <LL_ADC_IsEnabled+0x18>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <LL_ADC_IsEnabled+0x1a>
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <LL_ADC_REG_IsConversionOngoing>:
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d101      	bne.n	8003596 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b0a1      	sub	sp, #132	; 0x84
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035be:	2302      	movs	r3, #2
 80035c0:	e089      	b.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80035ca:	2300      	movs	r3, #0
 80035cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80035ce:	2300      	movs	r3, #0
 80035d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a42      	ldr	r2, [pc, #264]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d102      	bne.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035dc:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e001      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e068      	b.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ffb9 	bl	800357e <LL_ADC_REG_IsConversionOngoing>
 800360c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ffb3 	bl	800357e <LL_ADC_REG_IsConversionOngoing>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d14a      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800361e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003620:	2b00      	cmp	r3, #0
 8003622:	d147      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003624:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003626:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d027      	beq.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003642:	035b      	lsls	r3, r3, #13
 8003644:	430b      	orrs	r3, r1
 8003646:	431a      	orrs	r2, r3
 8003648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800364c:	4824      	ldr	r0, [pc, #144]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800364e:	f7ff ff83 	bl	8003558 <LL_ADC_IsEnabled>
 8003652:	4604      	mov	r4, r0
 8003654:	4823      	ldr	r0, [pc, #140]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003656:	f7ff ff7f 	bl	8003558 <LL_ADC_IsEnabled>
 800365a:	4603      	mov	r3, r0
 800365c:	4323      	orrs	r3, r4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d132      	bne.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800366a:	f023 030f 	bic.w	r3, r3, #15
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	6811      	ldr	r1, [r2, #0]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	6892      	ldr	r2, [r2, #8]
 8003676:	430a      	orrs	r2, r1
 8003678:	431a      	orrs	r2, r3
 800367a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800367c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800367e:	e023      	b.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800368c:	4814      	ldr	r0, [pc, #80]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800368e:	f7ff ff63 	bl	8003558 <LL_ADC_IsEnabled>
 8003692:	4604      	mov	r4, r0
 8003694:	4813      	ldr	r0, [pc, #76]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003696:	f7ff ff5f 	bl	8003558 <LL_ADC_IsEnabled>
 800369a:	4603      	mov	r3, r0
 800369c:	4323      	orrs	r3, r4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d112      	bne.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036aa:	f023 030f 	bic.w	r3, r3, #15
 80036ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036b2:	e009      	b.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80036c6:	e000      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80036d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3784      	adds	r7, #132	; 0x84
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd90      	pop	{r4, r7, pc}
 80036de:	bf00      	nop
 80036e0:	50040000 	.word	0x50040000
 80036e4:	50040100 	.word	0x50040100
 80036e8:	50040300 	.word	0x50040300

080036ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e0ed      	b.n	80038da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fe fe48 	bl	80023a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003720:	f7ff f820 	bl	8002764 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003726:	e012      	b.n	800374e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003728:	f7ff f81c 	bl	8002764 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b0a      	cmp	r3, #10
 8003734:	d90b      	bls.n	800374e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2205      	movs	r2, #5
 8003746:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0c5      	b.n	80038da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0e5      	beq.n	8003728 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0202 	bic.w	r2, r2, #2
 800376a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800376c:	f7fe fffa 	bl	8002764 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003772:	e012      	b.n	800379a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003774:	f7fe fff6 	bl	8002764 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b0a      	cmp	r3, #10
 8003780:	d90b      	bls.n	800379a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2205      	movs	r2, #5
 8003792:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e09f      	b.n	80038da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7e1b      	ldrb	r3, [r3, #24]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d108      	bne.n	80037c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	e007      	b.n	80037d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7e5b      	ldrb	r3, [r3, #25]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d108      	bne.n	80037ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e007      	b.n	80037fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7e9b      	ldrb	r3, [r3, #26]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d108      	bne.n	8003816 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e007      	b.n	8003826 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0220 	bic.w	r2, r2, #32
 8003824:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7edb      	ldrb	r3, [r3, #27]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d108      	bne.n	8003840 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0210 	bic.w	r2, r2, #16
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e007      	b.n	8003850 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0210 	orr.w	r2, r2, #16
 800384e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7f1b      	ldrb	r3, [r3, #28]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d108      	bne.n	800386a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0208 	orr.w	r2, r2, #8
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e007      	b.n	800387a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0208 	bic.w	r2, r2, #8
 8003878:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7f5b      	ldrb	r3, [r3, #29]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d108      	bne.n	8003894 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0204 	orr.w	r2, r2, #4
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e007      	b.n	80038a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	ea42 0103 	orr.w	r1, r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	1e5a      	subs	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003900:	4013      	ands	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800390c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003916:	4a04      	ldr	r2, [pc, #16]	; (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	60d3      	str	r3, [r2, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <__NVIC_GetPriorityGrouping+0x18>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 0307 	and.w	r3, r3, #7
}
 800393a:	4618      	mov	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	db0b      	blt.n	8003972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <__NVIC_EnableIRQ+0x38>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2001      	movs	r0, #1
 800396a:	fa00 f202 	lsl.w	r2, r0, r2
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000e100 	.word	0xe000e100

08003984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	db0a      	blt.n	80039ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	490c      	ldr	r1, [pc, #48]	; (80039d0 <__NVIC_SetPriority+0x4c>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	440b      	add	r3, r1
 80039a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ac:	e00a      	b.n	80039c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4908      	ldr	r1, [pc, #32]	; (80039d4 <__NVIC_SetPriority+0x50>)
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	3b04      	subs	r3, #4
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	440b      	add	r3, r1
 80039c2:	761a      	strb	r2, [r3, #24]
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000e100 	.word	0xe000e100
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f1c3 0307 	rsb	r3, r3, #7
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	bf28      	it	cs
 80039f6:	2304      	movcs	r3, #4
 80039f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d902      	bls.n	8003a08 <NVIC_EncodePriority+0x30>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3b03      	subs	r3, #3
 8003a06:	e000      	b.n	8003a0a <NVIC_EncodePriority+0x32>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a20:	f04f 31ff 	mov.w	r1, #4294967295
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	43d9      	mvns	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	4313      	orrs	r3, r2
         );
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3724      	adds	r7, #36	; 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ff4c 	bl	80038e4 <__NVIC_SetPriorityGrouping>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a66:	f7ff ff61 	bl	800392c <__NVIC_GetPriorityGrouping>
 8003a6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	6978      	ldr	r0, [r7, #20]
 8003a72:	f7ff ffb1 	bl	80039d8 <NVIC_EncodePriority>
 8003a76:	4602      	mov	r2, r0
 8003a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ff80 	bl	8003984 <__NVIC_SetPriority>
}
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff54 	bl	8003948 <__NVIC_EnableIRQ>
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e08d      	b.n	8003bd6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_DMA_Init+0x138>)
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d80f      	bhi.n	8003ae6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b45      	ldr	r3, [pc, #276]	; (8003be4 <HAL_DMA_Init+0x13c>)
 8003ace:	4413      	add	r3, r2
 8003ad0:	4a45      	ldr	r2, [pc, #276]	; (8003be8 <HAL_DMA_Init+0x140>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	009a      	lsls	r2, r3, #2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a42      	ldr	r2, [pc, #264]	; (8003bec <HAL_DMA_Init+0x144>)
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ae4:	e00e      	b.n	8003b04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <HAL_DMA_Init+0x148>)
 8003aee:	4413      	add	r3, r2
 8003af0:	4a3d      	ldr	r2, [pc, #244]	; (8003be8 <HAL_DMA_Init+0x140>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	009a      	lsls	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a3c      	ldr	r2, [pc, #240]	; (8003bf4 <HAL_DMA_Init+0x14c>)
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8fe 	bl	8003d58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b64:	d102      	bne.n	8003b6c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b80:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d010      	beq.n	8003bac <HAL_DMA_Init+0x104>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d80c      	bhi.n	8003bac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f91e 	bl	8003dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	e008      	b.n	8003bbe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40020407 	.word	0x40020407
 8003be4:	bffdfff8 	.word	0xbffdfff8
 8003be8:	cccccccd 	.word	0xcccccccd
 8003bec:	40020000 	.word	0x40020000
 8003bf0:	bffdfbf8 	.word	0xbffdfbf8
 8003bf4:	40020400 	.word	0x40020400

08003bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f003 031c 	and.w	r3, r3, #28
 8003c18:	2204      	movs	r2, #4
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d026      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x7a>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d021      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	f003 021c 	and.w	r2, r3, #28
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	2104      	movs	r1, #4
 8003c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d071      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003c70:	e06c      	b.n	8003d4c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f003 031c 	and.w	r3, r3, #28
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d02e      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xec>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d029      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 020a 	bic.w	r2, r2, #10
 8003cac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f003 021c 	and.w	r2, r3, #28
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d038      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ce2:	e033      	b.n	8003d4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	f003 031c 	and.w	r3, r3, #28
 8003cec:	2208      	movs	r2, #8
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d02a      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x156>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d025      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 020e 	bic.w	r2, r2, #14
 8003d10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f003 021c 	and.w	r2, r3, #28
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2101      	movs	r1, #1
 8003d20:	fa01 f202 	lsl.w	r2, r1, r2
 8003d24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
}
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d80a      	bhi.n	8003d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d78:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6493      	str	r3, [r2, #72]	; 0x48
 8003d80:	e007      	b.n	8003d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	009a      	lsls	r2, r3, #2
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	3b08      	subs	r3, #8
 8003d9a:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003da8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2201      	movs	r2, #1
 8003db2:	409a      	lsls	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40020407 	.word	0x40020407
 8003dc8:	4002081c 	.word	0x4002081c
 8003dcc:	cccccccd 	.word	0xcccccccd
 8003dd0:	40020880 	.word	0x40020880

08003dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	461a      	mov	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2201      	movs	r2, #1
 8003e02:	409a      	lsls	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	1000823f 	.word	0x1000823f
 8003e18:	40020940 	.word	0x40020940

08003e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2a:	e166      	b.n	80040fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8158 	beq.w	80040f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d005      	beq.n	8003e5c <HAL_GPIO_Init+0x40>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d130      	bne.n	8003ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e92:	2201      	movs	r2, #1
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	f003 0201 	and.w	r2, r3, #1
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d017      	beq.n	8003efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d123      	bne.n	8003f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	08da      	lsrs	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3208      	adds	r2, #8
 8003f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	220f      	movs	r2, #15
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4013      	ands	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	08da      	lsrs	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3208      	adds	r2, #8
 8003f48:	6939      	ldr	r1, [r7, #16]
 8003f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	2203      	movs	r2, #3
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 0203 	and.w	r2, r3, #3
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80b2 	beq.w	80040f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f90:	4b61      	ldr	r3, [pc, #388]	; (8004118 <HAL_GPIO_Init+0x2fc>)
 8003f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f94:	4a60      	ldr	r2, [pc, #384]	; (8004118 <HAL_GPIO_Init+0x2fc>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6613      	str	r3, [r2, #96]	; 0x60
 8003f9c:	4b5e      	ldr	r3, [pc, #376]	; (8004118 <HAL_GPIO_Init+0x2fc>)
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fa8:	4a5c      	ldr	r2, [pc, #368]	; (800411c <HAL_GPIO_Init+0x300>)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	089b      	lsrs	r3, r3, #2
 8003fae:	3302      	adds	r3, #2
 8003fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fd2:	d02b      	beq.n	800402c <HAL_GPIO_Init+0x210>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a52      	ldr	r2, [pc, #328]	; (8004120 <HAL_GPIO_Init+0x304>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d025      	beq.n	8004028 <HAL_GPIO_Init+0x20c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a51      	ldr	r2, [pc, #324]	; (8004124 <HAL_GPIO_Init+0x308>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d01f      	beq.n	8004024 <HAL_GPIO_Init+0x208>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a50      	ldr	r2, [pc, #320]	; (8004128 <HAL_GPIO_Init+0x30c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d019      	beq.n	8004020 <HAL_GPIO_Init+0x204>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a4f      	ldr	r2, [pc, #316]	; (800412c <HAL_GPIO_Init+0x310>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_GPIO_Init+0x200>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a4e      	ldr	r2, [pc, #312]	; (8004130 <HAL_GPIO_Init+0x314>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00d      	beq.n	8004018 <HAL_GPIO_Init+0x1fc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a4d      	ldr	r2, [pc, #308]	; (8004134 <HAL_GPIO_Init+0x318>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d007      	beq.n	8004014 <HAL_GPIO_Init+0x1f8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a4c      	ldr	r2, [pc, #304]	; (8004138 <HAL_GPIO_Init+0x31c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_GPIO_Init+0x1f4>
 800400c:	2307      	movs	r3, #7
 800400e:	e00e      	b.n	800402e <HAL_GPIO_Init+0x212>
 8004010:	2308      	movs	r3, #8
 8004012:	e00c      	b.n	800402e <HAL_GPIO_Init+0x212>
 8004014:	2306      	movs	r3, #6
 8004016:	e00a      	b.n	800402e <HAL_GPIO_Init+0x212>
 8004018:	2305      	movs	r3, #5
 800401a:	e008      	b.n	800402e <HAL_GPIO_Init+0x212>
 800401c:	2304      	movs	r3, #4
 800401e:	e006      	b.n	800402e <HAL_GPIO_Init+0x212>
 8004020:	2303      	movs	r3, #3
 8004022:	e004      	b.n	800402e <HAL_GPIO_Init+0x212>
 8004024:	2302      	movs	r3, #2
 8004026:	e002      	b.n	800402e <HAL_GPIO_Init+0x212>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <HAL_GPIO_Init+0x212>
 800402c:	2300      	movs	r3, #0
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	f002 0203 	and.w	r2, r2, #3
 8004034:	0092      	lsls	r2, r2, #2
 8004036:	4093      	lsls	r3, r2
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800403e:	4937      	ldr	r1, [pc, #220]	; (800411c <HAL_GPIO_Init+0x300>)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	3302      	adds	r3, #2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800404c:	4b3b      	ldr	r3, [pc, #236]	; (800413c <HAL_GPIO_Init+0x320>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004070:	4a32      	ldr	r2, [pc, #200]	; (800413c <HAL_GPIO_Init+0x320>)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004076:	4b31      	ldr	r3, [pc, #196]	; (800413c <HAL_GPIO_Init+0x320>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43db      	mvns	r3, r3
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800409a:	4a28      	ldr	r2, [pc, #160]	; (800413c <HAL_GPIO_Init+0x320>)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040a0:	4b26      	ldr	r3, [pc, #152]	; (800413c <HAL_GPIO_Init+0x320>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <HAL_GPIO_Init+0x320>)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040ca:	4b1c      	ldr	r3, [pc, #112]	; (800413c <HAL_GPIO_Init+0x320>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040ee:	4a13      	ldr	r2, [pc, #76]	; (800413c <HAL_GPIO_Init+0x320>)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	3301      	adds	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	f47f ae91 	bne.w	8003e2c <HAL_GPIO_Init+0x10>
  }
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40021000 	.word	0x40021000
 800411c:	40010000 	.word	0x40010000
 8004120:	48000400 	.word	0x48000400
 8004124:	48000800 	.word	0x48000800
 8004128:	48000c00 	.word	0x48000c00
 800412c:	48001000 	.word	0x48001000
 8004130:	48001400 	.word	0x48001400
 8004134:	48001800 	.word	0x48001800
 8004138:	48001c00 	.word	0x48001c00
 800413c:	40010400 	.word	0x40010400

08004140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
 800414c:	4613      	mov	r3, r2
 800414e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004150:	787b      	ldrb	r3, [r7, #1]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800415c:	e002      	b.n	8004164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004182:	887a      	ldrh	r2, [r7, #2]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4013      	ands	r3, r2
 8004188:	041a      	lsls	r2, r3, #16
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	43d9      	mvns	r1, r3
 800418e:	887b      	ldrh	r3, [r7, #2]
 8004190:	400b      	ands	r3, r1
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c4:	d102      	bne.n	80041cc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80041c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ca:	e00b      	b.n	80041e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041da:	d102      	bne.n	80041e2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80041dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041e0:	e000      	b.n	80041e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80041e2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40007000 	.word	0x40007000

080041f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d141      	bne.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004202:	4b4b      	ldr	r3, [pc, #300]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800420a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420e:	d131      	bne.n	8004274 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004210:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004216:	4a46      	ldr	r2, [pc, #280]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800421c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004220:	4b43      	ldr	r3, [pc, #268]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004228:	4a41      	ldr	r2, [pc, #260]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004230:	4b40      	ldr	r3, [pc, #256]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2232      	movs	r2, #50	; 0x32
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	4a3f      	ldr	r2, [pc, #252]	; (8004338 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	0c9b      	lsrs	r3, r3, #18
 8004242:	3301      	adds	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004246:	e002      	b.n	800424e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3b01      	subs	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800424e:	4b38      	ldr	r3, [pc, #224]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d102      	bne.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f2      	bne.n	8004248 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004262:	4b33      	ldr	r3, [pc, #204]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426e:	d158      	bne.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e057      	b.n	8004324 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004274:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427a:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004280:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004284:	e04d      	b.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428c:	d141      	bne.n	8004312 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800428e:	4b28      	ldr	r3, [pc, #160]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429a:	d131      	bne.n	8004300 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a2:	4a23      	ldr	r2, [pc, #140]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042ac:	4b20      	ldr	r3, [pc, #128]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042b4:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042bc:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2232      	movs	r2, #50	; 0x32
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	4a1c      	ldr	r2, [pc, #112]	; (8004338 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	0c9b      	lsrs	r3, r3, #18
 80042ce:	3301      	adds	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d2:	e002      	b.n	80042da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d102      	bne.n	80042ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f2      	bne.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	d112      	bne.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e011      	b.n	8004324 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004306:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004310:	e007      	b.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004320:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40007000 	.word	0x40007000
 8004334:	20000000 	.word	0x20000000
 8004338:	431bde83 	.word	0x431bde83

0800433c <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8004340:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800434c:	f7ff ff2a 	bl	80041a4 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004350:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004352:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004356:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8004358:	4b16      	ldr	r3, [pc, #88]	; (80043b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800435a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8004364:	f000 f828 	bl	80043b8 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8004368:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800436a:	2208      	movs	r2, #8
 800436c:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800437a:	f000 f824 	bl	80043c6 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004380:	2210      	movs	r2, #16
 8004382:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004390:	f000 f820 	bl	80043d4 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8004394:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004396:	2220      	movs	r2, #32
 8004398:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 80043a6:	f000 f81c 	bl	80043e2 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 80043aa:	4b02      	ldr	r3, [pc, #8]	; (80043b4 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80043ac:	2240      	movs	r2, #64	; 0x40
 80043ae:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80043b0:	bf00      	nop
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40010400 	.word	0x40010400

080043b8 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 80043c6:	b480      	push	{r7}
 80043c8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f000 bc76 	b.w	8004cf0 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004404:	4ba1      	ldr	r3, [pc, #644]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800440e:	4b9f      	ldr	r3, [pc, #636]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80e6 	beq.w	80045f2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_RCC_OscConfig+0x4c>
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	2b0c      	cmp	r3, #12
 8004430:	f040 808d 	bne.w	800454e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b01      	cmp	r3, #1
 8004438:	f040 8089 	bne.w	800454e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800443c:	4b93      	ldr	r3, [pc, #588]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d006      	beq.n	8004456 <HAL_RCC_OscConfig+0x66>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f000 bc4d 	b.w	8004cf0 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800445a:	4b8c      	ldr	r3, [pc, #560]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d004      	beq.n	8004470 <HAL_RCC_OscConfig+0x80>
 8004466:	4b89      	ldr	r3, [pc, #548]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446e:	e005      	b.n	800447c <HAL_RCC_OscConfig+0x8c>
 8004470:	4b86      	ldr	r3, [pc, #536]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447c:	4293      	cmp	r3, r2
 800447e:	d224      	bcs.n	80044ca <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fe47 	bl	8005118 <RCC_SetFlashLatencyFromMSIRange>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f000 bc2d 	b.w	8004cf0 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004496:	4b7d      	ldr	r3, [pc, #500]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a7c      	ldr	r2, [pc, #496]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800449c:	f043 0308 	orr.w	r3, r3, #8
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b7a      	ldr	r3, [pc, #488]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	4977      	ldr	r1, [pc, #476]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044b4:	4b75      	ldr	r3, [pc, #468]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	4972      	ldr	r1, [pc, #456]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	604b      	str	r3, [r1, #4]
 80044c8:	e025      	b.n	8004516 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ca:	4b70      	ldr	r3, [pc, #448]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a6f      	ldr	r2, [pc, #444]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80044d0:	f043 0308 	orr.w	r3, r3, #8
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b6d      	ldr	r3, [pc, #436]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	496a      	ldr	r1, [pc, #424]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044e8:	4b68      	ldr	r3, [pc, #416]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	4965      	ldr	r1, [pc, #404]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fe06 	bl	8005118 <RCC_SetFlashLatencyFromMSIRange>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e3ec      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004516:	f000 fd1f 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 800451a:	4602      	mov	r2, r0
 800451c:	4b5b      	ldr	r3, [pc, #364]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	495a      	ldr	r1, [pc, #360]	; (8004690 <HAL_RCC_OscConfig+0x2a0>)
 8004528:	5ccb      	ldrb	r3, [r1, r3]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	4a58      	ldr	r2, [pc, #352]	; (8004694 <HAL_RCC_OscConfig+0x2a4>)
 8004534:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004536:	4b58      	ldr	r3, [pc, #352]	; (8004698 <HAL_RCC_OscConfig+0x2a8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe f81a 	bl	8002574 <HAL_InitTick>
 8004540:	4603      	mov	r3, r0
 8004542:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004544:	7dfb      	ldrb	r3, [r7, #23]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d052      	beq.n	80045f0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800454a:	7dfb      	ldrb	r3, [r7, #23]
 800454c:	e3d0      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d032      	beq.n	80045bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004556:	4b4d      	ldr	r3, [pc, #308]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a4c      	ldr	r2, [pc, #304]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004562:	f7fe f8ff 	bl	8002764 <HAL_GetTick>
 8004566:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800456a:	f7fe f8fb 	bl	8002764 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e3b9      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800457c:	4b43      	ldr	r3, [pc, #268]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004588:	4b40      	ldr	r3, [pc, #256]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a3f      	ldr	r2, [pc, #252]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800458e:	f043 0308 	orr.w	r3, r3, #8
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b3d      	ldr	r3, [pc, #244]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	493a      	ldr	r1, [pc, #232]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a6:	4b39      	ldr	r3, [pc, #228]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	4935      	ldr	r1, [pc, #212]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]
 80045ba:	e01a      	b.n	80045f2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045bc:	4b33      	ldr	r3, [pc, #204]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a32      	ldr	r2, [pc, #200]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045c8:	f7fe f8cc 	bl	8002764 <HAL_GetTick>
 80045cc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d0:	f7fe f8c8 	bl	8002764 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e386      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045e2:	4b2a      	ldr	r3, [pc, #168]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x1e0>
 80045ee:	e000      	b.n	80045f2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d073      	beq.n	80046e6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d005      	beq.n	8004610 <HAL_RCC_OscConfig+0x220>
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	2b0c      	cmp	r3, #12
 8004608:	d10e      	bne.n	8004628 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b03      	cmp	r3, #3
 800460e:	d10b      	bne.n	8004628 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004610:	4b1e      	ldr	r3, [pc, #120]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d063      	beq.n	80046e4 <HAL_RCC_OscConfig+0x2f4>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d15f      	bne.n	80046e4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e363      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d106      	bne.n	8004640 <HAL_RCC_OscConfig+0x250>
 8004632:	4b16      	ldr	r3, [pc, #88]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a15      	ldr	r2, [pc, #84]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e01d      	b.n	800467c <HAL_RCC_OscConfig+0x28c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0x274>
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a0f      	ldr	r2, [pc, #60]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a0c      	ldr	r2, [pc, #48]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0x28c>
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 800466a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a05      	ldr	r2, [pc, #20]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fe f86e 	bl	8002764 <HAL_GetTick>
 8004688:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800468a:	e010      	b.n	80046ae <HAL_RCC_OscConfig+0x2be>
 800468c:	40021000 	.word	0x40021000
 8004690:	0800a220 	.word	0x0800a220
 8004694:	20000000 	.word	0x20000000
 8004698:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800469c:	f7fe f862 	bl	8002764 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	; 0x64
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e320      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ae:	4ba0      	ldr	r3, [pc, #640]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x2ac>
 80046ba:	e014      	b.n	80046e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fe f852 	bl	8002764 <HAL_GetTick>
 80046c0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c4:	f7fe f84e 	bl	8002764 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b64      	cmp	r3, #100	; 0x64
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e30c      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046d6:	4b96      	ldr	r3, [pc, #600]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x2d4>
 80046e2:	e000      	b.n	80046e6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d060      	beq.n	80047b4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_OscConfig+0x314>
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d119      	bne.n	8004732 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d116      	bne.n	8004732 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004704:	4b8a      	ldr	r3, [pc, #552]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_OscConfig+0x32c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e2e9      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471c:	4b84      	ldr	r3, [pc, #528]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	4981      	ldr	r1, [pc, #516]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004730:	e040      	b.n	80047b4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d023      	beq.n	8004782 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473a:	4b7d      	ldr	r3, [pc, #500]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7c      	ldr	r2, [pc, #496]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fe f80d 	bl	8002764 <HAL_GetTick>
 800474a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474e:	f7fe f809 	bl	8002764 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e2c7      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004760:	4b73      	ldr	r3, [pc, #460]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476c:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	061b      	lsls	r3, r3, #24
 800477a:	496d      	ldr	r1, [pc, #436]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 800477c:	4313      	orrs	r3, r2
 800477e:	604b      	str	r3, [r1, #4]
 8004780:	e018      	b.n	80047b4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004782:	4b6b      	ldr	r3, [pc, #428]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6a      	ldr	r2, [pc, #424]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800478c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fd ffe9 	bl	8002764 <HAL_GetTick>
 8004792:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004796:	f7fd ffe5 	bl	8002764 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e2a3      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047a8:	4b61      	ldr	r3, [pc, #388]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d07f      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d05f      	beq.n	8004888 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80047c8:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 80047ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ce:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	429a      	cmp	r2, r3
 80047dc:	d037      	beq.n	800484e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e27c      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8004800:	4b4b      	ldr	r3, [pc, #300]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004806:	4a4a      	ldr	r2, [pc, #296]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004810:	f7fd ffa8 	bl	8002764 <HAL_GetTick>
 8004814:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004818:	f7fd ffa4 	bl	8002764 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b11      	cmp	r3, #17
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e262      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800482a:	4b41      	ldr	r3, [pc, #260]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 800482c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ef      	bne.n	8004818 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004838:	4b3d      	ldr	r3, [pc, #244]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 800483a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483e:	f023 0210 	bic.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	493a      	ldr	r1, [pc, #232]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800484e:	4b38      	ldr	r3, [pc, #224]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004854:	4a36      	ldr	r2, [pc, #216]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485e:	f7fd ff81 	bl	8002764 <HAL_GetTick>
 8004862:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004866:	f7fd ff7d 	bl	8002764 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b11      	cmp	r3, #17
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e23b      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004878:	4b2d      	ldr	r3, [pc, #180]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 800487a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ef      	beq.n	8004866 <HAL_RCC_OscConfig+0x476>
 8004886:	e01b      	b.n	80048c0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004888:	4b29      	ldr	r3, [pc, #164]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 800488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488e:	4a28      	ldr	r2, [pc, #160]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fd ff64 	bl	8002764 <HAL_GetTick>
 800489c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a0:	f7fd ff60 	bl	8002764 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b11      	cmp	r3, #17
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e21e      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b2:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 80048b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1ef      	bne.n	80048a0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80c1 	beq.w	8004a50 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ce:	2300      	movs	r3, #0
 80048d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10e      	bne.n	80048fe <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e0:	4b13      	ldr	r3, [pc, #76]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	4a12      	ldr	r2, [pc, #72]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6593      	str	r3, [r2, #88]	; 0x58
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <HAL_RCC_OscConfig+0x540>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fe:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <HAL_RCC_OscConfig+0x544>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11c      	bne.n	8004944 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <HAL_RCC_OscConfig+0x544>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <HAL_RCC_OscConfig+0x544>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004916:	f7fd ff25 	bl	8002764 <HAL_GetTick>
 800491a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800491c:	e00c      	b.n	8004938 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491e:	f7fd ff21 	bl	8002764 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d905      	bls.n	8004938 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e1df      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004938:	4b99      	ldr	r3, [pc, #612]	; (8004ba0 <HAL_RCC_OscConfig+0x7b0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ec      	beq.n	800491e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02c      	beq.n	80049aa <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004950:	4b94      	ldr	r3, [pc, #592]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	4990      	ldr	r1, [pc, #576]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	d010      	beq.n	8004998 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004976:	4b8b      	ldr	r3, [pc, #556]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	4a89      	ldr	r2, [pc, #548]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004986:	4b87      	ldr	r3, [pc, #540]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498c:	4a85      	ldr	r2, [pc, #532]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004996:	e018      	b.n	80049ca <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004998:	4b82      	ldr	r3, [pc, #520]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	4a81      	ldr	r2, [pc, #516]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049a8:	e00f      	b.n	80049ca <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049aa:	4b7e      	ldr	r3, [pc, #504]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	4a7c      	ldr	r2, [pc, #496]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049ba:	4b7a      	ldr	r3, [pc, #488]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c0:	4a78      	ldr	r2, [pc, #480]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 80049c2:	f023 0304 	bic.w	r3, r3, #4
 80049c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d2:	f7fd fec7 	bl	8002764 <HAL_GetTick>
 80049d6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d8:	e00a      	b.n	80049f0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049da:	f7fd fec3 	bl	8002764 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e17f      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f0:	4b6c      	ldr	r3, [pc, #432]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0ed      	beq.n	80049da <HAL_RCC_OscConfig+0x5ea>
 80049fe:	e01d      	b.n	8004a3c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fd feb0 	bl	8002764 <HAL_GetTick>
 8004a04:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a08:	f7fd feac 	bl	8002764 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e168      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a1e:	4b61      	ldr	r3, [pc, #388]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ed      	bne.n	8004a08 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004a2c:	4b5d      	ldr	r3, [pc, #372]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	4a5c      	ldr	r2, [pc, #368]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a44:	4b57      	ldr	r3, [pc, #348]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	4a56      	ldr	r2, [pc, #344]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d03c      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01c      	beq.n	8004a9e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a64:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a6a:	4a4e      	ldr	r2, [pc, #312]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fd fe76 	bl	8002764 <HAL_GetTick>
 8004a78:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a7c:	f7fd fe72 	bl	8002764 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e130      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a8e:	4b45      	ldr	r3, [pc, #276]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0ef      	beq.n	8004a7c <HAL_RCC_OscConfig+0x68c>
 8004a9c:	e01b      	b.n	8004ad6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a9e:	4b41      	ldr	r3, [pc, #260]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aa4:	4a3f      	ldr	r2, [pc, #252]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aae:	f7fd fe59 	bl	8002764 <HAL_GetTick>
 8004ab2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ab6:	f7fd fe55 	bl	8002764 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e113      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ac8:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1ef      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 8107 	beq.w	8004cee <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	f040 80cf 	bne.w	8004c88 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004aea:	4b2e      	ldr	r3, [pc, #184]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0203 	and.w	r2, r3, #3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d12c      	bne.n	8004b58 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d123      	bne.n	8004b58 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d11b      	bne.n	8004b58 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d113      	bne.n	8004b58 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d109      	bne.n	8004b58 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	3b01      	subs	r3, #1
 8004b52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d071      	beq.n	8004c3c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	2b0c      	cmp	r3, #12
 8004b5c:	d06c      	beq.n	8004c38 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d105      	bne.n	8004b76 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0ba      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <HAL_RCC_OscConfig+0x7b4>)
 8004b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b86:	f7fd fded 	bl	8002764 <HAL_GetTick>
 8004b8a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b8c:	e00c      	b.n	8004ba8 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8e:	f7fd fde9 	bl	8002764 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d905      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0a7      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1ec      	bne.n	8004b8e <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb4:	4b50      	ldr	r3, [pc, #320]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	4b50      	ldr	r3, [pc, #320]	; (8004cfc <HAL_RCC_OscConfig+0x90c>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bc4:	3a01      	subs	r2, #1
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	4311      	orrs	r1, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bce:	0212      	lsls	r2, r2, #8
 8004bd0:	4311      	orrs	r1, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bd6:	0852      	lsrs	r2, r2, #1
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	0552      	lsls	r2, r2, #21
 8004bdc:	4311      	orrs	r1, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004be2:	0852      	lsrs	r2, r2, #1
 8004be4:	3a01      	subs	r2, #1
 8004be6:	0652      	lsls	r2, r2, #25
 8004be8:	4311      	orrs	r1, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bee:	06d2      	lsls	r2, r2, #27
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	4941      	ldr	r1, [pc, #260]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bf8:	4b3f      	ldr	r3, [pc, #252]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a3e      	ldr	r2, [pc, #248]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c04:	4b3c      	ldr	r3, [pc, #240]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4a3b      	ldr	r2, [pc, #236]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c10:	f7fd fda8 	bl	8002764 <HAL_GetTick>
 8004c14:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c18:	f7fd fda4 	bl	8002764 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e062      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c2a:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c36:	e05a      	b.n	8004cee <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e059      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c3c:	4b2e      	ldr	r3, [pc, #184]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d152      	bne.n	8004cee <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c48:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2a      	ldr	r2, [pc, #168]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c54:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4a27      	ldr	r2, [pc, #156]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c60:	f7fd fd80 	bl	8002764 <HAL_GetTick>
 8004c64:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fd fd7c 	bl	8002764 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e03a      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x878>
 8004c86:	e032      	b.n	8004cee <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	2b0c      	cmp	r3, #12
 8004c8c:	d02d      	beq.n	8004cea <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c98:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c9a:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d105      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ca6:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004cac:	f023 0303 	bic.w	r3, r3, #3
 8004cb0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cb2:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	4a10      	ldr	r2, [pc, #64]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004cb8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc2:	f7fd fd4f 	bl	8002764 <HAL_GetTick>
 8004cc6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fd fd4b 	bl	8002764 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e009      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <HAL_RCC_OscConfig+0x908>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <HAL_RCC_OscConfig+0x8da>
 8004ce8:	e001      	b.n	8004cee <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3728      	adds	r7, #40	; 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	019d800c 	.word	0x019d800c

08004d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e10f      	b.n	8004f38 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d18:	4b89      	ldr	r3, [pc, #548]	; (8004f40 <HAL_RCC_ClockConfig+0x240>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d910      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d26:	4b86      	ldr	r3, [pc, #536]	; (8004f40 <HAL_RCC_ClockConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f023 020f 	bic.w	r2, r3, #15
 8004d2e:	4984      	ldr	r1, [pc, #528]	; (8004f40 <HAL_RCC_ClockConfig+0x240>)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b82      	ldr	r3, [pc, #520]	; (8004f40 <HAL_RCC_ClockConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0f7      	b.n	8004f38 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8089 	beq.w	8004e68 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d133      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5e:	4b79      	ldr	r3, [pc, #484]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0e4      	b.n	8004f38 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004d6e:	f000 fa2d 	bl	80051cc <RCC_GetSysClockFreqFromPLLSource>
 8004d72:	4603      	mov	r3, r0
 8004d74:	4a74      	ldr	r2, [pc, #464]	; (8004f48 <HAL_RCC_ClockConfig+0x248>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d955      	bls.n	8004e26 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d7a:	4b72      	ldr	r3, [pc, #456]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d86:	4b6f      	ldr	r3, [pc, #444]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d8e:	4a6d      	ldr	r2, [pc, #436]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e044      	b.n	8004e26 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d03e      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x126>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d13a      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004db0:	4b64      	ldr	r3, [pc, #400]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004db8:	4a62      	ldr	r2, [pc, #392]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e02f      	b.n	8004e26 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d107      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dce:	4b5d      	ldr	r3, [pc, #372]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d115      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e0ac      	b.n	8004f38 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d107      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004de6:	4b57      	ldr	r3, [pc, #348]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0a0      	b.n	8004f38 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df6:	4b53      	ldr	r3, [pc, #332]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e098      	b.n	8004f38 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004e06:	f000 f8a7 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4a4e      	ldr	r2, [pc, #312]	; (8004f48 <HAL_RCC_ClockConfig+0x248>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d909      	bls.n	8004e26 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e12:	4b4c      	ldr	r3, [pc, #304]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1a:	4a4a      	ldr	r2, [pc, #296]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e26:	4b47      	ldr	r3, [pc, #284]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f023 0203 	bic.w	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	4944      	ldr	r1, [pc, #272]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e38:	f7fd fc94 	bl	8002764 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e40:	f7fd fc90 	bl	8002764 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e070      	b.n	8004f38 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e56:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 020c 	and.w	r2, r3, #12
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d1eb      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e74:	4b33      	ldr	r3, [pc, #204]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4930      	ldr	r1, [pc, #192]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b80      	cmp	r3, #128	; 0x80
 8004e8c:	d105      	bne.n	8004e9a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e8e:	4b2d      	ldr	r3, [pc, #180]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e98:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9a:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <HAL_RCC_ClockConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d210      	bcs.n	8004eca <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea8:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_RCC_ClockConfig+0x240>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f023 020f 	bic.w	r2, r3, #15
 8004eb0:	4923      	ldr	r1, [pc, #140]	; (8004f40 <HAL_RCC_ClockConfig+0x240>)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb8:	4b21      	ldr	r3, [pc, #132]	; (8004f40 <HAL_RCC_ClockConfig+0x240>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d001      	beq.n	8004eca <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e036      	b.n	8004f38 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed6:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	4918      	ldr	r1, [pc, #96]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d009      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ef4:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	4910      	ldr	r1, [pc, #64]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f08:	f000 f826 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <HAL_RCC_ClockConfig+0x244>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	490c      	ldr	r1, [pc, #48]	; (8004f4c <HAL_RCC_ClockConfig+0x24c>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
 8004f24:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <HAL_RCC_ClockConfig+0x250>)
 8004f26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <HAL_RCC_ClockConfig+0x254>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fd fb21 	bl	8002574 <HAL_InitTick>
 8004f32:	4603      	mov	r3, r0
 8004f34:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40022000 	.word	0x40022000
 8004f44:	40021000 	.word	0x40021000
 8004f48:	04c4b400 	.word	0x04c4b400
 8004f4c:	0800a220 	.word	0x0800a220
 8004f50:	20000000 	.word	0x20000000
 8004f54:	20000004 	.word	0x20000004

08004f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	; 0x24
 8004f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f66:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f70:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x34>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b0c      	cmp	r3, #12
 8004f84:	d121      	bne.n	8004fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d11e      	bne.n	8004fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f8c:	4b34      	ldr	r3, [pc, #208]	; (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f98:	4b31      	ldr	r3, [pc, #196]	; (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fa8:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fb4:	4a2b      	ldr	r2, [pc, #172]	; (8005064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10d      	bne.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fc8:	e00a      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fd0:	4b25      	ldr	r3, [pc, #148]	; (8005068 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	e004      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fdc:	4b23      	ldr	r3, [pc, #140]	; (800506c <HAL_RCC_GetSysClockFreq+0x114>)
 8004fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	2b0c      	cmp	r3, #12
 8004fe4:	d134      	bne.n	8005050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fe6:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d003      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0xac>
 8004ffc:	e005      	b.n	800500a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <HAL_RCC_GetSysClockFreq+0x110>)
 8005000:	617b      	str	r3, [r7, #20]
      break;
 8005002:	e005      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_RCC_GetSysClockFreq+0x114>)
 8005006:	617b      	str	r3, [r7, #20]
      break;
 8005008:	e002      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	617b      	str	r3, [r7, #20]
      break;
 800500e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005010:	4b13      	ldr	r3, [pc, #76]	; (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	3301      	adds	r3, #1
 800501c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	fb02 f203 	mul.w	r2, r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	0e5b      	lsrs	r3, r3, #25
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	3301      	adds	r3, #1
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	fbb2 f3f3 	udiv	r3, r2, r3
 800504e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005050:	69bb      	ldr	r3, [r7, #24]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3724      	adds	r7, #36	; 0x24
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000
 8005064:	0800a238 	.word	0x0800a238
 8005068:	00f42400 	.word	0x00f42400
 800506c:	007a1200 	.word	0x007a1200

08005070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005074:	4b03      	ldr	r3, [pc, #12]	; (8005084 <HAL_RCC_GetHCLKFreq+0x14>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000000 	.word	0x20000000

08005088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800508c:	f7ff fff0 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 8005090:	4602      	mov	r2, r0
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	0a1b      	lsrs	r3, r3, #8
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	4904      	ldr	r1, [pc, #16]	; (80050b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800509e:	5ccb      	ldrb	r3, [r1, r3]
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000
 80050b0:	0800a230 	.word	0x0800a230

080050b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	220f      	movs	r2, #15
 80050c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80050c4:	4b12      	ldr	r3, [pc, #72]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0203 	and.w	r2, r3, #3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	08db      	lsrs	r3, r3, #3
 80050ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80050f6:	4b07      	ldr	r3, [pc, #28]	; (8005114 <HAL_RCC_GetClockConfig+0x60>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 020f 	and.w	r2, r3, #15
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	601a      	str	r2, [r3, #0]
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
 8005114:	40022000 	.word	0x40022000

08005118 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005124:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005130:	f7ff f840 	bl	80041b4 <HAL_PWREx_GetVoltageRange>
 8005134:	6178      	str	r0, [r7, #20]
 8005136:	e014      	b.n	8005162 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005138:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800513a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513c:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800513e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005142:	6593      	str	r3, [r2, #88]	; 0x58
 8005144:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005150:	f7ff f830 	bl	80041b4 <HAL_PWREx_GetVoltageRange>
 8005154:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005156:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	4a1a      	ldr	r2, [pc, #104]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800515c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005160:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005168:	d10b      	bne.n	8005182 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b80      	cmp	r3, #128	; 0x80
 800516e:	d913      	bls.n	8005198 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2ba0      	cmp	r3, #160	; 0xa0
 8005174:	d902      	bls.n	800517c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005176:	2302      	movs	r3, #2
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	e00d      	b.n	8005198 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800517c:	2301      	movs	r3, #1
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	e00a      	b.n	8005198 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b7f      	cmp	r3, #127	; 0x7f
 8005186:	d902      	bls.n	800518e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005188:	2302      	movs	r3, #2
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	e004      	b.n	8005198 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b70      	cmp	r3, #112	; 0x70
 8005192:	d101      	bne.n	8005198 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005194:	2301      	movs	r3, #1
 8005196:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f023 020f 	bic.w	r2, r3, #15
 80051a0:	4909      	ldr	r1, [pc, #36]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d001      	beq.n	80051ba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40022000 	.word	0x40022000

080051cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80051d6:	4b2d      	ldr	r3, [pc, #180]	; (800528c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d118      	bne.n	8005214 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051e2:	4b2a      	ldr	r3, [pc, #168]	; (800528c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d107      	bne.n	80051fe <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051ee:	4b27      	ldr	r3, [pc, #156]	; (800528c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e005      	b.n	800520a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	091b      	lsrs	r3, r3, #4
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005212:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005214:	4b1d      	ldr	r3, [pc, #116]	; (800528c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d003      	beq.n	800522c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d003      	beq.n	8005232 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800522a:	e005      	b.n	8005238 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800522e:	613b      	str	r3, [r7, #16]
    break;
 8005230:	e005      	b.n	800523e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005232:	4b19      	ldr	r3, [pc, #100]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005234:	613b      	str	r3, [r7, #16]
    break;
 8005236:	e002      	b.n	800523e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	613b      	str	r3, [r7, #16]
    break;
 800523c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	091b      	lsrs	r3, r3, #4
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	3301      	adds	r3, #1
 800524a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800524c:	4b0f      	ldr	r3, [pc, #60]	; (800528c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	fb02 f203 	mul.w	r2, r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005264:	4b09      	ldr	r3, [pc, #36]	; (800528c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	0e5b      	lsrs	r3, r3, #25
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	3301      	adds	r3, #1
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800527e:	683b      	ldr	r3, [r7, #0]
}
 8005280:	4618      	mov	r0, r3
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40021000 	.word	0x40021000
 8005290:	0800a238 	.word	0x0800a238
 8005294:	00f42400 	.word	0x00f42400
 8005298:	007a1200 	.word	0x007a1200

0800529c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052a4:	2300      	movs	r3, #0
 80052a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052a8:	2300      	movs	r3, #0
 80052aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d040      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052bc:	2b80      	cmp	r3, #128	; 0x80
 80052be:	d02a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052c0:	2b80      	cmp	r3, #128	; 0x80
 80052c2:	d825      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052c4:	2b60      	cmp	r3, #96	; 0x60
 80052c6:	d026      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052c8:	2b60      	cmp	r3, #96	; 0x60
 80052ca:	d821      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d006      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x42>
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d81d      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d009      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x50>
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d010      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x62>
 80052dc:	e018      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052de:	4b89      	ldr	r3, [pc, #548]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	4a88      	ldr	r2, [pc, #544]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052ea:	e015      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2100      	movs	r1, #0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fb3e 	bl	8005974 <RCCEx_PLLSAI1_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052fc:	e00c      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3320      	adds	r3, #32
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fc29 	bl	8005b5c <RCCEx_PLLSAI2_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800530e:	e003      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	74fb      	strb	r3, [r7, #19]
      break;
 8005314:	e000      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800531e:	4b79      	ldr	r3, [pc, #484]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005320:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005324:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532c:	4975      	ldr	r1, [pc, #468]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005334:	e001      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005336:	7cfb      	ldrb	r3, [r7, #19]
 8005338:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d047      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534e:	d030      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d82a      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535a:	d02a      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800535c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005360:	d824      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005366:	d008      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536c:	d81e      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005376:	d010      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005378:	e018      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800537a:	4b62      	ldr	r3, [pc, #392]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	4a61      	ldr	r2, [pc, #388]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005386:	e015      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	2100      	movs	r1, #0
 800538e:	4618      	mov	r0, r3
 8005390:	f000 faf0 	bl	8005974 <RCCEx_PLLSAI1_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005398:	e00c      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3320      	adds	r3, #32
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fbdb 	bl	8005b5c <RCCEx_PLLSAI2_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053aa:	e003      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	74fb      	strb	r3, [r7, #19]
      break;
 80053b0:	e000      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80053b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053ba:	4b52      	ldr	r3, [pc, #328]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	494e      	ldr	r1, [pc, #312]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80053d0:	e001      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d2:	7cfb      	ldrb	r3, [r7, #19]
 80053d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 809f 	beq.w	8005522 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053e4:	2300      	movs	r3, #0
 80053e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053e8:	4b46      	ldr	r3, [pc, #280]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80053f8:	2300      	movs	r3, #0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00d      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053fe:	4b41      	ldr	r3, [pc, #260]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	4a40      	ldr	r2, [pc, #256]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005408:	6593      	str	r3, [r2, #88]	; 0x58
 800540a:	4b3e      	ldr	r3, [pc, #248]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005416:	2301      	movs	r3, #1
 8005418:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800541a:	4b3b      	ldr	r3, [pc, #236]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a3a      	ldr	r2, [pc, #232]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005426:	f7fd f99d 	bl	8002764 <HAL_GetTick>
 800542a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800542c:	e009      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800542e:	f7fd f999 	bl	8002764 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d902      	bls.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	74fb      	strb	r3, [r7, #19]
        break;
 8005440:	e005      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005442:	4b31      	ldr	r3, [pc, #196]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0ef      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d15b      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005454:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01f      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	429a      	cmp	r2, r3
 8005470:	d019      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800547e:	4b21      	ldr	r3, [pc, #132]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	4a1f      	ldr	r2, [pc, #124]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800548e:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005494:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800549e:	4a19      	ldr	r2, [pc, #100]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d016      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fd f958 	bl	8002764 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054b6:	e00b      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b8:	f7fd f954 	bl	8002764 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d902      	bls.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	74fb      	strb	r3, [r7, #19]
            break;
 80054ce:	e006      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0ec      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80054de:	7cfb      	ldrb	r3, [r7, #19]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10c      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054e4:	4b07      	ldr	r3, [pc, #28]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f4:	4903      	ldr	r1, [pc, #12]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054fc:	e008      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	74bb      	strb	r3, [r7, #18]
 8005502:	e005      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005504:	40021000 	.word	0x40021000
 8005508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005510:	7c7b      	ldrb	r3, [r7, #17]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d105      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005516:	4ba0      	ldr	r3, [pc, #640]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	4a9f      	ldr	r2, [pc, #636]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800551c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005520:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800552e:	4b9a      	ldr	r3, [pc, #616]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005534:	f023 0203 	bic.w	r2, r3, #3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553c:	4996      	ldr	r1, [pc, #600]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005550:	4b91      	ldr	r3, [pc, #580]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	f023 020c 	bic.w	r2, r3, #12
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	498e      	ldr	r1, [pc, #568]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005572:	4b89      	ldr	r3, [pc, #548]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005578:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005580:	4985      	ldr	r1, [pc, #532]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005594:	4b80      	ldr	r3, [pc, #512]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a2:	497d      	ldr	r1, [pc, #500]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055b6:	4b78      	ldr	r3, [pc, #480]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c4:	4974      	ldr	r1, [pc, #464]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055d8:	4b6f      	ldr	r3, [pc, #444]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	496c      	ldr	r1, [pc, #432]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055fa:	4b67      	ldr	r3, [pc, #412]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005608:	4963      	ldr	r1, [pc, #396]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800561c:	4b5e      	ldr	r3, [pc, #376]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800562a:	495b      	ldr	r1, [pc, #364]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800563e:	4b56      	ldr	r3, [pc, #344]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005644:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564c:	4952      	ldr	r1, [pc, #328]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005660:	4b4d      	ldr	r3, [pc, #308]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005666:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566e:	494a      	ldr	r1, [pc, #296]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005682:	4b45      	ldr	r3, [pc, #276]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005690:	4941      	ldr	r1, [pc, #260]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056a4:	4b3c      	ldr	r3, [pc, #240]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056aa:	f023 0203 	bic.w	r2, r3, #3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b2:	4939      	ldr	r1, [pc, #228]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d028      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c6:	4b34      	ldr	r3, [pc, #208]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d4:	4930      	ldr	r1, [pc, #192]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e4:	d106      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e6:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056f0:	60d3      	str	r3, [r2, #12]
 80056f2:	e011      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056fc:	d10c      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3304      	adds	r3, #4
 8005702:	2101      	movs	r1, #1
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f935 	bl	8005974 <RCCEx_PLLSAI1_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800570e:	7cfb      	ldrb	r3, [r7, #19]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005714:	7cfb      	ldrb	r3, [r7, #19]
 8005716:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d04d      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800572c:	d108      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800572e:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005734:	4a18      	ldr	r2, [pc, #96]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800573a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800573e:	e012      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005740:	4b15      	ldr	r3, [pc, #84]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005746:	4a14      	ldr	r2, [pc, #80]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800574c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005750:	4b11      	ldr	r3, [pc, #68]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005756:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800575e:	490e      	ldr	r1, [pc, #56]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800576a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800576e:	d106      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a08      	ldr	r2, [pc, #32]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800577a:	60d3      	str	r3, [r2, #12]
 800577c:	e020      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005786:	d109      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005788:	4b03      	ldr	r3, [pc, #12]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4a02      	ldr	r2, [pc, #8]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800578e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005792:	60d3      	str	r3, [r2, #12]
 8005794:	e014      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005796:	bf00      	nop
 8005798:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057a4:	d10c      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3304      	adds	r3, #4
 80057aa:	2101      	movs	r1, #1
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 f8e1 	bl	8005974 <RCCEx_PLLSAI1_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057b6:	7cfb      	ldrb	r3, [r7, #19]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80057bc:	7cfb      	ldrb	r3, [r7, #19]
 80057be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d028      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057cc:	4b68      	ldr	r3, [pc, #416]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057da:	4965      	ldr	r1, [pc, #404]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ea:	d106      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ec:	4b60      	ldr	r3, [pc, #384]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4a5f      	ldr	r2, [pc, #380]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80057f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057f6:	60d3      	str	r3, [r2, #12]
 80057f8:	e011      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005802:	d10c      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	2101      	movs	r1, #1
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f8b2 	bl	8005974 <RCCEx_PLLSAI1_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005814:	7cfb      	ldrb	r3, [r7, #19]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01e      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800582a:	4b51      	ldr	r3, [pc, #324]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005830:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800583a:	494d      	ldr	r1, [pc, #308]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800584c:	d10c      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3304      	adds	r3, #4
 8005852:	2102      	movs	r1, #2
 8005854:	4618      	mov	r0, r3
 8005856:	f000 f88d 	bl	8005974 <RCCEx_PLLSAI1_Config>
 800585a:	4603      	mov	r3, r0
 800585c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800585e:	7cfb      	ldrb	r3, [r7, #19]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005874:	4b3e      	ldr	r3, [pc, #248]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800587a:	f023 0204 	bic.w	r2, r3, #4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005884:	493a      	ldr	r1, [pc, #232]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00b      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005898:	4b35      	ldr	r3, [pc, #212]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800589a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800589e:	f023 0218 	bic.w	r2, r3, #24
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	4931      	ldr	r1, [pc, #196]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d035      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058bc:	4b2c      	ldr	r3, [pc, #176]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c8:	f7fc ff4c 	bl	8002764 <HAL_GetTick>
 80058cc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058ce:	e009      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058d0:	f7fc ff48 	bl	8002764 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d902      	bls.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	74fb      	strb	r3, [r7, #19]
        break;
 80058e2:	e005      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058e4:	4b22      	ldr	r3, [pc, #136]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1ef      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80058f0:	7cfb      	ldrb	r3, [r7, #19]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d113      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80058f6:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80058f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005906:	491a      	ldr	r1, [pc, #104]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3320      	adds	r3, #32
 8005912:	2102      	movs	r1, #2
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f921 	bl	8005b5c <RCCEx_PLLSAI2_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800591e:	7cfb      	ldrb	r3, [r7, #19]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d017      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800593a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005944:	490a      	ldr	r1, [pc, #40]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005956:	d105      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a04      	ldr	r2, [pc, #16]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800595e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005962:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005964:	7cbb      	ldrb	r3, [r7, #18]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40021000 	.word	0x40021000

08005974 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005982:	4b72      	ldr	r3, [pc, #456]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00e      	beq.n	80059ac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800598e:	4b6f      	ldr	r3, [pc, #444]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f003 0203 	and.w	r2, r3, #3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d103      	bne.n	80059a6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
       ||
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d142      	bne.n	8005a2c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
 80059aa:	e03f      	b.n	8005a2c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d018      	beq.n	80059e6 <RCCEx_PLLSAI1_Config+0x72>
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d825      	bhi.n	8005a04 <RCCEx_PLLSAI1_Config+0x90>
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d002      	beq.n	80059c2 <RCCEx_PLLSAI1_Config+0x4e>
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d009      	beq.n	80059d4 <RCCEx_PLLSAI1_Config+0x60>
 80059c0:	e020      	b.n	8005a04 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059c2:	4b62      	ldr	r3, [pc, #392]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11d      	bne.n	8005a0a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d2:	e01a      	b.n	8005a0a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059d4:	4b5d      	ldr	r3, [pc, #372]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d116      	bne.n	8005a0e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e4:	e013      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059e6:	4b59      	ldr	r3, [pc, #356]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10f      	bne.n	8005a12 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059f2:	4b56      	ldr	r3, [pc, #344]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a02:	e006      	b.n	8005a12 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
      break;
 8005a08:	e004      	b.n	8005a14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e002      	b.n	8005a14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a0e:	bf00      	nop
 8005a10:	e000      	b.n	8005a14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a12:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d108      	bne.n	8005a2c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005a1a:	4b4c      	ldr	r3, [pc, #304]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f023 0203 	bic.w	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4949      	ldr	r1, [pc, #292]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 8086 	bne.w	8005b40 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a34:	4b45      	ldr	r3, [pc, #276]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a44      	ldr	r2, [pc, #272]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a40:	f7fc fe90 	bl	8002764 <HAL_GetTick>
 8005a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a46:	e009      	b.n	8005a5c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a48:	f7fc fe8c 	bl	8002764 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d902      	bls.n	8005a5c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	73fb      	strb	r3, [r7, #15]
        break;
 8005a5a:	e005      	b.n	8005a68 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a5c:	4b3b      	ldr	r3, [pc, #236]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1ef      	bne.n	8005a48 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d168      	bne.n	8005b40 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d113      	bne.n	8005a9c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a74:	4b35      	ldr	r3, [pc, #212]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	4b35      	ldr	r3, [pc, #212]	; (8005b50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6892      	ldr	r2, [r2, #8]
 8005a80:	0211      	lsls	r1, r2, #8
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	68d2      	ldr	r2, [r2, #12]
 8005a86:	06d2      	lsls	r2, r2, #27
 8005a88:	4311      	orrs	r1, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6852      	ldr	r2, [r2, #4]
 8005a8e:	3a01      	subs	r2, #1
 8005a90:	0112      	lsls	r2, r2, #4
 8005a92:	430a      	orrs	r2, r1
 8005a94:	492d      	ldr	r1, [pc, #180]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	610b      	str	r3, [r1, #16]
 8005a9a:	e02d      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d115      	bne.n	8005ace <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aa2:	4b2a      	ldr	r3, [pc, #168]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	4b2b      	ldr	r3, [pc, #172]	; (8005b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6892      	ldr	r2, [r2, #8]
 8005aae:	0211      	lsls	r1, r2, #8
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6912      	ldr	r2, [r2, #16]
 8005ab4:	0852      	lsrs	r2, r2, #1
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	0552      	lsls	r2, r2, #21
 8005aba:	4311      	orrs	r1, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6852      	ldr	r2, [r2, #4]
 8005ac0:	3a01      	subs	r2, #1
 8005ac2:	0112      	lsls	r2, r2, #4
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	4921      	ldr	r1, [pc, #132]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	610b      	str	r3, [r1, #16]
 8005acc:	e014      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ace:	4b1f      	ldr	r3, [pc, #124]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6892      	ldr	r2, [r2, #8]
 8005ada:	0211      	lsls	r1, r2, #8
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6952      	ldr	r2, [r2, #20]
 8005ae0:	0852      	lsrs	r2, r2, #1
 8005ae2:	3a01      	subs	r2, #1
 8005ae4:	0652      	lsls	r2, r2, #25
 8005ae6:	4311      	orrs	r1, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6852      	ldr	r2, [r2, #4]
 8005aec:	3a01      	subs	r2, #1
 8005aee:	0112      	lsls	r2, r2, #4
 8005af0:	430a      	orrs	r2, r1
 8005af2:	4916      	ldr	r1, [pc, #88]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005af8:	4b14      	ldr	r3, [pc, #80]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a13      	ldr	r2, [pc, #76]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b04:	f7fc fe2e 	bl	8002764 <HAL_GetTick>
 8005b08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b0a:	e009      	b.n	8005b20 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b0c:	f7fc fe2a 	bl	8002764 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d902      	bls.n	8005b20 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	73fb      	strb	r3, [r7, #15]
          break;
 8005b1e:	e005      	b.n	8005b2c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ef      	beq.n	8005b0c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	4904      	ldr	r1, [pc, #16]	; (8005b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	07ff800f 	.word	0x07ff800f
 8005b54:	ff9f800f 	.word	0xff9f800f
 8005b58:	f9ff800f 	.word	0xf9ff800f

08005b5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b6a:	4b72      	ldr	r3, [pc, #456]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00e      	beq.n	8005b94 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b76:	4b6f      	ldr	r3, [pc, #444]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0203 	and.w	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d103      	bne.n	8005b8e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
       ||
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d142      	bne.n	8005c14 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	73fb      	strb	r3, [r7, #15]
 8005b92:	e03f      	b.n	8005c14 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d018      	beq.n	8005bce <RCCEx_PLLSAI2_Config+0x72>
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d825      	bhi.n	8005bec <RCCEx_PLLSAI2_Config+0x90>
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d002      	beq.n	8005baa <RCCEx_PLLSAI2_Config+0x4e>
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d009      	beq.n	8005bbc <RCCEx_PLLSAI2_Config+0x60>
 8005ba8:	e020      	b.n	8005bec <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005baa:	4b62      	ldr	r3, [pc, #392]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d11d      	bne.n	8005bf2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bba:	e01a      	b.n	8005bf2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bbc:	4b5d      	ldr	r3, [pc, #372]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d116      	bne.n	8005bf6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bcc:	e013      	b.n	8005bf6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bce:	4b59      	ldr	r3, [pc, #356]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10f      	bne.n	8005bfa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bda:	4b56      	ldr	r3, [pc, #344]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bea:	e006      	b.n	8005bfa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf0:	e004      	b.n	8005bfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e002      	b.n	8005bfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e000      	b.n	8005bfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005bfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d108      	bne.n	8005c14 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005c02:	4b4c      	ldr	r3, [pc, #304]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 0203 	bic.w	r2, r3, #3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4949      	ldr	r1, [pc, #292]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 8086 	bne.w	8005d28 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c1c:	4b45      	ldr	r3, [pc, #276]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a44      	ldr	r2, [pc, #272]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c28:	f7fc fd9c 	bl	8002764 <HAL_GetTick>
 8005c2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c2e:	e009      	b.n	8005c44 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c30:	f7fc fd98 	bl	8002764 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d902      	bls.n	8005c44 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	73fb      	strb	r3, [r7, #15]
        break;
 8005c42:	e005      	b.n	8005c50 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c44:	4b3b      	ldr	r3, [pc, #236]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1ef      	bne.n	8005c30 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d168      	bne.n	8005d28 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d113      	bne.n	8005c84 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c5c:	4b35      	ldr	r3, [pc, #212]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	4b35      	ldr	r3, [pc, #212]	; (8005d38 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6892      	ldr	r2, [r2, #8]
 8005c68:	0211      	lsls	r1, r2, #8
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68d2      	ldr	r2, [r2, #12]
 8005c6e:	06d2      	lsls	r2, r2, #27
 8005c70:	4311      	orrs	r1, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6852      	ldr	r2, [r2, #4]
 8005c76:	3a01      	subs	r2, #1
 8005c78:	0112      	lsls	r2, r2, #4
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	492d      	ldr	r1, [pc, #180]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	614b      	str	r3, [r1, #20]
 8005c82:	e02d      	b.n	8005ce0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d115      	bne.n	8005cb6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c8a:	4b2a      	ldr	r3, [pc, #168]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c8c:	695a      	ldr	r2, [r3, #20]
 8005c8e:	4b2b      	ldr	r3, [pc, #172]	; (8005d3c <RCCEx_PLLSAI2_Config+0x1e0>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6892      	ldr	r2, [r2, #8]
 8005c96:	0211      	lsls	r1, r2, #8
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6912      	ldr	r2, [r2, #16]
 8005c9c:	0852      	lsrs	r2, r2, #1
 8005c9e:	3a01      	subs	r2, #1
 8005ca0:	0552      	lsls	r2, r2, #21
 8005ca2:	4311      	orrs	r1, r2
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6852      	ldr	r2, [r2, #4]
 8005ca8:	3a01      	subs	r2, #1
 8005caa:	0112      	lsls	r2, r2, #4
 8005cac:	430a      	orrs	r2, r1
 8005cae:	4921      	ldr	r1, [pc, #132]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	614b      	str	r3, [r1, #20]
 8005cb4:	e014      	b.n	8005ce0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cb6:	4b1f      	ldr	r3, [pc, #124]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	4b21      	ldr	r3, [pc, #132]	; (8005d40 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6892      	ldr	r2, [r2, #8]
 8005cc2:	0211      	lsls	r1, r2, #8
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6952      	ldr	r2, [r2, #20]
 8005cc8:	0852      	lsrs	r2, r2, #1
 8005cca:	3a01      	subs	r2, #1
 8005ccc:	0652      	lsls	r2, r2, #25
 8005cce:	4311      	orrs	r1, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6852      	ldr	r2, [r2, #4]
 8005cd4:	3a01      	subs	r2, #1
 8005cd6:	0112      	lsls	r2, r2, #4
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	4916      	ldr	r1, [pc, #88]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ce0:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cec:	f7fc fd3a 	bl	8002764 <HAL_GetTick>
 8005cf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cf2:	e009      	b.n	8005d08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cf4:	f7fc fd36 	bl	8002764 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d902      	bls.n	8005d08 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	73fb      	strb	r3, [r7, #15]
          break;
 8005d06:	e005      	b.n	8005d14 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0ef      	beq.n	8005cf4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d1a:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	4904      	ldr	r1, [pc, #16]	; (8005d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40021000 	.word	0x40021000
 8005d38:	07ff800f 	.word	0x07ff800f
 8005d3c:	ff9f800f 	.word	0xff9f800f
 8005d40:	f9ff800f 	.word	0xf9ff800f

08005d44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d07f      	beq.n	8005e56 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fc fb5c 	bl	8002428 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005d76:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	22ca      	movs	r2, #202	; 0xca
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2253      	movs	r2, #83	; 0x53
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f9b5 	bl	8006100 <RTC_EnterInitMode>
 8005d96:	4603      	mov	r3, r0
 8005d98:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d15a      	bne.n	8005e56 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db2:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6999      	ldr	r1, [r3, #24]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6912      	ldr	r2, [r2, #16]
 8005dda:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6919      	ldr	r1, [r3, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	041a      	lsls	r2, r3, #16
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005df0:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <HAL_RTC_Init+0x11c>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	430b      	orrs	r3, r1
 8005e02:	4917      	ldr	r1, [pc, #92]	; (8005e60 <HAL_RTC_Init+0x11c>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f9af 	bl	800616c <RTC_ExitInitMode>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d11e      	bne.n	8005e56 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005e26:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6999      	ldr	r1, [r3, #24]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	22ff      	movs	r2, #255	; 0xff
 8005e4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40002800 	.word	0x40002800

08005e64 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e64:	b590      	push	{r4, r7, lr}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_RTC_SetTime+0x1a>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e08b      	b.n	8005f96 <HAL_RTC_SetTime+0x132>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	22ca      	movs	r2, #202	; 0xca
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2253      	movs	r2, #83	; 0x53
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f92e 	bl	8006100 <RTC_EnterInitMode>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005ea8:	7cfb      	ldrb	r3, [r7, #19]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d15e      	bne.n	8005f6c <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005eae:	4b3c      	ldr	r3, [pc, #240]	; (8005fa0 <HAL_RTC_SetTime+0x13c>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eba:	d057      	beq.n	8005f6c <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d125      	bne.n	8005f0e <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005ec2:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <HAL_RTC_SetTime+0x13c>)
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 f985 	bl	80061e8 <RTC_ByteToBcd2>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	785b      	ldrb	r3, [r3, #1]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f97e 	bl	80061e8 <RTC_ByteToBcd2>
 8005eec:	4603      	mov	r3, r0
 8005eee:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ef0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	789b      	ldrb	r3, [r3, #2]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f976 	bl	80061e8 <RTC_ByteToBcd2>
 8005efc:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005efe:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	78db      	ldrb	r3, [r3, #3]
 8005f06:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e017      	b.n	8005f3e <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005f0e:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <HAL_RTC_SetTime+0x13c>)
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f2c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f32:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	78db      	ldrb	r3, [r3, #3]
 8005f38:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005f3e:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <HAL_RTC_SetTime+0x13c>)
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f4a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005f4c:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <HAL_RTC_SetTime+0x13c>)
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	4a13      	ldr	r2, [pc, #76]	; (8005fa0 <HAL_RTC_SetTime+0x13c>)
 8005f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f56:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005f58:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <HAL_RTC_SetTime+0x13c>)
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	68d9      	ldr	r1, [r3, #12]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	430b      	orrs	r3, r1
 8005f66:	490e      	ldr	r1, [pc, #56]	; (8005fa0 <HAL_RTC_SetTime+0x13c>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f8fd 	bl	800616c <RTC_ExitInitMode>
 8005f72:	4603      	mov	r3, r0
 8005f74:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	22ff      	movs	r2, #255	; 0xff
 8005f7c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005f7e:	7cfb      	ldrb	r3, [r7, #19]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005f94:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd90      	pop	{r4, r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40002800 	.word	0x40002800

08005fa4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fa4:	b590      	push	{r4, r7, lr}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_RTC_SetDate+0x1a>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e074      	b.n	80060a8 <HAL_RTC_SetDate+0x104>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10e      	bne.n	8005ff2 <HAL_RTC_SetDate+0x4e>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	f023 0310 	bic.w	r3, r3, #16
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	330a      	adds	r3, #10
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d11c      	bne.n	8006032 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	78db      	ldrb	r3, [r3, #3]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 f8f3 	bl	80061e8 <RTC_ByteToBcd2>
 8006002:	4603      	mov	r3, r0
 8006004:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 f8ec 	bl	80061e8 <RTC_ByteToBcd2>
 8006010:	4603      	mov	r3, r0
 8006012:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006014:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	789b      	ldrb	r3, [r3, #2]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 f8e4 	bl	80061e8 <RTC_ByteToBcd2>
 8006020:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006022:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e00e      	b.n	8006050 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	78db      	ldrb	r3, [r3, #3]
 8006036:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800603e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006044:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	22ca      	movs	r2, #202	; 0xca
 8006056:	625a      	str	r2, [r3, #36]	; 0x24
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2253      	movs	r2, #83	; 0x53
 800605e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f84d 	bl	8006100 <RTC_EnterInitMode>
 8006066:	4603      	mov	r3, r0
 8006068:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800606a:	7cfb      	ldrb	r3, [r7, #19]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8006070:	4a0f      	ldr	r2, [pc, #60]	; (80060b0 <HAL_RTC_SetDate+0x10c>)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006078:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800607c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f874 	bl	800616c <RTC_ExitInitMode>
 8006084:	4603      	mov	r3, r0
 8006086:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	22ff      	movs	r2, #255	; 0xff
 800608e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006090:	7cfb      	ldrb	r3, [r7, #19]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80060a6:	7cfb      	ldrb	r3, [r7, #19]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd90      	pop	{r4, r7, pc}
 80060b0:	40002800 	.word	0x40002800

080060b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060ca:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 80060cc:	f7fc fb4a 	bl	8002764 <HAL_GetTick>
 80060d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80060d2:	e009      	b.n	80060e8 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060d4:	f7fc fb46 	bl	8002764 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060e2:	d901      	bls.n	80060e8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e007      	b.n	80060f8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0ee      	beq.n	80060d4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d123      	bne.n	8006162 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006128:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800612a:	f7fc fb1b 	bl	8002764 <HAL_GetTick>
 800612e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006130:	e00d      	b.n	800614e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006132:	f7fc fb17 	bl	8002764 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006140:	d905      	bls.n	800614e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2203      	movs	r2, #3
 800614a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <RTC_EnterInitMode+0x62>
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	2b03      	cmp	r3, #3
 8006160:	d1e7      	bne.n	8006132 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006178:	4b1a      	ldr	r3, [pc, #104]	; (80061e4 <RTC_ExitInitMode+0x78>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <RTC_ExitInitMode+0x78>)
 800617e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006182:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006184:	4b17      	ldr	r3, [pc, #92]	; (80061e4 <RTC_ExitInitMode+0x78>)
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10c      	bne.n	80061aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff ff8f 	bl	80060b4 <HAL_RTC_WaitForSynchro>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01e      	beq.n	80061da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2203      	movs	r2, #3
 80061a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e017      	b.n	80061da <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061aa:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <RTC_ExitInitMode+0x78>)
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	4a0d      	ldr	r2, [pc, #52]	; (80061e4 <RTC_ExitInitMode+0x78>)
 80061b0:	f023 0320 	bic.w	r3, r3, #32
 80061b4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff ff7c 	bl	80060b4 <HAL_RTC_WaitForSynchro>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d005      	beq.n	80061ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2203      	movs	r2, #3
 80061c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <RTC_ExitInitMode+0x78>)
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <RTC_ExitInitMode+0x78>)
 80061d4:	f043 0320 	orr.w	r3, r3, #32
 80061d8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80061da:	7bfb      	ldrb	r3, [r7, #15]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40002800 	.word	0x40002800

080061e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80061fa:	e005      	b.n	8006208 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3301      	adds	r3, #1
 8006200:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006202:	7afb      	ldrb	r3, [r7, #11]
 8006204:	3b0a      	subs	r3, #10
 8006206:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006208:	7afb      	ldrb	r3, [r7, #11]
 800620a:	2b09      	cmp	r3, #9
 800620c:	d8f6      	bhi.n	80061fc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	b2da      	uxtb	r2, r3
 8006216:	7afb      	ldrb	r3, [r7, #11]
 8006218:	4313      	orrs	r3, r2
 800621a:	b2db      	uxtb	r3, r3
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e095      	b.n	8006366 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	d108      	bne.n	8006254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800624a:	d009      	beq.n	8006260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	61da      	str	r2, [r3, #28]
 8006252:	e005      	b.n	8006260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fc f912 	bl	80024a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006296:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062a0:	d902      	bls.n	80062a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e002      	b.n	80062ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80062b6:	d007      	beq.n	80062c8 <HAL_SPI_Init+0xa0>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062c0:	d002      	beq.n	80062c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	ea42 0103 	orr.w	r1, r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	0c1b      	lsrs	r3, r3, #16
 8006324:	f003 0204 	and.w	r2, r3, #4
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006344:	ea42 0103 	orr.w	r1, r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b088      	sub	sp, #32
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	603b      	str	r3, [r7, #0]
 800637a:	4613      	mov	r3, r2
 800637c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_SPI_Transmit+0x22>
 800638c:	2302      	movs	r3, #2
 800638e:	e158      	b.n	8006642 <HAL_SPI_Transmit+0x2d4>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006398:	f7fc f9e4 	bl	8002764 <HAL_GetTick>
 800639c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d002      	beq.n	80063b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
 80063b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063b2:	e13d      	b.n	8006630 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <HAL_SPI_Transmit+0x52>
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063c4:	e134      	b.n	8006630 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2203      	movs	r2, #3
 80063ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	88fa      	ldrh	r2, [r7, #6]
 80063e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006410:	d10f      	bne.n	8006432 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006420:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006430:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	d007      	beq.n	8006450 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800644e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006458:	d94b      	bls.n	80064f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_SPI_Transmit+0xfa>
 8006462:	8afb      	ldrh	r3, [r7, #22]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d13e      	bne.n	80064e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	881a      	ldrh	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	1c9a      	adds	r2, r3, #2
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800648c:	e02b      	b.n	80064e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b02      	cmp	r3, #2
 800649a:	d112      	bne.n	80064c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	881a      	ldrh	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	1c9a      	adds	r2, r3, #2
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064c0:	e011      	b.n	80064e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064c2:	f7fc f94f 	bl	8002764 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d803      	bhi.n	80064da <HAL_SPI_Transmit+0x16c>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d102      	bne.n	80064e0 <HAL_SPI_Transmit+0x172>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064e4:	e0a4      	b.n	8006630 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ce      	bne.n	800648e <HAL_SPI_Transmit+0x120>
 80064f0:	e07c      	b.n	80065ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_SPI_Transmit+0x192>
 80064fa:	8afb      	ldrh	r3, [r7, #22]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d170      	bne.n	80065e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b01      	cmp	r3, #1
 8006508:	d912      	bls.n	8006530 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	881a      	ldrh	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	1c9a      	adds	r2, r3, #2
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b02      	subs	r3, #2
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800652e:	e058      	b.n	80065e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	7812      	ldrb	r2, [r2, #0]
 800653c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006556:	e044      	b.n	80065e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b02      	cmp	r3, #2
 8006564:	d12b      	bne.n	80065be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d912      	bls.n	8006596 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	881a      	ldrh	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	1c9a      	adds	r2, r3, #2
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b02      	subs	r3, #2
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006594:	e025      	b.n	80065e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	330c      	adds	r3, #12
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065bc:	e011      	b.n	80065e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065be:	f7fc f8d1 	bl	8002764 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d803      	bhi.n	80065d6 <HAL_SPI_Transmit+0x268>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d102      	bne.n	80065dc <HAL_SPI_Transmit+0x26e>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065e0:	e026      	b.n	8006630 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1b5      	bne.n	8006558 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fce3 	bl	8006fbc <SPI_EndRxTxTransaction>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e000      	b.n	8006630 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800662e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006640:	7ffb      	ldrb	r3, [r7, #31]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b088      	sub	sp, #32
 800664e:	af02      	add	r7, sp, #8
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	603b      	str	r3, [r7, #0]
 8006656:	4613      	mov	r3, r2
 8006658:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006666:	d112      	bne.n	800668e <HAL_SPI_Receive+0x44>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10e      	bne.n	800668e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2204      	movs	r2, #4
 8006674:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	4613      	mov	r3, r2
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f910 	bl	80068aa <HAL_SPI_TransmitReceive>
 800668a:	4603      	mov	r3, r0
 800668c:	e109      	b.n	80068a2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_SPI_Receive+0x52>
 8006698:	2302      	movs	r3, #2
 800669a:	e102      	b.n	80068a2 <HAL_SPI_Receive+0x258>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066a4:	f7fc f85e 	bl	8002764 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d002      	beq.n	80066bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80066b6:	2302      	movs	r3, #2
 80066b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066ba:	e0e9      	b.n	8006890 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_SPI_Receive+0x7e>
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066cc:	e0e0      	b.n	8006890 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2204      	movs	r2, #4
 80066d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	88fa      	ldrh	r2, [r7, #6]
 80066e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	88fa      	ldrh	r2, [r7, #6]
 80066ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006718:	d908      	bls.n	800672c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	e007      	b.n	800673c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800673a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006744:	d10f      	bne.n	8006766 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006754:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006764:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d007      	beq.n	8006784 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006782:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800678c:	d867      	bhi.n	800685e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800678e:	e030      	b.n	80067f2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b01      	cmp	r3, #1
 800679c:	d117      	bne.n	80067ce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f103 020c 	add.w	r2, r3, #12
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	7812      	ldrb	r2, [r2, #0]
 80067ac:	b2d2      	uxtb	r2, r2
 80067ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80067cc:	e011      	b.n	80067f2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ce:	f7fb ffc9 	bl	8002764 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d803      	bhi.n	80067e6 <HAL_SPI_Receive+0x19c>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e4:	d102      	bne.n	80067ec <HAL_SPI_Receive+0x1a2>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d102      	bne.n	80067f2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067f0:	e04e      	b.n	8006890 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1c8      	bne.n	8006790 <HAL_SPI_Receive+0x146>
 80067fe:	e034      	b.n	800686a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b01      	cmp	r3, #1
 800680c:	d115      	bne.n	800683a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	b292      	uxth	r2, r2
 800681a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	1c9a      	adds	r2, r3, #2
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006838:	e011      	b.n	800685e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800683a:	f7fb ff93 	bl	8002764 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d803      	bhi.n	8006852 <HAL_SPI_Receive+0x208>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d102      	bne.n	8006858 <HAL_SPI_Receive+0x20e>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d102      	bne.n	800685e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800685c:	e018      	b.n	8006890 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1ca      	bne.n	8006800 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fb4c 	bl	8006f0c <SPI_EndRxTransaction>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	75fb      	strb	r3, [r7, #23]
 800688c:	e000      	b.n	8006890 <HAL_SPI_Receive+0x246>
  }

error :
 800688e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b08a      	sub	sp, #40	; 0x28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
 80068b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068b8:	2301      	movs	r3, #1
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x26>
 80068cc:	2302      	movs	r3, #2
 80068ce:	e1fb      	b.n	8006cc8 <HAL_SPI_TransmitReceive+0x41e>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068d8:	f7fb ff44 	bl	8002764 <HAL_GetTick>
 80068dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80068ec:	887b      	ldrh	r3, [r7, #2]
 80068ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80068f0:	887b      	ldrh	r3, [r7, #2]
 80068f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068f4:	7efb      	ldrb	r3, [r7, #27]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d00e      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x6e>
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006900:	d106      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d102      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x66>
 800690a:	7efb      	ldrb	r3, [r7, #27]
 800690c:	2b04      	cmp	r3, #4
 800690e:	d003      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006910:	2302      	movs	r3, #2
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006916:	e1cd      	b.n	8006cb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_SPI_TransmitReceive+0x80>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_SPI_TransmitReceive+0x80>
 8006924:	887b      	ldrh	r3, [r7, #2]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d103      	bne.n	8006932 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006930:	e1c0      	b.n	8006cb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b04      	cmp	r3, #4
 800693c:	d003      	beq.n	8006946 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2205      	movs	r2, #5
 8006942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	887a      	ldrh	r2, [r7, #2]
 8006956:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	887a      	ldrh	r2, [r7, #2]
 800695e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	887a      	ldrh	r2, [r7, #2]
 800696c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	887a      	ldrh	r2, [r7, #2]
 8006972:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006988:	d802      	bhi.n	8006990 <HAL_SPI_TransmitReceive+0xe6>
 800698a:	8a3b      	ldrh	r3, [r7, #16]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d908      	bls.n	80069a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800699e:	605a      	str	r2, [r3, #4]
 80069a0:	e007      	b.n	80069b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b40      	cmp	r3, #64	; 0x40
 80069be:	d007      	beq.n	80069d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069d8:	d97c      	bls.n	8006ad4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0x13e>
 80069e2:	8a7b      	ldrh	r3, [r7, #18]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d169      	bne.n	8006abc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	881a      	ldrh	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	1c9a      	adds	r2, r3, #2
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a0c:	e056      	b.n	8006abc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d11b      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x1aa>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d016      	beq.n	8006a54 <HAL_SPI_TransmitReceive+0x1aa>
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d113      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	881a      	ldrh	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	1c9a      	adds	r2, r3, #2
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d11c      	bne.n	8006a9c <HAL_SPI_TransmitReceive+0x1f2>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d016      	beq.n	8006a9c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	b292      	uxth	r2, r2
 8006a7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	1c9a      	adds	r2, r3, #2
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a9c:	f7fb fe62 	bl	8002764 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d807      	bhi.n	8006abc <HAL_SPI_TransmitReceive+0x212>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab2:	d003      	beq.n	8006abc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006aba:	e0fb      	b.n	8006cb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1a3      	bne.n	8006a0e <HAL_SPI_TransmitReceive+0x164>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d19d      	bne.n	8006a0e <HAL_SPI_TransmitReceive+0x164>
 8006ad2:	e0df      	b.n	8006c94 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_SPI_TransmitReceive+0x23a>
 8006adc:	8a7b      	ldrh	r3, [r7, #18]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	f040 80cb 	bne.w	8006c7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d912      	bls.n	8006b14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	881a      	ldrh	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	1c9a      	adds	r2, r3, #2
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b02      	subs	r3, #2
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b12:	e0b2      	b.n	8006c7a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	7812      	ldrb	r2, [r2, #0]
 8006b20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b3a:	e09e      	b.n	8006c7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d134      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x30a>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d02f      	beq.n	8006bb4 <HAL_SPI_TransmitReceive+0x30a>
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d12c      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d912      	bls.n	8006b8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	881a      	ldrh	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	1c9a      	adds	r2, r3, #2
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b02      	subs	r3, #2
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b88:	e012      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	7812      	ldrb	r2, [r2, #0]
 8006b96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d148      	bne.n	8006c54 <HAL_SPI_TransmitReceive+0x3aa>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d042      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d923      	bls.n	8006c22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	b292      	uxth	r2, r2
 8006be6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bec:	1c9a      	adds	r2, r3, #2
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b02      	subs	r3, #2
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d81f      	bhi.n	8006c50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c1e:	605a      	str	r2, [r3, #4]
 8006c20:	e016      	b.n	8006c50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f103 020c 	add.w	r2, r3, #12
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	7812      	ldrb	r2, [r2, #0]
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c50:	2301      	movs	r3, #1
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c54:	f7fb fd86 	bl	8002764 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d803      	bhi.n	8006c6c <HAL_SPI_TransmitReceive+0x3c2>
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6a:	d102      	bne.n	8006c72 <HAL_SPI_TransmitReceive+0x3c8>
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006c78:	e01c      	b.n	8006cb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f47f af5b 	bne.w	8006b3c <HAL_SPI_TransmitReceive+0x292>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f47f af54 	bne.w	8006b3c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 f98f 	bl	8006fbc <SPI_EndRxTxTransaction>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d006      	beq.n	8006cb2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	661a      	str	r2, [r3, #96]	; 0x60
 8006cb0:	e000      	b.n	8006cb4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006cb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3728      	adds	r7, #40	; 0x28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ce0:	f7fb fd40 	bl	8002764 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	1a9b      	subs	r3, r3, r2
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	4413      	add	r3, r2
 8006cee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cf0:	f7fb fd38 	bl	8002764 <HAL_GetTick>
 8006cf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cf6:	4b39      	ldr	r3, [pc, #228]	; (8006ddc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	015b      	lsls	r3, r3, #5
 8006cfc:	0d1b      	lsrs	r3, r3, #20
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	fb02 f303 	mul.w	r3, r2, r3
 8006d04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d06:	e054      	b.n	8006db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d050      	beq.n	8006db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d10:	f7fb fd28 	bl	8002764 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d902      	bls.n	8006d26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d13d      	bne.n	8006da2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d3e:	d111      	bne.n	8006d64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d48:	d004      	beq.n	8006d54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d52:	d107      	bne.n	8006d64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6c:	d10f      	bne.n	8006d8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e017      	b.n	8006dd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	bf0c      	ite	eq
 8006dc2:	2301      	moveq	r3, #1
 8006dc4:	2300      	movne	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d19b      	bne.n	8006d08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000000 	.word	0x20000000

08006de0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08a      	sub	sp, #40	; 0x28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006df2:	f7fb fcb7 	bl	8002764 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	4413      	add	r3, r2
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006e02:	f7fb fcaf 	bl	8002764 <HAL_GetTick>
 8006e06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e10:	4b3d      	ldr	r3, [pc, #244]	; (8006f08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	00da      	lsls	r2, r3, #3
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	0d1b      	lsrs	r3, r3, #20
 8006e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006e28:	e060      	b.n	8006eec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e30:	d107      	bne.n	8006e42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d104      	bne.n	8006e42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d050      	beq.n	8006eec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e4a:	f7fb fc8b 	bl	8002764 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d902      	bls.n	8006e60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d13d      	bne.n	8006edc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e78:	d111      	bne.n	8006e9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e82:	d004      	beq.n	8006e8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8c:	d107      	bne.n	8006e9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea6:	d10f      	bne.n	8006ec8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e010      	b.n	8006efe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d196      	bne.n	8006e2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3728      	adds	r7, #40	; 0x28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20000000 	.word	0x20000000

08006f0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f20:	d111      	bne.n	8006f46 <SPI_EndRxTransaction+0x3a>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2a:	d004      	beq.n	8006f36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f34:	d107      	bne.n	8006f46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2180      	movs	r1, #128	; 0x80
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff febd 	bl	8006cd0 <SPI_WaitFlagStateUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e023      	b.n	8006fb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f74:	d11d      	bne.n	8006fb2 <SPI_EndRxTransaction+0xa6>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7e:	d004      	beq.n	8006f8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f88:	d113      	bne.n	8006fb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff ff22 	bl	8006de0 <SPI_WaitFifoStateUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d007      	beq.n	8006fb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa6:	f043 0220 	orr.w	r2, r3, #32
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e000      	b.n	8006fb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff ff03 	bl	8006de0 <SPI_WaitFifoStateUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe4:	f043 0220 	orr.w	r2, r3, #32
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e027      	b.n	8007040 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2180      	movs	r1, #128	; 0x80
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff fe68 	bl	8006cd0 <SPI_WaitFlagStateUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e014      	b.n	8007040 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2200      	movs	r2, #0
 800701e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff fedc 	bl	8006de0 <SPI_WaitFifoStateUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007032:	f043 0220 	orr.w	r2, r3, #32
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e000      	b.n	8007040 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e049      	b.n	80070ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fb fa5a 	bl	8002528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f000 f9ee 	bl	8007468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	d001      	beq.n	8007110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e04f      	b.n	80071b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a23      	ldr	r2, [pc, #140]	; (80071bc <HAL_TIM_Base_Start_IT+0xc4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01d      	beq.n	800716e <HAL_TIM_Base_Start_IT+0x76>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713a:	d018      	beq.n	800716e <HAL_TIM_Base_Start_IT+0x76>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <HAL_TIM_Base_Start_IT+0x76>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1e      	ldr	r2, [pc, #120]	; (80071c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <HAL_TIM_Base_Start_IT+0x76>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1c      	ldr	r2, [pc, #112]	; (80071c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <HAL_TIM_Base_Start_IT+0x76>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1b      	ldr	r2, [pc, #108]	; (80071cc <HAL_TIM_Base_Start_IT+0xd4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <HAL_TIM_Base_Start_IT+0x76>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a19      	ldr	r2, [pc, #100]	; (80071d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d115      	bne.n	800719a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	4b17      	ldr	r3, [pc, #92]	; (80071d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007176:	4013      	ands	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b06      	cmp	r3, #6
 800717e:	d015      	beq.n	80071ac <HAL_TIM_Base_Start_IT+0xb4>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007186:	d011      	beq.n	80071ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0201 	orr.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007198:	e008      	b.n	80071ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f042 0201 	orr.w	r2, r2, #1
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	e000      	b.n	80071ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40000400 	.word	0x40000400
 80071c4:	40000800 	.word	0x40000800
 80071c8:	40000c00 	.word	0x40000c00
 80071cc:	40013400 	.word	0x40013400
 80071d0:	40014000 	.word	0x40014000
 80071d4:	00010007 	.word	0x00010007

080071d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d122      	bne.n	8007234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d11b      	bne.n	8007234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f06f 0202 	mvn.w	r2, #2
 8007204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f905 	bl	800742a <HAL_TIM_IC_CaptureCallback>
 8007220:	e005      	b.n	800722e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f8f7 	bl	8007416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f908 	bl	800743e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b04      	cmp	r3, #4
 8007240:	d122      	bne.n	8007288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b04      	cmp	r3, #4
 800724e:	d11b      	bne.n	8007288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0204 	mvn.w	r2, #4
 8007258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f8db 	bl	800742a <HAL_TIM_IC_CaptureCallback>
 8007274:	e005      	b.n	8007282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8cd 	bl	8007416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f8de 	bl	800743e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b08      	cmp	r3, #8
 8007294:	d122      	bne.n	80072dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d11b      	bne.n	80072dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f06f 0208 	mvn.w	r2, #8
 80072ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2204      	movs	r2, #4
 80072b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f8b1 	bl	800742a <HAL_TIM_IC_CaptureCallback>
 80072c8:	e005      	b.n	80072d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f8a3 	bl	8007416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f8b4 	bl	800743e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f003 0310 	and.w	r3, r3, #16
 80072e6:	2b10      	cmp	r3, #16
 80072e8:	d122      	bne.n	8007330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b10      	cmp	r3, #16
 80072f6:	d11b      	bne.n	8007330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0210 	mvn.w	r2, #16
 8007300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2208      	movs	r2, #8
 8007306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f887 	bl	800742a <HAL_TIM_IC_CaptureCallback>
 800731c:	e005      	b.n	800732a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f879 	bl	8007416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f88a 	bl	800743e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b01      	cmp	r3, #1
 800733c:	d10e      	bne.n	800735c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	d107      	bne.n	800735c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f06f 0201 	mvn.w	r2, #1
 8007354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fa ff42 	bl	80021e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007366:	2b80      	cmp	r3, #128	; 0x80
 8007368:	d10e      	bne.n	8007388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007374:	2b80      	cmp	r3, #128	; 0x80
 8007376:	d107      	bne.n	8007388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f914 	bl	80075b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007396:	d10e      	bne.n	80073b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a2:	2b80      	cmp	r3, #128	; 0x80
 80073a4:	d107      	bne.n	80073b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80073ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f907 	bl	80075c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c0:	2b40      	cmp	r3, #64	; 0x40
 80073c2:	d10e      	bne.n	80073e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d107      	bne.n	80073e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f838 	bl	8007452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d10e      	bne.n	800740e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d107      	bne.n	800740e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f06f 0220 	mvn.w	r2, #32
 8007406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f8c7 	bl	800759c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
	...

08007468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a40      	ldr	r2, [pc, #256]	; (800757c <TIM_Base_SetConfig+0x114>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d013      	beq.n	80074a8 <TIM_Base_SetConfig+0x40>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007486:	d00f      	beq.n	80074a8 <TIM_Base_SetConfig+0x40>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a3d      	ldr	r2, [pc, #244]	; (8007580 <TIM_Base_SetConfig+0x118>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00b      	beq.n	80074a8 <TIM_Base_SetConfig+0x40>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a3c      	ldr	r2, [pc, #240]	; (8007584 <TIM_Base_SetConfig+0x11c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d007      	beq.n	80074a8 <TIM_Base_SetConfig+0x40>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a3b      	ldr	r2, [pc, #236]	; (8007588 <TIM_Base_SetConfig+0x120>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d003      	beq.n	80074a8 <TIM_Base_SetConfig+0x40>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a3a      	ldr	r2, [pc, #232]	; (800758c <TIM_Base_SetConfig+0x124>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d108      	bne.n	80074ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a2f      	ldr	r2, [pc, #188]	; (800757c <TIM_Base_SetConfig+0x114>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d01f      	beq.n	8007502 <TIM_Base_SetConfig+0x9a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c8:	d01b      	beq.n	8007502 <TIM_Base_SetConfig+0x9a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a2c      	ldr	r2, [pc, #176]	; (8007580 <TIM_Base_SetConfig+0x118>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d017      	beq.n	8007502 <TIM_Base_SetConfig+0x9a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a2b      	ldr	r2, [pc, #172]	; (8007584 <TIM_Base_SetConfig+0x11c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d013      	beq.n	8007502 <TIM_Base_SetConfig+0x9a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a2a      	ldr	r2, [pc, #168]	; (8007588 <TIM_Base_SetConfig+0x120>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d00f      	beq.n	8007502 <TIM_Base_SetConfig+0x9a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a29      	ldr	r2, [pc, #164]	; (800758c <TIM_Base_SetConfig+0x124>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00b      	beq.n	8007502 <TIM_Base_SetConfig+0x9a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a28      	ldr	r2, [pc, #160]	; (8007590 <TIM_Base_SetConfig+0x128>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d007      	beq.n	8007502 <TIM_Base_SetConfig+0x9a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a27      	ldr	r2, [pc, #156]	; (8007594 <TIM_Base_SetConfig+0x12c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d003      	beq.n	8007502 <TIM_Base_SetConfig+0x9a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a26      	ldr	r2, [pc, #152]	; (8007598 <TIM_Base_SetConfig+0x130>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d108      	bne.n	8007514 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <TIM_Base_SetConfig+0x114>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00f      	beq.n	8007560 <TIM_Base_SetConfig+0xf8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a12      	ldr	r2, [pc, #72]	; (800758c <TIM_Base_SetConfig+0x124>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_Base_SetConfig+0xf8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a11      	ldr	r2, [pc, #68]	; (8007590 <TIM_Base_SetConfig+0x128>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_Base_SetConfig+0xf8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a10      	ldr	r2, [pc, #64]	; (8007594 <TIM_Base_SetConfig+0x12c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_Base_SetConfig+0xf8>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a0f      	ldr	r2, [pc, #60]	; (8007598 <TIM_Base_SetConfig+0x130>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d103      	bne.n	8007568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	615a      	str	r2, [r3, #20]
}
 800756e:	bf00      	nop
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40012c00 	.word	0x40012c00
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40013400 	.word	0x40013400
 8007590:	40014000 	.word	0x40014000
 8007594:	40014400 	.word	0x40014400
 8007598:	40014800 	.word	0x40014800

0800759c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <__NVIC_SetPriority>:
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	db0a      	blt.n	8007602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	490c      	ldr	r1, [pc, #48]	; (8007624 <__NVIC_SetPriority+0x4c>)
 80075f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075f6:	0112      	lsls	r2, r2, #4
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	440b      	add	r3, r1
 80075fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007600:	e00a      	b.n	8007618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	b2da      	uxtb	r2, r3
 8007606:	4908      	ldr	r1, [pc, #32]	; (8007628 <__NVIC_SetPriority+0x50>)
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	3b04      	subs	r3, #4
 8007610:	0112      	lsls	r2, r2, #4
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	440b      	add	r3, r1
 8007616:	761a      	strb	r2, [r3, #24]
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	e000e100 	.word	0xe000e100
 8007628:	e000ed00 	.word	0xe000ed00

0800762c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <SysTick_Handler+0x1c>)
 8007632:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007634:	f002 f93a 	bl	80098ac <xTaskGetSchedulerState>
 8007638:	4603      	mov	r3, r0
 800763a:	2b01      	cmp	r3, #1
 800763c:	d001      	beq.n	8007642 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800763e:	f000 fd9b 	bl	8008178 <xPortSysTickHandler>
  }
}
 8007642:	bf00      	nop
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	e000e010 	.word	0xe000e010

0800764c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007650:	2100      	movs	r1, #0
 8007652:	f06f 0004 	mvn.w	r0, #4
 8007656:	f7ff ffbf 	bl	80075d8 <__NVIC_SetPriority>
#endif
}
 800765a:	bf00      	nop
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007666:	f3ef 8305 	mrs	r3, IPSR
 800766a:	603b      	str	r3, [r7, #0]
  return(result);
 800766c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007672:	f06f 0305 	mvn.w	r3, #5
 8007676:	607b      	str	r3, [r7, #4]
 8007678:	e00c      	b.n	8007694 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800767a:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <osKernelInitialize+0x44>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d105      	bne.n	800768e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007682:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <osKernelInitialize+0x44>)
 8007684:	2201      	movs	r2, #1
 8007686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007688:	2300      	movs	r3, #0
 800768a:	607b      	str	r3, [r7, #4]
 800768c:	e002      	b.n	8007694 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800768e:	f04f 33ff 	mov.w	r3, #4294967295
 8007692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007694:	687b      	ldr	r3, [r7, #4]
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20000220 	.word	0x20000220

080076a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ae:	f3ef 8305 	mrs	r3, IPSR
 80076b2:	603b      	str	r3, [r7, #0]
  return(result);
 80076b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80076ba:	f06f 0305 	mvn.w	r3, #5
 80076be:	607b      	str	r3, [r7, #4]
 80076c0:	e010      	b.n	80076e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076c2:	4b0b      	ldr	r3, [pc, #44]	; (80076f0 <osKernelStart+0x48>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d109      	bne.n	80076de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076ca:	f7ff ffbf 	bl	800764c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076ce:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <osKernelStart+0x48>)
 80076d0:	2202      	movs	r2, #2
 80076d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076d4:	f001 fca2 	bl	800901c <vTaskStartScheduler>
      stat = osOK;
 80076d8:	2300      	movs	r3, #0
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	e002      	b.n	80076e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80076de:	f04f 33ff 	mov.w	r3, #4294967295
 80076e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076e4:	687b      	ldr	r3, [r7, #4]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20000220 	.word	0x20000220

080076f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08e      	sub	sp, #56	; 0x38
 80076f8:	af04      	add	r7, sp, #16
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007700:	2300      	movs	r3, #0
 8007702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007704:	f3ef 8305 	mrs	r3, IPSR
 8007708:	617b      	str	r3, [r7, #20]
  return(result);
 800770a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800770c:	2b00      	cmp	r3, #0
 800770e:	d17e      	bne.n	800780e <osThreadNew+0x11a>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d07b      	beq.n	800780e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007716:	2380      	movs	r3, #128	; 0x80
 8007718:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800771a:	2318      	movs	r3, #24
 800771c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d045      	beq.n	80077ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <osThreadNew+0x48>
        name = attr->name;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d008      	beq.n	8007762 <osThreadNew+0x6e>
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b38      	cmp	r3, #56	; 0x38
 8007754:	d805      	bhi.n	8007762 <osThreadNew+0x6e>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <osThreadNew+0x72>
        return (NULL);
 8007762:	2300      	movs	r3, #0
 8007764:	e054      	b.n	8007810 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	089b      	lsrs	r3, r3, #2
 8007774:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00e      	beq.n	800779c <osThreadNew+0xa8>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	2b5b      	cmp	r3, #91	; 0x5b
 8007784:	d90a      	bls.n	800779c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800778a:	2b00      	cmp	r3, #0
 800778c:	d006      	beq.n	800779c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <osThreadNew+0xa8>
        mem = 1;
 8007796:	2301      	movs	r3, #1
 8007798:	61bb      	str	r3, [r7, #24]
 800779a:	e010      	b.n	80077be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10c      	bne.n	80077be <osThreadNew+0xca>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d108      	bne.n	80077be <osThreadNew+0xca>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <osThreadNew+0xca>
          mem = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61bb      	str	r3, [r7, #24]
 80077b8:	e001      	b.n	80077be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d110      	bne.n	80077e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077cc:	9202      	str	r2, [sp, #8]
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6a3a      	ldr	r2, [r7, #32]
 80077d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f001 fa48 	bl	8008c70 <xTaskCreateStatic>
 80077e0:	4603      	mov	r3, r0
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	e013      	b.n	800780e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d110      	bne.n	800780e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f107 0310 	add.w	r3, r7, #16
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f001 fa93 	bl	8008d2a <xTaskCreate>
 8007804:	4603      	mov	r3, r0
 8007806:	2b01      	cmp	r3, #1
 8007808:	d001      	beq.n	800780e <osThreadNew+0x11a>
            hTask = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800780e:	693b      	ldr	r3, [r7, #16]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3728      	adds	r7, #40	; 0x28
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007820:	f3ef 8305 	mrs	r3, IPSR
 8007824:	60bb      	str	r3, [r7, #8]
  return(result);
 8007826:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <osDelay+0x1c>
    stat = osErrorISR;
 800782c:	f06f 0305 	mvn.w	r3, #5
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e007      	b.n	8007844 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <osDelay+0x2c>
      vTaskDelay(ticks);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fbb8 	bl	8008fb4 <vTaskDelay>
    }
  }

  return (stat);
 8007844:	68fb      	ldr	r3, [r7, #12]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4a07      	ldr	r2, [pc, #28]	; (800787c <vApplicationGetIdleTaskMemory+0x2c>)
 8007860:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	4a06      	ldr	r2, [pc, #24]	; (8007880 <vApplicationGetIdleTaskMemory+0x30>)
 8007866:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2280      	movs	r2, #128	; 0x80
 800786c:	601a      	str	r2, [r3, #0]
}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	20000224 	.word	0x20000224
 8007880:	20000280 	.word	0x20000280

08007884 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4a07      	ldr	r2, [pc, #28]	; (80078b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007894:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4a06      	ldr	r2, [pc, #24]	; (80078b4 <vApplicationGetTimerTaskMemory+0x30>)
 800789a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078a2:	601a      	str	r2, [r3, #0]
}
 80078a4:	bf00      	nop
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	20000480 	.word	0x20000480
 80078b4:	200004dc 	.word	0x200004dc

080078b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078c4:	f001 fc10 	bl	80090e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078c8:	4b5b      	ldr	r3, [pc, #364]	; (8007a38 <pvPortMalloc+0x180>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078d0:	f000 f920 	bl	8007b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078d4:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <pvPortMalloc+0x184>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4013      	ands	r3, r2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 8093 	bne.w	8007a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01d      	beq.n	8007924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078e8:	2208      	movs	r2, #8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d014      	beq.n	8007924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f023 0307 	bic.w	r3, r3, #7
 8007900:	3308      	adds	r3, #8
 8007902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007920:	bf00      	nop
 8007922:	e7fe      	b.n	8007922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d06e      	beq.n	8007a08 <pvPortMalloc+0x150>
 800792a:	4b45      	ldr	r3, [pc, #276]	; (8007a40 <pvPortMalloc+0x188>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	429a      	cmp	r2, r3
 8007932:	d869      	bhi.n	8007a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007934:	4b43      	ldr	r3, [pc, #268]	; (8007a44 <pvPortMalloc+0x18c>)
 8007936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007938:	4b42      	ldr	r3, [pc, #264]	; (8007a44 <pvPortMalloc+0x18c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800793e:	e004      	b.n	800794a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	429a      	cmp	r2, r3
 8007952:	d903      	bls.n	800795c <pvPortMalloc+0xa4>
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f1      	bne.n	8007940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800795c:	4b36      	ldr	r3, [pc, #216]	; (8007a38 <pvPortMalloc+0x180>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007962:	429a      	cmp	r2, r3
 8007964:	d050      	beq.n	8007a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2208      	movs	r2, #8
 800796c:	4413      	add	r3, r2
 800796e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	2308      	movs	r3, #8
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	429a      	cmp	r2, r3
 8007986:	d91f      	bls.n	80079c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4413      	add	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <pvPortMalloc+0xf8>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	613b      	str	r3, [r7, #16]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	1ad2      	subs	r2, r2, r3
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079c2:	69b8      	ldr	r0, [r7, #24]
 80079c4:	f000 f908 	bl	8007bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079c8:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <pvPortMalloc+0x188>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	4a1b      	ldr	r2, [pc, #108]	; (8007a40 <pvPortMalloc+0x188>)
 80079d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079d6:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <pvPortMalloc+0x188>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <pvPortMalloc+0x190>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d203      	bcs.n	80079ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079e2:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <pvPortMalloc+0x188>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a18      	ldr	r2, [pc, #96]	; (8007a48 <pvPortMalloc+0x190>)
 80079e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <pvPortMalloc+0x184>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079fe:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <pvPortMalloc+0x194>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3301      	adds	r3, #1
 8007a04:	4a11      	ldr	r2, [pc, #68]	; (8007a4c <pvPortMalloc+0x194>)
 8007a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a08:	f001 fb7c 	bl	8009104 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <pvPortMalloc+0x174>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	60fb      	str	r3, [r7, #12]
}
 8007a28:	bf00      	nop
 8007a2a:	e7fe      	b.n	8007a2a <pvPortMalloc+0x172>
	return pvReturn;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3728      	adds	r7, #40	; 0x28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	2000149c 	.word	0x2000149c
 8007a3c:	200014b0 	.word	0x200014b0
 8007a40:	200014a0 	.word	0x200014a0
 8007a44:	20001494 	.word	0x20001494
 8007a48:	200014a4 	.word	0x200014a4
 8007a4c:	200014a8 	.word	0x200014a8

08007a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d04d      	beq.n	8007afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a62:	2308      	movs	r3, #8
 8007a64:	425b      	negs	r3, r3
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4413      	add	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	4b24      	ldr	r3, [pc, #144]	; (8007b08 <vPortFree+0xb8>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10a      	bne.n	8007a94 <vPortFree+0x44>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	60fb      	str	r3, [r7, #12]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00a      	beq.n	8007ab2 <vPortFree+0x62>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	60bb      	str	r3, [r7, #8]
}
 8007aae:	bf00      	nop
 8007ab0:	e7fe      	b.n	8007ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <vPortFree+0xb8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01e      	beq.n	8007afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11a      	bne.n	8007afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	4b0e      	ldr	r3, [pc, #56]	; (8007b08 <vPortFree+0xb8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ad8:	f001 fb06 	bl	80090e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <vPortFree+0xbc>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	4a09      	ldr	r2, [pc, #36]	; (8007b0c <vPortFree+0xbc>)
 8007ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aea:	6938      	ldr	r0, [r7, #16]
 8007aec:	f000 f874 	bl	8007bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <vPortFree+0xc0>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	4a06      	ldr	r2, [pc, #24]	; (8007b10 <vPortFree+0xc0>)
 8007af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007afa:	f001 fb03 	bl	8009104 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007afe:	bf00      	nop
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	200014b0 	.word	0x200014b0
 8007b0c:	200014a0 	.word	0x200014a0
 8007b10:	200014ac 	.word	0x200014ac

08007b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b20:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <prvHeapInit+0xac>)
 8007b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00c      	beq.n	8007b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3307      	adds	r3, #7
 8007b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0307 	bic.w	r3, r3, #7
 8007b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	4a1f      	ldr	r2, [pc, #124]	; (8007bc0 <prvHeapInit+0xac>)
 8007b44:	4413      	add	r3, r2
 8007b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <prvHeapInit+0xb0>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b52:	4b1c      	ldr	r3, [pc, #112]	; (8007bc4 <prvHeapInit+0xb0>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b60:	2208      	movs	r2, #8
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1a9b      	subs	r3, r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0307 	bic.w	r3, r3, #7
 8007b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b76:	4b14      	ldr	r3, [pc, #80]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b7e:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	1ad2      	subs	r2, r2, r3
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b94:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <prvHeapInit+0xb8>)
 8007ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	4a09      	ldr	r2, [pc, #36]	; (8007bd0 <prvHeapInit+0xbc>)
 8007baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <prvHeapInit+0xc0>)
 8007bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bb2:	601a      	str	r2, [r3, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	200008dc 	.word	0x200008dc
 8007bc4:	20001494 	.word	0x20001494
 8007bc8:	2000149c 	.word	0x2000149c
 8007bcc:	200014a4 	.word	0x200014a4
 8007bd0:	200014a0 	.word	0x200014a0
 8007bd4:	200014b0 	.word	0x200014b0

08007bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007be0:	4b28      	ldr	r3, [pc, #160]	; (8007c84 <prvInsertBlockIntoFreeList+0xac>)
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e002      	b.n	8007bec <prvInsertBlockIntoFreeList+0x14>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d8f7      	bhi.n	8007be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	4413      	add	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d108      	bne.n	8007c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	441a      	add	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	441a      	add	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d118      	bne.n	8007c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <prvInsertBlockIntoFreeList+0xb0>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d00d      	beq.n	8007c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	e008      	b.n	8007c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <prvInsertBlockIntoFreeList+0xb0>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e003      	b.n	8007c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d002      	beq.n	8007c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20001494 	.word	0x20001494
 8007c88:	2000149c 	.word	0x2000149c

08007c8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f103 0208 	add.w	r2, r3, #8
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f103 0208 	add.w	r2, r3, #8
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f103 0208 	add.w	r2, r3, #8
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	601a      	str	r2, [r3, #0]
}
 8007d22:	bf00      	nop
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b085      	sub	sp, #20
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d44:	d103      	bne.n	8007d4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	e00c      	b.n	8007d68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3308      	adds	r3, #8
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e002      	b.n	8007d5c <vListInsert+0x2e>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d2f6      	bcs.n	8007d56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	601a      	str	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	6892      	ldr	r2, [r2, #8]
 8007db6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6852      	ldr	r2, [r2, #4]
 8007dc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d103      	bne.n	8007dd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	1e5a      	subs	r2, r3, #1
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3b04      	subs	r3, #4
 8007e04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3b04      	subs	r3, #4
 8007e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f023 0201 	bic.w	r2, r3, #1
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3b04      	subs	r3, #4
 8007e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e24:	4a0c      	ldr	r2, [pc, #48]	; (8007e58 <pxPortInitialiseStack+0x64>)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3b14      	subs	r3, #20
 8007e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3b04      	subs	r3, #4
 8007e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f06f 0202 	mvn.w	r2, #2
 8007e42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3b20      	subs	r3, #32
 8007e48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	08007e5d 	.word	0x08007e5d

08007e5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e66:	4b12      	ldr	r3, [pc, #72]	; (8007eb0 <prvTaskExitError+0x54>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d00a      	beq.n	8007e86 <prvTaskExitError+0x2a>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	60fb      	str	r3, [r7, #12]
}
 8007e82:	bf00      	nop
 8007e84:	e7fe      	b.n	8007e84 <prvTaskExitError+0x28>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	60bb      	str	r3, [r7, #8]
}
 8007e98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e9a:	bf00      	nop
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0fc      	beq.n	8007e9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ea2:	bf00      	nop
 8007ea4:	bf00      	nop
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	2000000c 	.word	0x2000000c
	...

08007ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ec0:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <pxCurrentTCBConst2>)
 8007ec2:	6819      	ldr	r1, [r3, #0]
 8007ec4:	6808      	ldr	r0, [r1, #0]
 8007ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eca:	f380 8809 	msr	PSP, r0
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	f380 8811 	msr	BASEPRI, r0
 8007eda:	4770      	bx	lr
 8007edc:	f3af 8000 	nop.w

08007ee0 <pxCurrentTCBConst2>:
 8007ee0:	200014bc 	.word	0x200014bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop

08007ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ee8:	4808      	ldr	r0, [pc, #32]	; (8007f0c <prvPortStartFirstTask+0x24>)
 8007eea:	6800      	ldr	r0, [r0, #0]
 8007eec:	6800      	ldr	r0, [r0, #0]
 8007eee:	f380 8808 	msr	MSP, r0
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f380 8814 	msr	CONTROL, r0
 8007efa:	b662      	cpsie	i
 8007efc:	b661      	cpsie	f
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	df00      	svc	0
 8007f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f0a:	bf00      	nop
 8007f0c:	e000ed08 	.word	0xe000ed08

08007f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f16:	4b46      	ldr	r3, [pc, #280]	; (8008030 <xPortStartScheduler+0x120>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a46      	ldr	r2, [pc, #280]	; (8008034 <xPortStartScheduler+0x124>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d10a      	bne.n	8007f36 <xPortStartScheduler+0x26>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	613b      	str	r3, [r7, #16]
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f36:	4b3e      	ldr	r3, [pc, #248]	; (8008030 <xPortStartScheduler+0x120>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a3f      	ldr	r2, [pc, #252]	; (8008038 <xPortStartScheduler+0x128>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d10a      	bne.n	8007f56 <xPortStartScheduler+0x46>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	60fb      	str	r3, [r7, #12]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f56:	4b39      	ldr	r3, [pc, #228]	; (800803c <xPortStartScheduler+0x12c>)
 8007f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	22ff      	movs	r2, #255	; 0xff
 8007f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	4b31      	ldr	r3, [pc, #196]	; (8008040 <xPortStartScheduler+0x130>)
 8007f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f7e:	4b31      	ldr	r3, [pc, #196]	; (8008044 <xPortStartScheduler+0x134>)
 8007f80:	2207      	movs	r2, #7
 8007f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f84:	e009      	b.n	8007f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f86:	4b2f      	ldr	r3, [pc, #188]	; (8008044 <xPortStartScheduler+0x134>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4a2d      	ldr	r2, [pc, #180]	; (8008044 <xPortStartScheduler+0x134>)
 8007f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa2:	2b80      	cmp	r3, #128	; 0x80
 8007fa4:	d0ef      	beq.n	8007f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fa6:	4b27      	ldr	r3, [pc, #156]	; (8008044 <xPortStartScheduler+0x134>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f1c3 0307 	rsb	r3, r3, #7
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d00a      	beq.n	8007fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	60bb      	str	r3, [r7, #8]
}
 8007fc4:	bf00      	nop
 8007fc6:	e7fe      	b.n	8007fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fc8:	4b1e      	ldr	r3, [pc, #120]	; (8008044 <xPortStartScheduler+0x134>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	4a1d      	ldr	r2, [pc, #116]	; (8008044 <xPortStartScheduler+0x134>)
 8007fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fd2:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <xPortStartScheduler+0x134>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fda:	4a1a      	ldr	r2, [pc, #104]	; (8008044 <xPortStartScheduler+0x134>)
 8007fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fe6:	4b18      	ldr	r3, [pc, #96]	; (8008048 <xPortStartScheduler+0x138>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a17      	ldr	r2, [pc, #92]	; (8008048 <xPortStartScheduler+0x138>)
 8007fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ff2:	4b15      	ldr	r3, [pc, #84]	; (8008048 <xPortStartScheduler+0x138>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a14      	ldr	r2, [pc, #80]	; (8008048 <xPortStartScheduler+0x138>)
 8007ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ffe:	f000 f8dd 	bl	80081bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008002:	4b12      	ldr	r3, [pc, #72]	; (800804c <xPortStartScheduler+0x13c>)
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008008:	f000 f8fc 	bl	8008204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800800c:	4b10      	ldr	r3, [pc, #64]	; (8008050 <xPortStartScheduler+0x140>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a0f      	ldr	r2, [pc, #60]	; (8008050 <xPortStartScheduler+0x140>)
 8008012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008018:	f7ff ff66 	bl	8007ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800801c:	f001 f9da 	bl	80093d4 <vTaskSwitchContext>
	prvTaskExitError();
 8008020:	f7ff ff1c 	bl	8007e5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	e000ed00 	.word	0xe000ed00
 8008034:	410fc271 	.word	0x410fc271
 8008038:	410fc270 	.word	0x410fc270
 800803c:	e000e400 	.word	0xe000e400
 8008040:	200014b4 	.word	0x200014b4
 8008044:	200014b8 	.word	0x200014b8
 8008048:	e000ed20 	.word	0xe000ed20
 800804c:	2000000c 	.word	0x2000000c
 8008050:	e000ef34 	.word	0xe000ef34

08008054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	607b      	str	r3, [r7, #4]
}
 800806c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800806e:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <vPortEnterCritical+0x58>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3301      	adds	r3, #1
 8008074:	4a0d      	ldr	r2, [pc, #52]	; (80080ac <vPortEnterCritical+0x58>)
 8008076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008078:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <vPortEnterCritical+0x58>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d10f      	bne.n	80080a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008080:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <vPortEnterCritical+0x5c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	603b      	str	r3, [r7, #0]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <vPortEnterCritical+0x4a>
	}
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	2000000c 	.word	0x2000000c
 80080b0:	e000ed04 	.word	0xe000ed04

080080b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ba:	4b12      	ldr	r3, [pc, #72]	; (8008104 <vPortExitCritical+0x50>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <vPortExitCritical+0x24>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	607b      	str	r3, [r7, #4]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080d8:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <vPortExitCritical+0x50>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3b01      	subs	r3, #1
 80080de:	4a09      	ldr	r2, [pc, #36]	; (8008104 <vPortExitCritical+0x50>)
 80080e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080e2:	4b08      	ldr	r3, [pc, #32]	; (8008104 <vPortExitCritical+0x50>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <vPortExitCritical+0x42>
 80080ea:	2300      	movs	r3, #0
 80080ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	2000000c 	.word	0x2000000c
	...

08008110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008110:	f3ef 8009 	mrs	r0, PSP
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	4b15      	ldr	r3, [pc, #84]	; (8008170 <pxCurrentTCBConst>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	f01e 0f10 	tst.w	lr, #16
 8008120:	bf08      	it	eq
 8008122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	6010      	str	r0, [r2, #0]
 800812c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008134:	f380 8811 	msr	BASEPRI, r0
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f001 f948 	bl	80093d4 <vTaskSwitchContext>
 8008144:	f04f 0000 	mov.w	r0, #0
 8008148:	f380 8811 	msr	BASEPRI, r0
 800814c:	bc09      	pop	{r0, r3}
 800814e:	6819      	ldr	r1, [r3, #0]
 8008150:	6808      	ldr	r0, [r1, #0]
 8008152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008156:	f01e 0f10 	tst.w	lr, #16
 800815a:	bf08      	it	eq
 800815c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008160:	f380 8809 	msr	PSP, r0
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst>:
 8008170:	200014bc 	.word	0x200014bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	607b      	str	r3, [r7, #4]
}
 8008190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008192:	f001 f865 	bl	8009260 <xTaskIncrementTick>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800819c:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <xPortSysTickHandler+0x40>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	2300      	movs	r3, #0
 80081a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f383 8811 	msr	BASEPRI, r3
}
 80081ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081c0:	4b0b      	ldr	r3, [pc, #44]	; (80081f0 <vPortSetupTimerInterrupt+0x34>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081c6:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <vPortSetupTimerInterrupt+0x38>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081cc:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <vPortSetupTimerInterrupt+0x3c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a0a      	ldr	r2, [pc, #40]	; (80081fc <vPortSetupTimerInterrupt+0x40>)
 80081d2:	fba2 2303 	umull	r2, r3, r2, r3
 80081d6:	099b      	lsrs	r3, r3, #6
 80081d8:	4a09      	ldr	r2, [pc, #36]	; (8008200 <vPortSetupTimerInterrupt+0x44>)
 80081da:	3b01      	subs	r3, #1
 80081dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081de:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <vPortSetupTimerInterrupt+0x34>)
 80081e0:	2207      	movs	r2, #7
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	e000e010 	.word	0xe000e010
 80081f4:	e000e018 	.word	0xe000e018
 80081f8:	20000000 	.word	0x20000000
 80081fc:	10624dd3 	.word	0x10624dd3
 8008200:	e000e014 	.word	0xe000e014

08008204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008214 <vPortEnableVFP+0x10>
 8008208:	6801      	ldr	r1, [r0, #0]
 800820a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800820e:	6001      	str	r1, [r0, #0]
 8008210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008212:	bf00      	nop
 8008214:	e000ed88 	.word	0xe000ed88

08008218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800821e:	f3ef 8305 	mrs	r3, IPSR
 8008222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b0f      	cmp	r3, #15
 8008228:	d914      	bls.n	8008254 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800822a:	4a17      	ldr	r2, [pc, #92]	; (8008288 <vPortValidateInterruptPriority+0x70>)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4413      	add	r3, r2
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008234:	4b15      	ldr	r3, [pc, #84]	; (800828c <vPortValidateInterruptPriority+0x74>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	7afa      	ldrb	r2, [r7, #11]
 800823a:	429a      	cmp	r2, r3
 800823c:	d20a      	bcs.n	8008254 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	607b      	str	r3, [r7, #4]
}
 8008250:	bf00      	nop
 8008252:	e7fe      	b.n	8008252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008254:	4b0e      	ldr	r3, [pc, #56]	; (8008290 <vPortValidateInterruptPriority+0x78>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <vPortValidateInterruptPriority+0x7c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d90a      	bls.n	800827a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	603b      	str	r3, [r7, #0]
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <vPortValidateInterruptPriority+0x60>
	}
 800827a:	bf00      	nop
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	e000e3f0 	.word	0xe000e3f0
 800828c:	200014b4 	.word	0x200014b4
 8008290:	e000ed0c 	.word	0xe000ed0c
 8008294:	200014b8 	.word	0x200014b8

08008298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <xQueueGenericReset+0x2a>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	60bb      	str	r3, [r7, #8]
}
 80082be:	bf00      	nop
 80082c0:	e7fe      	b.n	80082c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082c2:	f7ff fec7 	bl	8008054 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082d2:	fb01 f303 	mul.w	r3, r1, r3
 80082d6:	441a      	add	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f2:	3b01      	subs	r3, #1
 80082f4:	68f9      	ldr	r1, [r7, #12]
 80082f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082f8:	fb01 f303 	mul.w	r3, r1, r3
 80082fc:	441a      	add	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	22ff      	movs	r2, #255	; 0xff
 8008306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	22ff      	movs	r2, #255	; 0xff
 800830e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d114      	bne.n	8008342 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01a      	beq.n	8008356 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3310      	adds	r3, #16
 8008324:	4618      	mov	r0, r3
 8008326:	f001 f903 	bl	8009530 <xTaskRemoveFromEventList>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d012      	beq.n	8008356 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008330:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <xQueueGenericReset+0xcc>)
 8008332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	e009      	b.n	8008356 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3310      	adds	r3, #16
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fca0 	bl	8007c8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fc9b 	bl	8007c8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008356:	f7ff fead 	bl	80080b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800835a:	2301      	movs	r3, #1
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	e000ed04 	.word	0xe000ed04

08008368 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08e      	sub	sp, #56	; 0x38
 800836c:	af02      	add	r7, sp, #8
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800838e:	bf00      	nop
 8008390:	e7fe      	b.n	8008390 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <xQueueGenericCreateStatic+0x52>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <xQueueGenericCreateStatic+0x56>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e000      	b.n	80083c0 <xQueueGenericCreateStatic+0x58>
 80083be:	2300      	movs	r3, #0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10a      	bne.n	80083da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	623b      	str	r3, [r7, #32]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d102      	bne.n	80083e6 <xQueueGenericCreateStatic+0x7e>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <xQueueGenericCreateStatic+0x82>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e000      	b.n	80083ec <xQueueGenericCreateStatic+0x84>
 80083ea:	2300      	movs	r3, #0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	61fb      	str	r3, [r7, #28]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008406:	2350      	movs	r3, #80	; 0x50
 8008408:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b50      	cmp	r3, #80	; 0x50
 800840e:	d00a      	beq.n	8008426 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	61bb      	str	r3, [r7, #24]
}
 8008422:	bf00      	nop
 8008424:	e7fe      	b.n	8008424 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008426:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00d      	beq.n	800844e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800843a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	4613      	mov	r3, r2
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	68b9      	ldr	r1, [r7, #8]
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 f805 	bl	8008458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008450:	4618      	mov	r0, r3
 8008452:	3730      	adds	r7, #48	; 0x30
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d103      	bne.n	8008474 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	e002      	b.n	800847a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008486:	2101      	movs	r1, #1
 8008488:	69b8      	ldr	r0, [r7, #24]
 800848a:	f7ff ff05 	bl	8008298 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008496:	bf00      	nop
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08e      	sub	sp, #56	; 0x38
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084ae:	2300      	movs	r3, #0
 80084b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <xQueueGenericSend+0x32>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d103      	bne.n	80084e0 <xQueueGenericSend+0x40>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <xQueueGenericSend+0x44>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e000      	b.n	80084e6 <xQueueGenericSend+0x46>
 80084e4:	2300      	movs	r3, #0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10a      	bne.n	8008500 <xQueueGenericSend+0x60>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084fc:	bf00      	nop
 80084fe:	e7fe      	b.n	80084fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b02      	cmp	r3, #2
 8008504:	d103      	bne.n	800850e <xQueueGenericSend+0x6e>
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <xQueueGenericSend+0x72>
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <xQueueGenericSend+0x74>
 8008512:	2300      	movs	r3, #0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10a      	bne.n	800852e <xQueueGenericSend+0x8e>
	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	623b      	str	r3, [r7, #32]
}
 800852a:	bf00      	nop
 800852c:	e7fe      	b.n	800852c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800852e:	f001 f9bd 	bl	80098ac <xTaskGetSchedulerState>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d102      	bne.n	800853e <xQueueGenericSend+0x9e>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <xQueueGenericSend+0xa2>
 800853e:	2301      	movs	r3, #1
 8008540:	e000      	b.n	8008544 <xQueueGenericSend+0xa4>
 8008542:	2300      	movs	r3, #0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <xQueueGenericSend+0xbe>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	61fb      	str	r3, [r7, #28]
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800855e:	f7ff fd79 	bl	8008054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856a:	429a      	cmp	r2, r3
 800856c:	d302      	bcc.n	8008574 <xQueueGenericSend+0xd4>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d129      	bne.n	80085c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	68b9      	ldr	r1, [r7, #8]
 8008578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800857a:	f000 fa0b 	bl	8008994 <prvCopyDataToQueue>
 800857e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	2b00      	cmp	r3, #0
 8008586:	d010      	beq.n	80085aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	3324      	adds	r3, #36	; 0x24
 800858c:	4618      	mov	r0, r3
 800858e:	f000 ffcf 	bl	8009530 <xTaskRemoveFromEventList>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d013      	beq.n	80085c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008598:	4b3f      	ldr	r3, [pc, #252]	; (8008698 <xQueueGenericSend+0x1f8>)
 800859a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	e00a      	b.n	80085c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085b0:	4b39      	ldr	r3, [pc, #228]	; (8008698 <xQueueGenericSend+0x1f8>)
 80085b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085c0:	f7ff fd78 	bl	80080b4 <vPortExitCritical>
				return pdPASS;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e063      	b.n	8008690 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d103      	bne.n	80085d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085ce:	f7ff fd71 	bl	80080b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	e05c      	b.n	8008690 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d106      	bne.n	80085ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085dc:	f107 0314 	add.w	r3, r7, #20
 80085e0:	4618      	mov	r0, r3
 80085e2:	f001 f809 	bl	80095f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085e6:	2301      	movs	r3, #1
 80085e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085ea:	f7ff fd63 	bl	80080b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085ee:	f000 fd7b 	bl	80090e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085f2:	f7ff fd2f 	bl	8008054 <vPortEnterCritical>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085fc:	b25b      	sxtb	r3, r3
 80085fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008602:	d103      	bne.n	800860c <xQueueGenericSend+0x16c>
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008612:	b25b      	sxtb	r3, r3
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008618:	d103      	bne.n	8008622 <xQueueGenericSend+0x182>
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008622:	f7ff fd47 	bl	80080b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008626:	1d3a      	adds	r2, r7, #4
 8008628:	f107 0314 	add.w	r3, r7, #20
 800862c:	4611      	mov	r1, r2
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fff8 	bl	8009624 <xTaskCheckForTimeOut>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d124      	bne.n	8008684 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800863a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800863c:	f000 faa2 	bl	8008b84 <prvIsQueueFull>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d018      	beq.n	8008678 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	3310      	adds	r3, #16
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	4611      	mov	r1, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f000 ff1e 	bl	8009490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008656:	f000 fa2d 	bl	8008ab4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800865a:	f000 fd53 	bl	8009104 <xTaskResumeAll>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	f47f af7c 	bne.w	800855e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008666:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <xQueueGenericSend+0x1f8>)
 8008668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	e772      	b.n	800855e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800867a:	f000 fa1b 	bl	8008ab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800867e:	f000 fd41 	bl	8009104 <xTaskResumeAll>
 8008682:	e76c      	b.n	800855e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008686:	f000 fa15 	bl	8008ab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800868a:	f000 fd3b 	bl	8009104 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800868e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008690:	4618      	mov	r0, r3
 8008692:	3738      	adds	r7, #56	; 0x38
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b090      	sub	sp, #64	; 0x40
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10a      	bne.n	80086ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086c6:	bf00      	nop
 80086c8:	e7fe      	b.n	80086c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d103      	bne.n	80086d8 <xQueueGenericSendFromISR+0x3c>
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <xQueueGenericSendFromISR+0x40>
 80086d8:	2301      	movs	r3, #1
 80086da:	e000      	b.n	80086de <xQueueGenericSendFromISR+0x42>
 80086dc:	2300      	movs	r3, #0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086f4:	bf00      	nop
 80086f6:	e7fe      	b.n	80086f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d103      	bne.n	8008706 <xQueueGenericSendFromISR+0x6a>
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008702:	2b01      	cmp	r3, #1
 8008704:	d101      	bne.n	800870a <xQueueGenericSendFromISR+0x6e>
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <xQueueGenericSendFromISR+0x70>
 800870a:	2300      	movs	r3, #0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	623b      	str	r3, [r7, #32]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008726:	f7ff fd77 	bl	8008218 <vPortValidateInterruptPriority>
	__asm volatile
 800872a:	f3ef 8211 	mrs	r2, BASEPRI
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	61fa      	str	r2, [r7, #28]
 8008740:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008742:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874e:	429a      	cmp	r2, r3
 8008750:	d302      	bcc.n	8008758 <xQueueGenericSendFromISR+0xbc>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b02      	cmp	r3, #2
 8008756:	d12f      	bne.n	80087b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800875e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008766:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	68b9      	ldr	r1, [r7, #8]
 800876c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800876e:	f000 f911 	bl	8008994 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008772:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	d112      	bne.n	80087a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	d016      	beq.n	80087b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	3324      	adds	r3, #36	; 0x24
 8008788:	4618      	mov	r0, r3
 800878a:	f000 fed1 	bl	8009530 <xTaskRemoveFromEventList>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00e      	beq.n	80087b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00b      	beq.n	80087b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	e007      	b.n	80087b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087a6:	3301      	adds	r3, #1
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	b25a      	sxtb	r2, r3
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087b2:	2301      	movs	r3, #1
 80087b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80087b6:	e001      	b.n	80087bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087be:	617b      	str	r3, [r7, #20]
	__asm volatile
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f383 8811 	msr	BASEPRI, r3
}
 80087c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3740      	adds	r7, #64	; 0x40
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08c      	sub	sp, #48	; 0x30
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80087e0:	2300      	movs	r3, #0
 80087e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <xQueueReceive+0x30>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	623b      	str	r3, [r7, #32]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d103      	bne.n	8008812 <xQueueReceive+0x3e>
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <xQueueReceive+0x42>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <xQueueReceive+0x44>
 8008816:	2300      	movs	r3, #0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <xQueueReceive+0x5e>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	61fb      	str	r3, [r7, #28]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008832:	f001 f83b 	bl	80098ac <xTaskGetSchedulerState>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <xQueueReceive+0x6e>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <xQueueReceive+0x72>
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <xQueueReceive+0x74>
 8008846:	2300      	movs	r3, #0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <xQueueReceive+0x8e>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	61bb      	str	r3, [r7, #24]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008862:	f7ff fbf7 	bl	8008054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	2b00      	cmp	r3, #0
 8008870:	d01f      	beq.n	80088b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008876:	f000 f8f7 	bl	8008a68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	1e5a      	subs	r2, r3, #1
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00f      	beq.n	80088aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888c:	3310      	adds	r3, #16
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fe4e 	bl	8009530 <xTaskRemoveFromEventList>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800889a:	4b3d      	ldr	r3, [pc, #244]	; (8008990 <xQueueReceive+0x1bc>)
 800889c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088aa:	f7ff fc03 	bl	80080b4 <vPortExitCritical>
				return pdPASS;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e069      	b.n	8008986 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d103      	bne.n	80088c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088b8:	f7ff fbfc 	bl	80080b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088bc:	2300      	movs	r3, #0
 80088be:	e062      	b.n	8008986 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d106      	bne.n	80088d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088c6:	f107 0310 	add.w	r3, r7, #16
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fe94 	bl	80095f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088d0:	2301      	movs	r3, #1
 80088d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088d4:	f7ff fbee 	bl	80080b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088d8:	f000 fc06 	bl	80090e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088dc:	f7ff fbba 	bl	8008054 <vPortEnterCritical>
 80088e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088e6:	b25b      	sxtb	r3, r3
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d103      	bne.n	80088f6 <xQueueReceive+0x122>
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088fc:	b25b      	sxtb	r3, r3
 80088fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008902:	d103      	bne.n	800890c <xQueueReceive+0x138>
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800890c:	f7ff fbd2 	bl	80080b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008910:	1d3a      	adds	r2, r7, #4
 8008912:	f107 0310 	add.w	r3, r7, #16
 8008916:	4611      	mov	r1, r2
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fe83 	bl	8009624 <xTaskCheckForTimeOut>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d123      	bne.n	800896c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008926:	f000 f917 	bl	8008b58 <prvIsQueueEmpty>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d017      	beq.n	8008960 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	3324      	adds	r3, #36	; 0x24
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	4611      	mov	r1, r2
 8008938:	4618      	mov	r0, r3
 800893a:	f000 fda9 	bl	8009490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800893e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008940:	f000 f8b8 	bl	8008ab4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008944:	f000 fbde 	bl	8009104 <xTaskResumeAll>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d189      	bne.n	8008862 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800894e:	4b10      	ldr	r3, [pc, #64]	; (8008990 <xQueueReceive+0x1bc>)
 8008950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	e780      	b.n	8008862 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008962:	f000 f8a7 	bl	8008ab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008966:	f000 fbcd 	bl	8009104 <xTaskResumeAll>
 800896a:	e77a      	b.n	8008862 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800896c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800896e:	f000 f8a1 	bl	8008ab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008972:	f000 fbc7 	bl	8009104 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008978:	f000 f8ee 	bl	8008b58 <prvIsQueueEmpty>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	f43f af6f 	beq.w	8008862 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008984:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008986:	4618      	mov	r0, r3
 8008988:	3730      	adds	r7, #48	; 0x30
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	e000ed04 	.word	0xe000ed04

08008994 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10d      	bne.n	80089ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d14d      	bne.n	8008a56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 ff92 	bl	80098e8 <xTaskPriorityDisinherit>
 80089c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	609a      	str	r2, [r3, #8]
 80089cc:	e043      	b.n	8008a56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d119      	bne.n	8008a08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6858      	ldr	r0, [r3, #4]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	461a      	mov	r2, r3
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	f001 fbb6 	bl	800a150 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ec:	441a      	add	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d32b      	bcc.n	8008a56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	605a      	str	r2, [r3, #4]
 8008a06:	e026      	b.n	8008a56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	68d8      	ldr	r0, [r3, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a10:	461a      	mov	r2, r3
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	f001 fb9c 	bl	800a150 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	425b      	negs	r3, r3
 8008a22:	441a      	add	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68da      	ldr	r2, [r3, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d207      	bcs.n	8008a44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3c:	425b      	negs	r3, r3
 8008a3e:	441a      	add	r2, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d105      	bne.n	8008a56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a5e:	697b      	ldr	r3, [r7, #20]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d018      	beq.n	8008aac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	441a      	add	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d303      	bcc.n	8008a9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68d9      	ldr	r1, [r3, #12]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	6838      	ldr	r0, [r7, #0]
 8008aa8:	f001 fb52 	bl	800a150 <memcpy>
	}
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008abc:	f7ff faca 	bl	8008054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ac6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ac8:	e011      	b.n	8008aee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d012      	beq.n	8008af8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3324      	adds	r3, #36	; 0x24
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fd2a 	bl	8009530 <xTaskRemoveFromEventList>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ae2:	f000 fe01 	bl	80096e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	dce9      	bgt.n	8008aca <prvUnlockQueue+0x16>
 8008af6:	e000      	b.n	8008afa <prvUnlockQueue+0x46>
					break;
 8008af8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	22ff      	movs	r2, #255	; 0xff
 8008afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b02:	f7ff fad7 	bl	80080b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b06:	f7ff faa5 	bl	8008054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b12:	e011      	b.n	8008b38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d012      	beq.n	8008b42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3310      	adds	r3, #16
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fd05 	bl	8009530 <xTaskRemoveFromEventList>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b2c:	f000 fddc 	bl	80096e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	dce9      	bgt.n	8008b14 <prvUnlockQueue+0x60>
 8008b40:	e000      	b.n	8008b44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	22ff      	movs	r2, #255	; 0xff
 8008b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b4c:	f7ff fab2 	bl	80080b4 <vPortExitCritical>
}
 8008b50:	bf00      	nop
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b60:	f7ff fa78 	bl	8008054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d102      	bne.n	8008b72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	e001      	b.n	8008b76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b76:	f7ff fa9d 	bl	80080b4 <vPortExitCritical>

	return xReturn;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b8c:	f7ff fa62 	bl	8008054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d102      	bne.n	8008ba2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e001      	b.n	8008ba6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ba6:	f7ff fa85 	bl	80080b4 <vPortExitCritical>

	return xReturn;
 8008baa:	68fb      	ldr	r3, [r7, #12]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	e014      	b.n	8008bee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008bc4:	4a0f      	ldr	r2, [pc, #60]	; (8008c04 <vQueueAddToRegistry+0x50>)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10b      	bne.n	8008be8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008bd0:	490c      	ldr	r1, [pc, #48]	; (8008c04 <vQueueAddToRegistry+0x50>)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008bda:	4a0a      	ldr	r2, [pc, #40]	; (8008c04 <vQueueAddToRegistry+0x50>)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	4413      	add	r3, r2
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008be6:	e006      	b.n	8008bf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3301      	adds	r3, #1
 8008bec:	60fb      	str	r3, [r7, #12]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b07      	cmp	r3, #7
 8008bf2:	d9e7      	bls.n	8008bc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20001b38 	.word	0x20001b38

08008c08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c18:	f7ff fa1c 	bl	8008054 <vPortEnterCritical>
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c22:	b25b      	sxtb	r3, r3
 8008c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c28:	d103      	bne.n	8008c32 <vQueueWaitForMessageRestricted+0x2a>
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c38:	b25b      	sxtb	r3, r3
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d103      	bne.n	8008c48 <vQueueWaitForMessageRestricted+0x40>
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c48:	f7ff fa34 	bl	80080b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d106      	bne.n	8008c62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	3324      	adds	r3, #36	; 0x24
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	68b9      	ldr	r1, [r7, #8]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 fc3b 	bl	80094d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c62:	6978      	ldr	r0, [r7, #20]
 8008c64:	f7ff ff26 	bl	8008ab4 <prvUnlockQueue>
	}
 8008c68:	bf00      	nop
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08e      	sub	sp, #56	; 0x38
 8008c74:	af04      	add	r7, sp, #16
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
 8008c7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10a      	bne.n	8008c9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	623b      	str	r3, [r7, #32]
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	61fb      	str	r3, [r7, #28]
}
 8008cb2:	bf00      	nop
 8008cb4:	e7fe      	b.n	8008cb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cb6:	235c      	movs	r3, #92	; 0x5c
 8008cb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2b5c      	cmp	r3, #92	; 0x5c
 8008cbe:	d00a      	beq.n	8008cd6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	61bb      	str	r3, [r7, #24]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008cd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d01e      	beq.n	8008d1c <xTaskCreateStatic+0xac>
 8008cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01b      	beq.n	8008d1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9303      	str	r3, [sp, #12]
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	9302      	str	r3, [sp, #8]
 8008cfe:	f107 0314 	add.w	r3, r7, #20
 8008d02:	9301      	str	r3, [sp, #4]
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 f850 	bl	8008db4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d16:	f000 f8dd 	bl	8008ed4 <prvAddNewTaskToReadyList>
 8008d1a:	e001      	b.n	8008d20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d20:	697b      	ldr	r3, [r7, #20]
	}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3728      	adds	r7, #40	; 0x28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b08c      	sub	sp, #48	; 0x30
 8008d2e:	af04      	add	r7, sp, #16
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	603b      	str	r3, [r7, #0]
 8008d36:	4613      	mov	r3, r2
 8008d38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d3a:	88fb      	ldrh	r3, [r7, #6]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fdba 	bl	80078b8 <pvPortMalloc>
 8008d44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00e      	beq.n	8008d6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d4c:	205c      	movs	r0, #92	; 0x5c
 8008d4e:	f7fe fdb3 	bl	80078b8 <pvPortMalloc>
 8008d52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8008d60:	e005      	b.n	8008d6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d62:	6978      	ldr	r0, [r7, #20]
 8008d64:	f7fe fe74 	bl	8007a50 <vPortFree>
 8008d68:	e001      	b.n	8008d6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d017      	beq.n	8008da4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d7c:	88fa      	ldrh	r2, [r7, #6]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9303      	str	r3, [sp, #12]
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	9302      	str	r3, [sp, #8]
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 f80e 	bl	8008db4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d98:	69f8      	ldr	r0, [r7, #28]
 8008d9a:	f000 f89b 	bl	8008ed4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	61bb      	str	r3, [r7, #24]
 8008da2:	e002      	b.n	8008daa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008da4:	f04f 33ff 	mov.w	r3, #4294967295
 8008da8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008daa:	69bb      	ldr	r3, [r7, #24]
	}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3720      	adds	r7, #32
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	461a      	mov	r2, r3
 8008dcc:	21a5      	movs	r1, #165	; 0xa5
 8008dce:	f001 f9cd 	bl	800a16c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	f023 0307 	bic.w	r3, r3, #7
 8008dea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	617b      	str	r3, [r7, #20]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01f      	beq.n	8008e52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e12:	2300      	movs	r3, #0
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	e012      	b.n	8008e3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	7819      	ldrb	r1, [r3, #0]
 8008e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	3334      	adds	r3, #52	; 0x34
 8008e28:	460a      	mov	r2, r1
 8008e2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	4413      	add	r3, r2
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d006      	beq.n	8008e46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	61fb      	str	r3, [r7, #28]
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	2b0f      	cmp	r3, #15
 8008e42:	d9e9      	bls.n	8008e18 <prvInitialiseNewTask+0x64>
 8008e44:	e000      	b.n	8008e48 <prvInitialiseNewTask+0x94>
			{
				break;
 8008e46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e50:	e003      	b.n	8008e5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	2b37      	cmp	r3, #55	; 0x37
 8008e5e:	d901      	bls.n	8008e64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e60:	2337      	movs	r3, #55	; 0x37
 8008e62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	2200      	movs	r2, #0
 8008e74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e78:	3304      	adds	r3, #4
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe ff26 	bl	8007ccc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e82:	3318      	adds	r3, #24
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fe ff21 	bl	8007ccc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	68f9      	ldr	r1, [r7, #12]
 8008eb2:	69b8      	ldr	r0, [r7, #24]
 8008eb4:	f7fe ff9e 	bl	8007df4 <pxPortInitialiseStack>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eca:	bf00      	nop
 8008ecc:	3720      	adds	r7, #32
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008edc:	f7ff f8ba 	bl	8008054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ee0:	4b2d      	ldr	r3, [pc, #180]	; (8008f98 <prvAddNewTaskToReadyList+0xc4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	4a2c      	ldr	r2, [pc, #176]	; (8008f98 <prvAddNewTaskToReadyList+0xc4>)
 8008ee8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008eea:	4b2c      	ldr	r3, [pc, #176]	; (8008f9c <prvAddNewTaskToReadyList+0xc8>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d109      	bne.n	8008f06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ef2:	4a2a      	ldr	r2, [pc, #168]	; (8008f9c <prvAddNewTaskToReadyList+0xc8>)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ef8:	4b27      	ldr	r3, [pc, #156]	; (8008f98 <prvAddNewTaskToReadyList+0xc4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d110      	bne.n	8008f22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f00:	f000 fc16 	bl	8009730 <prvInitialiseTaskLists>
 8008f04:	e00d      	b.n	8008f22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f06:	4b26      	ldr	r3, [pc, #152]	; (8008fa0 <prvAddNewTaskToReadyList+0xcc>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f0e:	4b23      	ldr	r3, [pc, #140]	; (8008f9c <prvAddNewTaskToReadyList+0xc8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d802      	bhi.n	8008f22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f1c:	4a1f      	ldr	r2, [pc, #124]	; (8008f9c <prvAddNewTaskToReadyList+0xc8>)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f22:	4b20      	ldr	r3, [pc, #128]	; (8008fa4 <prvAddNewTaskToReadyList+0xd0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3301      	adds	r3, #1
 8008f28:	4a1e      	ldr	r2, [pc, #120]	; (8008fa4 <prvAddNewTaskToReadyList+0xd0>)
 8008f2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f2c:	4b1d      	ldr	r3, [pc, #116]	; (8008fa4 <prvAddNewTaskToReadyList+0xd0>)
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f38:	4b1b      	ldr	r3, [pc, #108]	; (8008fa8 <prvAddNewTaskToReadyList+0xd4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d903      	bls.n	8008f48 <prvAddNewTaskToReadyList+0x74>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f44:	4a18      	ldr	r2, [pc, #96]	; (8008fa8 <prvAddNewTaskToReadyList+0xd4>)
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4a15      	ldr	r2, [pc, #84]	; (8008fac <prvAddNewTaskToReadyList+0xd8>)
 8008f56:	441a      	add	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	f7fe fec1 	bl	8007ce6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f64:	f7ff f8a6 	bl	80080b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f68:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <prvAddNewTaskToReadyList+0xcc>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00e      	beq.n	8008f8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f70:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <prvAddNewTaskToReadyList+0xc8>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d207      	bcs.n	8008f8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f7e:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <prvAddNewTaskToReadyList+0xdc>)
 8008f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20001990 	.word	0x20001990
 8008f9c:	200014bc 	.word	0x200014bc
 8008fa0:	2000199c 	.word	0x2000199c
 8008fa4:	200019ac 	.word	0x200019ac
 8008fa8:	20001998 	.word	0x20001998
 8008fac:	200014c0 	.word	0x200014c0
 8008fb0:	e000ed04 	.word	0xe000ed04

08008fb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d017      	beq.n	8008ff6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fc6:	4b13      	ldr	r3, [pc, #76]	; (8009014 <vTaskDelay+0x60>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <vTaskDelay+0x30>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	60bb      	str	r3, [r7, #8]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fe4:	f000 f880 	bl	80090e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fe8:	2100      	movs	r1, #0
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fcea 	bl	80099c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ff0:	f000 f888 	bl	8009104 <xTaskResumeAll>
 8008ff4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d107      	bne.n	800900c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ffc:	4b06      	ldr	r3, [pc, #24]	; (8009018 <vTaskDelay+0x64>)
 8008ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	200019b8 	.word	0x200019b8
 8009018:	e000ed04 	.word	0xe000ed04

0800901c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08a      	sub	sp, #40	; 0x28
 8009020:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009026:	2300      	movs	r3, #0
 8009028:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800902a:	463a      	mov	r2, r7
 800902c:	1d39      	adds	r1, r7, #4
 800902e:	f107 0308 	add.w	r3, r7, #8
 8009032:	4618      	mov	r0, r3
 8009034:	f7fe fc0c 	bl	8007850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	9202      	str	r2, [sp, #8]
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	2300      	movs	r3, #0
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	2300      	movs	r3, #0
 8009048:	460a      	mov	r2, r1
 800904a:	4921      	ldr	r1, [pc, #132]	; (80090d0 <vTaskStartScheduler+0xb4>)
 800904c:	4821      	ldr	r0, [pc, #132]	; (80090d4 <vTaskStartScheduler+0xb8>)
 800904e:	f7ff fe0f 	bl	8008c70 <xTaskCreateStatic>
 8009052:	4603      	mov	r3, r0
 8009054:	4a20      	ldr	r2, [pc, #128]	; (80090d8 <vTaskStartScheduler+0xbc>)
 8009056:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009058:	4b1f      	ldr	r3, [pc, #124]	; (80090d8 <vTaskStartScheduler+0xbc>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009060:	2301      	movs	r3, #1
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	e001      	b.n	800906a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009066:	2300      	movs	r3, #0
 8009068:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d102      	bne.n	8009076 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009070:	f000 fcfc 	bl	8009a6c <xTimerCreateTimerTask>
 8009074:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d116      	bne.n	80090aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	613b      	str	r3, [r7, #16]
}
 800908e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009090:	4b12      	ldr	r3, [pc, #72]	; (80090dc <vTaskStartScheduler+0xc0>)
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009098:	4b11      	ldr	r3, [pc, #68]	; (80090e0 <vTaskStartScheduler+0xc4>)
 800909a:	2201      	movs	r2, #1
 800909c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800909e:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <vTaskStartScheduler+0xc8>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090a4:	f7fe ff34 	bl	8007f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090a8:	e00e      	b.n	80090c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b0:	d10a      	bne.n	80090c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	60fb      	str	r3, [r7, #12]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <vTaskStartScheduler+0xaa>
}
 80090c8:	bf00      	nop
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	0800a1c0 	.word	0x0800a1c0
 80090d4:	08009701 	.word	0x08009701
 80090d8:	200019b4 	.word	0x200019b4
 80090dc:	200019b0 	.word	0x200019b0
 80090e0:	2000199c 	.word	0x2000199c
 80090e4:	20001994 	.word	0x20001994

080090e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090ec:	4b04      	ldr	r3, [pc, #16]	; (8009100 <vTaskSuspendAll+0x18>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3301      	adds	r3, #1
 80090f2:	4a03      	ldr	r2, [pc, #12]	; (8009100 <vTaskSuspendAll+0x18>)
 80090f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090f6:	bf00      	nop
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	200019b8 	.word	0x200019b8

08009104 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800910e:	2300      	movs	r3, #0
 8009110:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009112:	4b42      	ldr	r3, [pc, #264]	; (800921c <xTaskResumeAll+0x118>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10a      	bne.n	8009130 <xTaskResumeAll+0x2c>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	603b      	str	r3, [r7, #0]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009130:	f7fe ff90 	bl	8008054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009134:	4b39      	ldr	r3, [pc, #228]	; (800921c <xTaskResumeAll+0x118>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3b01      	subs	r3, #1
 800913a:	4a38      	ldr	r2, [pc, #224]	; (800921c <xTaskResumeAll+0x118>)
 800913c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800913e:	4b37      	ldr	r3, [pc, #220]	; (800921c <xTaskResumeAll+0x118>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d162      	bne.n	800920c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009146:	4b36      	ldr	r3, [pc, #216]	; (8009220 <xTaskResumeAll+0x11c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d05e      	beq.n	800920c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800914e:	e02f      	b.n	80091b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009150:	4b34      	ldr	r3, [pc, #208]	; (8009224 <xTaskResumeAll+0x120>)
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3318      	adds	r3, #24
 800915c:	4618      	mov	r0, r3
 800915e:	f7fe fe1f 	bl	8007da0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3304      	adds	r3, #4
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fe1a 	bl	8007da0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009170:	4b2d      	ldr	r3, [pc, #180]	; (8009228 <xTaskResumeAll+0x124>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	429a      	cmp	r2, r3
 8009176:	d903      	bls.n	8009180 <xTaskResumeAll+0x7c>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	4a2a      	ldr	r2, [pc, #168]	; (8009228 <xTaskResumeAll+0x124>)
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4a27      	ldr	r2, [pc, #156]	; (800922c <xTaskResumeAll+0x128>)
 800918e:	441a      	add	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3304      	adds	r3, #4
 8009194:	4619      	mov	r1, r3
 8009196:	4610      	mov	r0, r2
 8009198:	f7fe fda5 	bl	8007ce6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a0:	4b23      	ldr	r3, [pc, #140]	; (8009230 <xTaskResumeAll+0x12c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d302      	bcc.n	80091b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80091aa:	4b22      	ldr	r3, [pc, #136]	; (8009234 <xTaskResumeAll+0x130>)
 80091ac:	2201      	movs	r2, #1
 80091ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091b0:	4b1c      	ldr	r3, [pc, #112]	; (8009224 <xTaskResumeAll+0x120>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1cb      	bne.n	8009150 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091be:	f000 fb55 	bl	800986c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091c2:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <xTaskResumeAll+0x134>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d010      	beq.n	80091f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091ce:	f000 f847 	bl	8009260 <xTaskIncrementTick>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80091d8:	4b16      	ldr	r3, [pc, #88]	; (8009234 <xTaskResumeAll+0x130>)
 80091da:	2201      	movs	r2, #1
 80091dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1f1      	bne.n	80091ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80091ea:	4b13      	ldr	r3, [pc, #76]	; (8009238 <xTaskResumeAll+0x134>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091f0:	4b10      	ldr	r3, [pc, #64]	; (8009234 <xTaskResumeAll+0x130>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d009      	beq.n	800920c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091f8:	2301      	movs	r3, #1
 80091fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091fc:	4b0f      	ldr	r3, [pc, #60]	; (800923c <xTaskResumeAll+0x138>)
 80091fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800920c:	f7fe ff52 	bl	80080b4 <vPortExitCritical>

	return xAlreadyYielded;
 8009210:	68bb      	ldr	r3, [r7, #8]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	200019b8 	.word	0x200019b8
 8009220:	20001990 	.word	0x20001990
 8009224:	20001950 	.word	0x20001950
 8009228:	20001998 	.word	0x20001998
 800922c:	200014c0 	.word	0x200014c0
 8009230:	200014bc 	.word	0x200014bc
 8009234:	200019a4 	.word	0x200019a4
 8009238:	200019a0 	.word	0x200019a0
 800923c:	e000ed04 	.word	0xe000ed04

08009240 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009246:	4b05      	ldr	r3, [pc, #20]	; (800925c <xTaskGetTickCount+0x1c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800924c:	687b      	ldr	r3, [r7, #4]
}
 800924e:	4618      	mov	r0, r3
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20001994 	.word	0x20001994

08009260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800926a:	4b4f      	ldr	r3, [pc, #316]	; (80093a8 <xTaskIncrementTick+0x148>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	f040 808f 	bne.w	8009392 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009274:	4b4d      	ldr	r3, [pc, #308]	; (80093ac <xTaskIncrementTick+0x14c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3301      	adds	r3, #1
 800927a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800927c:	4a4b      	ldr	r2, [pc, #300]	; (80093ac <xTaskIncrementTick+0x14c>)
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d120      	bne.n	80092ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009288:	4b49      	ldr	r3, [pc, #292]	; (80093b0 <xTaskIncrementTick+0x150>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	603b      	str	r3, [r7, #0]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <xTaskIncrementTick+0x46>
 80092a8:	4b41      	ldr	r3, [pc, #260]	; (80093b0 <xTaskIncrementTick+0x150>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	4b41      	ldr	r3, [pc, #260]	; (80093b4 <xTaskIncrementTick+0x154>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a3f      	ldr	r2, [pc, #252]	; (80093b0 <xTaskIncrementTick+0x150>)
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	4a3f      	ldr	r2, [pc, #252]	; (80093b4 <xTaskIncrementTick+0x154>)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	4b3e      	ldr	r3, [pc, #248]	; (80093b8 <xTaskIncrementTick+0x158>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3301      	adds	r3, #1
 80092c2:	4a3d      	ldr	r2, [pc, #244]	; (80093b8 <xTaskIncrementTick+0x158>)
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	f000 fad1 	bl	800986c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092ca:	4b3c      	ldr	r3, [pc, #240]	; (80093bc <xTaskIncrementTick+0x15c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d349      	bcc.n	8009368 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092d4:	4b36      	ldr	r3, [pc, #216]	; (80093b0 <xTaskIncrementTick+0x150>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d104      	bne.n	80092e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092de:	4b37      	ldr	r3, [pc, #220]	; (80093bc <xTaskIncrementTick+0x15c>)
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295
 80092e4:	601a      	str	r2, [r3, #0]
					break;
 80092e6:	e03f      	b.n	8009368 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e8:	4b31      	ldr	r3, [pc, #196]	; (80093b0 <xTaskIncrementTick+0x150>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d203      	bcs.n	8009308 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009300:	4a2e      	ldr	r2, [pc, #184]	; (80093bc <xTaskIncrementTick+0x15c>)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009306:	e02f      	b.n	8009368 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	3304      	adds	r3, #4
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fd47 	bl	8007da0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	2b00      	cmp	r3, #0
 8009318:	d004      	beq.n	8009324 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	3318      	adds	r3, #24
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe fd3e 	bl	8007da0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009328:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <xTaskIncrementTick+0x160>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d903      	bls.n	8009338 <xTaskIncrementTick+0xd8>
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	4a22      	ldr	r2, [pc, #136]	; (80093c0 <xTaskIncrementTick+0x160>)
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4a1f      	ldr	r2, [pc, #124]	; (80093c4 <xTaskIncrementTick+0x164>)
 8009346:	441a      	add	r2, r3
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	3304      	adds	r3, #4
 800934c:	4619      	mov	r1, r3
 800934e:	4610      	mov	r0, r2
 8009350:	f7fe fcc9 	bl	8007ce6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009358:	4b1b      	ldr	r3, [pc, #108]	; (80093c8 <xTaskIncrementTick+0x168>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	429a      	cmp	r2, r3
 8009360:	d3b8      	bcc.n	80092d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009362:	2301      	movs	r3, #1
 8009364:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009366:	e7b5      	b.n	80092d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009368:	4b17      	ldr	r3, [pc, #92]	; (80093c8 <xTaskIncrementTick+0x168>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936e:	4915      	ldr	r1, [pc, #84]	; (80093c4 <xTaskIncrementTick+0x164>)
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	440b      	add	r3, r1
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d901      	bls.n	8009384 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009380:	2301      	movs	r3, #1
 8009382:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009384:	4b11      	ldr	r3, [pc, #68]	; (80093cc <xTaskIncrementTick+0x16c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800938c:	2301      	movs	r3, #1
 800938e:	617b      	str	r3, [r7, #20]
 8009390:	e004      	b.n	800939c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009392:	4b0f      	ldr	r3, [pc, #60]	; (80093d0 <xTaskIncrementTick+0x170>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3301      	adds	r3, #1
 8009398:	4a0d      	ldr	r2, [pc, #52]	; (80093d0 <xTaskIncrementTick+0x170>)
 800939a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800939c:	697b      	ldr	r3, [r7, #20]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	200019b8 	.word	0x200019b8
 80093ac:	20001994 	.word	0x20001994
 80093b0:	20001948 	.word	0x20001948
 80093b4:	2000194c 	.word	0x2000194c
 80093b8:	200019a8 	.word	0x200019a8
 80093bc:	200019b0 	.word	0x200019b0
 80093c0:	20001998 	.word	0x20001998
 80093c4:	200014c0 	.word	0x200014c0
 80093c8:	200014bc 	.word	0x200014bc
 80093cc:	200019a4 	.word	0x200019a4
 80093d0:	200019a0 	.word	0x200019a0

080093d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093da:	4b28      	ldr	r3, [pc, #160]	; (800947c <vTaskSwitchContext+0xa8>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093e2:	4b27      	ldr	r3, [pc, #156]	; (8009480 <vTaskSwitchContext+0xac>)
 80093e4:	2201      	movs	r2, #1
 80093e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093e8:	e041      	b.n	800946e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80093ea:	4b25      	ldr	r3, [pc, #148]	; (8009480 <vTaskSwitchContext+0xac>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f0:	4b24      	ldr	r3, [pc, #144]	; (8009484 <vTaskSwitchContext+0xb0>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	e010      	b.n	800941a <vTaskSwitchContext+0x46>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10a      	bne.n	8009414 <vTaskSwitchContext+0x40>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	607b      	str	r3, [r7, #4]
}
 8009410:	bf00      	nop
 8009412:	e7fe      	b.n	8009412 <vTaskSwitchContext+0x3e>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3b01      	subs	r3, #1
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	491b      	ldr	r1, [pc, #108]	; (8009488 <vTaskSwitchContext+0xb4>)
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	440b      	add	r3, r1
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0e4      	beq.n	80093f8 <vTaskSwitchContext+0x24>
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	4613      	mov	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4a13      	ldr	r2, [pc, #76]	; (8009488 <vTaskSwitchContext+0xb4>)
 800943a:	4413      	add	r3, r2
 800943c:	60bb      	str	r3, [r7, #8]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	605a      	str	r2, [r3, #4]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	3308      	adds	r3, #8
 8009450:	429a      	cmp	r2, r3
 8009452:	d104      	bne.n	800945e <vTaskSwitchContext+0x8a>
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	605a      	str	r2, [r3, #4]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	4a09      	ldr	r2, [pc, #36]	; (800948c <vTaskSwitchContext+0xb8>)
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	4a06      	ldr	r2, [pc, #24]	; (8009484 <vTaskSwitchContext+0xb0>)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6013      	str	r3, [r2, #0]
}
 800946e:	bf00      	nop
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	200019b8 	.word	0x200019b8
 8009480:	200019a4 	.word	0x200019a4
 8009484:	20001998 	.word	0x20001998
 8009488:	200014c0 	.word	0x200014c0
 800948c:	200014bc 	.word	0x200014bc

08009490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	60fb      	str	r3, [r7, #12]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094b6:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <vTaskPlaceOnEventList+0x44>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3318      	adds	r3, #24
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7fe fc35 	bl	8007d2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094c4:	2101      	movs	r1, #1
 80094c6:	6838      	ldr	r0, [r7, #0]
 80094c8:	f000 fa7c 	bl	80099c4 <prvAddCurrentTaskToDelayedList>
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	200014bc 	.word	0x200014bc

080094d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	617b      	str	r3, [r7, #20]
}
 80094fc:	bf00      	nop
 80094fe:	e7fe      	b.n	80094fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009500:	4b0a      	ldr	r3, [pc, #40]	; (800952c <vTaskPlaceOnEventListRestricted+0x54>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3318      	adds	r3, #24
 8009506:	4619      	mov	r1, r3
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7fe fbec 	bl	8007ce6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009514:	f04f 33ff 	mov.w	r3, #4294967295
 8009518:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800951a:	6879      	ldr	r1, [r7, #4]
 800951c:	68b8      	ldr	r0, [r7, #8]
 800951e:	f000 fa51 	bl	80099c4 <prvAddCurrentTaskToDelayedList>
	}
 8009522:	bf00      	nop
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	200014bc 	.word	0x200014bc

08009530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	60fb      	str	r3, [r7, #12]
}
 8009558:	bf00      	nop
 800955a:	e7fe      	b.n	800955a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	3318      	adds	r3, #24
 8009560:	4618      	mov	r0, r3
 8009562:	f7fe fc1d 	bl	8007da0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009566:	4b1e      	ldr	r3, [pc, #120]	; (80095e0 <xTaskRemoveFromEventList+0xb0>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d11d      	bne.n	80095aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	3304      	adds	r3, #4
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fc14 	bl	8007da0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957c:	4b19      	ldr	r3, [pc, #100]	; (80095e4 <xTaskRemoveFromEventList+0xb4>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d903      	bls.n	800958c <xTaskRemoveFromEventList+0x5c>
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009588:	4a16      	ldr	r2, [pc, #88]	; (80095e4 <xTaskRemoveFromEventList+0xb4>)
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009590:	4613      	mov	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4a13      	ldr	r2, [pc, #76]	; (80095e8 <xTaskRemoveFromEventList+0xb8>)
 800959a:	441a      	add	r2, r3
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	3304      	adds	r3, #4
 80095a0:	4619      	mov	r1, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	f7fe fb9f 	bl	8007ce6 <vListInsertEnd>
 80095a8:	e005      	b.n	80095b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	3318      	adds	r3, #24
 80095ae:	4619      	mov	r1, r3
 80095b0:	480e      	ldr	r0, [pc, #56]	; (80095ec <xTaskRemoveFromEventList+0xbc>)
 80095b2:	f7fe fb98 	bl	8007ce6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ba:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <xTaskRemoveFromEventList+0xc0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d905      	bls.n	80095d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095c4:	2301      	movs	r3, #1
 80095c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095c8:	4b0a      	ldr	r3, [pc, #40]	; (80095f4 <xTaskRemoveFromEventList+0xc4>)
 80095ca:	2201      	movs	r2, #1
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	e001      	b.n	80095d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80095d0:	2300      	movs	r3, #0
 80095d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095d4:	697b      	ldr	r3, [r7, #20]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	200019b8 	.word	0x200019b8
 80095e4:	20001998 	.word	0x20001998
 80095e8:	200014c0 	.word	0x200014c0
 80095ec:	20001950 	.word	0x20001950
 80095f0:	200014bc 	.word	0x200014bc
 80095f4:	200019a4 	.word	0x200019a4

080095f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009600:	4b06      	ldr	r3, [pc, #24]	; (800961c <vTaskInternalSetTimeOutState+0x24>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009608:	4b05      	ldr	r3, [pc, #20]	; (8009620 <vTaskInternalSetTimeOutState+0x28>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	605a      	str	r2, [r3, #4]
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	200019a8 	.word	0x200019a8
 8009620:	20001994 	.word	0x20001994

08009624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10a      	bne.n	800964a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	613b      	str	r3, [r7, #16]
}
 8009646:	bf00      	nop
 8009648:	e7fe      	b.n	8009648 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	60fb      	str	r3, [r7, #12]
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009666:	f7fe fcf5 	bl	8008054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800966a:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <xTaskCheckForTimeOut+0xbc>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009682:	d102      	bne.n	800968a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]
 8009688:	e023      	b.n	80096d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <xTaskCheckForTimeOut+0xc0>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d007      	beq.n	80096a6 <xTaskCheckForTimeOut+0x82>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	69ba      	ldr	r2, [r7, #24]
 800969c:	429a      	cmp	r2, r3
 800969e:	d302      	bcc.n	80096a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096a0:	2301      	movs	r3, #1
 80096a2:	61fb      	str	r3, [r7, #28]
 80096a4:	e015      	b.n	80096d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d20b      	bcs.n	80096c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	1ad2      	subs	r2, r2, r3
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff ff9b 	bl	80095f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096c2:	2300      	movs	r3, #0
 80096c4:	61fb      	str	r3, [r7, #28]
 80096c6:	e004      	b.n	80096d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2200      	movs	r2, #0
 80096cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096ce:	2301      	movs	r3, #1
 80096d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096d2:	f7fe fcef 	bl	80080b4 <vPortExitCritical>

	return xReturn;
 80096d6:	69fb      	ldr	r3, [r7, #28]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3720      	adds	r7, #32
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20001994 	.word	0x20001994
 80096e4:	200019a8 	.word	0x200019a8

080096e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096ec:	4b03      	ldr	r3, [pc, #12]	; (80096fc <vTaskMissedYield+0x14>)
 80096ee:	2201      	movs	r2, #1
 80096f0:	601a      	str	r2, [r3, #0]
}
 80096f2:	bf00      	nop
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	200019a4 	.word	0x200019a4

08009700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009708:	f000 f852 	bl	80097b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800970c:	4b06      	ldr	r3, [pc, #24]	; (8009728 <prvIdleTask+0x28>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d9f9      	bls.n	8009708 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009714:	4b05      	ldr	r3, [pc, #20]	; (800972c <prvIdleTask+0x2c>)
 8009716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009724:	e7f0      	b.n	8009708 <prvIdleTask+0x8>
 8009726:	bf00      	nop
 8009728:	200014c0 	.word	0x200014c0
 800972c:	e000ed04 	.word	0xe000ed04

08009730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009736:	2300      	movs	r3, #0
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	e00c      	b.n	8009756 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4a12      	ldr	r2, [pc, #72]	; (8009790 <prvInitialiseTaskLists+0x60>)
 8009748:	4413      	add	r3, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fa9e 	bl	8007c8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3301      	adds	r3, #1
 8009754:	607b      	str	r3, [r7, #4]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b37      	cmp	r3, #55	; 0x37
 800975a:	d9ef      	bls.n	800973c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800975c:	480d      	ldr	r0, [pc, #52]	; (8009794 <prvInitialiseTaskLists+0x64>)
 800975e:	f7fe fa95 	bl	8007c8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009762:	480d      	ldr	r0, [pc, #52]	; (8009798 <prvInitialiseTaskLists+0x68>)
 8009764:	f7fe fa92 	bl	8007c8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009768:	480c      	ldr	r0, [pc, #48]	; (800979c <prvInitialiseTaskLists+0x6c>)
 800976a:	f7fe fa8f 	bl	8007c8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800976e:	480c      	ldr	r0, [pc, #48]	; (80097a0 <prvInitialiseTaskLists+0x70>)
 8009770:	f7fe fa8c 	bl	8007c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009774:	480b      	ldr	r0, [pc, #44]	; (80097a4 <prvInitialiseTaskLists+0x74>)
 8009776:	f7fe fa89 	bl	8007c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800977a:	4b0b      	ldr	r3, [pc, #44]	; (80097a8 <prvInitialiseTaskLists+0x78>)
 800977c:	4a05      	ldr	r2, [pc, #20]	; (8009794 <prvInitialiseTaskLists+0x64>)
 800977e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <prvInitialiseTaskLists+0x7c>)
 8009782:	4a05      	ldr	r2, [pc, #20]	; (8009798 <prvInitialiseTaskLists+0x68>)
 8009784:	601a      	str	r2, [r3, #0]
}
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	200014c0 	.word	0x200014c0
 8009794:	20001920 	.word	0x20001920
 8009798:	20001934 	.word	0x20001934
 800979c:	20001950 	.word	0x20001950
 80097a0:	20001964 	.word	0x20001964
 80097a4:	2000197c 	.word	0x2000197c
 80097a8:	20001948 	.word	0x20001948
 80097ac:	2000194c 	.word	0x2000194c

080097b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097b6:	e019      	b.n	80097ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097b8:	f7fe fc4c 	bl	8008054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097bc:	4b10      	ldr	r3, [pc, #64]	; (8009800 <prvCheckTasksWaitingTermination+0x50>)
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe fae9 	bl	8007da0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097ce:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <prvCheckTasksWaitingTermination+0x54>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	4a0b      	ldr	r2, [pc, #44]	; (8009804 <prvCheckTasksWaitingTermination+0x54>)
 80097d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097d8:	4b0b      	ldr	r3, [pc, #44]	; (8009808 <prvCheckTasksWaitingTermination+0x58>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3b01      	subs	r3, #1
 80097de:	4a0a      	ldr	r2, [pc, #40]	; (8009808 <prvCheckTasksWaitingTermination+0x58>)
 80097e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097e2:	f7fe fc67 	bl	80080b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f810 	bl	800980c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097ec:	4b06      	ldr	r3, [pc, #24]	; (8009808 <prvCheckTasksWaitingTermination+0x58>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e1      	bne.n	80097b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */

}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20001964 	.word	0x20001964
 8009804:	20001990 	.word	0x20001990
 8009808:	20001978 	.word	0x20001978

0800980c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800981a:	2b00      	cmp	r3, #0
 800981c:	d108      	bne.n	8009830 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe f914 	bl	8007a50 <vPortFree>
				vPortFree( pxTCB );
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7fe f911 	bl	8007a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800982e:	e018      	b.n	8009862 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009836:	2b01      	cmp	r3, #1
 8009838:	d103      	bne.n	8009842 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7fe f908 	bl	8007a50 <vPortFree>
	}
 8009840:	e00f      	b.n	8009862 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009848:	2b02      	cmp	r3, #2
 800984a:	d00a      	beq.n	8009862 <prvDeleteTCB+0x56>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	60fb      	str	r3, [r7, #12]
}
 800985e:	bf00      	nop
 8009860:	e7fe      	b.n	8009860 <prvDeleteTCB+0x54>
	}
 8009862:	bf00      	nop
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009872:	4b0c      	ldr	r3, [pc, #48]	; (80098a4 <prvResetNextTaskUnblockTime+0x38>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d104      	bne.n	8009886 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800987c:	4b0a      	ldr	r3, [pc, #40]	; (80098a8 <prvResetNextTaskUnblockTime+0x3c>)
 800987e:	f04f 32ff 	mov.w	r2, #4294967295
 8009882:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009884:	e008      	b.n	8009898 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009886:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <prvResetNextTaskUnblockTime+0x38>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	4a04      	ldr	r2, [pc, #16]	; (80098a8 <prvResetNextTaskUnblockTime+0x3c>)
 8009896:	6013      	str	r3, [r2, #0]
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	20001948 	.word	0x20001948
 80098a8:	200019b0 	.word	0x200019b0

080098ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098b2:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <xTaskGetSchedulerState+0x34>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098ba:	2301      	movs	r3, #1
 80098bc:	607b      	str	r3, [r7, #4]
 80098be:	e008      	b.n	80098d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098c0:	4b08      	ldr	r3, [pc, #32]	; (80098e4 <xTaskGetSchedulerState+0x38>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098c8:	2302      	movs	r3, #2
 80098ca:	607b      	str	r3, [r7, #4]
 80098cc:	e001      	b.n	80098d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098ce:	2300      	movs	r3, #0
 80098d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098d2:	687b      	ldr	r3, [r7, #4]
	}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	2000199c 	.word	0x2000199c
 80098e4:	200019b8 	.word	0x200019b8

080098e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098f4:	2300      	movs	r3, #0
 80098f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d056      	beq.n	80099ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098fe:	4b2e      	ldr	r3, [pc, #184]	; (80099b8 <xTaskPriorityDisinherit+0xd0>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	429a      	cmp	r2, r3
 8009906:	d00a      	beq.n	800991e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	60fb      	str	r3, [r7, #12]
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10a      	bne.n	800993c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	60bb      	str	r3, [r7, #8]
}
 8009938:	bf00      	nop
 800993a:	e7fe      	b.n	800993a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009940:	1e5a      	subs	r2, r3, #1
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800994e:	429a      	cmp	r2, r3
 8009950:	d02c      	beq.n	80099ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009956:	2b00      	cmp	r3, #0
 8009958:	d128      	bne.n	80099ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	3304      	adds	r3, #4
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe fa1e 	bl	8007da0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997c:	4b0f      	ldr	r3, [pc, #60]	; (80099bc <xTaskPriorityDisinherit+0xd4>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d903      	bls.n	800998c <xTaskPriorityDisinherit+0xa4>
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	4a0c      	ldr	r2, [pc, #48]	; (80099bc <xTaskPriorityDisinherit+0xd4>)
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4a09      	ldr	r2, [pc, #36]	; (80099c0 <xTaskPriorityDisinherit+0xd8>)
 800999a:	441a      	add	r2, r3
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	3304      	adds	r3, #4
 80099a0:	4619      	mov	r1, r3
 80099a2:	4610      	mov	r0, r2
 80099a4:	f7fe f99f 	bl	8007ce6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099a8:	2301      	movs	r3, #1
 80099aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099ac:	697b      	ldr	r3, [r7, #20]
	}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	200014bc 	.word	0x200014bc
 80099bc:	20001998 	.word	0x20001998
 80099c0:	200014c0 	.word	0x200014c0

080099c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099ce:	4b21      	ldr	r3, [pc, #132]	; (8009a54 <prvAddCurrentTaskToDelayedList+0x90>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099d4:	4b20      	ldr	r3, [pc, #128]	; (8009a58 <prvAddCurrentTaskToDelayedList+0x94>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3304      	adds	r3, #4
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe f9e0 	bl	8007da0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e6:	d10a      	bne.n	80099fe <prvAddCurrentTaskToDelayedList+0x3a>
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d007      	beq.n	80099fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099ee:	4b1a      	ldr	r3, [pc, #104]	; (8009a58 <prvAddCurrentTaskToDelayedList+0x94>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4619      	mov	r1, r3
 80099f6:	4819      	ldr	r0, [pc, #100]	; (8009a5c <prvAddCurrentTaskToDelayedList+0x98>)
 80099f8:	f7fe f975 	bl	8007ce6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099fc:	e026      	b.n	8009a4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4413      	add	r3, r2
 8009a04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a06:	4b14      	ldr	r3, [pc, #80]	; (8009a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d209      	bcs.n	8009a2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a16:	4b12      	ldr	r3, [pc, #72]	; (8009a60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	4b0f      	ldr	r3, [pc, #60]	; (8009a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	4619      	mov	r1, r3
 8009a22:	4610      	mov	r0, r2
 8009a24:	f7fe f983 	bl	8007d2e <vListInsert>
}
 8009a28:	e010      	b.n	8009a4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a2a:	4b0e      	ldr	r3, [pc, #56]	; (8009a64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3304      	adds	r3, #4
 8009a34:	4619      	mov	r1, r3
 8009a36:	4610      	mov	r0, r2
 8009a38:	f7fe f979 	bl	8007d2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d202      	bcs.n	8009a4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a46:	4a08      	ldr	r2, [pc, #32]	; (8009a68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	6013      	str	r3, [r2, #0]
}
 8009a4c:	bf00      	nop
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20001994 	.word	0x20001994
 8009a58:	200014bc 	.word	0x200014bc
 8009a5c:	2000197c 	.word	0x2000197c
 8009a60:	2000194c 	.word	0x2000194c
 8009a64:	20001948 	.word	0x20001948
 8009a68:	200019b0 	.word	0x200019b0

08009a6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	; 0x28
 8009a70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a76:	f000 fb07 	bl	800a088 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a7a:	4b1c      	ldr	r3, [pc, #112]	; (8009aec <xTimerCreateTimerTask+0x80>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d021      	beq.n	8009ac6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a86:	2300      	movs	r3, #0
 8009a88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a8a:	1d3a      	adds	r2, r7, #4
 8009a8c:	f107 0108 	add.w	r1, r7, #8
 8009a90:	f107 030c 	add.w	r3, r7, #12
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fd fef5 	bl	8007884 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	9202      	str	r2, [sp, #8]
 8009aa2:	9301      	str	r3, [sp, #4]
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	460a      	mov	r2, r1
 8009aac:	4910      	ldr	r1, [pc, #64]	; (8009af0 <xTimerCreateTimerTask+0x84>)
 8009aae:	4811      	ldr	r0, [pc, #68]	; (8009af4 <xTimerCreateTimerTask+0x88>)
 8009ab0:	f7ff f8de 	bl	8008c70 <xTaskCreateStatic>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	4a10      	ldr	r2, [pc, #64]	; (8009af8 <xTimerCreateTimerTask+0x8c>)
 8009ab8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009aba:	4b0f      	ldr	r3, [pc, #60]	; (8009af8 <xTimerCreateTimerTask+0x8c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	613b      	str	r3, [r7, #16]
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ae2:	697b      	ldr	r3, [r7, #20]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	200019ec 	.word	0x200019ec
 8009af0:	0800a1c8 	.word	0x0800a1c8
 8009af4:	08009c31 	.word	0x08009c31
 8009af8:	200019f0 	.word	0x200019f0

08009afc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08a      	sub	sp, #40	; 0x28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10a      	bne.n	8009b2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	623b      	str	r3, [r7, #32]
}
 8009b26:	bf00      	nop
 8009b28:	e7fe      	b.n	8009b28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b2a:	4b1a      	ldr	r3, [pc, #104]	; (8009b94 <xTimerGenericCommand+0x98>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d02a      	beq.n	8009b88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2b05      	cmp	r3, #5
 8009b42:	dc18      	bgt.n	8009b76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b44:	f7ff feb2 	bl	80098ac <xTaskGetSchedulerState>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d109      	bne.n	8009b62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b4e:	4b11      	ldr	r3, [pc, #68]	; (8009b94 <xTimerGenericCommand+0x98>)
 8009b50:	6818      	ldr	r0, [r3, #0]
 8009b52:	f107 0110 	add.w	r1, r7, #16
 8009b56:	2300      	movs	r3, #0
 8009b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b5a:	f7fe fca1 	bl	80084a0 <xQueueGenericSend>
 8009b5e:	6278      	str	r0, [r7, #36]	; 0x24
 8009b60:	e012      	b.n	8009b88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b62:	4b0c      	ldr	r3, [pc, #48]	; (8009b94 <xTimerGenericCommand+0x98>)
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	f107 0110 	add.w	r1, r7, #16
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f7fe fc97 	bl	80084a0 <xQueueGenericSend>
 8009b72:	6278      	str	r0, [r7, #36]	; 0x24
 8009b74:	e008      	b.n	8009b88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b76:	4b07      	ldr	r3, [pc, #28]	; (8009b94 <xTimerGenericCommand+0x98>)
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	f107 0110 	add.w	r1, r7, #16
 8009b7e:	2300      	movs	r3, #0
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	f7fe fd8b 	bl	800869c <xQueueGenericSendFromISR>
 8009b86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3728      	adds	r7, #40	; 0x28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	200019ec 	.word	0x200019ec

08009b98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af02      	add	r7, sp, #8
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba2:	4b22      	ldr	r3, [pc, #136]	; (8009c2c <prvProcessExpiredTimer+0x94>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe f8f5 	bl	8007da0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bbc:	f003 0304 	and.w	r3, r3, #4
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d022      	beq.n	8009c0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	699a      	ldr	r2, [r3, #24]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	18d1      	adds	r1, r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	6978      	ldr	r0, [r7, #20]
 8009bd2:	f000 f8d1 	bl	8009d78 <prvInsertTimerInActiveList>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01f      	beq.n	8009c1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bdc:	2300      	movs	r3, #0
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	2300      	movs	r3, #0
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	2100      	movs	r1, #0
 8009be6:	6978      	ldr	r0, [r7, #20]
 8009be8:	f7ff ff88 	bl	8009afc <xTimerGenericCommand>
 8009bec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d113      	bne.n	8009c1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	60fb      	str	r3, [r7, #12]
}
 8009c06:	bf00      	nop
 8009c08:	e7fe      	b.n	8009c08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c10:	f023 0301 	bic.w	r3, r3, #1
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	6a1b      	ldr	r3, [r3, #32]
 8009c20:	6978      	ldr	r0, [r7, #20]
 8009c22:	4798      	blx	r3
}
 8009c24:	bf00      	nop
 8009c26:	3718      	adds	r7, #24
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	200019e4 	.word	0x200019e4

08009c30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c38:	f107 0308 	add.w	r3, r7, #8
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 f857 	bl	8009cf0 <prvGetNextExpireTime>
 8009c42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	4619      	mov	r1, r3
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 f803 	bl	8009c54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c4e:	f000 f8d5 	bl	8009dfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c52:	e7f1      	b.n	8009c38 <prvTimerTask+0x8>

08009c54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c5e:	f7ff fa43 	bl	80090e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c62:	f107 0308 	add.w	r3, r7, #8
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 f866 	bl	8009d38 <prvSampleTimeNow>
 8009c6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d130      	bne.n	8009cd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10a      	bne.n	8009c90 <prvProcessTimerOrBlockTask+0x3c>
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d806      	bhi.n	8009c90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c82:	f7ff fa3f 	bl	8009104 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c86:	68f9      	ldr	r1, [r7, #12]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f7ff ff85 	bl	8009b98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c8e:	e024      	b.n	8009cda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d008      	beq.n	8009ca8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c96:	4b13      	ldr	r3, [pc, #76]	; (8009ce4 <prvProcessTimerOrBlockTask+0x90>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <prvProcessTimerOrBlockTask+0x50>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e000      	b.n	8009ca6 <prvProcessTimerOrBlockTask+0x52>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ca8:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <prvProcessTimerOrBlockTask+0x94>)
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	f7fe ffa7 	bl	8008c08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009cba:	f7ff fa23 	bl	8009104 <xTaskResumeAll>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009cc4:	4b09      	ldr	r3, [pc, #36]	; (8009cec <prvProcessTimerOrBlockTask+0x98>)
 8009cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	f3bf 8f6f 	isb	sy
}
 8009cd4:	e001      	b.n	8009cda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009cd6:	f7ff fa15 	bl	8009104 <xTaskResumeAll>
}
 8009cda:	bf00      	nop
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	200019e8 	.word	0x200019e8
 8009ce8:	200019ec 	.word	0x200019ec
 8009cec:	e000ed04 	.word	0xe000ed04

08009cf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009cf8:	4b0e      	ldr	r3, [pc, #56]	; (8009d34 <prvGetNextExpireTime+0x44>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <prvGetNextExpireTime+0x16>
 8009d02:	2201      	movs	r2, #1
 8009d04:	e000      	b.n	8009d08 <prvGetNextExpireTime+0x18>
 8009d06:	2200      	movs	r2, #0
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d105      	bne.n	8009d20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d14:	4b07      	ldr	r3, [pc, #28]	; (8009d34 <prvGetNextExpireTime+0x44>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	60fb      	str	r3, [r7, #12]
 8009d1e:	e001      	b.n	8009d24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d24:	68fb      	ldr	r3, [r7, #12]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	200019e4 	.word	0x200019e4

08009d38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d40:	f7ff fa7e 	bl	8009240 <xTaskGetTickCount>
 8009d44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d46:	4b0b      	ldr	r3, [pc, #44]	; (8009d74 <prvSampleTimeNow+0x3c>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d205      	bcs.n	8009d5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d50:	f000 f936 	bl	8009fc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	e002      	b.n	8009d62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d62:	4a04      	ldr	r2, [pc, #16]	; (8009d74 <prvSampleTimeNow+0x3c>)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d68:	68fb      	ldr	r3, [r7, #12]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	200019f4 	.word	0x200019f4

08009d78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
 8009d84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d812      	bhi.n	8009dc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	1ad2      	subs	r2, r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d302      	bcc.n	8009db2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009dac:	2301      	movs	r3, #1
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	e01b      	b.n	8009dea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009db2:	4b10      	ldr	r3, [pc, #64]	; (8009df4 <prvInsertTimerInActiveList+0x7c>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	3304      	adds	r3, #4
 8009dba:	4619      	mov	r1, r3
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	f7fd ffb6 	bl	8007d2e <vListInsert>
 8009dc2:	e012      	b.n	8009dea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d206      	bcs.n	8009dda <prvInsertTimerInActiveList+0x62>
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d302      	bcc.n	8009dda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	617b      	str	r3, [r7, #20]
 8009dd8:	e007      	b.n	8009dea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dda:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <prvInsertTimerInActiveList+0x80>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3304      	adds	r3, #4
 8009de2:	4619      	mov	r1, r3
 8009de4:	4610      	mov	r0, r2
 8009de6:	f7fd ffa2 	bl	8007d2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009dea:	697b      	ldr	r3, [r7, #20]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	200019e8 	.word	0x200019e8
 8009df8:	200019e4 	.word	0x200019e4

08009dfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08e      	sub	sp, #56	; 0x38
 8009e00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e02:	e0ca      	b.n	8009f9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	da18      	bge.n	8009e3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e0a:	1d3b      	adds	r3, r7, #4
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10a      	bne.n	8009e2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	61fb      	str	r3, [r7, #28]
}
 8009e28:	bf00      	nop
 8009e2a:	e7fe      	b.n	8009e2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e32:	6850      	ldr	r0, [r2, #4]
 8009e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e36:	6892      	ldr	r2, [r2, #8]
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f2c0 80aa 	blt.w	8009f98 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d004      	beq.n	8009e5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	3304      	adds	r3, #4
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fd ffa3 	bl	8007da0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7ff ff6b 	bl	8009d38 <prvSampleTimeNow>
 8009e62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b09      	cmp	r3, #9
 8009e68:	f200 8097 	bhi.w	8009f9a <prvProcessReceivedCommands+0x19e>
 8009e6c:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <prvProcessReceivedCommands+0x78>)
 8009e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e72:	bf00      	nop
 8009e74:	08009e9d 	.word	0x08009e9d
 8009e78:	08009e9d 	.word	0x08009e9d
 8009e7c:	08009e9d 	.word	0x08009e9d
 8009e80:	08009f11 	.word	0x08009f11
 8009e84:	08009f25 	.word	0x08009f25
 8009e88:	08009f6f 	.word	0x08009f6f
 8009e8c:	08009e9d 	.word	0x08009e9d
 8009e90:	08009e9d 	.word	0x08009e9d
 8009e94:	08009f11 	.word	0x08009f11
 8009e98:	08009f25 	.word	0x08009f25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea2:	f043 0301 	orr.w	r3, r3, #1
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	18d1      	adds	r1, r2, r3
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ebc:	f7ff ff5c 	bl	8009d78 <prvInsertTimerInActiveList>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d069      	beq.n	8009f9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ecc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ed4:	f003 0304 	and.w	r3, r3, #4
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d05e      	beq.n	8009f9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	441a      	add	r2, r3
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	2100      	movs	r1, #0
 8009eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eee:	f7ff fe05 	bl	8009afc <xTimerGenericCommand>
 8009ef2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d14f      	bne.n	8009f9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	61bb      	str	r3, [r7, #24]
}
 8009f0c:	bf00      	nop
 8009f0e:	e7fe      	b.n	8009f0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f16:	f023 0301 	bic.w	r3, r3, #1
 8009f1a:	b2da      	uxtb	r2, r3
 8009f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f22:	e03a      	b.n	8009f9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f2a:	f043 0301 	orr.w	r3, r3, #1
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	617b      	str	r3, [r7, #20]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5c:	699a      	ldr	r2, [r3, #24]
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	18d1      	adds	r1, r2, r3
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f68:	f7ff ff06 	bl	8009d78 <prvInsertTimerInActiveList>
					break;
 8009f6c:	e015      	b.n	8009f9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d103      	bne.n	8009f84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f7e:	f7fd fd67 	bl	8007a50 <vPortFree>
 8009f82:	e00a      	b.n	8009f9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f8a:	f023 0301 	bic.w	r3, r3, #1
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f96:	e000      	b.n	8009f9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f9a:	4b08      	ldr	r3, [pc, #32]	; (8009fbc <prvProcessReceivedCommands+0x1c0>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	1d39      	adds	r1, r7, #4
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe fc16 	bl	80087d4 <xQueueReceive>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f47f af2a 	bne.w	8009e04 <prvProcessReceivedCommands+0x8>
	}
}
 8009fb0:	bf00      	nop
 8009fb2:	bf00      	nop
 8009fb4:	3730      	adds	r7, #48	; 0x30
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	200019ec 	.word	0x200019ec

08009fc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fc6:	e048      	b.n	800a05a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fc8:	4b2d      	ldr	r3, [pc, #180]	; (800a080 <prvSwitchTimerLists+0xc0>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd2:	4b2b      	ldr	r3, [pc, #172]	; (800a080 <prvSwitchTimerLists+0xc0>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fd fedd 	bl	8007da0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ff4:	f003 0304 	and.w	r3, r3, #4
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d02e      	beq.n	800a05a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	4413      	add	r3, r2
 800a004:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d90e      	bls.n	800a02c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a01a:	4b19      	ldr	r3, [pc, #100]	; (800a080 <prvSwitchTimerLists+0xc0>)
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3304      	adds	r3, #4
 800a022:	4619      	mov	r1, r3
 800a024:	4610      	mov	r0, r2
 800a026:	f7fd fe82 	bl	8007d2e <vListInsert>
 800a02a:	e016      	b.n	800a05a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a02c:	2300      	movs	r3, #0
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	2300      	movs	r3, #0
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	2100      	movs	r1, #0
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7ff fd60 	bl	8009afc <xTimerGenericCommand>
 800a03c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	603b      	str	r3, [r7, #0]
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a05a:	4b09      	ldr	r3, [pc, #36]	; (800a080 <prvSwitchTimerLists+0xc0>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1b1      	bne.n	8009fc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a064:	4b06      	ldr	r3, [pc, #24]	; (800a080 <prvSwitchTimerLists+0xc0>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a06a:	4b06      	ldr	r3, [pc, #24]	; (800a084 <prvSwitchTimerLists+0xc4>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a04      	ldr	r2, [pc, #16]	; (800a080 <prvSwitchTimerLists+0xc0>)
 800a070:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a072:	4a04      	ldr	r2, [pc, #16]	; (800a084 <prvSwitchTimerLists+0xc4>)
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	6013      	str	r3, [r2, #0]
}
 800a078:	bf00      	nop
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	200019e4 	.word	0x200019e4
 800a084:	200019e8 	.word	0x200019e8

0800a088 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a08e:	f7fd ffe1 	bl	8008054 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a092:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <prvCheckForValidListAndQueue+0x60>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d120      	bne.n	800a0dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a09a:	4814      	ldr	r0, [pc, #80]	; (800a0ec <prvCheckForValidListAndQueue+0x64>)
 800a09c:	f7fd fdf6 	bl	8007c8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0a0:	4813      	ldr	r0, [pc, #76]	; (800a0f0 <prvCheckForValidListAndQueue+0x68>)
 800a0a2:	f7fd fdf3 	bl	8007c8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0a6:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <prvCheckForValidListAndQueue+0x6c>)
 800a0a8:	4a10      	ldr	r2, [pc, #64]	; (800a0ec <prvCheckForValidListAndQueue+0x64>)
 800a0aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0ac:	4b12      	ldr	r3, [pc, #72]	; (800a0f8 <prvCheckForValidListAndQueue+0x70>)
 800a0ae:	4a10      	ldr	r2, [pc, #64]	; (800a0f0 <prvCheckForValidListAndQueue+0x68>)
 800a0b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	4b11      	ldr	r3, [pc, #68]	; (800a0fc <prvCheckForValidListAndQueue+0x74>)
 800a0b8:	4a11      	ldr	r2, [pc, #68]	; (800a100 <prvCheckForValidListAndQueue+0x78>)
 800a0ba:	2110      	movs	r1, #16
 800a0bc:	200a      	movs	r0, #10
 800a0be:	f7fe f953 	bl	8008368 <xQueueGenericCreateStatic>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	4a08      	ldr	r2, [pc, #32]	; (800a0e8 <prvCheckForValidListAndQueue+0x60>)
 800a0c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0c8:	4b07      	ldr	r3, [pc, #28]	; (800a0e8 <prvCheckForValidListAndQueue+0x60>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d005      	beq.n	800a0dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0d0:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <prvCheckForValidListAndQueue+0x60>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	490b      	ldr	r1, [pc, #44]	; (800a104 <prvCheckForValidListAndQueue+0x7c>)
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fe fd6c 	bl	8008bb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0dc:	f7fd ffea 	bl	80080b4 <vPortExitCritical>
}
 800a0e0:	bf00      	nop
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	200019ec 	.word	0x200019ec
 800a0ec:	200019bc 	.word	0x200019bc
 800a0f0:	200019d0 	.word	0x200019d0
 800a0f4:	200019e4 	.word	0x200019e4
 800a0f8:	200019e8 	.word	0x200019e8
 800a0fc:	20001a98 	.word	0x20001a98
 800a100:	200019f8 	.word	0x200019f8
 800a104:	0800a1d0 	.word	0x0800a1d0

0800a108 <__libc_init_array>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	4d0d      	ldr	r5, [pc, #52]	; (800a140 <__libc_init_array+0x38>)
 800a10c:	4c0d      	ldr	r4, [pc, #52]	; (800a144 <__libc_init_array+0x3c>)
 800a10e:	1b64      	subs	r4, r4, r5
 800a110:	10a4      	asrs	r4, r4, #2
 800a112:	2600      	movs	r6, #0
 800a114:	42a6      	cmp	r6, r4
 800a116:	d109      	bne.n	800a12c <__libc_init_array+0x24>
 800a118:	4d0b      	ldr	r5, [pc, #44]	; (800a148 <__libc_init_array+0x40>)
 800a11a:	4c0c      	ldr	r4, [pc, #48]	; (800a14c <__libc_init_array+0x44>)
 800a11c:	f000 f82e 	bl	800a17c <_init>
 800a120:	1b64      	subs	r4, r4, r5
 800a122:	10a4      	asrs	r4, r4, #2
 800a124:	2600      	movs	r6, #0
 800a126:	42a6      	cmp	r6, r4
 800a128:	d105      	bne.n	800a136 <__libc_init_array+0x2e>
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
 800a12c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a130:	4798      	blx	r3
 800a132:	3601      	adds	r6, #1
 800a134:	e7ee      	b.n	800a114 <__libc_init_array+0xc>
 800a136:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13a:	4798      	blx	r3
 800a13c:	3601      	adds	r6, #1
 800a13e:	e7f2      	b.n	800a126 <__libc_init_array+0x1e>
 800a140:	0800a268 	.word	0x0800a268
 800a144:	0800a268 	.word	0x0800a268
 800a148:	0800a268 	.word	0x0800a268
 800a14c:	0800a26c 	.word	0x0800a26c

0800a150 <memcpy>:
 800a150:	440a      	add	r2, r1
 800a152:	4291      	cmp	r1, r2
 800a154:	f100 33ff 	add.w	r3, r0, #4294967295
 800a158:	d100      	bne.n	800a15c <memcpy+0xc>
 800a15a:	4770      	bx	lr
 800a15c:	b510      	push	{r4, lr}
 800a15e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a162:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a166:	4291      	cmp	r1, r2
 800a168:	d1f9      	bne.n	800a15e <memcpy+0xe>
 800a16a:	bd10      	pop	{r4, pc}

0800a16c <memset>:
 800a16c:	4402      	add	r2, r0
 800a16e:	4603      	mov	r3, r0
 800a170:	4293      	cmp	r3, r2
 800a172:	d100      	bne.n	800a176 <memset+0xa>
 800a174:	4770      	bx	lr
 800a176:	f803 1b01 	strb.w	r1, [r3], #1
 800a17a:	e7f9      	b.n	800a170 <memset+0x4>

0800a17c <_init>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	bf00      	nop
 800a180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a182:	bc08      	pop	{r3}
 800a184:	469e      	mov	lr, r3
 800a186:	4770      	bx	lr

0800a188 <_fini>:
 800a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18a:	bf00      	nop
 800a18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a18e:	bc08      	pop	{r3}
 800a190:	469e      	mov	lr, r3
 800a192:	4770      	bx	lr
