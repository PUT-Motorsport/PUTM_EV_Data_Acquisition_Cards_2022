
data_aqusition_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a104  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800a2c4  0800a2c4  0001a2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4ac  0800a4ac  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4ac  0800a4ac  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4ac  0800a4ac  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a4ac  0800a4ac  0001a4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4b4  0800a4b4  0001a4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a4b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b98  20000180  0800a638  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d18  0800a638  00021d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048867  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006399  00000000  00000000  00068a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e0  00000000  00000000  0006edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d8  00000000  00000000  00071090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035305  00000000  00000000  00073168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029641  00000000  00000000  000a846d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014bc78  00000000  00000000  000d1aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021d726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094b0  00000000  00000000  0021d77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000180 	.word	0x20000180
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a2ac 	.word	0x0800a2ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000184 	.word	0x20000184
 80001fc:	0800a2ac 	.word	0x0800a2ac

08000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>:
	 * @param  pBuffer: pointer to data to be read.
	 * @param  RegisterAddr: specifies internal address register to be read.
	 * @param  NumByteToRead: number of bytes to be read.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Read(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4611      	mov	r1, r2
 800020c:	461a      	mov	r2, r3
 800020e:	460b      	mov	r3, r1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4613      	mov	r3, r2
 8000214:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToRead) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f004 f847 	bl	80042b0 <HAL_GPIO_WritePin>
		uint8_t msg = RegisterAddr | 0x80;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000228:	b2db      	uxtb	r3, r3
 800022a:	75fb      	strb	r3, [r7, #23]
		/* Write Reg Address */
		HAL_SPI_Transmit(&hspi1, &msg, 1, 100);
 800022c:	f107 0117 	add.w	r1, r7, #23
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	2201      	movs	r2, #1
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000236:	f006 f938 	bl	80064aa <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, pBuffer, nBytesToRead, 100);
 800023a:	88ba      	ldrh	r2, [r7, #4]
 800023c:	2364      	movs	r3, #100	; 0x64
 800023e:	68b9      	ldr	r1, [r7, #8]
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000242:	f006 faa0 	bl	8006786 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2110      	movs	r1, #16
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f004 f82f 	bl	80042b0 <HAL_GPIO_WritePin>

		return 0;
 8000252:	2300      	movs	r3, #0
	}
 8000254:	4618      	mov	r0, r3
 8000256:	3718      	adds	r7, #24
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200002e0 	.word	0x200002e0

08000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>:
	 * @param  pBuffer: pointer to data to be written.
	 * @param  RegisterAddr: specifies internal address register to be written.
	 * @param  NumByteToWrite: number of bytes to write.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Write(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	4611      	mov	r1, r2
 800026c:	461a      	mov	r2, r3
 800026e:	460b      	mov	r3, r1
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	4613      	mov	r3, r2
 8000274:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToWrite) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f004 f817 	bl	80042b0 <HAL_GPIO_WritePin>
		/* Write Reg Address */
		uint8_t data[2];
		data[0] = RegisterAddr;  // multibyte write
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	753b      	strb	r3, [r7, #20]
		data[1] = *pBuffer;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	757b      	strb	r3, [r7, #21]

		HAL_SPI_Transmit(&hspi1, data, 2, 100);
 800028c:	f107 0114 	add.w	r1, r7, #20
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2202      	movs	r2, #2
 8000294:	4806      	ldr	r0, [pc, #24]	; (80002b0 <_ZN16ISM330DHCXSensor8IO_WriteEPhht+0x50>)
 8000296:	f006 f908 	bl	80064aa <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f004 f805 	bl	80042b0 <HAL_GPIO_WritePin>

		return 0;
 80002a6:	2300      	movs	r3, #0
	}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	200002e0 	.word	0x200002e0

080002b4 <_ZN16ISM330DHCXSensorC1Ev>:
/** Constructor SPI
 *  @param spi object
 *  @param cs_pin the chip select pin
 *  @param spi_speed the SPI speed
 */
ISM330DHCXSensor::ISM330DHCXSensor() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(&hspi1);
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <_ZN16ISM330DHCXSensorC1Ev+0x3c>)
 80002be:	f006 f851 	bl	8006364 <HAL_SPI_Init>
	reg_ctx.write_reg = ISM330DHCX_io_write;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <_ZN16ISM330DHCXSensorC1Ev+0x40>)
 80002c6:	611a      	str	r2, [r3, #16]
	reg_ctx.read_reg = ISM330DHCX_io_read;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <_ZN16ISM330DHCXSensorC1Ev+0x44>)
 80002cc:	615a      	str	r2, [r3, #20]
	reg_ctx.handle = (void*) this;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	619a      	str	r2, [r3, #24]
	address = 0U;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
	acc_is_enabled = 0U;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	735a      	strb	r2, [r3, #13]
}
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200002e0 	.word	0x200002e0
 80002f4:	080002fd 	.word	0x080002fd
 80002f8:	08000327 	.word	0x08000327

080002fc <ISM330DHCX_io_write>:

	return ISM330DHCX_OK;
}

int32_t ISM330DHCX_io_write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer,
		uint16_t nBytesToWrite) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	607a      	str	r2, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	460b      	mov	r3, r1
 800030a:	72fb      	strb	r3, [r7, #11]
 800030c:	4613      	mov	r3, r2
 800030e:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Write(pBuffer, WriteAddr,
 8000310:	893b      	ldrh	r3, [r7, #8]
 8000312:	7afa      	ldrb	r2, [r7, #11]
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f7ff ffa2 	bl	8000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>
 800031c:	4603      	mov	r3, r0
			nBytesToWrite);
}
 800031e:	4618      	mov	r0, r3
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <ISM330DHCX_io_read>:

int32_t ISM330DHCX_io_read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer,
		uint16_t nBytesToRead) {
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	60f8      	str	r0, [r7, #12]
 800032e:	607a      	str	r2, [r7, #4]
 8000330:	461a      	mov	r2, r3
 8000332:	460b      	mov	r3, r1
 8000334:	72fb      	strb	r3, [r7, #11]
 8000336:	4613      	mov	r3, r2
 8000338:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Read(pBuffer, ReadAddr,
 800033a:	893b      	ldrh	r3, [r7, #8]
 800033c:	7afa      	ldrb	r2, [r7, #11]
 800033e:	6879      	ldr	r1, [r7, #4]
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f7ff ff5d 	bl	8000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>
 8000346:	4603      	mov	r3, r0
			nBytesToRead);
}
 8000348:	4618      	mov	r0, r3
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <_ZN8adc_dataC1Ev>:
 *      Author: molso
 */

#include "adc_data.hpp"

adc_data::adc_data() {
 8000350:	b590      	push	{r4, r7, lr}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	461a      	mov	r2, r3
 800035c:	2300      	movs	r3, #0
 800035e:	6013      	str	r3, [r2, #0]
 8000360:	6053      	str	r3, [r2, #4]
 8000362:	6093      	str	r3, [r2, #8]
	// TODO Auto-generated constructor stub
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) data.begin(), (uint32_t) data.size());
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4618      	mov	r0, r3
 8000368:	f000 f823 	bl	80003b2 <_ZNSt5arrayItLj6EE5beginEv>
 800036c:	4604      	mov	r4, r0
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f82a 	bl	80003ca <_ZNKSt5arrayItLj6EE4sizeEv>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	4621      	mov	r1, r4
 800037c:	4803      	ldr	r0, [pc, #12]	; (800038c <_ZN8adc_dataC1Ev+0x3c>)
 800037e:	f001 fdd7 	bl	8001f30 <HAL_ADC_Start_DMA>

}
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4618      	mov	r0, r3
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bd90      	pop	{r4, r7, pc}
 800038c:	200001bc 	.word	0x200001bc

08000390 <_ZN8adc_dataixE14Analog_channel>:
uint16_t adc_data::operator[](Analog_channel channel) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
	return data[static_cast<size_t>(channel)];
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	683a      	ldr	r2, [r7, #0]
 800039e:	4611      	mov	r1, r2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 f81d 	bl	80003e0 <_ZNSt5arrayItLj6EEixEj>
 80003a6:	4603      	mov	r3, r0
 80003a8:	881b      	ldrh	r3, [r3, #0]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <_ZNSt5arrayItLj6EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f81f 	bl	80003fe <_ZNSt5arrayItLj6EE4dataEv>
 80003c0:	4603      	mov	r3, r0
 80003c2:	4618      	mov	r0, r3
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <_ZNKSt5arrayItLj6EE4sizeEv>:
      crend() const noexcept
      { return const_reverse_iterator(begin()); }

      // Capacity.
      constexpr size_type
      size() const noexcept { return _Nm; }
 80003ca:	b480      	push	{r7}
 80003cc:	b083      	sub	sp, #12
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	2306      	movs	r3, #6
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <_ZNSt5arrayItLj6EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6839      	ldr	r1, [r7, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f812 	bl	8000418 <_ZNSt14__array_traitsItLj6EE6_S_refERA6_Ktj>
 80003f4:	4603      	mov	r3, r0
 80003f6:	4618      	mov	r0, r3
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <_ZNSt5arrayItLj6EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f814 	bl	8000436 <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>
 800040e:	4603      	mov	r3, r0
 8000410:	4618      	mov	r0, r3
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <_ZNSt14__array_traitsItLj6EE6_S_refERA6_Ktj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>:
      _S_ptr(const _Type& __t) noexcept
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4618      	mov	r0, r3
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	461a      	mov	r2, r3
 800045c:	2300      	movs	r3, #0
 800045e:	6013      	str	r3, [r2, #0]
 8000460:	6053      	str	r3, [r2, #4]
 8000462:	6093      	str	r3, [r2, #8]
 8000464:	60d3      	str	r3, [r2, #12]
 8000466:	6113      	str	r3, [r2, #16]
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	331c      	adds	r3, #28
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	331c      	adds	r3, #28
 800047c:	6879      	ldr	r1, [r7, #4]
 800047e:	68b8      	ldr	r0, [r7, #8]
 8000480:	f002 fec8 	bl	8003214 <HAL_CAN_GetRxMessage>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
    this->status =
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4618      	mov	r0, r3
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791a      	ldrb	r2, [r3, #4]
 80004a4:	795b      	ldrb	r3, [r3, #5]
 80004a6:	f003 030f 	and.w	r3, r3, #15
 80004aa:	021b      	lsls	r3, r3, #8
 80004ac:	4313      	orrs	r3, r2
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &telemetry_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80004cc:	613b      	str	r3, [r7, #16]
 80004ce:	6938      	ldr	r0, [r7, #16]
 80004d0:	f000 f8f8 	bl	80006c4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>
 80004d4:	6178      	str	r0, [r7, #20]
 80004d6:	6938      	ldr	r0, [r7, #16]
 80004d8:	f000 f900 	bl	80006dc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>
 80004dc:	60f8      	str	r0, [r7, #12]
 80004de:	697a      	ldr	r2, [r7, #20]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d01f      	beq.n	8000526 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ffd2 	bl	8000498 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80004f4:	4602      	mov	r2, r0
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	bf0c      	ite	eq
 80004fe:	2301      	moveq	r3, #1
 8000500:	2300      	movne	r3, #0
 8000502:	b2db      	uxtb	r3, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	d00a      	beq.n	800051e <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6839      	ldr	r1, [r7, #0]
 8000516:	4610      	mov	r0, r2
 8000518:	4798      	blx	r3
        return true;
 800051a:	2301      	movs	r3, #1
 800051c:	e004      	b.n	8000528 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	3304      	adds	r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e7db      	b.n	80004de <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 8000526:	2300      	movs	r3, #0
  }
 8000528:	4618      	mov	r0, r3
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	; 0x30
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff ff83 	bl	800044c <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 8000546:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800054a:	2b00      	cmp	r3, #0
 800054c:	d10d      	bne.n	800056a <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 800054e:	f107 0308 	add.w	r3, r7, #8
 8000552:	4619      	mov	r1, r3
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000556:	f7ff ffb1 	bl	80004bc <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
 800055a:	4603      	mov	r3, r0
 800055c:	f083 0301 	eor.w	r3, r3, #1
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
      // Unknown message
      Error_Handler();
 8000566:	f000 fec3 	bl	80012f0 <Error_Handler>
    }
  }
}
 800056a:	bf00      	nop
 800056c:	3730      	adds	r7, #48	; 0x30
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000000 	.word	0x20000000

08000578 <_Z15init_can_filter17CAN_FilterTypeDef>:

#include "can_functions.hpp"
#include <can_interface.hpp>
extern CAN_HandleTypeDef hcan1;

void init_can_filter(CAN_FilterTypeDef sFilterConfig) {
 8000578:	b084      	sub	sp, #16
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
 800057e:	f107 0c08 	add.w	ip, r7, #8
 8000582:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sFilterConfig.FilterBank = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800058e:	2301      	movs	r3, #1
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = 0x0000;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = 0x0000;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80005aa:	f107 0108 	add.w	r1, r7, #8
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <_Z15init_can_filter17CAN_FilterTypeDef+0x5c>)
 80005b0:	f002 fc47 	bl	8002e42 <HAL_CAN_ConfigFilter>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_Z15init_can_filter17CAN_FilterTypeDef+0x50>
		Error_Handler();
 80005c4:	f000 fe94 	bl	80012f0 <Error_Handler>
	}
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d0:	b004      	add	sp, #16
 80005d2:	4770      	bx	lr
 80005d4:	20000284 	.word	0x20000284

080005d8 <_Z15init_can_configv>:

void init_can_config(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80005dc:	480e      	ldr	r0, [pc, #56]	; (8000618 <_Z15init_can_configv+0x40>)
 80005de:	f002 fcfa 	bl	8002fd6 <HAL_CAN_Start>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	bf14      	ite	ne
 80005e8:	2301      	movne	r3, #1
 80005ea:	2300      	moveq	r3, #0
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <_Z15init_can_configv+0x1e>
		Error_Handler();
 80005f2:	f000 fe7d 	bl	80012f0 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1,
 80005f6:	2103      	movs	r1, #3
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <_Z15init_can_configv+0x40>)
 80005fa:	f002 ff1d 	bl	8003438 <HAL_CAN_ActivateNotification>
 80005fe:	4603      	mov	r3, r0
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf14      	ite	ne
 8000604:	2301      	movne	r3, #1
 8000606:	2300      	moveq	r3, #0
 8000608:	b2db      	uxtb	r3, r3
	if (HAL_CAN_ActivateNotification(&hcan1,
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <_Z15init_can_configv+0x3a>
		Error_Handler();
 800060e:	f000 fe6f 	bl	80012f0 <Error_Handler>
	}
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000284 	.word	0x20000284

0800061c <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4614      	mov	r4, r2
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000638:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3318      	adds	r3, #24
 8000640:	2206      	movs	r2, #6
 8000642:	68b9      	ldr	r1, [r7, #8]
 8000644:	4618      	mov	r0, r3
 8000646:	f009 fe1b 	bl	800a280 <memcpy>
  }
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bdb0      	pop	{r4, r5, r7, pc}

08000654 <_Z19can_main_frame_sendtthh>:

void can_main_frame_send(uint16_t adc_susp_right, uint16_t adc_susp_left, uint8_t brake_pressure_front, uint8_t brake_pressure_back){
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b08d      	sub	sp, #52	; 0x34
 8000658:	af00      	add	r7, sp, #0
 800065a:	4604      	mov	r4, r0
 800065c:	4608      	mov	r0, r1
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	4623      	mov	r3, r4
 8000664:	80fb      	strh	r3, [r7, #6]
 8000666:	4603      	mov	r3, r0
 8000668:	80bb      	strh	r3, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	70fb      	strb	r3, [r7, #3]
 800066e:	4613      	mov	r3, r2
 8000670:	70bb      	strb	r3, [r7, #2]
	AQ_main aq_frame{
		adc_susp_right,
		adc_susp_left, // i brake balance
		brake_pressure_front, // pressure of braking lquid front in %
		brake_pressure_back, // pressure of braking lquid back in %
	};
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	853b      	strh	r3, [r7, #40]	; 0x28
 8000676:	88bb      	ldrh	r3, [r7, #4]
 8000678:	857b      	strh	r3, [r7, #42]	; 0x2a
 800067a:	78fb      	ldrb	r3, [r7, #3]
 800067c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000680:	78bb      	ldrb	r3, [r7, #2]
 8000682:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	auto aq_main_frame = PUTM_CAN::Can_tx_message<AQ_main>(aq_frame, can_tx_header_AQ_MAIN);
 8000686:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <_Z19can_main_frame_sendtthh+0x68>)
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffc3 	bl	800061c <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>
	auto status = aq_main_frame.send(hcan1);
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	4909      	ldr	r1, [pc, #36]	; (80006c0 <_Z19can_main_frame_sendtthh+0x6c>)
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f82b 	bl	80006f8 <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainE4sendER19__CAN_HandleTypeDef>
 80006a2:	4603      	mov	r3, r0
 80006a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	 if (HAL_StatusTypeDef::HAL_OK != status)
 80006a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <_Z19can_main_frame_sendtthh+0x60>
	  {
	    Error_Handler();
 80006b0:	f000 fe1e 	bl	80012f0 <Error_Handler>
	  };

}
 80006b4:	bf00      	nop
 80006b6:	3734      	adds	r7, #52	; 0x34
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	0800a2f0 	.word	0x0800a2f0
 80006c0:	20000284 	.word	0x20000284

080006c4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>:
      begin() noexcept
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f827 	bl	8000720 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>:
      end() noexcept
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f81b 	bl	8000720 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 80006ea:	4603      	mov	r3, r0
 80006ec:	335c      	adds	r3, #92	; 0x5c
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f103 0218 	add.w	r2, r3, #24
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainE4sendER19__CAN_HandleTypeDef+0x24>)
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f002 fca6 	bl	800305e <HAL_CAN_AddTxMessage>
 8000712:	4603      	mov	r3, r0
  }
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000019c 	.word	0x2000019c

08000720 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>:
      data() noexcept
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f805 	bl	800073a <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>
 8000730:	4603      	mov	r3, r0
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <_ZN8PUTM_CAN6DeviceI14Telemetry_MainE8set_dataERKNS_14Can_rx_messageE>:
  explicit constexpr Device(uint32_t ide)
      : Device_base(ide, sizeof(Device_data_type)){};

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
    new_data = true;
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	7993      	ldrb	r3, [r2, #6]
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3307      	adds	r3, #7
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	321c      	adds	r2, #28
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	701a      	strb	r2, [r3, #0]
  }
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <_ZN8PUTM_CAN6DeviceI18TS_rear_suspensionE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	7993      	ldrb	r3, [r2, #6]
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	1dd8      	adds	r0, r3, #7
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	331c      	adds	r3, #28
 8000798:	2208      	movs	r2, #8
 800079a:	4619      	mov	r1, r3
 800079c:	f009 fd70 	bl	800a280 <memcpy>
  }
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_ZN8PUTM_CAN6DeviceI7TS_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	7993      	ldrb	r3, [r2, #6]
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	1dd8      	adds	r0, r3, #7
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	331c      	adds	r3, #28
 80007c4:	2208      	movs	r2, #8
 80007c6:	4619      	mov	r1, r3
 80007c8:	f009 fd5a 	bl	800a280 <memcpy>
  }
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <_ZN8PUTM_CAN6DeviceI20Steering_Wheel_eventE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	7993      	ldrb	r3, [r2, #6]
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	1dd8      	adds	r0, r3, #7
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	331c      	adds	r3, #28
 80007f0:	2203      	movs	r2, #3
 80007f2:	4619      	mov	r1, r3
 80007f4:	f009 fd44 	bl	800a280 <memcpy>
  }
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_ZN8PUTM_CAN6DeviceI19Steering_Wheel_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
    new_data = true;
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	7993      	ldrb	r3, [r2, #6]
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	1dd8      	adds	r0, r3, #7
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	331c      	adds	r3, #28
 800081c:	2203      	movs	r2, #3
 800081e:	4619      	mov	r1, r3
 8000820:	f009 fd2e 	bl	800a280 <memcpy>
  }
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <_ZN8PUTM_CAN6DeviceI7SF_NUCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	7993      	ldrb	r3, [r2, #6]
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3307      	adds	r3, #7
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	321c      	adds	r2, #28
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	601a      	str	r2, [r3, #0]
  }
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <_ZN8PUTM_CAN6DeviceI5SF_WSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	7993      	ldrb	r3, [r2, #6]
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	1dd8      	adds	r0, r3, #7
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	331c      	adds	r3, #28
 8000874:	2208      	movs	r2, #8
 8000876:	4619      	mov	r1, r3
 8000878:	f009 fd02 	bl	800a280 <memcpy>
  }
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <_ZN8PUTM_CAN6DeviceI5SF_DVE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	7993      	ldrb	r3, [r2, #6]
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	1dd8      	adds	r0, r3, #7
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	331c      	adds	r3, #28
 80008a0:	2208      	movs	r2, #8
 80008a2:	4619      	mov	r1, r3
 80008a4:	f009 fcec 	bl	800a280 <memcpy>
  }
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_ZN8PUTM_CAN6DeviceI20SF_CoolingAndVSafetyE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	7993      	ldrb	r3, [r2, #6]
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	1dd8      	adds	r0, r3, #7
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	331c      	adds	r3, #28
 80008cc:	2208      	movs	r2, #8
 80008ce:	4619      	mov	r1, r3
 80008d0:	f009 fcd6 	bl	800a280 <memcpy>
  }
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <_ZN8PUTM_CAN6DeviceI11SF_FrontBoxE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	7993      	ldrb	r3, [r2, #6]
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	1dd8      	adds	r0, r3, #7
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	331c      	adds	r3, #28
 80008f8:	2208      	movs	r2, #8
 80008fa:	4619      	mov	r1, r3
 80008fc:	f009 fcc0 	bl	800a280 <memcpy>
  }
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <_ZN8PUTM_CAN6DeviceI7SF_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	7993      	ldrb	r3, [r2, #6]
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	1dd8      	adds	r0, r3, #7
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	331c      	adds	r3, #28
 8000924:	2203      	movs	r2, #3
 8000926:	4619      	mov	r1, r3
 8000928:	f009 fcaa 	bl	800a280 <memcpy>
  }
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_ZN8PUTM_CAN6DeviceI14Lap_timer_PassE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	7993      	ldrb	r3, [r2, #6]
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3307      	adds	r3, #7
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	321c      	adds	r2, #28
 8000950:	8812      	ldrh	r2, [r2, #0]
 8000952:	b292      	uxth	r2, r2
 8000954:	801a      	strh	r2, [r3, #0]
  }
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_ZN8PUTM_CAN6DeviceI14Lap_timer_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	7993      	ldrb	r3, [r2, #6]
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3307      	adds	r3, #7
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	321c      	adds	r2, #28
 800097e:	7812      	ldrb	r2, [r2, #0]
 8000980:	701a      	strb	r2, [r3, #0]
  }
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <_ZN8PUTM_CAN6DeviceI17Dash_lap_finishedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	7993      	ldrb	r3, [r2, #6]
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3307      	adds	r3, #7
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	321c      	adds	r2, #28
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	601a      	str	r2, [r3, #0]
  }
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <_ZN8PUTM_CAN6DeviceI27Dash_steering_wheel_requestE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	7993      	ldrb	r3, [r2, #6]
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3307      	adds	r3, #7
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	321c      	adds	r2, #28
 80009d6:	7812      	ldrb	r2, [r2, #0]
 80009d8:	701a      	strb	r2, [r3, #0]
  }
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_ZN8PUTM_CAN6DeviceI26Dash_Smart_Fuses_FAN_speedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
    new_data = true;
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	7993      	ldrb	r3, [r2, #6]
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3307      	adds	r3, #7
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	321c      	adds	r2, #28
 8000a02:	8812      	ldrh	r2, [r2, #0]
 8000a04:	b292      	uxth	r2, r2
 8000a06:	801a      	strh	r2, [r3, #0]
  }
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_ZN8PUTM_CAN6DeviceI8Dash_TCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	7993      	ldrb	r3, [r2, #6]
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	1dd8      	adds	r0, r3, #7
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	331c      	adds	r3, #28
 8000a30:	2208      	movs	r2, #8
 8000a32:	4619      	mov	r1, r3
 8000a34:	f009 fc24 	bl	800a280 <memcpy>
  }
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_ZN8PUTM_CAN6DeviceI9Dash_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	7993      	ldrb	r3, [r2, #6]
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3307      	adds	r3, #7
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	321c      	adds	r2, #28
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	701a      	strb	r2, [r3, #0]
  }
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_ZN8PUTM_CAN6DeviceI18BMS_LV_temperatureE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	7993      	ldrb	r3, [r2, #6]
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	1dd8      	adds	r0, r3, #7
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	331c      	adds	r3, #28
 8000a88:	2208      	movs	r2, #8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f009 fbf8 	bl	800a280 <memcpy>
  }
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN8PUTM_CAN6DeviceI11BMS_LV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	7993      	ldrb	r3, [r2, #6]
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	1dd8      	adds	r0, r3, #7
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	331c      	adds	r3, #28
 8000ab4:	2206      	movs	r2, #6
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f009 fbe2 	bl	800a280 <memcpy>
  }
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_ZN8PUTM_CAN6DeviceI11BMS_HV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	7993      	ldrb	r3, [r2, #6]
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1dd8      	adds	r0, r3, #7
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	331c      	adds	r3, #28
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f009 fbcc 	bl	800a280 <memcpy>
  }
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_ZN8PUTM_CAN6DeviceI7AQ_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	7993      	ldrb	r3, [r2, #6]
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	1dd8      	adds	r0, r3, #7
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	331c      	adds	r3, #28
 8000b0c:	2206      	movs	r2, #6
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f009 fbb6 	bl	800a280 <memcpy>
  }
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN8PUTM_CAN6DeviceI9Apps_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	7993      	ldrb	r3, [r2, #6]
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	1dd8      	adds	r0, r3, #7
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	331c      	adds	r3, #28
 8000b38:	2205      	movs	r2, #5
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f009 fba0 	bl	800a280 <memcpy>
  }
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_Z41__static_initialization_and_destruction_0ii>:
}

void ism330_read(int32_t *acceleration, int32_t *angular_rate) {
	AccGyr.ACC_GetAxes(acceleration);
	AccGyr.GYRO_GetAxes(angular_rate);
}
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d107      	bne.n	8000b68 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d102      	bne.n	8000b68 <_Z41__static_initialization_and_destruction_0ii+0x20>
ISM330DHCXSensor AccGyr;
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000b64:	f7ff fba6 	bl	80002b4 <_ZN16ISM330DHCXSensorC1Ev>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001a0 	.word	0x200001a0

08000b74 <_GLOBAL__sub_I_AccGyr>:
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff ffe3 	bl	8000b48 <_Z41__static_initialization_and_destruction_0ii>
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b88:	f000 fe5f 	bl	800184a <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b8c:	f000 f82e 	bl	8000bec <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b90:	f000 fa98 	bl	80010c4 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8000b94:	f000 fa6c 	bl	8001070 <_ZL11MX_DMA_Initv>
	MX_ADC1_Init();
 8000b98:	f000 f88a 	bl	8000cb0 <_ZL12MX_ADC1_Initv>
	MX_CAN1_Init();
 8000b9c:	f000 f97c 	bl	8000e98 <_ZL12MX_CAN1_Initv>
	MX_RTC_Init();
 8000ba0:	f000 f9b4 	bl	8000f0c <_ZL11MX_RTC_Initv>
	MX_SPI1_Init();
 8000ba4:	f000 fa22 	bl	8000fec <_ZL12MX_SPI1_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000ba8:	f006 fdf8 	bl	800779c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000bac:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <main+0x50>)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <main+0x54>)
 8000bb2:	f006 fe3d 	bl	8007830 <osThreadNew>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <main+0x58>)
 8000bba:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of blink01 */
	blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <main+0x5c>)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <main+0x60>)
 8000bc2:	f006 fe35 	bl	8007830 <osThreadNew>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <main+0x64>)
 8000bca:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000bcc:	f006 fe0a 	bl	80077e4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000bd0:	e7fe      	b.n	8000bd0 <main+0x4c>
 8000bd2:	bf00      	nop
 8000bd4:	0800a41c 	.word	0x0800a41c
 8000bd8:	08001225 	.word	0x08001225
 8000bdc:	20000390 	.word	0x20000390
 8000be0:	0800a440 	.word	0x0800a440
 8000be4:	08001235 	.word	0x08001235
 8000be8:	20000394 	.word	0x20000394

08000bec <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b098      	sub	sp, #96	; 0x60
 8000bf0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bf2:	f107 0318 	add.w	r3, r7, #24
 8000bf6:	2248      	movs	r2, #72	; 0x48
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f009 fb4e 	bl	800a29c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f003 fb8e 	bl	8004330 <HAL_PWREx_ControlVoltageScaling>
 8000c14:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	bf14      	ite	ne
 8000c1a:	2301      	movne	r3, #1
 8000c1c:	2300      	moveq	r3, #0
 8000c1e:	b2db      	uxtb	r3, r3
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <_Z18SystemClock_Configv+0x3c>
		Error_Handler();
 8000c24:	f000 fb64 	bl	80012f0 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000c28:	2318      	movs	r3, #24
 8000c2a:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c38:	2360      	movs	r3, #96	; 0x60
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c40:	2301      	movs	r3, #1
 8000c42:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 60;
 8000c48:	233c      	movs	r3, #60	; 0x3c
 8000c4a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fc65 	bl	800452c <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bf14      	ite	ne
 8000c68:	2301      	movne	r3, #1
 8000c6a:	2300      	moveq	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <_Z18SystemClock_Configv+0x8a>
		Error_Handler();
 8000c72:	f000 fb3d 	bl	80012f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c76:	230f      	movs	r3, #15
 8000c78:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 f8d4 	bl	8004e3c <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 8000ca4:	f000 fb24 	bl	80012f0 <Error_Handler>
	}
}
 8000ca8:	bf00      	nop
 8000caa:	3760      	adds	r7, #96	; 0x60
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000cd2:	4b69      	ldr	r3, [pc, #420]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cd4:	4a69      	ldr	r2, [pc, #420]	; (8000e7c <_ZL12MX_ADC1_Initv+0x1cc>)
 8000cd6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000cd8:	4b67      	ldr	r3, [pc, #412]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cde:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce0:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce6:	4b64      	ldr	r3, [pc, #400]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cec:	4b62      	ldr	r3, [pc, #392]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf2:	4b61      	ldr	r3, [pc, #388]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cf8:	4b5f      	ldr	r3, [pc, #380]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000cfe:	4b5e      	ldr	r3, [pc, #376]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 6;
 8000d04:	4b5c      	ldr	r3, [pc, #368]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d06:	2206      	movs	r2, #6
 8000d08:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d0a:	4b5b      	ldr	r3, [pc, #364]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d12:	4b59      	ldr	r3, [pc, #356]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d18:	4b57      	ldr	r3, [pc, #348]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d1e:	4b56      	ldr	r3, [pc, #344]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d26:	4b54      	ldr	r3, [pc, #336]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000d2c:	4b52      	ldr	r3, [pc, #328]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000d34:	4850      	ldr	r0, [pc, #320]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d36:	f000 ffa9 	bl	8001c8c <HAL_ADC_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf14      	ite	ne
 8000d40:	2301      	movne	r3, #1
 8000d42:	2300      	moveq	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <_ZL12MX_ADC1_Initv+0x9e>
		Error_Handler();
 8000d4a:	f000 fad1 	bl	80012f0 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4847      	ldr	r0, [pc, #284]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d5a:	f001 fed3 	bl	8002b04 <HAL_ADCEx_MultiModeConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf14      	ite	ne
 8000d64:	2301      	movne	r3, #1
 8000d66:	2300      	moveq	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <_ZL12MX_ADC1_Initv+0xc2>
		Error_Handler();
 8000d6e:	f000 fabf 	bl	80012f0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <_ZL12MX_ADC1_Initv+0x1d0>)
 8000d74:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d76:	2306      	movs	r3, #6
 8000d78:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7e:	237f      	movs	r3, #127	; 0x7f
 8000d80:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d82:	2304      	movs	r3, #4
 8000d84:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	483a      	ldr	r0, [pc, #232]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d90:	f001 f9a0 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <_ZL12MX_ADC1_Initv+0xf8>
		Error_Handler();
 8000da4:	f000 faa4 	bl	80012f0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <_ZL12MX_ADC1_Initv+0x1d4>)
 8000daa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dac:	230c      	movs	r3, #12
 8000dae:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4830      	ldr	r0, [pc, #192]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000db6:	f001 f98d 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bf14      	ite	ne
 8000dc0:	2301      	movne	r3, #1
 8000dc2:	2300      	moveq	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <_ZL12MX_ADC1_Initv+0x11e>
		Error_Handler();
 8000dca:	f000 fa91 	bl	80012f0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <_ZL12MX_ADC1_Initv+0x1d8>)
 8000dd0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dd2:	2312      	movs	r3, #18
 8000dd4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4827      	ldr	r0, [pc, #156]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000ddc:	f001 f97a 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bf14      	ite	ne
 8000de6:	2301      	movne	r3, #1
 8000de8:	2300      	moveq	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <_ZL12MX_ADC1_Initv+0x144>
		Error_Handler();
 8000df0:	f000 fa7e 	bl	80012f0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <_ZL12MX_ADC1_Initv+0x1dc>)
 8000df6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000df8:	2318      	movs	r3, #24
 8000dfa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481d      	ldr	r0, [pc, #116]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000e02:	f001 f967 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <_ZL12MX_ADC1_Initv+0x16a>
		Error_Handler();
 8000e16:	f000 fa6b 	bl	80012f0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <_ZL12MX_ADC1_Initv+0x1e0>)
 8000e1c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e22:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4812      	ldr	r0, [pc, #72]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000e2e:	f001 f951 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <_ZL12MX_ADC1_Initv+0x196>
		Error_Handler();
 8000e42:	f000 fa55 	bl	80012f0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <_ZL12MX_ADC1_Initv+0x1e4>)
 8000e48:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e4a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000e4e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000e56:	f001 f93d 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	bf14      	ite	ne
 8000e60:	2301      	movne	r3, #1
 8000e62:	2300      	moveq	r3, #0
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <_ZL12MX_ADC1_Initv+0x1be>
		Error_Handler();
 8000e6a:	f000 fa41 	bl	80012f0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001bc 	.word	0x200001bc
 8000e7c:	50040000 	.word	0x50040000
 8000e80:	04300002 	.word	0x04300002
 8000e84:	08600004 	.word	0x08600004
 8000e88:	0c900008 	.word	0x0c900008
 8000e8c:	10c00010 	.word	0x10c00010
 8000e90:	36902000 	.word	0x36902000
 8000e94:	3ac04000 	.word	0x3ac04000

08000e98 <_ZL12MX_CAN1_Initv>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <_ZL12MX_CAN1_Initv+0x70>)
 8000ea0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 12;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000ea4:	220c      	movs	r2, #12
 8000ea6:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000eb6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000eba:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <_ZL12MX_CAN1_Initv+0x6c>)
 8000ee8:	f001 feb0 	bl	8002c4c <HAL_CAN_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bf14      	ite	ne
 8000ef2:	2301      	movne	r3, #1
 8000ef4:	2300      	moveq	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <_ZL12MX_CAN1_Initv+0x68>
		Error_Handler();
 8000efc:	f000 f9f8 	bl	80012f0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000284 	.word	0x20000284
 8000f08:	40006400 	.word	0x40006400

08000f0c <_ZL11MX_RTC_Initv>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f26:	4a30      	ldr	r2, [pc, #192]	; (8000fe8 <_ZL11MX_RTC_Initv+0xdc>)
 8000f28:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f32:	227f      	movs	r2, #127	; 0x7f
 8000f34:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f38:	22ff      	movs	r2, #255	; 0xff
 8000f3a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f54:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000f56:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000f5c:	4821      	ldr	r0, [pc, #132]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f5e:	f004 ff8f 	bl	8005e80 <HAL_RTC_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf14      	ite	ne
 8000f68:	2301      	movne	r3, #1
 8000f6a:	2300      	moveq	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <_ZL11MX_RTC_Initv+0x6a>
		Error_Handler();
 8000f72:	f000 f9bd 	bl	80012f0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4814      	ldr	r0, [pc, #80]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000f92:	f005 f805 	bl	8005fa0 <HAL_RTC_SetTime>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bf14      	ite	ne
 8000f9c:	2301      	movne	r3, #1
 8000f9e:	2300      	moveq	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <_ZL11MX_RTC_Initv+0x9e>
		Error_Handler();
 8000fa6:	f000 f9a3 	bl	80012f0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000faa:	2301      	movs	r3, #1
 8000fac:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <_ZL11MX_RTC_Initv+0xd8>)
 8000fc2:	f005 f88d 	bl	80060e0 <HAL_RTC_SetDate>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <_ZL11MX_RTC_Initv+0xce>
		Error_Handler();
 8000fd6:	f000 f98b 	bl	80012f0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002ac 	.word	0x200002ac
 8000fe8:	40002800 	.word	0x40002800

08000fec <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <_ZL12MX_SPI1_Initv+0x80>)
 8000ff4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ff8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ffc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 8001006:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800100a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 800100e:	2202      	movs	r2, #2
 8001010:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 8001014:	2201      	movs	r2, #1
 8001016:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 800101a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 8001022:	2230      	movs	r2, #48	; 0x30
 8001024:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 800103a:	2207      	movs	r2, #7
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 8001040:	2200      	movs	r2, #0
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 8001046:	2200      	movs	r2, #0
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <_ZL12MX_SPI1_Initv+0x7c>)
 800104c:	f005 f98a 	bl	8006364 <HAL_SPI_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf14      	ite	ne
 8001056:	2301      	movne	r3, #1
 8001058:	2300      	moveq	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 8001060:	f000 f946 	bl	80012f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200002e0 	.word	0x200002e0
 800106c:	40013000 	.word	0x40013000

08001070 <_ZL11MX_DMA_Initv>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <_ZL11MX_DMA_Initv+0x50>)
 8001078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <_ZL11MX_DMA_Initv+0x50>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6493      	str	r3, [r2, #72]	; 0x48
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <_ZL11MX_DMA_Initv+0x50>)
 8001084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <_ZL11MX_DMA_Initv+0x50>)
 8001090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <_ZL11MX_DMA_Initv+0x50>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6493      	str	r3, [r2, #72]	; 0x48
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <_ZL11MX_DMA_Initv+0x50>)
 800109c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2105      	movs	r1, #5
 80010aa:	200b      	movs	r0, #11
 80010ac:	f002 fcd2 	bl	8003a54 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b0:	200b      	movs	r0, #11
 80010b2:	f002 fceb 	bl	8003a8c <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <_ZL12MX_GPIO_Initv+0x154>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <_ZL12MX_GPIO_Initv+0x154>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <_ZL12MX_GPIO_Initv+0x154>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b49      	ldr	r3, [pc, #292]	; (8001218 <_ZL12MX_GPIO_Initv+0x154>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a48      	ldr	r2, [pc, #288]	; (8001218 <_ZL12MX_GPIO_Initv+0x154>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b46      	ldr	r3, [pc, #280]	; (8001218 <_ZL12MX_GPIO_Initv+0x154>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b43      	ldr	r3, [pc, #268]	; (8001218 <_ZL12MX_GPIO_Initv+0x154>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a42      	ldr	r2, [pc, #264]	; (8001218 <_ZL12MX_GPIO_Initv+0x154>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b40      	ldr	r3, [pc, #256]	; (8001218 <_ZL12MX_GPIO_Initv+0x154>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2110      	movs	r1, #16
 8001126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112a:	f003 f8c1 	bl	80042b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800112e:	2200      	movs	r2, #0
 8001130:	f24f 0180 	movw	r1, #61568	; 0xf080
 8001134:	4839      	ldr	r0, [pc, #228]	; (800121c <_ZL12MX_GPIO_Initv+0x158>)
 8001136:	f003 f8bb 	bl	80042b0 <HAL_GPIO_WritePin>
			LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin | GPIO_PIN_7,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8,
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001140:	4837      	ldr	r0, [pc, #220]	; (8001220 <_ZL12MX_GPIO_Initv+0x15c>)
 8001142:	f003 f8b5 	bl	80042b0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001146:	2310      	movs	r3, #16
 8001148:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114e:	2302      	movs	r3, #2
 8001150:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f002 ff14 	bl	8003f8c <HAL_GPIO_Init>

	/*Configure GPIO pins : EEPROM_SCL_Pin EEPROM_SDA_Pin */
	GPIO_InitStruct.Pin = EEPROM_SCL_Pin | EEPROM_SDA_Pin;
 8001164:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001168:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116a:	2312      	movs	r3, #18
 800116c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001176:	2304      	movs	r3, #4
 8001178:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4619      	mov	r1, r3
 8001180:	4826      	ldr	r0, [pc, #152]	; (800121c <_ZL12MX_GPIO_Initv+0x158>)
 8001182:	f002 ff03 	bl	8003f8c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
	 PB7 */
	GPIO_InitStruct.Pin =
 8001186:	f24f 0380 	movw	r3, #61568	; 0xf080
 800118a:	60fb      	str	r3, [r7, #12]
			LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4619      	mov	r1, r3
 800119e:	481f      	ldr	r0, [pc, #124]	; (800121c <_ZL12MX_GPIO_Initv+0x158>)
 80011a0:	f002 fef4 	bl	8003f8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 80011a4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80011a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4619      	mov	r1, r3
 80011bc:	4818      	ldr	r0, [pc, #96]	; (8001220 <_ZL12MX_GPIO_Initv+0x15c>)
 80011be:	f002 fee5 	bl	8003f8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4619      	mov	r1, r3
 80011d6:	4812      	ldr	r0, [pc, #72]	; (8001220 <_ZL12MX_GPIO_Initv+0x15c>)
 80011d8:	f002 fed8 	bl	8003f8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80011dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f4:	f002 feca 	bl	8003f8c <HAL_GPIO_Init>

	/*Configure GPIO pin : ISM_INT1_Pin */
	GPIO_InitStruct.Pin = ISM_INT1_Pin;
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ISM_INT1_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <_ZL12MX_GPIO_Initv+0x158>)
 800120c:	f002 febe 	bl	8003f8c <HAL_GPIO_Init>

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800

08001224 <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f006 fb91 	bl	8007954 <osDelay>
 8001232:	e7fb      	b.n	800122c <_Z16StartDefaultTaskPv+0x8>

08001234 <_Z12StartBlink01Pv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink01 */

void StartBlink01(void *argument) {
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	b08d      	sub	sp, #52	; 0x34
 8001238:	af06      	add	r7, sp, #24
 800123a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlink01 */
	init_can_filter(sFilterConfig);
 800123c:	4e22      	ldr	r6, [pc, #136]	; (80012c8 <_Z12StartBlink01Pv+0x94>)
 800123e:	466d      	mov	r5, sp
 8001240:	f106 0410 	add.w	r4, r6, #16
 8001244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800124c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001250:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001254:	f7ff f990 	bl	8000578 <_Z15init_can_filter17CAN_FilterTypeDef>
	init_can_config();
 8001258:	f7ff f9be 	bl	80005d8 <_Z15init_can_configv>
	adc_data adc_data;
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f875 	bl	8000350 <_ZN8adc_dataC1Ev>

	/* Infinite loop */
	for (;;) {

		can_main_frame_send(adc_data[Analog_channel::SUSP_R], adc_data[Analog_channel::SUSP_L], braking_pressure_percent_calculation( adc_data[Analog_channel::BRAKE_FRONT]), braking_pressure_percent_calculation( adc_data[Analog_channel::BRAKE_BACK]));
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2102      	movs	r1, #2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f88f 	bl	8000390 <_ZN8adc_dataixE14Analog_channel>
 8001272:	4603      	mov	r3, r0
 8001274:	461c      	mov	r4, r3
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2105      	movs	r1, #5
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f887 	bl	8000390 <_ZN8adc_dataixE14Analog_channel>
 8001282:	4603      	mov	r3, r0
 8001284:	461d      	mov	r5, r3
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f87f 	bl	8000390 <_ZN8adc_dataixE14Analog_channel>
 8001292:	4603      	mov	r3, r0
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f831 	bl	80012fc <_Z36braking_pressure_percent_calculationt>
 800129a:	4603      	mov	r3, r0
 800129c:	461e      	mov	r6, r3
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	2101      	movs	r1, #1
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f873 	bl	8000390 <_ZN8adc_dataixE14Analog_channel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f825 	bl	80012fc <_Z36braking_pressure_percent_calculationt>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4632      	mov	r2, r6
 80012b6:	4629      	mov	r1, r5
 80012b8:	4620      	mov	r0, r4
 80012ba:	f7ff f9cb 	bl	8000654 <_Z19can_main_frame_sendtthh>
		osDelay(10);
 80012be:	200a      	movs	r0, #10
 80012c0:	f006 fb48 	bl	8007954 <osDelay>
		can_main_frame_send(adc_data[Analog_channel::SUSP_R], adc_data[Analog_channel::SUSP_L], braking_pressure_percent_calculation( adc_data[Analog_channel::BRAKE_FRONT]), braking_pressure_percent_calculation( adc_data[Analog_channel::BRAKE_BACK]));
 80012c4:	e7cf      	b.n	8001266 <_Z12StartBlink01Pv+0x32>
 80012c6:	bf00      	nop
 80012c8:	20000398 	.word	0x20000398

080012cc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80012de:	f000 facd 	bl	800187c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40001000 	.word	0x40001000

080012f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <_Z36braking_pressure_percent_calculationt>:
 */
	return adc_value / 262;

}

uint8_t braking_pressure_percent_calculation(uint16_t pressure_in_bar){
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
	return (pressure_in_bar * 100) / 655535;
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	2264      	movs	r2, #100	; 0x64
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	4a06      	ldr	r2, [pc, #24]	; (8001328 <_Z36braking_pressure_percent_calculationt+0x2c>)
 8001310:	fb82 1203 	smull	r1, r2, r2, r3
 8001314:	1492      	asrs	r2, r2, #18
 8001316:	17db      	asrs	r3, r3, #31
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b2db      	uxtb	r3, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	665f66e1 	.word	0x665f66e1

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_MspInit+0x5c>)
 8001334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_MspInit+0x5c>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6613      	str	r3, [r2, #96]	; 0x60
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_MspInit+0x5c>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_MspInit+0x5c>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_MspInit+0x5c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6593      	str	r3, [r2, #88]	; 0x58
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_MspInit+0x5c>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	210f      	movs	r1, #15
 8001366:	f06f 0001 	mvn.w	r0, #1
 800136a:	f002 fb73 	bl	8003a54 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 5, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2105      	movs	r1, #5
 8001372:	2001      	movs	r0, #1
 8001374:	f002 fb6e 	bl	8003a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001378:	2001      	movs	r0, #1
 800137a:	f002 fb87 	bl	8003a8c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000

0800138c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0b0      	sub	sp, #192	; 0xc0
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2298      	movs	r2, #152	; 0x98
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f008 ff75 	bl	800a29c <memset>
  if(hadc->Instance==ADC1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a3c      	ldr	r2, [pc, #240]	; (80014a8 <HAL_ADC_MspInit+0x11c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d171      	bne.n	80014a0 <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80013d2:	2310      	movs	r3, #16
 80013d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013da:	2302      	movs	r3, #2
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013de:	2302      	movs	r3, #2
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80013e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fff3 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80013f8:	f7ff ff7a 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013fc:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_ADC_MspInit+0x120>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	4a2a      	ldr	r2, [pc, #168]	; (80014ac <HAL_ADC_MspInit+0x120>)
 8001402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <HAL_ADC_MspInit+0x120>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <HAL_ADC_MspInit+0x120>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	4a24      	ldr	r2, [pc, #144]	; (80014ac <HAL_ADC_MspInit+0x120>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_ADC_MspInit+0x120>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 800142c:	233f      	movs	r3, #63	; 0x3f
 800142e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |ADC4_Pin|ADC5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001432:	230b      	movs	r3, #11
 8001434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001442:	4619      	mov	r1, r3
 8001444:	481a      	ldr	r0, [pc, #104]	; (80014b0 <HAL_ADC_MspInit+0x124>)
 8001446:	f002 fda1 	bl	8003f8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 800144c:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <HAL_ADC_MspInit+0x12c>)
 800144e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 8001452:	2205      	movs	r2, #5
 8001454:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 800146a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 8001472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001476:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 800147a:	2220      	movs	r2, #32
 800147c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 8001486:	f002 fb0f 	bl	8003aa8 <HAL_DMA_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8001490:	f7ff ff2e 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 8001498:	651a      	str	r2, [r3, #80]	; 0x50
 800149a:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_ADC_MspInit+0x128>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	37c0      	adds	r7, #192	; 0xc0
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	50040000 	.word	0x50040000
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000800 	.word	0x48000800
 80014b4:	20000224 	.word	0x20000224
 80014b8:	40020008 	.word	0x40020008

080014bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <HAL_CAN_MspInit+0x8c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d130      	bne.n	8001540 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_CAN_MspInit+0x90>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_CAN_MspInit+0x90>)
 80014e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_CAN_MspInit+0x90>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_CAN_MspInit+0x90>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a14      	ldr	r2, [pc, #80]	; (800154c <HAL_CAN_MspInit+0x90>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_CAN_MspInit+0x90>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800150e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001520:	2309      	movs	r3, #9
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	4809      	ldr	r0, [pc, #36]	; (8001550 <HAL_CAN_MspInit+0x94>)
 800152c:	f002 fd2e 	bl	8003f8c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2105      	movs	r1, #5
 8001534:	2013      	movs	r0, #19
 8001536:	f002 fa8d 	bl	8003a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800153a:	2013      	movs	r0, #19
 800153c:	f002 faa6 	bl	8003a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40006400 	.word	0x40006400
 800154c:	40021000 	.word	0x40021000
 8001550:	48000400 	.word	0x48000400

08001554 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0aa      	sub	sp, #168	; 0xa8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	2298      	movs	r2, #152	; 0x98
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f008 fe99 	bl	800a29c <memset>
  if(hrtc->Instance==RTC)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <HAL_RTC_MspInit+0x74>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d124      	bne.n	80015be <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001578:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800157a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4618      	mov	r0, r3
 8001588:	f003 ff26 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001592:	f7ff fead 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_RTC_MspInit+0x78>)
 8001598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_RTC_MspInit+0x78>)
 800159e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_RTC_MspInit+0x78>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_RTC_MspInit+0x78>)
 80015ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b0:	6593      	str	r3, [r2, #88]	; 0x58
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_RTC_MspInit+0x78>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	37a8      	adds	r7, #168	; 0xa8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40002800 	.word	0x40002800
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_SPI_MspInit+0x7c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d128      	bne.n	8001644 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_SPI_MspInit+0x80>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	4a16      	ldr	r2, [pc, #88]	; (8001650 <HAL_SPI_MspInit+0x80>)
 80015f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015fc:	6613      	str	r3, [r2, #96]	; 0x60
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_SPI_MspInit+0x80>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_SPI_MspInit+0x80>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_SPI_MspInit+0x80>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_SPI_MspInit+0x80>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001622:	23e0      	movs	r3, #224	; 0xe0
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001632:	2305      	movs	r3, #5
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f002 fca4 	bl	8003f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40013000 	.word	0x40013000
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_TIM_Base_MspInit+0x44>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d113      	bne.n	800168e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_TIM_Base_MspInit+0x48>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	4a0c      	ldr	r2, [pc, #48]	; (800169c <HAL_TIM_Base_MspInit+0x48>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6593      	str	r3, [r2, #88]	; 0x58
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_TIM_Base_MspInit+0x48>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2105      	movs	r1, #5
 8001682:	201d      	movs	r0, #29
 8001684:	f002 f9e6 	bl	8003a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001688:	201d      	movs	r0, #29
 800168a:	f002 f9ff 	bl	8003a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40000400 	.word	0x40000400
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	2036      	movs	r0, #54	; 0x36
 80016b6:	f002 f9cd 	bl	8003a54 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016ba:	2036      	movs	r0, #54	; 0x36
 80016bc:	f002 f9e6 	bl	8003a8c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_InitTick+0x9c>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	4a1d      	ldr	r2, [pc, #116]	; (800173c <HAL_InitTick+0x9c>)
 80016c6:	f043 0310 	orr.w	r3, r3, #16
 80016ca:	6593      	str	r3, [r2, #88]	; 0x58
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_InitTick+0x9c>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016d8:	f107 0210 	add.w	r2, r7, #16
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fd84 	bl	80051f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016e8:	f003 fd6c 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 80016ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	4a13      	ldr	r2, [pc, #76]	; (8001740 <HAL_InitTick+0xa0>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9b      	lsrs	r3, r3, #18
 80016f8:	3b01      	subs	r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_InitTick+0xa4>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <HAL_InitTick+0xa8>)
 8001700:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_InitTick+0xa4>)
 8001704:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001708:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_InitTick+0xa4>)
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_InitTick+0xa4>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_InitTick+0xa4>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <HAL_InitTick+0xa4>)
 800171e:	f005 fd31 	bl	8007184 <HAL_TIM_Base_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d104      	bne.n	8001732 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <HAL_InitTick+0xa4>)
 800172a:	f005 fd83 	bl	8007234 <HAL_TIM_Base_Start_IT>
 800172e:	4603      	mov	r3, r0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3730      	adds	r7, #48	; 0x30
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	431bde83 	.word	0x431bde83
 8001744:	20001c88 	.word	0x20001c88
 8001748:	40001000 	.word	0x40001000

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 800177c:	f002 fe7c 	bl	8004478 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <DMA1_Channel1_IRQHandler+0x10>)
 800178a:	f002 fab0 	bl	8003cee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000224 	.word	0x20000224

08001798 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <CAN1_TX_IRQHandler+0x10>)
 800179e:	f001 fe71 	bl	8003484 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000284 	.word	0x20000284

080017ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <TIM3_IRQHandler+0x10>)
 80017b2:	f005 fdaf 	bl	8007314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000344 	.word	0x20000344

080017c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM6_DAC_IRQHandler+0x10>)
 80017c6:	f005 fda5 	bl	8007314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20001c88 	.word	0x20001c88

080017d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001830 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017fc:	f7ff ffea 	bl	80017d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <LoopForever+0x6>)
  ldr r1, =_edata
 8001802:	490d      	ldr	r1, [pc, #52]	; (8001838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <LoopForever+0xe>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001818:	4c0a      	ldr	r4, [pc, #40]	; (8001844 <LoopForever+0x16>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001826:	f008 fd07 	bl	800a238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800182a:	f7ff f9ab 	bl	8000b84 <main>

0800182e <LoopForever>:

LoopForever:
    b LoopForever
 800182e:	e7fe      	b.n	800182e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001830:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800183c:	0800a4b8 	.word	0x0800a4b8
  ldr r2, =_sbss
 8001840:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001844:	20001d18 	.word	0x20001d18

08001848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC1_2_IRQHandler>

0800184a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f002 f8f2 	bl	8003a3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800185a:	200f      	movs	r0, #15
 800185c:	f7ff ff20 	bl	80016a0 <HAL_InitTick>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	71fb      	strb	r3, [r7, #7]
 800186a:	e001      	b.n	8001870 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800186c:	f7ff fd5e 	bl	800132c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001870:	79fb      	ldrb	r3, [r7, #7]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000178 	.word	0x20000178
 80018a0:	20001cd4 	.word	0x20001cd4

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20001cd4 	.word	0x20001cd4

080018bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3360      	adds	r3, #96	; 0x60
 8001936:	461a      	mov	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <LL_ADC_SetOffset+0x44>)
 8001946:	4013      	ands	r3, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	4313      	orrs	r3, r2
 8001954:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800195c:	bf00      	nop
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	03fff000 	.word	0x03fff000

0800196c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3360      	adds	r3, #96	; 0x60
 800197a:	461a      	mov	r2, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3360      	adds	r3, #96	; 0x60
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	431a      	orrs	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	615a      	str	r2, [r3, #20]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b087      	sub	sp, #28
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3330      	adds	r3, #48	; 0x30
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	4413      	add	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	211f      	movs	r1, #31
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	0e9b      	lsrs	r3, r3, #26
 8001a52:	f003 011f 	and.w	r1, r3, #31
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	431a      	orrs	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a66:	bf00      	nop
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b087      	sub	sp, #28
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3314      	adds	r3, #20
 8001a82:	461a      	mov	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	0e5b      	lsrs	r3, r3, #25
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	0d1b      	lsrs	r3, r3, #20
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2107      	movs	r1, #7
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	0d1b      	lsrs	r3, r3, #20
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001abc:	bf00      	nop
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0318 	and.w	r3, r3, #24
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	400b      	ands	r3, r1
 8001af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af6:	431a      	orrs	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	0007ffff 	.word	0x0007ffff

08001b10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6093      	str	r3, [r2, #8]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b64:	d101      	bne.n	8001b6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bb4:	d101      	bne.n	8001bba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <LL_ADC_IsEnabled+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_ADC_IsEnabled+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c2a:	f043 0204 	orr.w	r2, r3, #4
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d101      	bne.n	8001c56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d101      	bne.n	8001c7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e134      	b.n	8001f10 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fb69 	bl	800138c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff3f 	bl	8001b50 <LL_ADC_IsDeepPowerDownEnabled>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff25 	bl	8001b2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff5a 	bl	8001ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d115      	bne.n	8001d1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff3e 	bl	8001b78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cfc:	4b86      	ldr	r3, [pc, #536]	; (8001f18 <HAL_ADC_Init+0x28c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	4a86      	ldr	r2, [pc, #536]	; (8001f1c <HAL_ADC_Init+0x290>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff3c 	bl	8001ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10d      	bne.n	8001d4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	f043 0210 	orr.w	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff75 	bl	8001c3e <LL_ADC_REG_IsConversionOngoing>
 8001d54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 80cd 	bne.w	8001efe <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 80c9 	bne.w	8001efe <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d74:	f043 0202 	orr.w	r2, r3, #2
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff35 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d110      	bne.n	8001dae <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d8c:	4864      	ldr	r0, [pc, #400]	; (8001f20 <HAL_ADC_Init+0x294>)
 8001d8e:	f7ff ff2f 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d92:	4604      	mov	r4, r0
 8001d94:	4863      	ldr	r0, [pc, #396]	; (8001f24 <HAL_ADC_Init+0x298>)
 8001d96:	f7ff ff2b 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4323      	orrs	r3, r4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4619      	mov	r1, r3
 8001da8:	485f      	ldr	r0, [pc, #380]	; (8001f28 <HAL_ADC_Init+0x29c>)
 8001daa:	f7ff fd87 	bl	80018bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7e5b      	ldrb	r3, [r3, #25]
 8001db2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001dbe:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001dc4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dcc:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	3b01      	subs	r3, #1
 8001de2:	045b      	lsls	r3, r3, #17
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_ADC_Init+0x2a0>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	69b9      	ldr	r1, [r7, #24]
 8001e16:	430b      	orrs	r3, r1
 8001e18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff0d 	bl	8001c3e <LL_ADC_REG_IsConversionOngoing>
 8001e24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff1a 	bl	8001c64 <LL_ADC_INJ_IsConversionOngoing>
 8001e30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d140      	bne.n	8001eba <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d13d      	bne.n	8001eba <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7e1b      	ldrb	r3, [r3, #24]
 8001e46:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e48:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e50:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e60:	f023 0306 	bic.w	r3, r3, #6
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	69b9      	ldr	r1, [r7, #24]
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d118      	bne.n	8001eaa <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	611a      	str	r2, [r3, #16]
 8001ea8:	e007      	b.n	8001eba <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d10c      	bne.n	8001edc <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	f023 010f 	bic.w	r1, r3, #15
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	1e5a      	subs	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eda:	e007      	b.n	8001eec <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 020f 	bic.w	r2, r2, #15
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	f023 0303 	bic.w	r3, r3, #3
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	659a      	str	r2, [r3, #88]	; 0x58
 8001efc:	e007      	b.n	8001f0e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	f043 0210 	orr.w	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3724      	adds	r7, #36	; 0x24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	20000170 	.word	0x20000170
 8001f1c:	053e2d63 	.word	0x053e2d63
 8001f20:	50040000 	.word	0x50040000
 8001f24:	50040100 	.word	0x50040100
 8001f28:	50040300 	.word	0x50040300
 8001f2c:	fff0c007 	.word	0xfff0c007

08001f30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f3c:	4850      	ldr	r0, [pc, #320]	; (8002080 <HAL_ADC_Start_DMA+0x150>)
 8001f3e:	f7ff fde7 	bl	8001b10 <LL_ADC_GetMultimode>
 8001f42:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fe78 	bl	8001c3e <LL_ADC_REG_IsConversionOngoing>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f040 808e 	bne.w	8002072 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_Start_DMA+0x34>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e089      	b.n	8002078 <HAL_ADC_Start_DMA+0x148>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b05      	cmp	r3, #5
 8001f76:	d002      	beq.n	8001f7e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b09      	cmp	r3, #9
 8001f7c:	d172      	bne.n	8002064 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fca4 	bl	80028cc <ADC_Enable>
 8001f84:	4603      	mov	r3, r0
 8001f86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d165      	bne.n	800205a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a37      	ldr	r2, [pc, #220]	; (8002084 <HAL_ADC_Start_DMA+0x154>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d002      	beq.n	8001fb2 <HAL_ADC_Start_DMA+0x82>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	e000      	b.n	8001fb4 <HAL_ADC_Start_DMA+0x84>
 8001fb2:	4b35      	ldr	r3, [pc, #212]	; (8002088 <HAL_ADC_Start_DMA+0x158>)
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d002      	beq.n	8001fc2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	f023 0206 	bic.w	r2, r3, #6
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fe6:	e002      	b.n	8001fee <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff2:	4a26      	ldr	r2, [pc, #152]	; (800208c <HAL_ADC_Start_DMA+0x15c>)
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffa:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_ADC_Start_DMA+0x160>)
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	4a24      	ldr	r2, [pc, #144]	; (8002094 <HAL_ADC_Start_DMA+0x164>)
 8002004:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	221c      	movs	r2, #28
 800200c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0210 	orr.w	r2, r2, #16
 8002024:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3340      	adds	r3, #64	; 0x40
 8002040:	4619      	mov	r1, r3
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f001 fdd7 	bl	8003bf8 <HAL_DMA_Start_IT>
 800204a:	4603      	mov	r3, r0
 800204c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fddf 	bl	8001c16 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002058:	e00d      	b.n	8002076 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8002062:	e008      	b.n	8002076 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002070:	e001      	b.n	8002076 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002072:	2302      	movs	r3, #2
 8002074:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002076:	7dfb      	ldrb	r3, [r7, #23]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	50040300 	.word	0x50040300
 8002084:	50040100 	.word	0x50040100
 8002088:	50040000 	.word	0x50040000
 800208c:	08002991 	.word	0x08002991
 8002090:	08002a69 	.word	0x08002a69
 8002094:	08002a85 	.word	0x08002a85

08002098 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0b6      	sub	sp, #216	; 0xd8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x22>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e3d5      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x7ce>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fd9b 	bl	8001c3e <LL_ADC_REG_IsConversionOngoing>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 83ba 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d824      	bhi.n	8002162 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	3b02      	subs	r3, #2
 800211e:	2b03      	cmp	r3, #3
 8002120:	d81b      	bhi.n	800215a <HAL_ADC_ConfigChannel+0x86>
 8002122:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_ADC_ConfigChannel+0x54>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	08002139 	.word	0x08002139
 800212c:	08002141 	.word	0x08002141
 8002130:	08002149 	.word	0x08002149
 8002134:	08002151 	.word	0x08002151
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	220c      	movs	r2, #12
 800213c:	605a      	str	r2, [r3, #4]
          break;
 800213e:	e011      	b.n	8002164 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2212      	movs	r2, #18
 8002144:	605a      	str	r2, [r3, #4]
          break;
 8002146:	e00d      	b.n	8002164 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2218      	movs	r2, #24
 800214c:	605a      	str	r2, [r3, #4]
          break;
 800214e:	e009      	b.n	8002164 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002156:	605a      	str	r2, [r3, #4]
          break;
 8002158:	e004      	b.n	8002164 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2206      	movs	r2, #6
 800215e:	605a      	str	r2, [r3, #4]
          break;
 8002160:	e000      	b.n	8002164 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002162:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	f7ff fc52 	bl	8001a1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fd5f 	bl	8001c3e <LL_ADC_REG_IsConversionOngoing>
 8002180:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fd6b 	bl	8001c64 <LL_ADC_INJ_IsConversionOngoing>
 800218e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002192:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 81c1 	bne.w	800251e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800219c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 81bc 	bne.w	800251e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ae:	d10f      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7ff fc59 	bl	8001a72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fc00 	bl	80019ce <LL_ADC_SetSamplingTimeCommonConfig>
 80021ce:	e00e      	b.n	80021ee <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	461a      	mov	r2, r3
 80021de:	f7ff fc48 	bl	8001a72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fbf0 	bl	80019ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d00a      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6919      	ldr	r1, [r3, #16]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002220:	f7ff fb80 	bl	8001924 <LL_ADC_SetOffset>
 8002224:	e17b      	b.n	800251e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fb9d 	bl	800196c <LL_ADC_GetOffsetChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x17e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fb92 	bl	800196c <LL_ADC_GetOffsetChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	0e9b      	lsrs	r3, r3, #26
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	e01e      	b.n	8002290 <HAL_ADC_ConfigChannel+0x1bc>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fb87 	bl	800196c <LL_ADC_GetOffsetChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002274:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002280:	2320      	movs	r3, #32
 8002282:	e004      	b.n	800228e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1d4>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	e018      	b.n	80022da <HAL_ADC_ConfigChannel+0x206>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e004      	b.n	80022da <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80022d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022da:	429a      	cmp	r2, r3
 80022dc:	d106      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fb56 	bl	8001998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fb3a 	bl	800196c <LL_ADC_GetOffsetChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x244>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fb2f 	bl	800196c <LL_ADC_GetOffsetChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	f003 021f 	and.w	r2, r3, #31
 8002316:	e01e      	b.n	8002356 <HAL_ADC_ConfigChannel+0x282>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fb24 	bl	800196c <LL_ADC_GetOffsetChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800233a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800233e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002346:	2320      	movs	r3, #32
 8002348:	e004      	b.n	8002354 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800234a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_ADC_ConfigChannel+0x29a>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	e018      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x2cc>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800238a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e004      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d106      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2200      	movs	r2, #0
 80023aa:	2101      	movs	r1, #1
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff faf3 	bl	8001998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2102      	movs	r1, #2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fad7 	bl	800196c <LL_ADC_GetOffsetChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <HAL_ADC_ConfigChannel+0x30a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2102      	movs	r1, #2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff facc 	bl	800196c <LL_ADC_GetOffsetChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	e01e      	b.n	800241c <HAL_ADC_ConfigChannel+0x348>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2102      	movs	r1, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fac1 	bl	800196c <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002400:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002404:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e004      	b.n	800241a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x360>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	e016      	b.n	8002462 <HAL_ADC_ConfigChannel+0x38e>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800244c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e004      	b.n	8002462 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002462:	429a      	cmp	r2, r3
 8002464:	d106      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	2102      	movs	r1, #2
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fa92 	bl	8001998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2103      	movs	r1, #3
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fa76 	bl	800196c <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x3cc>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2103      	movs	r1, #3
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fa6b 	bl	800196c <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	f003 021f 	and.w	r2, r3, #31
 800249e:	e017      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x3fc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2103      	movs	r1, #3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fa60 	bl	800196c <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ba:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80024c2:	2320      	movs	r3, #32
 80024c4:	e003      	b.n	80024ce <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80024c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d105      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x414>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	e011      	b.n	800250c <HAL_ADC_ConfigChannel+0x438>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e003      	b.n	800250c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800250c:	429a      	cmp	r2, r3
 800250e:	d106      	bne.n	800251e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	2103      	movs	r1, #3
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fa3d 	bl	8001998 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fb64 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 8140 	bne.w	80027b0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	461a      	mov	r2, r3
 800253e:	f7ff fac3 	bl	8001ac8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	4a8f      	ldr	r2, [pc, #572]	; (8002784 <HAL_ADC_ConfigChannel+0x6b0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	f040 8131 	bne.w	80027b0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x4a2>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	3301      	adds	r3, #1
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2b09      	cmp	r3, #9
 800256c:	bf94      	ite	ls
 800256e:	2301      	movls	r3, #1
 8002570:	2300      	movhi	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	e019      	b.n	80025aa <HAL_ADC_ConfigChannel+0x4d6>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002586:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800258e:	2320      	movs	r3, #32
 8002590:	e003      	b.n	800259a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	bf94      	ite	ls
 80025a4:	2301      	movls	r3, #1
 80025a6:	2300      	movhi	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d079      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x4f6>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0e9b      	lsrs	r3, r3, #26
 80025c0:	3301      	adds	r3, #1
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c8:	e015      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x522>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025da:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e003      	b.n	80025ee <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80025e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	069b      	lsls	r3, r3, #26
 80025f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x542>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	3301      	adds	r3, #1
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	e017      	b.n	8002646 <HAL_ADC_ConfigChannel+0x572>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e003      	b.n	800263a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	ea42 0103 	orr.w	r1, r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x598>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	3301      	adds	r3, #1
 800265e:	f003 021f 	and.w	r2, r3, #31
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	051b      	lsls	r3, r3, #20
 800266a:	e018      	b.n	800269e <HAL_ADC_ConfigChannel+0x5ca>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800267e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e003      	b.n	8002690 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f003 021f 	and.w	r2, r3, #31
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800269e:	430b      	orrs	r3, r1
 80026a0:	e081      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d107      	bne.n	80026be <HAL_ADC_ConfigChannel+0x5ea>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	3301      	adds	r3, #1
 80026b6:	069b      	lsls	r3, r3, #26
 80026b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026bc:	e015      	b.n	80026ea <HAL_ADC_ConfigChannel+0x616>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e003      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	069b      	lsls	r3, r3, #26
 80026e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_ADC_ConfigChannel+0x636>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2101      	movs	r1, #1
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	e017      	b.n	800273a <HAL_ADC_ConfigChannel+0x666>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	61fb      	str	r3, [r7, #28]
  return result;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002722:	2320      	movs	r3, #32
 8002724:	e003      	b.n	800272e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	ea42 0103 	orr.w	r1, r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x692>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0e9b      	lsrs	r3, r3, #26
 8002750:	3301      	adds	r3, #1
 8002752:	f003 021f 	and.w	r2, r3, #31
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	3b1e      	subs	r3, #30
 800275e:	051b      	lsls	r3, r3, #20
 8002760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002764:	e01e      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x6d0>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	613b      	str	r3, [r7, #16]
  return result;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800277e:	2320      	movs	r3, #32
 8002780:	e006      	b.n	8002790 <HAL_ADC_ConfigChannel+0x6bc>
 8002782:	bf00      	nop
 8002784:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f003 021f 	and.w	r2, r3, #31
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	3b1e      	subs	r3, #30
 800279e:	051b      	lsls	r3, r3, #20
 80027a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a4:	430b      	orrs	r3, r1
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	6892      	ldr	r2, [r2, #8]
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7ff f961 	bl	8001a72 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_ADC_ConfigChannel+0x7d8>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d06c      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027bc:	483c      	ldr	r0, [pc, #240]	; (80028b0 <HAL_ADC_ConfigChannel+0x7dc>)
 80027be:	f7ff f8a3 	bl	8001908 <LL_ADC_GetCommonPathInternalCh>
 80027c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3a      	ldr	r2, [pc, #232]	; (80028b4 <HAL_ADC_ConfigChannel+0x7e0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d127      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d121      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a35      	ldr	r2, [pc, #212]	; (80028b8 <HAL_ADC_ConfigChannel+0x7e4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d157      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ee:	4619      	mov	r1, r3
 80027f0:	482f      	ldr	r0, [pc, #188]	; (80028b0 <HAL_ADC_ConfigChannel+0x7dc>)
 80027f2:	f7ff f876 	bl	80018e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <HAL_ADC_ConfigChannel+0x7e8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <HAL_ADC_ConfigChannel+0x7ec>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	099b      	lsrs	r3, r3, #6
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002810:	e002      	b.n	8002818 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3b01      	subs	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f9      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800281e:	e03a      	b.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d113      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x77e>
 800282a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_ADC_ConfigChannel+0x7e4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d12a      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002848:	4619      	mov	r1, r3
 800284a:	4819      	ldr	r0, [pc, #100]	; (80028b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800284c:	f7ff f849 	bl	80018e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002850:	e021      	b.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d11c      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800285c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_ADC_ConfigChannel+0x7e4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002872:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002876:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800287a:	4619      	mov	r1, r3
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800287e:	f7ff f830 	bl	80018e2 <LL_ADC_SetCommonPathInternalCh>
 8002882:	e008      	b.n	8002896 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800289e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	37d8      	adds	r7, #216	; 0xd8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	80080000 	.word	0x80080000
 80028b0:	50040300 	.word	0x50040300
 80028b4:	c7520000 	.word	0xc7520000
 80028b8:	50040000 	.word	0x50040000
 80028bc:	20000170 	.word	0x20000170
 80028c0:	053e2d63 	.word	0x053e2d63
 80028c4:	cb840000 	.word	0xcb840000
 80028c8:	80000001 	.word	0x80000001

080028cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f989 	bl	8001bf0 <LL_ADC_IsEnabled>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d14d      	bne.n	8002980 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <ADC_Enable+0xc0>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	f043 0210 	orr.w	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e039      	b.n	8002982 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f958 	bl	8001bc8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002918:	f7fe ffc4 	bl	80018a4 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800291e:	e028      	b.n	8002972 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff f963 	bl	8001bf0 <LL_ADC_IsEnabled>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f947 	bl	8001bc8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800293a:	f7fe ffb3 	bl	80018a4 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d914      	bls.n	8002972 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d00d      	beq.n	8002972 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f043 0210 	orr.w	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e007      	b.n	8002982 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d1cf      	bne.n	8002920 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	8000003f 	.word	0x8000003f

08002990 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d14b      	bne.n	8002a42 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d021      	beq.n	8002a08 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f813 	bl	80019f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d032      	beq.n	8002a3a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d12b      	bne.n	8002a3a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d11f      	bne.n	8002a3a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	659a      	str	r2, [r3, #88]	; 0x58
 8002a06:	e018      	b.n	8002a3a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d111      	bne.n	8002a3a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff fb2c 	bl	8002098 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a40:	e00e      	b.n	8002a60 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7ff fb36 	bl	80020c0 <HAL_ADC_ErrorCallback>
}
 8002a54:	e004      	b.n	8002a60 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4798      	blx	r3
}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff fb18 	bl	80020ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	f043 0204 	orr.w	r2, r3, #4
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f7ff fb08 	bl	80020c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <LL_ADC_IsEnabled>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <LL_ADC_IsEnabled+0x18>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_ADC_IsEnabled+0x1a>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_REG_IsConversionOngoing>:
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b0a1      	sub	sp, #132	; 0x84
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e089      	b.n	8002c36 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a42      	ldr	r2, [pc, #264]	; (8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d102      	bne.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b3c:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e001      	b.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e068      	b.n	8002c36 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ffb9 	bl	8002ade <LL_ADC_REG_IsConversionOngoing>
 8002b6c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffb3 	bl	8002ade <LL_ADC_REG_IsConversionOngoing>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d14a      	bne.n	8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d147      	bne.n	8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002b86:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d027      	beq.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ba2:	035b      	lsls	r3, r3, #13
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002baa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bac:	4824      	ldr	r0, [pc, #144]	; (8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002bae:	f7ff ff83 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	4823      	ldr	r0, [pc, #140]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002bb6:	f7ff ff7f 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4323      	orrs	r3, r4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d132      	bne.n	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bca:	f023 030f 	bic.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	6811      	ldr	r1, [r2, #0]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	6892      	ldr	r2, [r2, #8]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bdc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bde:	e023      	b.n	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bec:	4814      	ldr	r0, [pc, #80]	; (8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002bee:	f7ff ff63 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	4813      	ldr	r0, [pc, #76]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002bf6:	f7ff ff5f 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4323      	orrs	r3, r4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d112      	bne.n	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c0a:	f023 030f 	bic.w	r3, r3, #15
 8002c0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c10:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c12:	e009      	b.n	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c26:	e000      	b.n	8002c2a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3784      	adds	r7, #132	; 0x84
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd90      	pop	{r4, r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	50040000 	.word	0x50040000
 8002c44:	50040100 	.word	0x50040100
 8002c48:	50040300 	.word	0x50040300

08002c4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0ed      	b.n	8002e3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d102      	bne.n	8002c70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe fc26 	bl	80014bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c80:	f7fe fe10 	bl	80018a4 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c86:	e012      	b.n	8002cae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c88:	f7fe fe0c 	bl	80018a4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b0a      	cmp	r3, #10
 8002c94:	d90b      	bls.n	8002cae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0c5      	b.n	8002e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0e5      	beq.n	8002c88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0202 	bic.w	r2, r2, #2
 8002cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ccc:	f7fe fdea 	bl	80018a4 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cd2:	e012      	b.n	8002cfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cd4:	f7fe fde6 	bl	80018a4 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b0a      	cmp	r3, #10
 8002ce0:	d90b      	bls.n	8002cfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2205      	movs	r2, #5
 8002cf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e09f      	b.n	8002e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e5      	bne.n	8002cd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7e1b      	ldrb	r3, [r3, #24]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d108      	bne.n	8002d22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e007      	b.n	8002d32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7e5b      	ldrb	r3, [r3, #25]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d108      	bne.n	8002d4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e007      	b.n	8002d5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7e9b      	ldrb	r3, [r3, #26]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d108      	bne.n	8002d76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0220 	orr.w	r2, r2, #32
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e007      	b.n	8002d86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0220 	bic.w	r2, r2, #32
 8002d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7edb      	ldrb	r3, [r3, #27]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d108      	bne.n	8002da0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0210 	bic.w	r2, r2, #16
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e007      	b.n	8002db0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0210 	orr.w	r2, r2, #16
 8002dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7f1b      	ldrb	r3, [r3, #28]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d108      	bne.n	8002dca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0208 	orr.w	r2, r2, #8
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e007      	b.n	8002dda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0208 	bic.w	r2, r2, #8
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7f5b      	ldrb	r3, [r3, #29]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d108      	bne.n	8002df4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0204 	orr.w	r2, r2, #4
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e007      	b.n	8002e04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0204 	bic.w	r2, r2, #4
 8002e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	ea42 0103 	orr.w	r1, r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	1e5a      	subs	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b087      	sub	sp, #28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e58:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d003      	beq.n	8002e68 <HAL_CAN_ConfigFilter+0x26>
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	f040 80aa 	bne.w	8002fbc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	2201      	movs	r2, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	401a      	ands	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d123      	bne.n	8002eea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	401a      	ands	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ec4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3248      	adds	r2, #72	; 0x48
 8002eca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ede:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ee0:	6979      	ldr	r1, [r7, #20]
 8002ee2:	3348      	adds	r3, #72	; 0x48
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d122      	bne.n	8002f38 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3248      	adds	r2, #72	; 0x48
 8002f18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f2e:	6979      	ldr	r1, [r7, #20]
 8002f30:	3348      	adds	r3, #72	; 0x48
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f52:	e007      	b.n	8002f64 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	401a      	ands	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f7e:	e007      	b.n	8002f90 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fae:	f023 0201 	bic.w	r2, r3, #1
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e006      	b.n	8002fca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d12e      	bne.n	8003048 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003002:	f7fe fc4f 	bl	80018a4 <HAL_GetTick>
 8003006:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003008:	e012      	b.n	8003030 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800300a:	f7fe fc4b 	bl	80018a4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b0a      	cmp	r3, #10
 8003016:	d90b      	bls.n	8003030 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2205      	movs	r2, #5
 8003028:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e012      	b.n	8003056 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1e5      	bne.n	800300a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e006      	b.n	8003056 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800305e:	b480      	push	{r7}
 8003060:	b089      	sub	sp, #36	; 0x24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003072:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800307c:	7ffb      	ldrb	r3, [r7, #31]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d003      	beq.n	800308a <HAL_CAN_AddTxMessage+0x2c>
 8003082:	7ffb      	ldrb	r3, [r7, #31]
 8003084:	2b02      	cmp	r3, #2
 8003086:	f040 80b8 	bne.w	80031fa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a0 	beq.w	80031ea <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	0e1b      	lsrs	r3, r3, #24
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d907      	bls.n	80030ca <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e09e      	b.n	8003208 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80030ca:	2201      	movs	r2, #1
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	409a      	lsls	r2, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10d      	bne.n	80030f8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	6809      	ldr	r1, [r1, #0]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3318      	adds	r3, #24
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	440b      	add	r3, r1
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e00f      	b.n	8003118 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003102:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800310c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	3318      	adds	r3, #24
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	440b      	add	r3, r1
 8003116:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3318      	adds	r3, #24
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	440b      	add	r3, r1
 8003128:	3304      	adds	r3, #4
 800312a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	7d1b      	ldrb	r3, [r3, #20]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d111      	bne.n	8003158 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3318      	adds	r3, #24
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	4413      	add	r3, r2
 8003140:	3304      	adds	r3, #4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	6811      	ldr	r1, [r2, #0]
 8003148:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3318      	adds	r3, #24
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	440b      	add	r3, r1
 8003154:	3304      	adds	r3, #4
 8003156:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3307      	adds	r3, #7
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	061a      	lsls	r2, r3, #24
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3306      	adds	r3, #6
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3305      	adds	r3, #5
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	4313      	orrs	r3, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	3204      	adds	r2, #4
 8003178:	7812      	ldrb	r2, [r2, #0]
 800317a:	4610      	mov	r0, r2
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	6811      	ldr	r1, [r2, #0]
 8003180:	ea43 0200 	orr.w	r2, r3, r0
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	440b      	add	r3, r1
 800318a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800318e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3303      	adds	r3, #3
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	061a      	lsls	r2, r3, #24
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3302      	adds	r3, #2
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3301      	adds	r3, #1
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	4313      	orrs	r3, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	7812      	ldrb	r2, [r2, #0]
 80031b0:	4610      	mov	r0, r2
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	6811      	ldr	r1, [r2, #0]
 80031b6:	ea43 0200 	orr.w	r2, r3, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	440b      	add	r3, r1
 80031c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80031c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	3318      	adds	r3, #24
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	4413      	add	r3, r2
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	6811      	ldr	r1, [r2, #0]
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3318      	adds	r3, #24
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	440b      	add	r3, r1
 80031e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e00e      	b.n	8003208 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e006      	b.n	8003208 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
  }
}
 8003208:	4618      	mov	r0, r3
 800320a:	3724      	adds	r7, #36	; 0x24
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003228:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800322a:	7dfb      	ldrb	r3, [r7, #23]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d003      	beq.n	8003238 <HAL_CAN_GetRxMessage+0x24>
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b02      	cmp	r3, #2
 8003234:	f040 80f3 	bne.w	800341e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10e      	bne.n	800325c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d116      	bne.n	800327a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0e7      	b.n	800342c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d107      	bne.n	800327a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0d8      	b.n	800342c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	331b      	adds	r3, #27
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	4413      	add	r3, r2
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0204 	and.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10c      	bne.n	80032b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	331b      	adds	r3, #27
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	4413      	add	r3, r2
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	0d5b      	lsrs	r3, r3, #21
 80032a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e00b      	b.n	80032ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	331b      	adds	r3, #27
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	4413      	add	r3, r2
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	331b      	adds	r3, #27
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	4413      	add	r3, r2
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0202 	and.w	r2, r3, #2
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	331b      	adds	r3, #27
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 020f 	and.w	r2, r3, #15
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	331b      	adds	r3, #27
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	4413      	add	r3, r2
 8003304:	3304      	adds	r3, #4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	b2da      	uxtb	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	331b      	adds	r3, #27
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	4413      	add	r3, r2
 8003332:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	4413      	add	r3, r2
 8003348:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	0a1a      	lsrs	r2, r3, #8
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	4413      	add	r3, r2
 8003362:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0c1a      	lsrs	r2, r3, #16
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	3302      	adds	r3, #2
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	4413      	add	r3, r2
 800337c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	0e1a      	lsrs	r2, r3, #24
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	3303      	adds	r3, #3
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	4413      	add	r3, r2
 8003396:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	3304      	adds	r3, #4
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0a1a      	lsrs	r2, r3, #8
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	3305      	adds	r3, #5
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0c1a      	lsrs	r2, r3, #16
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	3306      	adds	r3, #6
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e1a      	lsrs	r2, r3, #24
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	3307      	adds	r3, #7
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d108      	bne.n	800340a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0220 	orr.w	r2, r2, #32
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e007      	b.n	800341a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0220 	orr.w	r2, r2, #32
 8003418:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e006      	b.n	800342c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003448:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d002      	beq.n	8003456 <HAL_CAN_ActivateNotification+0x1e>
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d109      	bne.n	800346a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6959      	ldr	r1, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e006      	b.n	8003478 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
  }
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d07c      	beq.n	80035c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d023      	beq.n	800351c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f983 	bl	80037f2 <HAL_CAN_TxMailbox0CompleteCallback>
 80034ec:	e016      	b.n	800351c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003500:	e00c      	b.n	800351c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
 8003514:	e002      	b.n	800351c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f989 	bl	800382e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d024      	beq.n	8003570 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800352e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f963 	bl	8003806 <HAL_CAN_TxMailbox1CompleteCallback>
 8003540:	e016      	b.n	8003570 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d004      	beq.n	8003556 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
 8003554:	e00c      	b.n	8003570 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
 8003568:	e002      	b.n	8003570 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f969 	bl	8003842 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d024      	beq.n	80035c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003582:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f943 	bl	800381a <HAL_CAN_TxMailbox2CompleteCallback>
 8003594:	e016      	b.n	80035c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
 80035a8:	e00c      	b.n	80035c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d004      	beq.n	80035be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
 80035bc:	e002      	b.n	80035c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f949 	bl	8003856 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2210      	movs	r2, #16
 80035e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d006      	beq.n	800360a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2208      	movs	r2, #8
 8003602:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f930 	bl	800386a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fc ff84 	bl	8000530 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003642:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2210      	movs	r2, #16
 800364a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d006      	beq.n	800366e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2208      	movs	r2, #8
 8003666:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f912 	bl	8003892 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8f9 	bl	800387e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	d006      	beq.n	80036ae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2210      	movs	r2, #16
 80036a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8fc 	bl	80038a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2208      	movs	r2, #8
 80036c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f8f5 	bl	80038ba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d07b      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d072      	beq.n	80037ca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	f043 0302 	orr.w	r3, r3, #2
 800371a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373e:	2b00      	cmp	r3, #0
 8003740:	d043      	beq.n	80037ca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003748:	2b00      	cmp	r3, #0
 800374a:	d03e      	beq.n	80037ca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003752:	2b60      	cmp	r3, #96	; 0x60
 8003754:	d02b      	beq.n	80037ae <HAL_CAN_IRQHandler+0x32a>
 8003756:	2b60      	cmp	r3, #96	; 0x60
 8003758:	d82e      	bhi.n	80037b8 <HAL_CAN_IRQHandler+0x334>
 800375a:	2b50      	cmp	r3, #80	; 0x50
 800375c:	d022      	beq.n	80037a4 <HAL_CAN_IRQHandler+0x320>
 800375e:	2b50      	cmp	r3, #80	; 0x50
 8003760:	d82a      	bhi.n	80037b8 <HAL_CAN_IRQHandler+0x334>
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d019      	beq.n	800379a <HAL_CAN_IRQHandler+0x316>
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d826      	bhi.n	80037b8 <HAL_CAN_IRQHandler+0x334>
 800376a:	2b30      	cmp	r3, #48	; 0x30
 800376c:	d010      	beq.n	8003790 <HAL_CAN_IRQHandler+0x30c>
 800376e:	2b30      	cmp	r3, #48	; 0x30
 8003770:	d822      	bhi.n	80037b8 <HAL_CAN_IRQHandler+0x334>
 8003772:	2b10      	cmp	r3, #16
 8003774:	d002      	beq.n	800377c <HAL_CAN_IRQHandler+0x2f8>
 8003776:	2b20      	cmp	r3, #32
 8003778:	d005      	beq.n	8003786 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800377a:	e01d      	b.n	80037b8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	f043 0308 	orr.w	r3, r3, #8
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003784:	e019      	b.n	80037ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	f043 0310 	orr.w	r3, r3, #16
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800378e:	e014      	b.n	80037ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	f043 0320 	orr.w	r3, r3, #32
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003798:	e00f      	b.n	80037ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037a2:	e00a      	b.n	80037ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037ac:	e005      	b.n	80037ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037b6:	e000      	b.n	80037ba <HAL_CAN_IRQHandler+0x336>
            break;
 80037b8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2204      	movs	r2, #4
 80037d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f872 	bl	80038ce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80037ea:	bf00      	nop
 80037ec:	3728      	adds	r7, #40	; 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003900:	4013      	ands	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800390c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003916:	4a04      	ldr	r2, [pc, #16]	; (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	60d3      	str	r3, [r2, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <__NVIC_GetPriorityGrouping+0x18>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 0307 	and.w	r3, r3, #7
}
 800393a:	4618      	mov	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	db0b      	blt.n	8003972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <__NVIC_EnableIRQ+0x38>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2001      	movs	r0, #1
 800396a:	fa00 f202 	lsl.w	r2, r0, r2
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000e100 	.word	0xe000e100

08003984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	db0a      	blt.n	80039ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	490c      	ldr	r1, [pc, #48]	; (80039d0 <__NVIC_SetPriority+0x4c>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	440b      	add	r3, r1
 80039a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ac:	e00a      	b.n	80039c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4908      	ldr	r1, [pc, #32]	; (80039d4 <__NVIC_SetPriority+0x50>)
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	3b04      	subs	r3, #4
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	440b      	add	r3, r1
 80039c2:	761a      	strb	r2, [r3, #24]
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000e100 	.word	0xe000e100
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f1c3 0307 	rsb	r3, r3, #7
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	bf28      	it	cs
 80039f6:	2304      	movcs	r3, #4
 80039f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d902      	bls.n	8003a08 <NVIC_EncodePriority+0x30>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3b03      	subs	r3, #3
 8003a06:	e000      	b.n	8003a0a <NVIC_EncodePriority+0x32>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a20:	f04f 31ff 	mov.w	r1, #4294967295
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	43d9      	mvns	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	4313      	orrs	r3, r2
         );
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3724      	adds	r7, #36	; 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ff4c 	bl	80038e4 <__NVIC_SetPriorityGrouping>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a66:	f7ff ff61 	bl	800392c <__NVIC_GetPriorityGrouping>
 8003a6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	6978      	ldr	r0, [r7, #20]
 8003a72:	f7ff ffb1 	bl	80039d8 <NVIC_EncodePriority>
 8003a76:	4602      	mov	r2, r0
 8003a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ff80 	bl	8003984 <__NVIC_SetPriority>
}
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff54 	bl	8003948 <__NVIC_EnableIRQ>
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e08d      	b.n	8003bd6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_DMA_Init+0x138>)
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d80f      	bhi.n	8003ae6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b45      	ldr	r3, [pc, #276]	; (8003be4 <HAL_DMA_Init+0x13c>)
 8003ace:	4413      	add	r3, r2
 8003ad0:	4a45      	ldr	r2, [pc, #276]	; (8003be8 <HAL_DMA_Init+0x140>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	009a      	lsls	r2, r3, #2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a42      	ldr	r2, [pc, #264]	; (8003bec <HAL_DMA_Init+0x144>)
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ae4:	e00e      	b.n	8003b04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <HAL_DMA_Init+0x148>)
 8003aee:	4413      	add	r3, r2
 8003af0:	4a3d      	ldr	r2, [pc, #244]	; (8003be8 <HAL_DMA_Init+0x140>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	009a      	lsls	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a3c      	ldr	r2, [pc, #240]	; (8003bf4 <HAL_DMA_Init+0x14c>)
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f9b6 	bl	8003ec8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b64:	d102      	bne.n	8003b6c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b80:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d010      	beq.n	8003bac <HAL_DMA_Init+0x104>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d80c      	bhi.n	8003bac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f9d6 	bl	8003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	e008      	b.n	8003bbe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40020407 	.word	0x40020407
 8003be4:	bffdfff8 	.word	0xbffdfff8
 8003be8:	cccccccd 	.word	0xcccccccd
 8003bec:	40020000 	.word	0x40020000
 8003bf0:	bffdfbf8 	.word	0xbffdfbf8
 8003bf4:	40020400 	.word	0x40020400

08003bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_DMA_Start_IT+0x20>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e066      	b.n	8003ce6 <HAL_DMA_Start_IT+0xee>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d155      	bne.n	8003cd8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f8fb 	bl	8003e4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 020e 	orr.w	r2, r2, #14
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e00f      	b.n	8003c90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0204 	bic.w	r2, r2, #4
 8003c7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 020a 	orr.w	r2, r2, #10
 8003c8e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cac:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e005      	b.n	8003ce4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	f003 031c 	and.w	r3, r3, #28
 8003d0e:	2204      	movs	r2, #4
 8003d10:	409a      	lsls	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d026      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x7a>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d021      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0204 	bic.w	r2, r2, #4
 8003d40:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f003 021c 	and.w	r2, r3, #28
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	2104      	movs	r1, #4
 8003d50:	fa01 f202 	lsl.w	r2, r1, r2
 8003d54:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d071      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003d66:	e06c      	b.n	8003e42 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f003 031c 	and.w	r3, r3, #28
 8003d70:	2202      	movs	r2, #2
 8003d72:	409a      	lsls	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d02e      	beq.n	8003dda <HAL_DMA_IRQHandler+0xec>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d029      	beq.n	8003dda <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 020a 	bic.w	r2, r2, #10
 8003da2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db0:	f003 021c 	and.w	r2, r3, #28
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	2102      	movs	r1, #2
 8003dba:	fa01 f202 	lsl.w	r2, r1, r2
 8003dbe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d038      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003dd8:	e033      	b.n	8003e42 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f003 031c 	and.w	r3, r3, #28
 8003de2:	2208      	movs	r2, #8
 8003de4:	409a      	lsls	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02a      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x156>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d025      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 020e 	bic.w	r2, r2, #14
 8003e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	f003 021c 	and.w	r2, r3, #28
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	2101      	movs	r1, #1
 8003e16:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
}
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e62:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e74:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f003 021c 	and.w	r2, r3, #28
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2101      	movs	r1, #1
 8003e84:	fa01 f202 	lsl.w	r2, r1, r2
 8003e88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d108      	bne.n	8003eac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eaa:	e007      	b.n	8003ebc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d80a      	bhi.n	8003ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ee8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6493      	str	r3, [r2, #72]	; 0x48
 8003ef0:	e007      	b.n	8003f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	089b      	lsrs	r3, r3, #2
 8003ef8:	009a      	lsls	r2, r3, #2
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003efc:	4413      	add	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3b08      	subs	r3, #8
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f18:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2201      	movs	r2, #1
 8003f22:	409a      	lsls	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40020407 	.word	0x40020407
 8003f38:	4002081c 	.word	0x4002081c
 8003f3c:	cccccccd 	.word	0xcccccccd
 8003f40:	40020880 	.word	0x40020880

08003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f66:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2201      	movs	r2, #1
 8003f72:	409a      	lsls	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	1000823f 	.word	0x1000823f
 8003f88:	40020940 	.word	0x40020940

08003f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f9a:	e166      	b.n	800426a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8158 	beq.w	8004264 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d005      	beq.n	8003fcc <HAL_GPIO_Init+0x40>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d130      	bne.n	800402e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004002:	2201      	movs	r2, #1
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	f003 0201 	and.w	r2, r3, #1
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b03      	cmp	r3, #3
 8004038:	d017      	beq.n	800406a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	2203      	movs	r2, #3
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d123      	bne.n	80040be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	08da      	lsrs	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3208      	adds	r2, #8
 800407e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004082:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	220f      	movs	r2, #15
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	08da      	lsrs	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3208      	adds	r2, #8
 80040b8:	6939      	ldr	r1, [r7, #16]
 80040ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	2203      	movs	r2, #3
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 0203 	and.w	r2, r3, #3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 80b2 	beq.w	8004264 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004100:	4b61      	ldr	r3, [pc, #388]	; (8004288 <HAL_GPIO_Init+0x2fc>)
 8004102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004104:	4a60      	ldr	r2, [pc, #384]	; (8004288 <HAL_GPIO_Init+0x2fc>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6613      	str	r3, [r2, #96]	; 0x60
 800410c:	4b5e      	ldr	r3, [pc, #376]	; (8004288 <HAL_GPIO_Init+0x2fc>)
 800410e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004118:	4a5c      	ldr	r2, [pc, #368]	; (800428c <HAL_GPIO_Init+0x300>)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	3302      	adds	r3, #2
 8004120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	220f      	movs	r2, #15
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004142:	d02b      	beq.n	800419c <HAL_GPIO_Init+0x210>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a52      	ldr	r2, [pc, #328]	; (8004290 <HAL_GPIO_Init+0x304>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d025      	beq.n	8004198 <HAL_GPIO_Init+0x20c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a51      	ldr	r2, [pc, #324]	; (8004294 <HAL_GPIO_Init+0x308>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d01f      	beq.n	8004194 <HAL_GPIO_Init+0x208>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a50      	ldr	r2, [pc, #320]	; (8004298 <HAL_GPIO_Init+0x30c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d019      	beq.n	8004190 <HAL_GPIO_Init+0x204>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a4f      	ldr	r2, [pc, #316]	; (800429c <HAL_GPIO_Init+0x310>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <HAL_GPIO_Init+0x200>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a4e      	ldr	r2, [pc, #312]	; (80042a0 <HAL_GPIO_Init+0x314>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00d      	beq.n	8004188 <HAL_GPIO_Init+0x1fc>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a4d      	ldr	r2, [pc, #308]	; (80042a4 <HAL_GPIO_Init+0x318>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <HAL_GPIO_Init+0x1f8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a4c      	ldr	r2, [pc, #304]	; (80042a8 <HAL_GPIO_Init+0x31c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d101      	bne.n	8004180 <HAL_GPIO_Init+0x1f4>
 800417c:	2307      	movs	r3, #7
 800417e:	e00e      	b.n	800419e <HAL_GPIO_Init+0x212>
 8004180:	2308      	movs	r3, #8
 8004182:	e00c      	b.n	800419e <HAL_GPIO_Init+0x212>
 8004184:	2306      	movs	r3, #6
 8004186:	e00a      	b.n	800419e <HAL_GPIO_Init+0x212>
 8004188:	2305      	movs	r3, #5
 800418a:	e008      	b.n	800419e <HAL_GPIO_Init+0x212>
 800418c:	2304      	movs	r3, #4
 800418e:	e006      	b.n	800419e <HAL_GPIO_Init+0x212>
 8004190:	2303      	movs	r3, #3
 8004192:	e004      	b.n	800419e <HAL_GPIO_Init+0x212>
 8004194:	2302      	movs	r3, #2
 8004196:	e002      	b.n	800419e <HAL_GPIO_Init+0x212>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <HAL_GPIO_Init+0x212>
 800419c:	2300      	movs	r3, #0
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	f002 0203 	and.w	r2, r2, #3
 80041a4:	0092      	lsls	r2, r2, #2
 80041a6:	4093      	lsls	r3, r2
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041ae:	4937      	ldr	r1, [pc, #220]	; (800428c <HAL_GPIO_Init+0x300>)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	3302      	adds	r3, #2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041bc:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_GPIO_Init+0x320>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041e0:	4a32      	ldr	r2, [pc, #200]	; (80042ac <HAL_GPIO_Init+0x320>)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041e6:	4b31      	ldr	r3, [pc, #196]	; (80042ac <HAL_GPIO_Init+0x320>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800420a:	4a28      	ldr	r2, [pc, #160]	; (80042ac <HAL_GPIO_Init+0x320>)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004210:	4b26      	ldr	r3, [pc, #152]	; (80042ac <HAL_GPIO_Init+0x320>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	43db      	mvns	r3, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4013      	ands	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004234:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <HAL_GPIO_Init+0x320>)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800423a:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <HAL_GPIO_Init+0x320>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	43db      	mvns	r3, r3
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4013      	ands	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <HAL_GPIO_Init+0x320>)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3301      	adds	r3, #1
 8004268:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	f47f ae91 	bne.w	8003f9c <HAL_GPIO_Init+0x10>
  }
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40021000 	.word	0x40021000
 800428c:	40010000 	.word	0x40010000
 8004290:	48000400 	.word	0x48000400
 8004294:	48000800 	.word	0x48000800
 8004298:	48000c00 	.word	0x48000c00
 800429c:	48001000 	.word	0x48001000
 80042a0:	48001400 	.word	0x48001400
 80042a4:	48001800 	.word	0x48001800
 80042a8:	48001c00 	.word	0x48001c00
 80042ac:	40010400 	.word	0x40010400

080042b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
 80042bc:	4613      	mov	r3, r2
 80042be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c0:	787b      	ldrb	r3, [r7, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042cc:	e002      	b.n	80042d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042f4:	4b0d      	ldr	r3, [pc, #52]	; (800432c <HAL_PWREx_GetVoltageRange+0x3c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d102      	bne.n	8004308 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004306:	e00b      	b.n	8004320 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <HAL_PWREx_GetVoltageRange+0x3c>)
 800430a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004316:	d102      	bne.n	800431e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800431c:	e000      	b.n	8004320 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800431e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004320:	4618      	mov	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40007000 	.word	0x40007000

08004330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d141      	bne.n	80043c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800433e:	4b4b      	ldr	r3, [pc, #300]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434a:	d131      	bne.n	80043b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800434c:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004352:	4a46      	ldr	r2, [pc, #280]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004358:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800435c:	4b43      	ldr	r3, [pc, #268]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004364:	4a41      	ldr	r2, [pc, #260]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800436a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800436c:	4b40      	ldr	r3, [pc, #256]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2232      	movs	r2, #50	; 0x32
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	4a3f      	ldr	r2, [pc, #252]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	0c9b      	lsrs	r3, r3, #18
 800437e:	3301      	adds	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004382:	e002      	b.n	800438a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3b01      	subs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800438a:	4b38      	ldr	r3, [pc, #224]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004396:	d102      	bne.n	800439e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f2      	bne.n	8004384 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800439e:	4b33      	ldr	r3, [pc, #204]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043aa:	d158      	bne.n	800445e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e057      	b.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043b0:	4b2e      	ldr	r3, [pc, #184]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b6:	4a2d      	ldr	r2, [pc, #180]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043c0:	e04d      	b.n	800445e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c8:	d141      	bne.n	800444e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ca:	4b28      	ldr	r3, [pc, #160]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d6:	d131      	bne.n	800443c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043d8:	4b24      	ldr	r3, [pc, #144]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043de:	4a23      	ldr	r2, [pc, #140]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043e8:	4b20      	ldr	r3, [pc, #128]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043f0:	4a1e      	ldr	r2, [pc, #120]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043f8:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2232      	movs	r2, #50	; 0x32
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	4a1c      	ldr	r2, [pc, #112]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	0c9b      	lsrs	r3, r3, #18
 800440a:	3301      	adds	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800440e:	e002      	b.n	8004416 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	3b01      	subs	r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004416:	4b15      	ldr	r3, [pc, #84]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d102      	bne.n	800442a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f2      	bne.n	8004410 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800442a:	4b10      	ldr	r3, [pc, #64]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	d112      	bne.n	800445e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e011      	b.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004442:	4a0a      	ldr	r2, [pc, #40]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800444c:	e007      	b.n	800445e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004456:	4a05      	ldr	r2, [pc, #20]	; (800446c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800445c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	40007000 	.word	0x40007000
 8004470:	20000170 	.word	0x20000170
 8004474:	431bde83 	.word	0x431bde83

08004478 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 800447c:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004488:	f7ff ff2a 	bl	80042e0 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800448c:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800448e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004492:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8004494:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 80044a0:	f000 f828 	bl	80044f4 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80044a6:	2208      	movs	r2, #8
 80044a8:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d004      	beq.n	80044c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 80044b6:	f000 f824 	bl	8004502 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80044bc:	2210      	movs	r2, #16
 80044be:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 80044cc:	f000 f820 	bl	8004510 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80044d2:	2220      	movs	r2, #32
 80044d4:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80044d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 80044e2:	f000 f81c 	bl	800451e <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 80044e6:	4b02      	ldr	r3, [pc, #8]	; (80044f0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80044e8:	2240      	movs	r2, #64	; 0x40
 80044ea:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80044ec:	bf00      	nop
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40010400 	.word	0x40010400

080044f4 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f000 bc76 	b.w	8004e2c <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004540:	4ba1      	ldr	r3, [pc, #644]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 030c 	and.w	r3, r3, #12
 8004548:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800454a:	4b9f      	ldr	r3, [pc, #636]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80e6 	beq.w	800472e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <HAL_RCC_OscConfig+0x4c>
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	2b0c      	cmp	r3, #12
 800456c:	f040 808d 	bne.w	800468a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2b01      	cmp	r3, #1
 8004574:	f040 8089 	bne.w	800468a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004578:	4b93      	ldr	r3, [pc, #588]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d006      	beq.n	8004592 <HAL_RCC_OscConfig+0x66>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	f000 bc4d 	b.w	8004e2c <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004596:	4b8c      	ldr	r3, [pc, #560]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d004      	beq.n	80045ac <HAL_RCC_OscConfig+0x80>
 80045a2:	4b89      	ldr	r3, [pc, #548]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045aa:	e005      	b.n	80045b8 <HAL_RCC_OscConfig+0x8c>
 80045ac:	4b86      	ldr	r3, [pc, #536]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80045ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d224      	bcs.n	8004606 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fe47 	bl	8005254 <RCC_SetFlashLatencyFromMSIRange>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f000 bc2d 	b.w	8004e2c <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045d2:	4b7d      	ldr	r3, [pc, #500]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b7a      	ldr	r3, [pc, #488]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	4977      	ldr	r1, [pc, #476]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f0:	4b75      	ldr	r3, [pc, #468]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	4972      	ldr	r1, [pc, #456]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
 8004604:	e025      	b.n	8004652 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004606:	4b70      	ldr	r3, [pc, #448]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a6f      	ldr	r2, [pc, #444]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 800460c:	f043 0308 	orr.w	r3, r3, #8
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	4b6d      	ldr	r3, [pc, #436]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	496a      	ldr	r1, [pc, #424]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004624:	4b68      	ldr	r3, [pc, #416]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	4965      	ldr	r1, [pc, #404]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fe06 	bl	8005254 <RCC_SetFlashLatencyFromMSIRange>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e3ec      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004652:	f000 fd1f 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 8004656:	4602      	mov	r2, r0
 8004658:	4b5b      	ldr	r3, [pc, #364]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	495a      	ldr	r1, [pc, #360]	; (80047cc <HAL_RCC_OscConfig+0x2a0>)
 8004664:	5ccb      	ldrb	r3, [r1, r3]
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	fa22 f303 	lsr.w	r3, r2, r3
 800466e:	4a58      	ldr	r2, [pc, #352]	; (80047d0 <HAL_RCC_OscConfig+0x2a4>)
 8004670:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004672:	4b58      	ldr	r3, [pc, #352]	; (80047d4 <HAL_RCC_OscConfig+0x2a8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fd f812 	bl	80016a0 <HAL_InitTick>
 800467c:	4603      	mov	r3, r0
 800467e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d052      	beq.n	800472c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	e3d0      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d032      	beq.n	80046f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004692:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a4c      	ldr	r2, [pc, #304]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800469e:	f7fd f901 	bl	80018a4 <HAL_GetTick>
 80046a2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046a6:	f7fd f8fd 	bl	80018a4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e3b9      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046b8:	4b43      	ldr	r3, [pc, #268]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046c4:	4b40      	ldr	r3, [pc, #256]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a3f      	ldr	r2, [pc, #252]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80046ca:	f043 0308 	orr.w	r3, r3, #8
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b3d      	ldr	r3, [pc, #244]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	493a      	ldr	r1, [pc, #232]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e2:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	4935      	ldr	r1, [pc, #212]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
 80046f6:	e01a      	b.n	800472e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046f8:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a32      	ldr	r2, [pc, #200]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004704:	f7fd f8ce 	bl	80018a4 <HAL_GetTick>
 8004708:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800470c:	f7fd f8ca 	bl	80018a4 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e386      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800471e:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x1e0>
 800472a:	e000      	b.n	800472e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800472c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d073      	beq.n	8004822 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d005      	beq.n	800474c <HAL_RCC_OscConfig+0x220>
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d10e      	bne.n	8004764 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d10b      	bne.n	8004764 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d063      	beq.n	8004820 <HAL_RCC_OscConfig+0x2f4>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d15f      	bne.n	8004820 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e363      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d106      	bne.n	800477c <HAL_RCC_OscConfig+0x250>
 800476e:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e01d      	b.n	80047b8 <HAL_RCC_OscConfig+0x28c>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x274>
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 800478c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e00b      	b.n	80047b8 <HAL_RCC_OscConfig+0x28c>
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <HAL_RCC_OscConfig+0x29c>)
 80047b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01b      	beq.n	80047f8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd f870 	bl	80018a4 <HAL_GetTick>
 80047c4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c6:	e010      	b.n	80047ea <HAL_RCC_OscConfig+0x2be>
 80047c8:	40021000 	.word	0x40021000
 80047cc:	0800a464 	.word	0x0800a464
 80047d0:	20000170 	.word	0x20000170
 80047d4:	20000174 	.word	0x20000174
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fd f864 	bl	80018a4 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e320      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ea:	4ba0      	ldr	r3, [pc, #640]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x2ac>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd f854 	bl	80018a4 <HAL_GetTick>
 80047fc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004800:	f7fd f850 	bl	80018a4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	; 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e30c      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004812:	4b96      	ldr	r3, [pc, #600]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x2d4>
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d060      	beq.n	80048f0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d005      	beq.n	8004840 <HAL_RCC_OscConfig+0x314>
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d119      	bne.n	800486e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d116      	bne.n	800486e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004840:	4b8a      	ldr	r3, [pc, #552]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_OscConfig+0x32c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e2e9      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004858:	4b84      	ldr	r3, [pc, #528]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	4981      	ldr	r1, [pc, #516]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800486c:	e040      	b.n	80048f0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d023      	beq.n	80048be <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004876:	4b7d      	ldr	r3, [pc, #500]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a7c      	ldr	r2, [pc, #496]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fd f80f 	bl	80018a4 <HAL_GetTick>
 8004886:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488a:	f7fd f80b 	bl	80018a4 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e2c7      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800489c:	4b73      	ldr	r3, [pc, #460]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a8:	4b70      	ldr	r3, [pc, #448]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	496d      	ldr	r1, [pc, #436]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	e018      	b.n	80048f0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048be:	4b6b      	ldr	r3, [pc, #428]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6a      	ldr	r2, [pc, #424]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 80048c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fc ffeb 	bl	80018a4 <HAL_GetTick>
 80048ce:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d2:	f7fc ffe7 	bl	80018a4 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e2a3      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048e4:	4b61      	ldr	r3, [pc, #388]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f0      	bne.n	80048d2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d07f      	beq.n	80049fc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05f      	beq.n	80049c4 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004904:	4b59      	ldr	r3, [pc, #356]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699a      	ldr	r2, [r3, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	429a      	cmp	r2, r3
 8004918:	d037      	beq.n	800498a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d006      	beq.n	8004932 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e27c      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800493c:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 800493e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004942:	4a4a      	ldr	r2, [pc, #296]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800494c:	f7fc ffaa 	bl	80018a4 <HAL_GetTick>
 8004950:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004954:	f7fc ffa6 	bl	80018a4 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b11      	cmp	r3, #17
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e262      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004966:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ef      	bne.n	8004954 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004974:	4b3d      	ldr	r3, [pc, #244]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800497a:	f023 0210 	bic.w	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	493a      	ldr	r1, [pc, #232]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800498a:	4b38      	ldr	r3, [pc, #224]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 800498c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004990:	4a36      	ldr	r2, [pc, #216]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499a:	f7fc ff83 	bl	80018a4 <HAL_GetTick>
 800499e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a2:	f7fc ff7f 	bl	80018a4 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b11      	cmp	r3, #17
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e23b      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049b4:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 80049b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0ef      	beq.n	80049a2 <HAL_RCC_OscConfig+0x476>
 80049c2:	e01b      	b.n	80049fc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c4:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 80049c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ca:	4a28      	ldr	r2, [pc, #160]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fc ff66 	bl	80018a4 <HAL_GetTick>
 80049d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049dc:	f7fc ff62 	bl	80018a4 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b11      	cmp	r3, #17
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e21e      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049ee:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 80049f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1ef      	bne.n	80049dc <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80c1 	beq.w	8004b8c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a10:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10e      	bne.n	8004a3a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1c:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a20:	4a12      	ldr	r2, [pc, #72]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a26:	6593      	str	r3, [r2, #88]	; 0x58
 8004a28:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <HAL_RCC_OscConfig+0x540>)
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <HAL_RCC_OscConfig+0x544>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d11c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <HAL_RCC_OscConfig+0x544>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a09      	ldr	r2, [pc, #36]	; (8004a70 <HAL_RCC_OscConfig+0x544>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a52:	f7fc ff27 	bl	80018a4 <HAL_GetTick>
 8004a56:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a58:	e00c      	b.n	8004a74 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5a:	f7fc ff23 	bl	80018a4 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d905      	bls.n	8004a74 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e1df      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a74:	4b99      	ldr	r3, [pc, #612]	; (8004cdc <HAL_RCC_OscConfig+0x7b0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ec      	beq.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d02c      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004a8c:	4b94      	ldr	r3, [pc, #592]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	4990      	ldr	r1, [pc, #576]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d010      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ab2:	4b8b      	ldr	r3, [pc, #556]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	4a89      	ldr	r2, [pc, #548]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004aba:	f043 0304 	orr.w	r3, r3, #4
 8004abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ac2:	4b87      	ldr	r3, [pc, #540]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac8:	4a85      	ldr	r2, [pc, #532]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ad2:	e018      	b.n	8004b06 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ad4:	4b82      	ldr	r3, [pc, #520]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	4a81      	ldr	r2, [pc, #516]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae4:	e00f      	b.n	8004b06 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ae6:	4b7e      	ldr	r3, [pc, #504]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	4a7c      	ldr	r2, [pc, #496]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004af6:	4b7a      	ldr	r3, [pc, #488]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afc:	4a78      	ldr	r2, [pc, #480]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004afe:	f023 0304 	bic.w	r3, r3, #4
 8004b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d016      	beq.n	8004b3c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0e:	f7fc fec9 	bl	80018a4 <HAL_GetTick>
 8004b12:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b14:	e00a      	b.n	8004b2c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b16:	f7fc fec5 	bl	80018a4 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e17f      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b2c:	4b6c      	ldr	r3, [pc, #432]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ed      	beq.n	8004b16 <HAL_RCC_OscConfig+0x5ea>
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fc feb2 	bl	80018a4 <HAL_GetTick>
 8004b40:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b44:	f7fc feae 	bl	80018a4 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e168      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b5a:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1ed      	bne.n	8004b44 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004b68:	4b5d      	ldr	r3, [pc, #372]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	4a5c      	ldr	r2, [pc, #368]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b80:	4b57      	ldr	r3, [pc, #348]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b84:	4a56      	ldr	r2, [pc, #344]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d03c      	beq.n	8004c12 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01c      	beq.n	8004bda <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ba0:	4b4f      	ldr	r3, [pc, #316]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba6:	4a4e      	ldr	r2, [pc, #312]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fc fe78 	bl	80018a4 <HAL_GetTick>
 8004bb4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb8:	f7fc fe74 	bl	80018a4 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e130      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bca:	4b45      	ldr	r3, [pc, #276]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ef      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x68c>
 8004bd8:	e01b      	b.n	8004c12 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bda:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004be0:	4a3f      	ldr	r2, [pc, #252]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bea:	f7fc fe5b 	bl	80018a4 <HAL_GetTick>
 8004bee:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bf2:	f7fc fe57 	bl	80018a4 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e113      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c04:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1ef      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8107 	beq.w	8004e2a <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	f040 80cf 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c26:	4b2e      	ldr	r3, [pc, #184]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0203 	and.w	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d12c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	3b01      	subs	r3, #1
 8004c46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d123      	bne.n	8004c94 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d11b      	bne.n	8004c94 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d113      	bne.n	8004c94 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d109      	bne.n	8004c94 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d071      	beq.n	8004d78 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d06c      	beq.n	8004d74 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c9a:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d105      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0ba      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cc2:	f7fc fdef 	bl	80018a4 <HAL_GetTick>
 8004cc6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc8:	e00c      	b.n	8004ce4 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fc fdeb 	bl	80018a4 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d905      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e0a7      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce4:	4b53      	ldr	r3, [pc, #332]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ec      	bne.n	8004cca <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	4b50      	ldr	r3, [pc, #320]	; (8004e38 <HAL_RCC_OscConfig+0x90c>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d00:	3a01      	subs	r2, #1
 8004d02:	0112      	lsls	r2, r2, #4
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d0a:	0212      	lsls	r2, r2, #8
 8004d0c:	4311      	orrs	r1, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d12:	0852      	lsrs	r2, r2, #1
 8004d14:	3a01      	subs	r2, #1
 8004d16:	0552      	lsls	r2, r2, #21
 8004d18:	4311      	orrs	r1, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d1e:	0852      	lsrs	r2, r2, #1
 8004d20:	3a01      	subs	r2, #1
 8004d22:	0652      	lsls	r2, r2, #25
 8004d24:	4311      	orrs	r1, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d2a:	06d2      	lsls	r2, r2, #27
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	4941      	ldr	r1, [pc, #260]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d34:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a3e      	ldr	r2, [pc, #248]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d40:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4a3b      	ldr	r2, [pc, #236]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d4c:	f7fc fdaa 	bl	80018a4 <HAL_GetTick>
 8004d50:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fc fda6 	bl	80018a4 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e062      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d66:	4b33      	ldr	r3, [pc, #204]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d72:	e05a      	b.n	8004e2a <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e059      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d78:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d152      	bne.n	8004e2a <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d84:	4b2b      	ldr	r3, [pc, #172]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d90:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a27      	ldr	r2, [pc, #156]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d9c:	f7fc fd82 	bl	80018a4 <HAL_GetTick>
 8004da0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fc fd7e 	bl	80018a4 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e03a      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db6:	4b1f      	ldr	r3, [pc, #124]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x878>
 8004dc2:	e032      	b.n	8004e2a <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d02d      	beq.n	8004e26 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dca:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004dd6:	4b17      	ldr	r3, [pc, #92]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	4a13      	ldr	r2, [pc, #76]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004de8:	f023 0303 	bic.w	r3, r3, #3
 8004dec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004df4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fc fd51 	bl	80018a4 <HAL_GetTick>
 8004e02:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fc fd4d 	bl	80018a4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e009      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_RCC_OscConfig+0x908>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCC_OscConfig+0x8da>
 8004e24:	e001      	b.n	8004e2a <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3728      	adds	r7, #40	; 0x28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	019d800c 	.word	0x019d800c

08004e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e10f      	b.n	8005074 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e54:	4b89      	ldr	r3, [pc, #548]	; (800507c <HAL_RCC_ClockConfig+0x240>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d910      	bls.n	8004e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e62:	4b86      	ldr	r3, [pc, #536]	; (800507c <HAL_RCC_ClockConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 020f 	bic.w	r2, r3, #15
 8004e6a:	4984      	ldr	r1, [pc, #528]	; (800507c <HAL_RCC_ClockConfig+0x240>)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e72:	4b82      	ldr	r3, [pc, #520]	; (800507c <HAL_RCC_ClockConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0f7      	b.n	8005074 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8089 	beq.w	8004fa4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d133      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9a:	4b79      	ldr	r3, [pc, #484]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0e4      	b.n	8005074 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004eaa:	f000 fa2d 	bl	8005308 <RCC_GetSysClockFreqFromPLLSource>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4a74      	ldr	r2, [pc, #464]	; (8005084 <HAL_RCC_ClockConfig+0x248>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d955      	bls.n	8004f62 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004eb6:	4b72      	ldr	r3, [pc, #456]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ec2:	4b6f      	ldr	r3, [pc, #444]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eca:	4a6d      	ldr	r2, [pc, #436]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	e044      	b.n	8004f62 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d03e      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x126>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d13a      	bne.n	8004f62 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eec:	4b64      	ldr	r3, [pc, #400]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef4:	4a62      	ldr	r2, [pc, #392]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	e02f      	b.n	8004f62 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d107      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f0a:	4b5d      	ldr	r3, [pc, #372]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d115      	bne.n	8004f42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e0ac      	b.n	8005074 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f22:	4b57      	ldr	r3, [pc, #348]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e0a0      	b.n	8005074 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f32:	4b53      	ldr	r3, [pc, #332]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e098      	b.n	8005074 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004f42:	f000 f8a7 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 8004f46:	4603      	mov	r3, r0
 8004f48:	4a4e      	ldr	r2, [pc, #312]	; (8005084 <HAL_RCC_ClockConfig+0x248>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d909      	bls.n	8004f62 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f4e:	4b4c      	ldr	r3, [pc, #304]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f56:	4a4a      	ldr	r2, [pc, #296]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f62:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f023 0203 	bic.w	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4944      	ldr	r1, [pc, #272]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f74:	f7fc fc96 	bl	80018a4 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f7c:	f7fc fc92 	bl	80018a4 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e070      	b.n	8005074 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f92:	4b3b      	ldr	r3, [pc, #236]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 020c 	and.w	r2, r3, #12
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d1eb      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d009      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb0:	4b33      	ldr	r3, [pc, #204]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4930      	ldr	r1, [pc, #192]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b80      	cmp	r3, #128	; 0x80
 8004fc8:	d105      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fca:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8004fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fd4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd6:	4b29      	ldr	r3, [pc, #164]	; (800507c <HAL_RCC_ClockConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d210      	bcs.n	8005006 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe4:	4b25      	ldr	r3, [pc, #148]	; (800507c <HAL_RCC_ClockConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 020f 	bic.w	r2, r3, #15
 8004fec:	4923      	ldr	r1, [pc, #140]	; (800507c <HAL_RCC_ClockConfig+0x240>)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff4:	4b21      	ldr	r3, [pc, #132]	; (800507c <HAL_RCC_ClockConfig+0x240>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d001      	beq.n	8005006 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e036      	b.n	8005074 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4918      	ldr	r1, [pc, #96]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d009      	beq.n	8005044 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005030:	4b13      	ldr	r3, [pc, #76]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4910      	ldr	r1, [pc, #64]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005044:	f000 f826 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_RCC_ClockConfig+0x244>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	091b      	lsrs	r3, r3, #4
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	490c      	ldr	r1, [pc, #48]	; (8005088 <HAL_RCC_ClockConfig+0x24c>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
 8005060:	4a0a      	ldr	r2, [pc, #40]	; (800508c <HAL_RCC_ClockConfig+0x250>)
 8005062:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005064:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <HAL_RCC_ClockConfig+0x254>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7fc fb19 	bl	80016a0 <HAL_InitTick>
 800506e:	4603      	mov	r3, r0
 8005070:	73fb      	strb	r3, [r7, #15]

  return status;
 8005072:	7bfb      	ldrb	r3, [r7, #15]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40022000 	.word	0x40022000
 8005080:	40021000 	.word	0x40021000
 8005084:	04c4b400 	.word	0x04c4b400
 8005088:	0800a464 	.word	0x0800a464
 800508c:	20000170 	.word	0x20000170
 8005090:	20000174 	.word	0x20000174

08005094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005094:	b480      	push	{r7}
 8005096:	b089      	sub	sp, #36	; 0x24
 8005098:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	2300      	movs	r3, #0
 80050a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a2:	4b3e      	ldr	r3, [pc, #248]	; (800519c <HAL_RCC_GetSysClockFreq+0x108>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050ac:	4b3b      	ldr	r3, [pc, #236]	; (800519c <HAL_RCC_GetSysClockFreq+0x108>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_GetSysClockFreq+0x34>
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b0c      	cmp	r3, #12
 80050c0:	d121      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d11e      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050c8:	4b34      	ldr	r3, [pc, #208]	; (800519c <HAL_RCC_GetSysClockFreq+0x108>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050d4:	4b31      	ldr	r3, [pc, #196]	; (800519c <HAL_RCC_GetSysClockFreq+0x108>)
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	e005      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050e4:	4b2d      	ldr	r3, [pc, #180]	; (800519c <HAL_RCC_GetSysClockFreq+0x108>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050f0:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005104:	e00a      	b.n	800511c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d102      	bne.n	8005112 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800510c:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e004      	b.n	800511c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d101      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005118:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800511a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d134      	bne.n	800518c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005122:	4b1e      	ldr	r3, [pc, #120]	; (800519c <HAL_RCC_GetSysClockFreq+0x108>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d003      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0xa6>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d003      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0xac>
 8005138:	e005      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800513c:	617b      	str	r3, [r7, #20]
      break;
 800513e:	e005      	b.n	800514c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005140:	4b19      	ldr	r3, [pc, #100]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005142:	617b      	str	r3, [r7, #20]
      break;
 8005144:	e002      	b.n	800514c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	617b      	str	r3, [r7, #20]
      break;
 800514a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800514c:	4b13      	ldr	r3, [pc, #76]	; (800519c <HAL_RCC_GetSysClockFreq+0x108>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	3301      	adds	r3, #1
 8005158:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <HAL_RCC_GetSysClockFreq+0x108>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	fb02 f203 	mul.w	r2, r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_RCC_GetSysClockFreq+0x108>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	0e5b      	lsrs	r3, r3, #25
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	3301      	adds	r3, #1
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800518c:	69bb      	ldr	r3, [r7, #24]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3724      	adds	r7, #36	; 0x24
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40021000 	.word	0x40021000
 80051a0:	0800a47c 	.word	0x0800a47c
 80051a4:	00f42400 	.word	0x00f42400
 80051a8:	007a1200 	.word	0x007a1200

080051ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051b2:	681b      	ldr	r3, [r3, #0]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000170 	.word	0x20000170

080051c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051c8:	f7ff fff0 	bl	80051ac <HAL_RCC_GetHCLKFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	4904      	ldr	r1, [pc, #16]	; (80051ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000
 80051ec:	0800a474 	.word	0x0800a474

080051f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	220f      	movs	r2, #15
 80051fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005200:	4b12      	ldr	r3, [pc, #72]	; (800524c <HAL_RCC_GetClockConfig+0x5c>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 0203 	and.w	r2, r3, #3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800520c:	4b0f      	ldr	r3, [pc, #60]	; (800524c <HAL_RCC_GetClockConfig+0x5c>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005218:	4b0c      	ldr	r3, [pc, #48]	; (800524c <HAL_RCC_GetClockConfig+0x5c>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005224:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_RCC_GetClockConfig+0x5c>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	08db      	lsrs	r3, r3, #3
 800522a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005232:	4b07      	ldr	r3, [pc, #28]	; (8005250 <HAL_RCC_GetClockConfig+0x60>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 020f 	and.w	r2, r3, #15
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40021000 	.word	0x40021000
 8005250:	40022000 	.word	0x40022000

08005254 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005260:	4b27      	ldr	r3, [pc, #156]	; (8005300 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800526c:	f7ff f840 	bl	80042f0 <HAL_PWREx_GetVoltageRange>
 8005270:	6178      	str	r0, [r7, #20]
 8005272:	e014      	b.n	800529e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005274:	4b22      	ldr	r3, [pc, #136]	; (8005300 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005278:	4a21      	ldr	r2, [pc, #132]	; (8005300 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800527a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527e:	6593      	str	r3, [r2, #88]	; 0x58
 8005280:	4b1f      	ldr	r3, [pc, #124]	; (8005300 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800528c:	f7ff f830 	bl	80042f0 <HAL_PWREx_GetVoltageRange>
 8005290:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005292:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	4a1a      	ldr	r2, [pc, #104]	; (8005300 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a4:	d10b      	bne.n	80052be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b80      	cmp	r3, #128	; 0x80
 80052aa:	d913      	bls.n	80052d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2ba0      	cmp	r3, #160	; 0xa0
 80052b0:	d902      	bls.n	80052b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052b2:	2302      	movs	r3, #2
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	e00d      	b.n	80052d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052b8:	2301      	movs	r3, #1
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	e00a      	b.n	80052d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b7f      	cmp	r3, #127	; 0x7f
 80052c2:	d902      	bls.n	80052ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80052c4:	2302      	movs	r3, #2
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	e004      	b.n	80052d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b70      	cmp	r3, #112	; 0x70
 80052ce:	d101      	bne.n	80052d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052d0:	2301      	movs	r3, #1
 80052d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052d4:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f023 020f 	bic.w	r2, r3, #15
 80052dc:	4909      	ldr	r1, [pc, #36]	; (8005304 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052e4:	4b07      	ldr	r3, [pc, #28]	; (8005304 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d001      	beq.n	80052f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000
 8005304:	40022000 	.word	0x40022000

08005308 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005312:	4b2d      	ldr	r3, [pc, #180]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d118      	bne.n	8005350 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800531e:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d107      	bne.n	800533a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800532a:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800532c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e005      	b.n	8005346 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800533a:	4b23      	ldr	r3, [pc, #140]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	091b      	lsrs	r3, r3, #4
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005346:	4a21      	ldr	r2, [pc, #132]	; (80053cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005350:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d003      	beq.n	8005368 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b03      	cmp	r3, #3
 8005364:	d003      	beq.n	800536e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8005366:	e005      	b.n	8005374 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005368:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800536a:	613b      	str	r3, [r7, #16]
    break;
 800536c:	e005      	b.n	800537a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800536e:	4b19      	ldr	r3, [pc, #100]	; (80053d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005370:	613b      	str	r3, [r7, #16]
    break;
 8005372:	e002      	b.n	800537a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	613b      	str	r3, [r7, #16]
    break;
 8005378:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800537a:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	091b      	lsrs	r3, r3, #4
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	3301      	adds	r3, #1
 8005386:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	0a1b      	lsrs	r3, r3, #8
 800538e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	fb02 f203 	mul.w	r2, r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	0e5b      	lsrs	r3, r3, #25
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	3301      	adds	r3, #1
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80053ba:	683b      	ldr	r3, [r7, #0]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40021000 	.word	0x40021000
 80053cc:	0800a47c 	.word	0x0800a47c
 80053d0:	00f42400 	.word	0x00f42400
 80053d4:	007a1200 	.word	0x007a1200

080053d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053e0:	2300      	movs	r3, #0
 80053e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053e4:	2300      	movs	r3, #0
 80053e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d040      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f8:	2b80      	cmp	r3, #128	; 0x80
 80053fa:	d02a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	d825      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005400:	2b60      	cmp	r3, #96	; 0x60
 8005402:	d026      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005404:	2b60      	cmp	r3, #96	; 0x60
 8005406:	d821      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d006      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d81d      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d009      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005414:	2b20      	cmp	r3, #32
 8005416:	d010      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005418:	e018      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800541a:	4b89      	ldr	r3, [pc, #548]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	4a88      	ldr	r2, [pc, #544]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005424:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005426:	e015      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	2100      	movs	r1, #0
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fb3e 	bl	8005ab0 <RCCEx_PLLSAI1_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005438:	e00c      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3320      	adds	r3, #32
 800543e:	2100      	movs	r1, #0
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fc29 	bl	8005c98 <RCCEx_PLLSAI2_Config>
 8005446:	4603      	mov	r3, r0
 8005448:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800544a:	e003      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	74fb      	strb	r3, [r7, #19]
      break;
 8005450:	e000      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800545a:	4b79      	ldr	r3, [pc, #484]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800545c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005460:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005468:	4975      	ldr	r1, [pc, #468]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005470:	e001      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d047      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d030      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 800548c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005490:	d82a      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005496:	d02a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800549c:	d824      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800549e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a2:	d008      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80054a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a8:	d81e      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80054ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b2:	d010      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80054b4:	e018      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054b6:	4b62      	ldr	r3, [pc, #392]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	4a61      	ldr	r2, [pc, #388]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054c2:	e015      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3304      	adds	r3, #4
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 faf0 	bl	8005ab0 <RCCEx_PLLSAI1_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054d4:	e00c      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3320      	adds	r3, #32
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fbdb 	bl	8005c98 <RCCEx_PLLSAI2_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054e6:	e003      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	74fb      	strb	r3, [r7, #19]
      break;
 80054ec:	e000      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80054ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10b      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054f6:	4b52      	ldr	r3, [pc, #328]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	494e      	ldr	r1, [pc, #312]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800550c:	e001      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	7cfb      	ldrb	r3, [r7, #19]
 8005510:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 809f 	beq.w	800565e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005520:	2300      	movs	r3, #0
 8005522:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005524:	4b46      	ldr	r3, [pc, #280]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800553a:	4b41      	ldr	r3, [pc, #260]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553e:	4a40      	ldr	r2, [pc, #256]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005544:	6593      	str	r3, [r2, #88]	; 0x58
 8005546:	4b3e      	ldr	r3, [pc, #248]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005552:	2301      	movs	r3, #1
 8005554:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005556:	4b3b      	ldr	r3, [pc, #236]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a3a      	ldr	r2, [pc, #232]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800555c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005560:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005562:	f7fc f99f 	bl	80018a4 <HAL_GetTick>
 8005566:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005568:	e009      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556a:	f7fc f99b 	bl	80018a4 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d902      	bls.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	74fb      	strb	r3, [r7, #19]
        break;
 800557c:	e005      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800557e:	4b31      	ldr	r3, [pc, #196]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0ef      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800558a:	7cfb      	ldrb	r3, [r7, #19]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d15b      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005590:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01f      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d019      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055ae:	4b24      	ldr	r3, [pc, #144]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ba:	4b21      	ldr	r3, [pc, #132]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c0:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ca:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d0:	4a1b      	ldr	r2, [pc, #108]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055da:	4a19      	ldr	r2, [pc, #100]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d016      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fc f95a 	bl	80018a4 <HAL_GetTick>
 80055f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f2:	e00b      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f4:	f7fc f956 	bl	80018a4 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005602:	4293      	cmp	r3, r2
 8005604:	d902      	bls.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	74fb      	strb	r3, [r7, #19]
            break;
 800560a:	e006      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800560c:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0ec      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800561a:	7cfb      	ldrb	r3, [r7, #19]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10c      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005626:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005630:	4903      	ldr	r1, [pc, #12]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005638:	e008      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800563a:	7cfb      	ldrb	r3, [r7, #19]
 800563c:	74bb      	strb	r3, [r7, #18]
 800563e:	e005      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005640:	40021000 	.word	0x40021000
 8005644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005648:	7cfb      	ldrb	r3, [r7, #19]
 800564a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800564c:	7c7b      	ldrb	r3, [r7, #17]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d105      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005652:	4ba0      	ldr	r3, [pc, #640]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005656:	4a9f      	ldr	r2, [pc, #636]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800565c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800566a:	4b9a      	ldr	r3, [pc, #616]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005670:	f023 0203 	bic.w	r2, r3, #3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005678:	4996      	ldr	r1, [pc, #600]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800568c:	4b91      	ldr	r3, [pc, #580]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005692:	f023 020c 	bic.w	r2, r3, #12
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	498e      	ldr	r1, [pc, #568]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056ae:	4b89      	ldr	r3, [pc, #548]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056bc:	4985      	ldr	r1, [pc, #532]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056d0:	4b80      	ldr	r3, [pc, #512]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056de:	497d      	ldr	r1, [pc, #500]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056f2:	4b78      	ldr	r3, [pc, #480]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005700:	4974      	ldr	r1, [pc, #464]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005714:	4b6f      	ldr	r3, [pc, #444]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005722:	496c      	ldr	r1, [pc, #432]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005736:	4b67      	ldr	r3, [pc, #412]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005744:	4963      	ldr	r1, [pc, #396]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005758:	4b5e      	ldr	r3, [pc, #376]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005766:	495b      	ldr	r1, [pc, #364]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800577a:	4b56      	ldr	r3, [pc, #344]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800577c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005780:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	4952      	ldr	r1, [pc, #328]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800579c:	4b4d      	ldr	r3, [pc, #308]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057aa:	494a      	ldr	r1, [pc, #296]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057be:	4b45      	ldr	r3, [pc, #276]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057cc:	4941      	ldr	r1, [pc, #260]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057e0:	4b3c      	ldr	r3, [pc, #240]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057e6:	f023 0203 	bic.w	r2, r3, #3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ee:	4939      	ldr	r1, [pc, #228]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d028      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005802:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005808:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005810:	4930      	ldr	r1, [pc, #192]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005820:	d106      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005822:	4b2c      	ldr	r3, [pc, #176]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	4a2b      	ldr	r2, [pc, #172]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800582c:	60d3      	str	r3, [r2, #12]
 800582e:	e011      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005838:	d10c      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3304      	adds	r3, #4
 800583e:	2101      	movs	r1, #1
 8005840:	4618      	mov	r0, r3
 8005842:	f000 f935 	bl	8005ab0 <RCCEx_PLLSAI1_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005850:	7cfb      	ldrb	r3, [r7, #19]
 8005852:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d04d      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005868:	d108      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800586a:	4b1a      	ldr	r3, [pc, #104]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005876:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800587a:	e012      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800587c:	4b15      	ldr	r3, [pc, #84]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005882:	4a14      	ldr	r2, [pc, #80]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005888:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800588c:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589a:	490e      	ldr	r1, [pc, #56]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058aa:	d106      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058b6:	60d3      	str	r3, [r2, #12]
 80058b8:	e020      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c2:	d109      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058c4:	4b03      	ldr	r3, [pc, #12]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4a02      	ldr	r2, [pc, #8]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ce:	60d3      	str	r3, [r2, #12]
 80058d0:	e014      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80058d2:	bf00      	nop
 80058d4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058e0:	d10c      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3304      	adds	r3, #4
 80058e6:	2101      	movs	r1, #1
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 f8e1 	bl	8005ab0 <RCCEx_PLLSAI1_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058f2:	7cfb      	ldrb	r3, [r7, #19]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80058f8:	7cfb      	ldrb	r3, [r7, #19]
 80058fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d028      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005908:	4b68      	ldr	r3, [pc, #416]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800590a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005916:	4965      	ldr	r1, [pc, #404]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005926:	d106      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005928:	4b60      	ldr	r3, [pc, #384]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4a5f      	ldr	r2, [pc, #380]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800592e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005932:	60d3      	str	r3, [r2, #12]
 8005934:	e011      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800593e:	d10c      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	2101      	movs	r1, #1
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f8b2 	bl	8005ab0 <RCCEx_PLLSAI1_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005950:	7cfb      	ldrb	r3, [r7, #19]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005956:	7cfb      	ldrb	r3, [r7, #19]
 8005958:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01e      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005966:	4b51      	ldr	r3, [pc, #324]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005976:	494d      	ldr	r1, [pc, #308]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005988:	d10c      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3304      	adds	r3, #4
 800598e:	2102      	movs	r1, #2
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f88d 	bl	8005ab0 <RCCEx_PLLSAI1_Config>
 8005996:	4603      	mov	r3, r0
 8005998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800599a:	7cfb      	ldrb	r3, [r7, #19]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059b0:	4b3e      	ldr	r3, [pc, #248]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059b6:	f023 0204 	bic.w	r2, r3, #4
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c0:	493a      	ldr	r1, [pc, #232]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00b      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80059d4:	4b35      	ldr	r3, [pc, #212]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059da:	f023 0218 	bic.w	r2, r3, #24
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	4931      	ldr	r1, [pc, #196]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d035      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059f8:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a2b      	ldr	r2, [pc, #172]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a04:	f7fb ff4e 	bl	80018a4 <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a0a:	e009      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a0c:	f7fb ff4a 	bl	80018a4 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d902      	bls.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	74fb      	strb	r3, [r7, #19]
        break;
 8005a1e:	e005      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a20:	4b22      	ldr	r3, [pc, #136]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ef      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005a2c:	7cfb      	ldrb	r3, [r7, #19]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d113      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005a32:	4b1e      	ldr	r3, [pc, #120]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a42:	491a      	ldr	r1, [pc, #104]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3320      	adds	r3, #32
 8005a4e:	2102      	movs	r1, #2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f921 	bl	8005c98 <RCCEx_PLLSAI2_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d017      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a70:	4b0e      	ldr	r3, [pc, #56]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a80:	490a      	ldr	r1, [pc, #40]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a92:	d105      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4a04      	ldr	r2, [pc, #16]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005aa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40021000 	.word	0x40021000

08005ab0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005abe:	4b72      	ldr	r3, [pc, #456]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00e      	beq.n	8005ae8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005aca:	4b6f      	ldr	r3, [pc, #444]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0203 	and.w	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d103      	bne.n	8005ae2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
       ||
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d142      	bne.n	8005b68 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
 8005ae6:	e03f      	b.n	8005b68 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d018      	beq.n	8005b22 <RCCEx_PLLSAI1_Config+0x72>
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d825      	bhi.n	8005b40 <RCCEx_PLLSAI1_Config+0x90>
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d002      	beq.n	8005afe <RCCEx_PLLSAI1_Config+0x4e>
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d009      	beq.n	8005b10 <RCCEx_PLLSAI1_Config+0x60>
 8005afc:	e020      	b.n	8005b40 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005afe:	4b62      	ldr	r3, [pc, #392]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d11d      	bne.n	8005b46 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b0e:	e01a      	b.n	8005b46 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b10:	4b5d      	ldr	r3, [pc, #372]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d116      	bne.n	8005b4a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b20:	e013      	b.n	8005b4a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b22:	4b59      	ldr	r3, [pc, #356]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10f      	bne.n	8005b4e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b2e:	4b56      	ldr	r3, [pc, #344]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d109      	bne.n	8005b4e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b3e:	e006      	b.n	8005b4e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
      break;
 8005b44:	e004      	b.n	8005b50 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005b46:	bf00      	nop
 8005b48:	e002      	b.n	8005b50 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005b4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005b56:	4b4c      	ldr	r3, [pc, #304]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f023 0203 	bic.w	r2, r3, #3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4949      	ldr	r1, [pc, #292]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f040 8086 	bne.w	8005c7c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b70:	4b45      	ldr	r3, [pc, #276]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a44      	ldr	r2, [pc, #272]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7c:	f7fb fe92 	bl	80018a4 <HAL_GetTick>
 8005b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b82:	e009      	b.n	8005b98 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b84:	f7fb fe8e 	bl	80018a4 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d902      	bls.n	8005b98 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	73fb      	strb	r3, [r7, #15]
        break;
 8005b96:	e005      	b.n	8005ba4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b98:	4b3b      	ldr	r3, [pc, #236]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ef      	bne.n	8005b84 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d168      	bne.n	8005c7c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d113      	bne.n	8005bd8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bb0:	4b35      	ldr	r3, [pc, #212]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	4b35      	ldr	r3, [pc, #212]	; (8005c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6892      	ldr	r2, [r2, #8]
 8005bbc:	0211      	lsls	r1, r2, #8
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68d2      	ldr	r2, [r2, #12]
 8005bc2:	06d2      	lsls	r2, r2, #27
 8005bc4:	4311      	orrs	r1, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6852      	ldr	r2, [r2, #4]
 8005bca:	3a01      	subs	r2, #1
 8005bcc:	0112      	lsls	r2, r2, #4
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	492d      	ldr	r1, [pc, #180]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	610b      	str	r3, [r1, #16]
 8005bd6:	e02d      	b.n	8005c34 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d115      	bne.n	8005c0a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bde:	4b2a      	ldr	r3, [pc, #168]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	4b2b      	ldr	r3, [pc, #172]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6892      	ldr	r2, [r2, #8]
 8005bea:	0211      	lsls	r1, r2, #8
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6912      	ldr	r2, [r2, #16]
 8005bf0:	0852      	lsrs	r2, r2, #1
 8005bf2:	3a01      	subs	r2, #1
 8005bf4:	0552      	lsls	r2, r2, #21
 8005bf6:	4311      	orrs	r1, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6852      	ldr	r2, [r2, #4]
 8005bfc:	3a01      	subs	r2, #1
 8005bfe:	0112      	lsls	r2, r2, #4
 8005c00:	430a      	orrs	r2, r1
 8005c02:	4921      	ldr	r1, [pc, #132]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	610b      	str	r3, [r1, #16]
 8005c08:	e014      	b.n	8005c34 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c0a:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	4b21      	ldr	r3, [pc, #132]	; (8005c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6892      	ldr	r2, [r2, #8]
 8005c16:	0211      	lsls	r1, r2, #8
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6952      	ldr	r2, [r2, #20]
 8005c1c:	0852      	lsrs	r2, r2, #1
 8005c1e:	3a01      	subs	r2, #1
 8005c20:	0652      	lsls	r2, r2, #25
 8005c22:	4311      	orrs	r1, r2
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6852      	ldr	r2, [r2, #4]
 8005c28:	3a01      	subs	r2, #1
 8005c2a:	0112      	lsls	r2, r2, #4
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	4916      	ldr	r1, [pc, #88]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c34:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a13      	ldr	r2, [pc, #76]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c40:	f7fb fe30 	bl	80018a4 <HAL_GetTick>
 8005c44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c46:	e009      	b.n	8005c5c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c48:	f7fb fe2c 	bl	80018a4 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d902      	bls.n	8005c5c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	73fb      	strb	r3, [r7, #15]
          break;
 8005c5a:	e005      	b.n	8005c68 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0ef      	beq.n	8005c48 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	4904      	ldr	r1, [pc, #16]	; (8005c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	07ff800f 	.word	0x07ff800f
 8005c90:	ff9f800f 	.word	0xff9f800f
 8005c94:	f9ff800f 	.word	0xf9ff800f

08005c98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ca6:	4b72      	ldr	r3, [pc, #456]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00e      	beq.n	8005cd0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005cb2:	4b6f      	ldr	r3, [pc, #444]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0203 	and.w	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d103      	bne.n	8005cca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d142      	bne.n	8005d50 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	73fb      	strb	r3, [r7, #15]
 8005cce:	e03f      	b.n	8005d50 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d018      	beq.n	8005d0a <RCCEx_PLLSAI2_Config+0x72>
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d825      	bhi.n	8005d28 <RCCEx_PLLSAI2_Config+0x90>
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d002      	beq.n	8005ce6 <RCCEx_PLLSAI2_Config+0x4e>
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d009      	beq.n	8005cf8 <RCCEx_PLLSAI2_Config+0x60>
 8005ce4:	e020      	b.n	8005d28 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ce6:	4b62      	ldr	r3, [pc, #392]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d11d      	bne.n	8005d2e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf6:	e01a      	b.n	8005d2e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cf8:	4b5d      	ldr	r3, [pc, #372]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d116      	bne.n	8005d32 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d08:	e013      	b.n	8005d32 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d0a:	4b59      	ldr	r3, [pc, #356]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10f      	bne.n	8005d36 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d16:	4b56      	ldr	r3, [pc, #344]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d26:	e006      	b.n	8005d36 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d2c:	e004      	b.n	8005d38 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d2e:	bf00      	nop
 8005d30:	e002      	b.n	8005d38 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d32:	bf00      	nop
 8005d34:	e000      	b.n	8005d38 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d36:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d108      	bne.n	8005d50 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005d3e:	4b4c      	ldr	r3, [pc, #304]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f023 0203 	bic.w	r2, r3, #3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4949      	ldr	r1, [pc, #292]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 8086 	bne.w	8005e64 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d58:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a44      	ldr	r2, [pc, #272]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d64:	f7fb fd9e 	bl	80018a4 <HAL_GetTick>
 8005d68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d6a:	e009      	b.n	8005d80 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d6c:	f7fb fd9a 	bl	80018a4 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d902      	bls.n	8005d80 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d7e:	e005      	b.n	8005d8c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d80:	4b3b      	ldr	r3, [pc, #236]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ef      	bne.n	8005d6c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d168      	bne.n	8005e64 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d113      	bne.n	8005dc0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d98:	4b35      	ldr	r3, [pc, #212]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d9a:	695a      	ldr	r2, [r3, #20]
 8005d9c:	4b35      	ldr	r3, [pc, #212]	; (8005e74 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6892      	ldr	r2, [r2, #8]
 8005da4:	0211      	lsls	r1, r2, #8
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	68d2      	ldr	r2, [r2, #12]
 8005daa:	06d2      	lsls	r2, r2, #27
 8005dac:	4311      	orrs	r1, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6852      	ldr	r2, [r2, #4]
 8005db2:	3a01      	subs	r2, #1
 8005db4:	0112      	lsls	r2, r2, #4
 8005db6:	430a      	orrs	r2, r1
 8005db8:	492d      	ldr	r1, [pc, #180]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	614b      	str	r3, [r1, #20]
 8005dbe:	e02d      	b.n	8005e1c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d115      	bne.n	8005df2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dc6:	4b2a      	ldr	r3, [pc, #168]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dc8:	695a      	ldr	r2, [r3, #20]
 8005dca:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6892      	ldr	r2, [r2, #8]
 8005dd2:	0211      	lsls	r1, r2, #8
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6912      	ldr	r2, [r2, #16]
 8005dd8:	0852      	lsrs	r2, r2, #1
 8005dda:	3a01      	subs	r2, #1
 8005ddc:	0552      	lsls	r2, r2, #21
 8005dde:	4311      	orrs	r1, r2
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6852      	ldr	r2, [r2, #4]
 8005de4:	3a01      	subs	r2, #1
 8005de6:	0112      	lsls	r2, r2, #4
 8005de8:	430a      	orrs	r2, r1
 8005dea:	4921      	ldr	r1, [pc, #132]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	614b      	str	r3, [r1, #20]
 8005df0:	e014      	b.n	8005e1c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005df2:	4b1f      	ldr	r3, [pc, #124]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	4b21      	ldr	r3, [pc, #132]	; (8005e7c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6892      	ldr	r2, [r2, #8]
 8005dfe:	0211      	lsls	r1, r2, #8
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6952      	ldr	r2, [r2, #20]
 8005e04:	0852      	lsrs	r2, r2, #1
 8005e06:	3a01      	subs	r2, #1
 8005e08:	0652      	lsls	r2, r2, #25
 8005e0a:	4311      	orrs	r1, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6852      	ldr	r2, [r2, #4]
 8005e10:	3a01      	subs	r2, #1
 8005e12:	0112      	lsls	r2, r2, #4
 8005e14:	430a      	orrs	r2, r1
 8005e16:	4916      	ldr	r1, [pc, #88]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e1c:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a13      	ldr	r2, [pc, #76]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e28:	f7fb fd3c 	bl	80018a4 <HAL_GetTick>
 8005e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e2e:	e009      	b.n	8005e44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e30:	f7fb fd38 	bl	80018a4 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d902      	bls.n	8005e44 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	73fb      	strb	r3, [r7, #15]
          break;
 8005e42:	e005      	b.n	8005e50 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0ef      	beq.n	8005e30 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e56:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e58:	695a      	ldr	r2, [r3, #20]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	4904      	ldr	r1, [pc, #16]	; (8005e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40021000 	.word	0x40021000
 8005e74:	07ff800f 	.word	0x07ff800f
 8005e78:	ff9f800f 	.word	0xff9f800f
 8005e7c:	f9ff800f 	.word	0xf9ff800f

08005e80 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d07f      	beq.n	8005f92 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fb fb54 	bl	8001554 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005eb2:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	22ca      	movs	r2, #202	; 0xca
 8005ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2253      	movs	r2, #83	; 0x53
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f9b5 	bl	800623c <RTC_EnterInitMode>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d15a      	bne.n	8005f92 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6812      	ldr	r2, [r2, #0]
 8005ee6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eee:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6999      	ldr	r1, [r3, #24]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6912      	ldr	r2, [r2, #16]
 8005f16:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6919      	ldr	r1, [r3, #16]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	041a      	lsls	r2, r3, #16
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005f2c:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <HAL_RTC_Init+0x11c>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	4917      	ldr	r1, [pc, #92]	; (8005f9c <HAL_RTC_Init+0x11c>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f9af 	bl	80062a8 <RTC_ExitInitMode>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11e      	bne.n	8005f92 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005f62:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6999      	ldr	r1, [r3, #24]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	22ff      	movs	r2, #255	; 0xff
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40002800 	.word	0x40002800

08005fa0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_RTC_SetTime+0x1a>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e08b      	b.n	80060d2 <HAL_RTC_SetTime+0x132>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	22ca      	movs	r2, #202	; 0xca
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2253      	movs	r2, #83	; 0x53
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f92e 	bl	800623c <RTC_EnterInitMode>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005fe4:	7cfb      	ldrb	r3, [r7, #19]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d15e      	bne.n	80060a8 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005fea:	4b3c      	ldr	r3, [pc, #240]	; (80060dc <HAL_RTC_SetTime+0x13c>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff6:	d057      	beq.n	80060a8 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d125      	bne.n	800604a <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005ffe:	4b37      	ldr	r3, [pc, #220]	; (80060dc <HAL_RTC_SetTime+0x13c>)
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2200      	movs	r2, #0
 800600e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f000 f985 	bl	8006324 <RTC_ByteToBcd2>
 800601a:	4603      	mov	r3, r0
 800601c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	4618      	mov	r0, r3
 8006024:	f000 f97e 	bl	8006324 <RTC_ByteToBcd2>
 8006028:	4603      	mov	r3, r0
 800602a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800602c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	789b      	ldrb	r3, [r3, #2]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f976 	bl	8006324 <RTC_ByteToBcd2>
 8006038:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800603a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	78db      	ldrb	r3, [r3, #3]
 8006042:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e017      	b.n	800607a <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800604a:	4b24      	ldr	r3, [pc, #144]	; (80060dc <HAL_RTC_SetTime+0x13c>)
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2200      	movs	r2, #0
 800605a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006068:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800606e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	78db      	ldrb	r3, [r3, #3]
 8006074:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800607a:	4a18      	ldr	r2, [pc, #96]	; (80060dc <HAL_RTC_SetTime+0x13c>)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006082:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006086:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8006088:	4b14      	ldr	r3, [pc, #80]	; (80060dc <HAL_RTC_SetTime+0x13c>)
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	4a13      	ldr	r2, [pc, #76]	; (80060dc <HAL_RTC_SetTime+0x13c>)
 800608e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006092:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006094:	4b11      	ldr	r3, [pc, #68]	; (80060dc <HAL_RTC_SetTime+0x13c>)
 8006096:	699a      	ldr	r2, [r3, #24]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	68d9      	ldr	r1, [r3, #12]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	430b      	orrs	r3, r1
 80060a2:	490e      	ldr	r1, [pc, #56]	; (80060dc <HAL_RTC_SetTime+0x13c>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f8fd 	bl	80062a8 <RTC_ExitInitMode>
 80060ae:	4603      	mov	r3, r0
 80060b0:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	22ff      	movs	r2, #255	; 0xff
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80060ba:	7cfb      	ldrb	r3, [r7, #19]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d103      	bne.n	80060c8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80060d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd90      	pop	{r4, r7, pc}
 80060da:	bf00      	nop
 80060dc:	40002800 	.word	0x40002800

080060e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060e0:	b590      	push	{r4, r7, lr}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_RTC_SetDate+0x1a>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e074      	b.n	80061e4 <HAL_RTC_SetDate+0x104>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10e      	bne.n	800612e <HAL_RTC_SetDate+0x4e>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	d008      	beq.n	800612e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	f023 0310 	bic.w	r3, r3, #16
 8006124:	b2db      	uxtb	r3, r3
 8006126:	330a      	adds	r3, #10
 8006128:	b2da      	uxtb	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11c      	bne.n	800616e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	78db      	ldrb	r3, [r3, #3]
 8006138:	4618      	mov	r0, r3
 800613a:	f000 f8f3 	bl	8006324 <RTC_ByteToBcd2>
 800613e:	4603      	mov	r3, r0
 8006140:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 f8ec 	bl	8006324 <RTC_ByteToBcd2>
 800614c:	4603      	mov	r3, r0
 800614e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006150:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	789b      	ldrb	r3, [r3, #2]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 f8e4 	bl	8006324 <RTC_ByteToBcd2>
 800615c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800615e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e00e      	b.n	800618c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	78db      	ldrb	r3, [r3, #3]
 8006172:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800617a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006180:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	22ca      	movs	r2, #202	; 0xca
 8006192:	625a      	str	r2, [r3, #36]	; 0x24
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2253      	movs	r2, #83	; 0x53
 800619a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 f84d 	bl	800623c <RTC_EnterInitMode>
 80061a2:	4603      	mov	r3, r0
 80061a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80061a6:	7cfb      	ldrb	r3, [r7, #19]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10b      	bne.n	80061c4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80061ac:	4a0f      	ldr	r2, [pc, #60]	; (80061ec <HAL_RTC_SetDate+0x10c>)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f874 	bl	80062a8 <RTC_ExitInitMode>
 80061c0:	4603      	mov	r3, r0
 80061c2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	22ff      	movs	r2, #255	; 0xff
 80061ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80061cc:	7cfb      	ldrb	r3, [r7, #19]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80061e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd90      	pop	{r4, r7, pc}
 80061ec:	40002800 	.word	0x40002800

080061f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006206:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8006208:	f7fb fb4c 	bl	80018a4 <HAL_GetTick>
 800620c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800620e:	e009      	b.n	8006224 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006210:	f7fb fb48 	bl	80018a4 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800621e:	d901      	bls.n	8006224 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e007      	b.n	8006234 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0ee      	beq.n	8006210 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	d123      	bne.n	800629e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006264:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006266:	f7fb fb1d 	bl	80018a4 <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800626c:	e00d      	b.n	800628a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800626e:	f7fb fb19 	bl	80018a4 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800627c:	d905      	bls.n	800628a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2203      	movs	r2, #3
 8006286:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <RTC_EnterInitMode+0x62>
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b03      	cmp	r3, #3
 800629c:	d1e7      	bne.n	800626e <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80062b4:	4b1a      	ldr	r3, [pc, #104]	; (8006320 <RTC_ExitInitMode+0x78>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	4a19      	ldr	r2, [pc, #100]	; (8006320 <RTC_ExitInitMode+0x78>)
 80062ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062be:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80062c0:	4b17      	ldr	r3, [pc, #92]	; (8006320 <RTC_ExitInitMode+0x78>)
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10c      	bne.n	80062e6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff ff8f 	bl	80061f0 <HAL_RTC_WaitForSynchro>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01e      	beq.n	8006316 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2203      	movs	r2, #3
 80062dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	73fb      	strb	r3, [r7, #15]
 80062e4:	e017      	b.n	8006316 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80062e6:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <RTC_ExitInitMode+0x78>)
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	4a0d      	ldr	r2, [pc, #52]	; (8006320 <RTC_ExitInitMode+0x78>)
 80062ec:	f023 0320 	bic.w	r3, r3, #32
 80062f0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff ff7c 	bl	80061f0 <HAL_RTC_WaitForSynchro>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d005      	beq.n	800630a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2203      	movs	r2, #3
 8006302:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800630a:	4b05      	ldr	r3, [pc, #20]	; (8006320 <RTC_ExitInitMode+0x78>)
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	4a04      	ldr	r2, [pc, #16]	; (8006320 <RTC_ExitInitMode+0x78>)
 8006310:	f043 0320 	orr.w	r3, r3, #32
 8006314:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40002800 	.word	0x40002800

08006324 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006336:	e005      	b.n	8006344 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800633e:	7afb      	ldrb	r3, [r7, #11]
 8006340:	3b0a      	subs	r3, #10
 8006342:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006344:	7afb      	ldrb	r3, [r7, #11]
 8006346:	2b09      	cmp	r3, #9
 8006348:	d8f6      	bhi.n	8006338 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	b2da      	uxtb	r2, r3
 8006352:	7afb      	ldrb	r3, [r7, #11]
 8006354:	4313      	orrs	r3, r2
 8006356:	b2db      	uxtb	r3, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e095      	b.n	80064a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d108      	bne.n	8006390 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006386:	d009      	beq.n	800639c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	61da      	str	r2, [r3, #28]
 800638e:	e005      	b.n	800639c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fb f90a 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063dc:	d902      	bls.n	80063e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e002      	b.n	80063ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80063f2:	d007      	beq.n	8006404 <HAL_SPI_Init+0xa0>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063fc:	d002      	beq.n	8006404 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006446:	ea42 0103 	orr.w	r1, r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	0c1b      	lsrs	r3, r3, #16
 8006460:	f003 0204 	and.w	r2, r3, #4
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006480:	ea42 0103 	orr.w	r1, r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b088      	sub	sp, #32
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	603b      	str	r3, [r7, #0]
 80064b6:	4613      	mov	r3, r2
 80064b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_SPI_Transmit+0x22>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e158      	b.n	800677e <HAL_SPI_Transmit+0x2d4>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064d4:	f7fb f9e6 	bl	80018a4 <HAL_GetTick>
 80064d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d002      	beq.n	80064f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064ea:	2302      	movs	r3, #2
 80064ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064ee:	e13d      	b.n	800676c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_SPI_Transmit+0x52>
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d102      	bne.n	8006502 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006500:	e134      	b.n	800676c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2203      	movs	r2, #3
 8006506:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	88fa      	ldrh	r2, [r7, #6]
 800651a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654c:	d10f      	bne.n	800656e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800656c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d007      	beq.n	800658c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006594:	d94b      	bls.n	800662e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <HAL_SPI_Transmit+0xfa>
 800659e:	8afb      	ldrh	r3, [r7, #22]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d13e      	bne.n	8006622 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	881a      	ldrh	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	1c9a      	adds	r2, r3, #2
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065c8:	e02b      	b.n	8006622 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d112      	bne.n	80065fe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	881a      	ldrh	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	1c9a      	adds	r2, r3, #2
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065fc:	e011      	b.n	8006622 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065fe:	f7fb f951 	bl	80018a4 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d803      	bhi.n	8006616 <HAL_SPI_Transmit+0x16c>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d102      	bne.n	800661c <HAL_SPI_Transmit+0x172>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006620:	e0a4      	b.n	800676c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1ce      	bne.n	80065ca <HAL_SPI_Transmit+0x120>
 800662c:	e07c      	b.n	8006728 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_SPI_Transmit+0x192>
 8006636:	8afb      	ldrh	r3, [r7, #22]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d170      	bne.n	800671e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b01      	cmp	r3, #1
 8006644:	d912      	bls.n	800666c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	881a      	ldrh	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	1c9a      	adds	r2, r3, #2
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b02      	subs	r3, #2
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	87da      	strh	r2, [r3, #62]	; 0x3e
 800666a:	e058      	b.n	800671e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	7812      	ldrb	r2, [r2, #0]
 8006678:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006692:	e044      	b.n	800671e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d12b      	bne.n	80066fa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d912      	bls.n	80066d2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	881a      	ldrh	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	1c9a      	adds	r2, r3, #2
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b02      	subs	r3, #2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066d0:	e025      	b.n	800671e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066f8:	e011      	b.n	800671e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066fa:	f7fb f8d3 	bl	80018a4 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d803      	bhi.n	8006712 <HAL_SPI_Transmit+0x268>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006710:	d102      	bne.n	8006718 <HAL_SPI_Transmit+0x26e>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800671c:	e026      	b.n	800676c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1b5      	bne.n	8006694 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 fce3 	bl	80070f8 <SPI_EndRxTxTransaction>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	77fb      	strb	r3, [r7, #31]
 8006768:	e000      	b.n	800676c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800676a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800677c:	7ffb      	ldrb	r3, [r7, #31]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3720      	adds	r7, #32
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b088      	sub	sp, #32
 800678a:	af02      	add	r7, sp, #8
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	603b      	str	r3, [r7, #0]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a2:	d112      	bne.n	80067ca <HAL_SPI_Receive+0x44>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10e      	bne.n	80067ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2204      	movs	r2, #4
 80067b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80067b4:	88fa      	ldrh	r2, [r7, #6]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	4613      	mov	r3, r2
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f910 	bl	80069e6 <HAL_SPI_TransmitReceive>
 80067c6:	4603      	mov	r3, r0
 80067c8:	e109      	b.n	80069de <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_SPI_Receive+0x52>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e102      	b.n	80069de <HAL_SPI_Receive+0x258>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067e0:	f7fb f860 	bl	80018a4 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d002      	beq.n	80067f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80067f2:	2302      	movs	r3, #2
 80067f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067f6:	e0e9      	b.n	80069cc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_SPI_Receive+0x7e>
 80067fe:	88fb      	ldrh	r3, [r7, #6]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d102      	bne.n	800680a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006808:	e0e0      	b.n	80069cc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2204      	movs	r2, #4
 800680e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	88fa      	ldrh	r2, [r7, #6]
 8006822:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	88fa      	ldrh	r2, [r7, #6]
 800682a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006854:	d908      	bls.n	8006868 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006864:	605a      	str	r2, [r3, #4]
 8006866:	e007      	b.n	8006878 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006876:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006880:	d10f      	bne.n	80068a2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006890:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ac:	2b40      	cmp	r3, #64	; 0x40
 80068ae:	d007      	beq.n	80068c0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068c8:	d867      	bhi.n	800699a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80068ca:	e030      	b.n	800692e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d117      	bne.n	800690a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f103 020c 	add.w	r2, r3, #12
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	7812      	ldrb	r2, [r2, #0]
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006908:	e011      	b.n	800692e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800690a:	f7fa ffcb 	bl	80018a4 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d803      	bhi.n	8006922 <HAL_SPI_Receive+0x19c>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d102      	bne.n	8006928 <HAL_SPI_Receive+0x1a2>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d102      	bne.n	800692e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800692c:	e04e      	b.n	80069cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1c8      	bne.n	80068cc <HAL_SPI_Receive+0x146>
 800693a:	e034      	b.n	80069a6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b01      	cmp	r3, #1
 8006948:	d115      	bne.n	8006976 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	b292      	uxth	r2, r2
 8006956:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695c:	1c9a      	adds	r2, r3, #2
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006974:	e011      	b.n	800699a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006976:	f7fa ff95 	bl	80018a4 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d803      	bhi.n	800698e <HAL_SPI_Receive+0x208>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698c:	d102      	bne.n	8006994 <HAL_SPI_Receive+0x20e>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006998:	e018      	b.n	80069cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1ca      	bne.n	800693c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 fb4c 	bl	8007048 <SPI_EndRxTransaction>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	75fb      	strb	r3, [r7, #23]
 80069c8:	e000      	b.n	80069cc <HAL_SPI_Receive+0x246>
  }

error :
 80069ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b08a      	sub	sp, #40	; 0x28
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069f4:	2301      	movs	r3, #1
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_SPI_TransmitReceive+0x26>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e1fb      	b.n	8006e04 <HAL_SPI_TransmitReceive+0x41e>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a14:	f7fa ff46 	bl	80018a4 <HAL_GetTick>
 8006a18:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a20:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006a28:	887b      	ldrh	r3, [r7, #2]
 8006a2a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006a2c:	887b      	ldrh	r3, [r7, #2]
 8006a2e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a30:	7efb      	ldrb	r3, [r7, #27]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d00e      	beq.n	8006a54 <HAL_SPI_TransmitReceive+0x6e>
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a3c:	d106      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0x66>
 8006a46:	7efb      	ldrb	r3, [r7, #27]
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d003      	beq.n	8006a54 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a52:	e1cd      	b.n	8006df0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <HAL_SPI_TransmitReceive+0x80>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <HAL_SPI_TransmitReceive+0x80>
 8006a60:	887b      	ldrh	r3, [r7, #2]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d103      	bne.n	8006a6e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a6c:	e1c0      	b.n	8006df0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d003      	beq.n	8006a82 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2205      	movs	r2, #5
 8006a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	887a      	ldrh	r2, [r7, #2]
 8006a92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	887a      	ldrh	r2, [r7, #2]
 8006a9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	887a      	ldrh	r2, [r7, #2]
 8006aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	887a      	ldrh	r2, [r7, #2]
 8006aae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ac4:	d802      	bhi.n	8006acc <HAL_SPI_TransmitReceive+0xe6>
 8006ac6:	8a3b      	ldrh	r3, [r7, #16]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d908      	bls.n	8006ade <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ada:	605a      	str	r2, [r3, #4]
 8006adc:	e007      	b.n	8006aee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d007      	beq.n	8006b0c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b14:	d97c      	bls.n	8006c10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <HAL_SPI_TransmitReceive+0x13e>
 8006b1e:	8a7b      	ldrh	r3, [r7, #18]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d169      	bne.n	8006bf8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	881a      	ldrh	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b48:	e056      	b.n	8006bf8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d11b      	bne.n	8006b90 <HAL_SPI_TransmitReceive+0x1aa>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d016      	beq.n	8006b90 <HAL_SPI_TransmitReceive+0x1aa>
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d113      	bne.n	8006b90 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	881a      	ldrh	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	1c9a      	adds	r2, r3, #2
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d11c      	bne.n	8006bd8 <HAL_SPI_TransmitReceive+0x1f2>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d016      	beq.n	8006bd8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	b292      	uxth	r2, r2
 8006bb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	1c9a      	adds	r2, r3, #2
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bd8:	f7fa fe64 	bl	80018a4 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d807      	bhi.n	8006bf8 <HAL_SPI_TransmitReceive+0x212>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d003      	beq.n	8006bf8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bf6:	e0fb      	b.n	8006df0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1a3      	bne.n	8006b4a <HAL_SPI_TransmitReceive+0x164>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d19d      	bne.n	8006b4a <HAL_SPI_TransmitReceive+0x164>
 8006c0e:	e0df      	b.n	8006dd0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_SPI_TransmitReceive+0x23a>
 8006c18:	8a7b      	ldrh	r3, [r7, #18]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	f040 80cb 	bne.w	8006db6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d912      	bls.n	8006c50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2e:	881a      	ldrh	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	1c9a      	adds	r2, r3, #2
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3b02      	subs	r3, #2
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c4e:	e0b2      	b.n	8006db6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	7812      	ldrb	r2, [r2, #0]
 8006c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c76:	e09e      	b.n	8006db6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d134      	bne.n	8006cf0 <HAL_SPI_TransmitReceive+0x30a>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d02f      	beq.n	8006cf0 <HAL_SPI_TransmitReceive+0x30a>
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d12c      	bne.n	8006cf0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d912      	bls.n	8006cc6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	881a      	ldrh	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	1c9a      	adds	r2, r3, #2
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b02      	subs	r3, #2
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cc4:	e012      	b.n	8006cec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	7812      	ldrb	r2, [r2, #0]
 8006cd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d148      	bne.n	8006d90 <HAL_SPI_TransmitReceive+0x3aa>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d042      	beq.n	8006d90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d923      	bls.n	8006d5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	b292      	uxth	r2, r2
 8006d22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	1c9a      	adds	r2, r3, #2
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b02      	subs	r3, #2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d81f      	bhi.n	8006d8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d5a:	605a      	str	r2, [r3, #4]
 8006d5c:	e016      	b.n	8006d8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f103 020c 	add.w	r2, r3, #12
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d90:	f7fa fd88 	bl	80018a4 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d803      	bhi.n	8006da8 <HAL_SPI_TransmitReceive+0x3c2>
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d102      	bne.n	8006dae <HAL_SPI_TransmitReceive+0x3c8>
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006db4:	e01c      	b.n	8006df0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f47f af5b 	bne.w	8006c78 <HAL_SPI_TransmitReceive+0x292>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f47f af54 	bne.w	8006c78 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f98f 	bl	80070f8 <SPI_EndRxTxTransaction>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2220      	movs	r2, #32
 8006dea:	661a      	str	r2, [r3, #96]	; 0x60
 8006dec:	e000      	b.n	8006df0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3728      	adds	r7, #40	; 0x28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e1c:	f7fa fd42 	bl	80018a4 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	1a9b      	subs	r3, r3, r2
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	4413      	add	r3, r2
 8006e2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e2c:	f7fa fd3a 	bl	80018a4 <HAL_GetTick>
 8006e30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e32:	4b39      	ldr	r3, [pc, #228]	; (8006f18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	015b      	lsls	r3, r3, #5
 8006e38:	0d1b      	lsrs	r3, r3, #20
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	fb02 f303 	mul.w	r3, r2, r3
 8006e40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e42:	e054      	b.n	8006eee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d050      	beq.n	8006eee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e4c:	f7fa fd2a 	bl	80018a4 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d902      	bls.n	8006e62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d13d      	bne.n	8006ede <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e7a:	d111      	bne.n	8006ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e84:	d004      	beq.n	8006e90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8e:	d107      	bne.n	8006ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea8:	d10f      	bne.n	8006eca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e017      	b.n	8006f0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	bf0c      	ite	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	2300      	movne	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d19b      	bne.n	8006e44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000170 	.word	0x20000170

08006f1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	; 0x28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f2e:	f7fa fcb9 	bl	80018a4 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	1a9b      	subs	r3, r3, r2
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f3e:	f7fa fcb1 	bl	80018a4 <HAL_GetTick>
 8006f42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330c      	adds	r3, #12
 8006f4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f4c:	4b3d      	ldr	r3, [pc, #244]	; (8007044 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	00da      	lsls	r2, r3, #3
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	0d1b      	lsrs	r3, r3, #20
 8006f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
 8006f62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f64:	e060      	b.n	8007028 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f6c:	d107      	bne.n	8006f7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f84:	d050      	beq.n	8007028 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f86:	f7fa fc8d 	bl	80018a4 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d902      	bls.n	8006f9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d13d      	bne.n	8007018 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006faa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fb4:	d111      	bne.n	8006fda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fbe:	d004      	beq.n	8006fca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc8:	d107      	bne.n	8006fda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fe2:	d10f      	bne.n	8007004 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007002:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e010      	b.n	800703a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	3b01      	subs	r3, #1
 8007026:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4013      	ands	r3, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	429a      	cmp	r2, r3
 8007036:	d196      	bne.n	8006f66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3728      	adds	r7, #40	; 0x28
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000170 	.word	0x20000170

08007048 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800705c:	d111      	bne.n	8007082 <SPI_EndRxTransaction+0x3a>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007066:	d004      	beq.n	8007072 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007070:	d107      	bne.n	8007082 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007080:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2200      	movs	r2, #0
 800708a:	2180      	movs	r1, #128	; 0x80
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7ff febd 	bl	8006e0c <SPI_WaitFlagStateUntilTimeout>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d007      	beq.n	80070a8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e023      	b.n	80070f0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070b0:	d11d      	bne.n	80070ee <SPI_EndRxTransaction+0xa6>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ba:	d004      	beq.n	80070c6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c4:	d113      	bne.n	80070ee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff ff22 	bl	8006f1c <SPI_WaitFifoStateUntilTimeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d007      	beq.n	80070ee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e2:	f043 0220 	orr.w	r2, r3, #32
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e000      	b.n	80070f0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff ff03 	bl	8006f1c <SPI_WaitFifoStateUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007120:	f043 0220 	orr.w	r2, r3, #32
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e027      	b.n	800717c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2200      	movs	r2, #0
 8007134:	2180      	movs	r1, #128	; 0x80
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7ff fe68 	bl	8006e0c <SPI_WaitFlagStateUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d007      	beq.n	8007152 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007146:	f043 0220 	orr.w	r2, r3, #32
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e014      	b.n	800717c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7ff fedc 	bl	8006f1c <SPI_WaitFifoStateUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716e:	f043 0220 	orr.w	r2, r3, #32
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e000      	b.n	800717c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e049      	b.n	800722a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fa fa52 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f000 f9ee 	bl	80075a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b01      	cmp	r3, #1
 8007246:	d001      	beq.n	800724c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e04f      	b.n	80072ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0201 	orr.w	r2, r2, #1
 8007262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a23      	ldr	r2, [pc, #140]	; (80072f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01d      	beq.n	80072aa <HAL_TIM_Base_Start_IT+0x76>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007276:	d018      	beq.n	80072aa <HAL_TIM_Base_Start_IT+0x76>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <HAL_TIM_Base_Start_IT+0xc8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_TIM_Base_Start_IT+0x76>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <HAL_TIM_Base_Start_IT+0xcc>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_TIM_Base_Start_IT+0x76>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1c      	ldr	r2, [pc, #112]	; (8007304 <HAL_TIM_Base_Start_IT+0xd0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <HAL_TIM_Base_Start_IT+0x76>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <HAL_TIM_Base_Start_IT+0xd4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_TIM_Base_Start_IT+0x76>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a19      	ldr	r2, [pc, #100]	; (800730c <HAL_TIM_Base_Start_IT+0xd8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d115      	bne.n	80072d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	4b17      	ldr	r3, [pc, #92]	; (8007310 <HAL_TIM_Base_Start_IT+0xdc>)
 80072b2:	4013      	ands	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b06      	cmp	r3, #6
 80072ba:	d015      	beq.n	80072e8 <HAL_TIM_Base_Start_IT+0xb4>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c2:	d011      	beq.n	80072e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0201 	orr.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d4:	e008      	b.n	80072e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0201 	orr.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e000      	b.n	80072ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	40012c00 	.word	0x40012c00
 80072fc:	40000400 	.word	0x40000400
 8007300:	40000800 	.word	0x40000800
 8007304:	40000c00 	.word	0x40000c00
 8007308:	40013400 	.word	0x40013400
 800730c:	40014000 	.word	0x40014000
 8007310:	00010007 	.word	0x00010007

08007314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b02      	cmp	r3, #2
 8007328:	d122      	bne.n	8007370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b02      	cmp	r3, #2
 8007336:	d11b      	bne.n	8007370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0202 	mvn.w	r2, #2
 8007340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f905 	bl	8007566 <HAL_TIM_IC_CaptureCallback>
 800735c:	e005      	b.n	800736a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f8f7 	bl	8007552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f908 	bl	800757a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b04      	cmp	r3, #4
 800737c:	d122      	bne.n	80073c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b04      	cmp	r3, #4
 800738a:	d11b      	bne.n	80073c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0204 	mvn.w	r2, #4
 8007394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2202      	movs	r2, #2
 800739a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f8db 	bl	8007566 <HAL_TIM_IC_CaptureCallback>
 80073b0:	e005      	b.n	80073be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f8cd 	bl	8007552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f8de 	bl	800757a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b08      	cmp	r3, #8
 80073d0:	d122      	bne.n	8007418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d11b      	bne.n	8007418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f06f 0208 	mvn.w	r2, #8
 80073e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2204      	movs	r2, #4
 80073ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f8b1 	bl	8007566 <HAL_TIM_IC_CaptureCallback>
 8007404:	e005      	b.n	8007412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f8a3 	bl	8007552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f8b4 	bl	800757a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f003 0310 	and.w	r3, r3, #16
 8007422:	2b10      	cmp	r3, #16
 8007424:	d122      	bne.n	800746c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b10      	cmp	r3, #16
 8007432:	d11b      	bne.n	800746c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f06f 0210 	mvn.w	r2, #16
 800743c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2208      	movs	r2, #8
 8007442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f887 	bl	8007566 <HAL_TIM_IC_CaptureCallback>
 8007458:	e005      	b.n	8007466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f879 	bl	8007552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f88a 	bl	800757a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b01      	cmp	r3, #1
 8007478:	d10e      	bne.n	8007498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b01      	cmp	r3, #1
 8007486:	d107      	bne.n	8007498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0201 	mvn.w	r2, #1
 8007490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7f9 ff1a 	bl	80012cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	d10e      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d107      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f914 	bl	80076ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d2:	d10e      	bne.n	80074f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074de:	2b80      	cmp	r3, #128	; 0x80
 80074e0:	d107      	bne.n	80074f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f907 	bl	8007700 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fc:	2b40      	cmp	r3, #64	; 0x40
 80074fe:	d10e      	bne.n	800751e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d107      	bne.n	800751e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f838 	bl	800758e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b20      	cmp	r3, #32
 800752a:	d10e      	bne.n	800754a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b20      	cmp	r3, #32
 8007538:	d107      	bne.n	800754a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f06f 0220 	mvn.w	r2, #32
 8007542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f8c7 	bl	80076d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800754a:	bf00      	nop
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
	...

080075a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a40      	ldr	r2, [pc, #256]	; (80076b8 <TIM_Base_SetConfig+0x114>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d013      	beq.n	80075e4 <TIM_Base_SetConfig+0x40>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c2:	d00f      	beq.n	80075e4 <TIM_Base_SetConfig+0x40>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a3d      	ldr	r2, [pc, #244]	; (80076bc <TIM_Base_SetConfig+0x118>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d00b      	beq.n	80075e4 <TIM_Base_SetConfig+0x40>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a3c      	ldr	r2, [pc, #240]	; (80076c0 <TIM_Base_SetConfig+0x11c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d007      	beq.n	80075e4 <TIM_Base_SetConfig+0x40>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a3b      	ldr	r2, [pc, #236]	; (80076c4 <TIM_Base_SetConfig+0x120>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d003      	beq.n	80075e4 <TIM_Base_SetConfig+0x40>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a3a      	ldr	r2, [pc, #232]	; (80076c8 <TIM_Base_SetConfig+0x124>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d108      	bne.n	80075f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a2f      	ldr	r2, [pc, #188]	; (80076b8 <TIM_Base_SetConfig+0x114>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d01f      	beq.n	800763e <TIM_Base_SetConfig+0x9a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007604:	d01b      	beq.n	800763e <TIM_Base_SetConfig+0x9a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a2c      	ldr	r2, [pc, #176]	; (80076bc <TIM_Base_SetConfig+0x118>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d017      	beq.n	800763e <TIM_Base_SetConfig+0x9a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a2b      	ldr	r2, [pc, #172]	; (80076c0 <TIM_Base_SetConfig+0x11c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d013      	beq.n	800763e <TIM_Base_SetConfig+0x9a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a2a      	ldr	r2, [pc, #168]	; (80076c4 <TIM_Base_SetConfig+0x120>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d00f      	beq.n	800763e <TIM_Base_SetConfig+0x9a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a29      	ldr	r2, [pc, #164]	; (80076c8 <TIM_Base_SetConfig+0x124>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d00b      	beq.n	800763e <TIM_Base_SetConfig+0x9a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a28      	ldr	r2, [pc, #160]	; (80076cc <TIM_Base_SetConfig+0x128>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d007      	beq.n	800763e <TIM_Base_SetConfig+0x9a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a27      	ldr	r2, [pc, #156]	; (80076d0 <TIM_Base_SetConfig+0x12c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d003      	beq.n	800763e <TIM_Base_SetConfig+0x9a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a26      	ldr	r2, [pc, #152]	; (80076d4 <TIM_Base_SetConfig+0x130>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d108      	bne.n	8007650 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a10      	ldr	r2, [pc, #64]	; (80076b8 <TIM_Base_SetConfig+0x114>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00f      	beq.n	800769c <TIM_Base_SetConfig+0xf8>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a12      	ldr	r2, [pc, #72]	; (80076c8 <TIM_Base_SetConfig+0x124>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00b      	beq.n	800769c <TIM_Base_SetConfig+0xf8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a11      	ldr	r2, [pc, #68]	; (80076cc <TIM_Base_SetConfig+0x128>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d007      	beq.n	800769c <TIM_Base_SetConfig+0xf8>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a10      	ldr	r2, [pc, #64]	; (80076d0 <TIM_Base_SetConfig+0x12c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_Base_SetConfig+0xf8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a0f      	ldr	r2, [pc, #60]	; (80076d4 <TIM_Base_SetConfig+0x130>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d103      	bne.n	80076a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	615a      	str	r2, [r3, #20]
}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40000c00 	.word	0x40000c00
 80076c8:	40013400 	.word	0x40013400
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40014400 	.word	0x40014400
 80076d4:	40014800 	.word	0x40014800

080076d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <__NVIC_SetPriority>:
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	6039      	str	r1, [r7, #0]
 800771e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007724:	2b00      	cmp	r3, #0
 8007726:	db0a      	blt.n	800773e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	b2da      	uxtb	r2, r3
 800772c:	490c      	ldr	r1, [pc, #48]	; (8007760 <__NVIC_SetPriority+0x4c>)
 800772e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007732:	0112      	lsls	r2, r2, #4
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	440b      	add	r3, r1
 8007738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800773c:	e00a      	b.n	8007754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	b2da      	uxtb	r2, r3
 8007742:	4908      	ldr	r1, [pc, #32]	; (8007764 <__NVIC_SetPriority+0x50>)
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	3b04      	subs	r3, #4
 800774c:	0112      	lsls	r2, r2, #4
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	440b      	add	r3, r1
 8007752:	761a      	strb	r2, [r3, #24]
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	e000e100 	.word	0xe000e100
 8007764:	e000ed00 	.word	0xe000ed00

08007768 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800776c:	4b05      	ldr	r3, [pc, #20]	; (8007784 <SysTick_Handler+0x1c>)
 800776e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007770:	f002 f934 	bl	80099dc <xTaskGetSchedulerState>
 8007774:	4603      	mov	r3, r0
 8007776:	2b01      	cmp	r3, #1
 8007778:	d001      	beq.n	800777e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800777a:	f000 fd95 	bl	80082a8 <xPortSysTickHandler>
  }
}
 800777e:	bf00      	nop
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	e000e010 	.word	0xe000e010

08007788 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800778c:	2100      	movs	r1, #0
 800778e:	f06f 0004 	mvn.w	r0, #4
 8007792:	f7ff ffbf 	bl	8007714 <__NVIC_SetPriority>
#endif
}
 8007796:	bf00      	nop
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077a2:	f3ef 8305 	mrs	r3, IPSR
 80077a6:	603b      	str	r3, [r7, #0]
  return(result);
 80077a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80077ae:	f06f 0305 	mvn.w	r3, #5
 80077b2:	607b      	str	r3, [r7, #4]
 80077b4:	e00c      	b.n	80077d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80077b6:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <osKernelInitialize+0x44>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d105      	bne.n	80077ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80077be:	4b08      	ldr	r3, [pc, #32]	; (80077e0 <osKernelInitialize+0x44>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	e002      	b.n	80077d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077d0:	687b      	ldr	r3, [r7, #4]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	200003c0 	.word	0x200003c0

080077e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ea:	f3ef 8305 	mrs	r3, IPSR
 80077ee:	603b      	str	r3, [r7, #0]
  return(result);
 80077f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80077f6:	f06f 0305 	mvn.w	r3, #5
 80077fa:	607b      	str	r3, [r7, #4]
 80077fc:	e010      	b.n	8007820 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80077fe:	4b0b      	ldr	r3, [pc, #44]	; (800782c <osKernelStart+0x48>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d109      	bne.n	800781a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007806:	f7ff ffbf 	bl	8007788 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800780a:	4b08      	ldr	r3, [pc, #32]	; (800782c <osKernelStart+0x48>)
 800780c:	2202      	movs	r2, #2
 800780e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007810:	f001 fc9c 	bl	800914c <vTaskStartScheduler>
      stat = osOK;
 8007814:	2300      	movs	r3, #0
 8007816:	607b      	str	r3, [r7, #4]
 8007818:	e002      	b.n	8007820 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800781a:	f04f 33ff 	mov.w	r3, #4294967295
 800781e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007820:	687b      	ldr	r3, [r7, #4]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	200003c0 	.word	0x200003c0

08007830 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b08e      	sub	sp, #56	; 0x38
 8007834:	af04      	add	r7, sp, #16
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800783c:	2300      	movs	r3, #0
 800783e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007840:	f3ef 8305 	mrs	r3, IPSR
 8007844:	617b      	str	r3, [r7, #20]
  return(result);
 8007846:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007848:	2b00      	cmp	r3, #0
 800784a:	d17e      	bne.n	800794a <osThreadNew+0x11a>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d07b      	beq.n	800794a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007852:	2380      	movs	r3, #128	; 0x80
 8007854:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007856:	2318      	movs	r3, #24
 8007858:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800785e:	f04f 33ff 	mov.w	r3, #4294967295
 8007862:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d045      	beq.n	80078f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <osThreadNew+0x48>
        name = attr->name;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d008      	beq.n	800789e <osThreadNew+0x6e>
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	2b38      	cmp	r3, #56	; 0x38
 8007890:	d805      	bhi.n	800789e <osThreadNew+0x6e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <osThreadNew+0x72>
        return (NULL);
 800789e:	2300      	movs	r3, #0
 80078a0:	e054      	b.n	800794c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	089b      	lsrs	r3, r3, #2
 80078b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00e      	beq.n	80078d8 <osThreadNew+0xa8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	2b5b      	cmp	r3, #91	; 0x5b
 80078c0:	d90a      	bls.n	80078d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d006      	beq.n	80078d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <osThreadNew+0xa8>
        mem = 1;
 80078d2:	2301      	movs	r3, #1
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	e010      	b.n	80078fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10c      	bne.n	80078fa <osThreadNew+0xca>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d108      	bne.n	80078fa <osThreadNew+0xca>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d104      	bne.n	80078fa <osThreadNew+0xca>
          mem = 0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61bb      	str	r3, [r7, #24]
 80078f4:	e001      	b.n	80078fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d110      	bne.n	8007922 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007908:	9202      	str	r2, [sp, #8]
 800790a:	9301      	str	r3, [sp, #4]
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	6a3a      	ldr	r2, [r7, #32]
 8007914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f001 fa42 	bl	8008da0 <xTaskCreateStatic>
 800791c:	4603      	mov	r3, r0
 800791e:	613b      	str	r3, [r7, #16]
 8007920:	e013      	b.n	800794a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d110      	bne.n	800794a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	b29a      	uxth	r2, r3
 800792c:	f107 0310 	add.w	r3, r7, #16
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f001 fa8d 	bl	8008e5a <xTaskCreate>
 8007940:	4603      	mov	r3, r0
 8007942:	2b01      	cmp	r3, #1
 8007944:	d001      	beq.n	800794a <osThreadNew+0x11a>
            hTask = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800794a:	693b      	ldr	r3, [r7, #16]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3728      	adds	r7, #40	; 0x28
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800795c:	f3ef 8305 	mrs	r3, IPSR
 8007960:	60bb      	str	r3, [r7, #8]
  return(result);
 8007962:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <osDelay+0x1c>
    stat = osErrorISR;
 8007968:	f06f 0305 	mvn.w	r3, #5
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e007      	b.n	8007980 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <osDelay+0x2c>
      vTaskDelay(ticks);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 fbb2 	bl	80090e4 <vTaskDelay>
    }
  }

  return (stat);
 8007980:	68fb      	ldr	r3, [r7, #12]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4a07      	ldr	r2, [pc, #28]	; (80079b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800799c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4a06      	ldr	r2, [pc, #24]	; (80079bc <vApplicationGetIdleTaskMemory+0x30>)
 80079a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2280      	movs	r2, #128	; 0x80
 80079a8:	601a      	str	r2, [r3, #0]
}
 80079aa:	bf00      	nop
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	200003c4 	.word	0x200003c4
 80079bc:	20000420 	.word	0x20000420

080079c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4a07      	ldr	r2, [pc, #28]	; (80079ec <vApplicationGetTimerTaskMemory+0x2c>)
 80079d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	4a06      	ldr	r2, [pc, #24]	; (80079f0 <vApplicationGetTimerTaskMemory+0x30>)
 80079d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079de:	601a      	str	r2, [r3, #0]
}
 80079e0:	bf00      	nop
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	20000620 	.word	0x20000620
 80079f0:	2000067c 	.word	0x2000067c

080079f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08a      	sub	sp, #40	; 0x28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a00:	f001 fc0a 	bl	8009218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a04:	4b5b      	ldr	r3, [pc, #364]	; (8007b74 <pvPortMalloc+0x180>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a0c:	f000 f920 	bl	8007c50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a10:	4b59      	ldr	r3, [pc, #356]	; (8007b78 <pvPortMalloc+0x184>)
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4013      	ands	r3, r2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f040 8093 	bne.w	8007b44 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01d      	beq.n	8007a60 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a24:	2208      	movs	r2, #8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4413      	add	r3, r2
 8007a2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f003 0307 	and.w	r3, r3, #7
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d014      	beq.n	8007a60 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f023 0307 	bic.w	r3, r3, #7
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d06e      	beq.n	8007b44 <pvPortMalloc+0x150>
 8007a66:	4b45      	ldr	r3, [pc, #276]	; (8007b7c <pvPortMalloc+0x188>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d869      	bhi.n	8007b44 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a70:	4b43      	ldr	r3, [pc, #268]	; (8007b80 <pvPortMalloc+0x18c>)
 8007a72:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a74:	4b42      	ldr	r3, [pc, #264]	; (8007b80 <pvPortMalloc+0x18c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a7a:	e004      	b.n	8007a86 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d903      	bls.n	8007a98 <pvPortMalloc+0xa4>
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1f1      	bne.n	8007a7c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a98:	4b36      	ldr	r3, [pc, #216]	; (8007b74 <pvPortMalloc+0x180>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d050      	beq.n	8007b44 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	4413      	add	r3, r2
 8007aaa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	1ad2      	subs	r2, r2, r3
 8007abc:	2308      	movs	r3, #8
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d91f      	bls.n	8007b04 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4413      	add	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <pvPortMalloc+0xf8>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	613b      	str	r3, [r7, #16]
}
 8007ae8:	bf00      	nop
 8007aea:	e7fe      	b.n	8007aea <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	1ad2      	subs	r2, r2, r3
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007afe:	69b8      	ldr	r0, [r7, #24]
 8007b00:	f000 f908 	bl	8007d14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b04:	4b1d      	ldr	r3, [pc, #116]	; (8007b7c <pvPortMalloc+0x188>)
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	4a1b      	ldr	r2, [pc, #108]	; (8007b7c <pvPortMalloc+0x188>)
 8007b10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b12:	4b1a      	ldr	r3, [pc, #104]	; (8007b7c <pvPortMalloc+0x188>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <pvPortMalloc+0x190>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d203      	bcs.n	8007b26 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b1e:	4b17      	ldr	r3, [pc, #92]	; (8007b7c <pvPortMalloc+0x188>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a18      	ldr	r2, [pc, #96]	; (8007b84 <pvPortMalloc+0x190>)
 8007b24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	4b13      	ldr	r3, [pc, #76]	; (8007b78 <pvPortMalloc+0x184>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b3a:	4b13      	ldr	r3, [pc, #76]	; (8007b88 <pvPortMalloc+0x194>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	4a11      	ldr	r2, [pc, #68]	; (8007b88 <pvPortMalloc+0x194>)
 8007b42:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b44:	f001 fb76 	bl	8009234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <pvPortMalloc+0x174>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	60fb      	str	r3, [r7, #12]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <pvPortMalloc+0x172>
	return pvReturn;
 8007b68:	69fb      	ldr	r3, [r7, #28]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3728      	adds	r7, #40	; 0x28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	2000163c 	.word	0x2000163c
 8007b78:	20001650 	.word	0x20001650
 8007b7c:	20001640 	.word	0x20001640
 8007b80:	20001634 	.word	0x20001634
 8007b84:	20001644 	.word	0x20001644
 8007b88:	20001648 	.word	0x20001648

08007b8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d04d      	beq.n	8007c3a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	425b      	negs	r3, r3
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	4b24      	ldr	r3, [pc, #144]	; (8007c44 <vPortFree+0xb8>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <vPortFree+0x44>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	60fb      	str	r3, [r7, #12]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <vPortFree+0x62>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	60bb      	str	r3, [r7, #8]
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	4b14      	ldr	r3, [pc, #80]	; (8007c44 <vPortFree+0xb8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01e      	beq.n	8007c3a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d11a      	bne.n	8007c3a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <vPortFree+0xb8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	401a      	ands	r2, r3
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c14:	f001 fb00 	bl	8009218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <vPortFree+0xbc>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4413      	add	r3, r2
 8007c22:	4a09      	ldr	r2, [pc, #36]	; (8007c48 <vPortFree+0xbc>)
 8007c24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c26:	6938      	ldr	r0, [r7, #16]
 8007c28:	f000 f874 	bl	8007d14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c2c:	4b07      	ldr	r3, [pc, #28]	; (8007c4c <vPortFree+0xc0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3301      	adds	r3, #1
 8007c32:	4a06      	ldr	r2, [pc, #24]	; (8007c4c <vPortFree+0xc0>)
 8007c34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c36:	f001 fafd 	bl	8009234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c3a:	bf00      	nop
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20001650 	.word	0x20001650
 8007c48:	20001640 	.word	0x20001640
 8007c4c:	2000164c 	.word	0x2000164c

08007c50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c56:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007c5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c5c:	4b27      	ldr	r3, [pc, #156]	; (8007cfc <prvHeapInit+0xac>)
 8007c5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00c      	beq.n	8007c84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3307      	adds	r3, #7
 8007c6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0307 	bic.w	r3, r3, #7
 8007c76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	4a1f      	ldr	r2, [pc, #124]	; (8007cfc <prvHeapInit+0xac>)
 8007c80:	4413      	add	r3, r2
 8007c82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c88:	4a1d      	ldr	r2, [pc, #116]	; (8007d00 <prvHeapInit+0xb0>)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c8e:	4b1c      	ldr	r3, [pc, #112]	; (8007d00 <prvHeapInit+0xb0>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	4413      	add	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c9c:	2208      	movs	r2, #8
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	1a9b      	subs	r3, r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0307 	bic.w	r3, r3, #7
 8007caa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <prvHeapInit+0xb4>)
 8007cb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cb2:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <prvHeapInit+0xb4>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cba:	4b12      	ldr	r3, [pc, #72]	; (8007d04 <prvHeapInit+0xb4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	1ad2      	subs	r2, r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cd0:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <prvHeapInit+0xb4>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	4a0a      	ldr	r2, [pc, #40]	; (8007d08 <prvHeapInit+0xb8>)
 8007cde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <prvHeapInit+0xbc>)
 8007ce6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ce8:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <prvHeapInit+0xc0>)
 8007cea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cee:	601a      	str	r2, [r3, #0]
}
 8007cf0:	bf00      	nop
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	20000a7c 	.word	0x20000a7c
 8007d00:	20001634 	.word	0x20001634
 8007d04:	2000163c 	.word	0x2000163c
 8007d08:	20001644 	.word	0x20001644
 8007d0c:	20001640 	.word	0x20001640
 8007d10:	20001650 	.word	0x20001650

08007d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d1c:	4b28      	ldr	r3, [pc, #160]	; (8007dc0 <prvInsertBlockIntoFreeList+0xac>)
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	e002      	b.n	8007d28 <prvInsertBlockIntoFreeList+0x14>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d8f7      	bhi.n	8007d22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d108      	bne.n	8007d56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	441a      	add	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	441a      	add	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d118      	bne.n	8007d9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d00d      	beq.n	8007d92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	441a      	add	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	e008      	b.n	8007da4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d92:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	e003      	b.n	8007da4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d002      	beq.n	8007db2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007db2:	bf00      	nop
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20001634 	.word	0x20001634
 8007dc4:	2000163c 	.word	0x2000163c

08007dc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f103 0208 	add.w	r2, r3, #8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8007de0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f103 0208 	add.w	r2, r3, #8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f103 0208 	add.w	r2, r3, #8
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e22:	b480      	push	{r7}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e80:	d103      	bne.n	8007e8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	e00c      	b.n	8007ea4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	e002      	b.n	8007e98 <vListInsert+0x2e>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d2f6      	bcs.n	8007e92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	601a      	str	r2, [r3, #0]
}
 8007ed0:	bf00      	nop
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6892      	ldr	r2, [r2, #8]
 8007ef2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6852      	ldr	r2, [r2, #4]
 8007efc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d103      	bne.n	8007f10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	1e5a      	subs	r2, r3, #1
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3b04      	subs	r3, #4
 8007f40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3b04      	subs	r3, #4
 8007f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f023 0201 	bic.w	r2, r3, #1
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3b04      	subs	r3, #4
 8007f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f60:	4a0c      	ldr	r2, [pc, #48]	; (8007f94 <pxPortInitialiseStack+0x64>)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3b14      	subs	r3, #20
 8007f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3b04      	subs	r3, #4
 8007f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f06f 0202 	mvn.w	r2, #2
 8007f7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3b20      	subs	r3, #32
 8007f84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f86:	68fb      	ldr	r3, [r7, #12]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	08007f99 	.word	0x08007f99

08007f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fa2:	4b12      	ldr	r3, [pc, #72]	; (8007fec <prvTaskExitError+0x54>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d00a      	beq.n	8007fc2 <prvTaskExitError+0x2a>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60fb      	str	r3, [r7, #12]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <prvTaskExitError+0x28>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60bb      	str	r3, [r7, #8]
}
 8007fd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fd6:	bf00      	nop
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0fc      	beq.n	8007fd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fde:	bf00      	nop
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	2000017c 	.word	0x2000017c

08007ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <pxCurrentTCBConst2>)
 8007ff2:	6819      	ldr	r1, [r3, #0]
 8007ff4:	6808      	ldr	r0, [r1, #0]
 8007ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	f380 8809 	msr	PSP, r0
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f04f 0000 	mov.w	r0, #0
 8008006:	f380 8811 	msr	BASEPRI, r0
 800800a:	4770      	bx	lr
 800800c:	f3af 8000 	nop.w

08008010 <pxCurrentTCBConst2>:
 8008010:	2000165c 	.word	0x2000165c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop

08008018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008018:	4808      	ldr	r0, [pc, #32]	; (800803c <prvPortStartFirstTask+0x24>)
 800801a:	6800      	ldr	r0, [r0, #0]
 800801c:	6800      	ldr	r0, [r0, #0]
 800801e:	f380 8808 	msr	MSP, r0
 8008022:	f04f 0000 	mov.w	r0, #0
 8008026:	f380 8814 	msr	CONTROL, r0
 800802a:	b662      	cpsie	i
 800802c:	b661      	cpsie	f
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	df00      	svc	0
 8008038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800803a:	bf00      	nop
 800803c:	e000ed08 	.word	0xe000ed08

08008040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008046:	4b46      	ldr	r3, [pc, #280]	; (8008160 <xPortStartScheduler+0x120>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a46      	ldr	r2, [pc, #280]	; (8008164 <xPortStartScheduler+0x124>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10a      	bne.n	8008066 <xPortStartScheduler+0x26>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	613b      	str	r3, [r7, #16]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008066:	4b3e      	ldr	r3, [pc, #248]	; (8008160 <xPortStartScheduler+0x120>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a3f      	ldr	r2, [pc, #252]	; (8008168 <xPortStartScheduler+0x128>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d10a      	bne.n	8008086 <xPortStartScheduler+0x46>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008086:	4b39      	ldr	r3, [pc, #228]	; (800816c <xPortStartScheduler+0x12c>)
 8008088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	22ff      	movs	r2, #255	; 0xff
 8008096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	4b31      	ldr	r3, [pc, #196]	; (8008170 <xPortStartScheduler+0x130>)
 80080ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080ae:	4b31      	ldr	r3, [pc, #196]	; (8008174 <xPortStartScheduler+0x134>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080b4:	e009      	b.n	80080ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80080b6:	4b2f      	ldr	r3, [pc, #188]	; (8008174 <xPortStartScheduler+0x134>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	4a2d      	ldr	r2, [pc, #180]	; (8008174 <xPortStartScheduler+0x134>)
 80080be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d2:	2b80      	cmp	r3, #128	; 0x80
 80080d4:	d0ef      	beq.n	80080b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080d6:	4b27      	ldr	r3, [pc, #156]	; (8008174 <xPortStartScheduler+0x134>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f1c3 0307 	rsb	r3, r3, #7
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d00a      	beq.n	80080f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	60bb      	str	r3, [r7, #8]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080f8:	4b1e      	ldr	r3, [pc, #120]	; (8008174 <xPortStartScheduler+0x134>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	021b      	lsls	r3, r3, #8
 80080fe:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <xPortStartScheduler+0x134>)
 8008100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008102:	4b1c      	ldr	r3, [pc, #112]	; (8008174 <xPortStartScheduler+0x134>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800810a:	4a1a      	ldr	r2, [pc, #104]	; (8008174 <xPortStartScheduler+0x134>)
 800810c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008116:	4b18      	ldr	r3, [pc, #96]	; (8008178 <xPortStartScheduler+0x138>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a17      	ldr	r2, [pc, #92]	; (8008178 <xPortStartScheduler+0x138>)
 800811c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <xPortStartScheduler+0x138>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a14      	ldr	r2, [pc, #80]	; (8008178 <xPortStartScheduler+0x138>)
 8008128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800812c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800812e:	f000 f8dd 	bl	80082ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008132:	4b12      	ldr	r3, [pc, #72]	; (800817c <xPortStartScheduler+0x13c>)
 8008134:	2200      	movs	r2, #0
 8008136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008138:	f000 f8fc 	bl	8008334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800813c:	4b10      	ldr	r3, [pc, #64]	; (8008180 <xPortStartScheduler+0x140>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a0f      	ldr	r2, [pc, #60]	; (8008180 <xPortStartScheduler+0x140>)
 8008142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008148:	f7ff ff66 	bl	8008018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800814c:	f001 f9da 	bl	8009504 <vTaskSwitchContext>
	prvTaskExitError();
 8008150:	f7ff ff22 	bl	8007f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	e000ed00 	.word	0xe000ed00
 8008164:	410fc271 	.word	0x410fc271
 8008168:	410fc270 	.word	0x410fc270
 800816c:	e000e400 	.word	0xe000e400
 8008170:	20001654 	.word	0x20001654
 8008174:	20001658 	.word	0x20001658
 8008178:	e000ed20 	.word	0xe000ed20
 800817c:	2000017c 	.word	0x2000017c
 8008180:	e000ef34 	.word	0xe000ef34

08008184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	607b      	str	r3, [r7, #4]
}
 800819c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800819e:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <vPortEnterCritical+0x58>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3301      	adds	r3, #1
 80081a4:	4a0d      	ldr	r2, [pc, #52]	; (80081dc <vPortEnterCritical+0x58>)
 80081a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081a8:	4b0c      	ldr	r3, [pc, #48]	; (80081dc <vPortEnterCritical+0x58>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d10f      	bne.n	80081d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081b0:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <vPortEnterCritical+0x5c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	603b      	str	r3, [r7, #0]
}
 80081cc:	bf00      	nop
 80081ce:	e7fe      	b.n	80081ce <vPortEnterCritical+0x4a>
	}
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	2000017c 	.word	0x2000017c
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081ea:	4b12      	ldr	r3, [pc, #72]	; (8008234 <vPortExitCritical+0x50>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10a      	bne.n	8008208 <vPortExitCritical+0x24>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	607b      	str	r3, [r7, #4]
}
 8008204:	bf00      	nop
 8008206:	e7fe      	b.n	8008206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008208:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <vPortExitCritical+0x50>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3b01      	subs	r3, #1
 800820e:	4a09      	ldr	r2, [pc, #36]	; (8008234 <vPortExitCritical+0x50>)
 8008210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008212:	4b08      	ldr	r3, [pc, #32]	; (8008234 <vPortExitCritical+0x50>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d105      	bne.n	8008226 <vPortExitCritical+0x42>
 800821a:	2300      	movs	r3, #0
 800821c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	2000017c 	.word	0x2000017c
	...

08008240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008240:	f3ef 8009 	mrs	r0, PSP
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <pxCurrentTCBConst>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	f01e 0f10 	tst.w	lr, #16
 8008250:	bf08      	it	eq
 8008252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825a:	6010      	str	r0, [r2, #0]
 800825c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008264:	f380 8811 	msr	BASEPRI, r0
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f001 f948 	bl	8009504 <vTaskSwitchContext>
 8008274:	f04f 0000 	mov.w	r0, #0
 8008278:	f380 8811 	msr	BASEPRI, r0
 800827c:	bc09      	pop	{r0, r3}
 800827e:	6819      	ldr	r1, [r3, #0]
 8008280:	6808      	ldr	r0, [r1, #0]
 8008282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008286:	f01e 0f10 	tst.w	lr, #16
 800828a:	bf08      	it	eq
 800828c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008290:	f380 8809 	msr	PSP, r0
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	f3af 8000 	nop.w

080082a0 <pxCurrentTCBConst>:
 80082a0:	2000165c 	.word	0x2000165c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop

080082a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
}
 80082c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082c2:	f001 f865 	bl	8009390 <xTaskIncrementTick>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082cc:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <xPortSysTickHandler+0x40>)
 80082ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	2300      	movs	r3, #0
 80082d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f383 8811 	msr	BASEPRI, r3
}
 80082de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	e000ed04 	.word	0xe000ed04

080082ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082f0:	4b0b      	ldr	r3, [pc, #44]	; (8008320 <vPortSetupTimerInterrupt+0x34>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082f6:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <vPortSetupTimerInterrupt+0x38>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082fc:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <vPortSetupTimerInterrupt+0x3c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a0a      	ldr	r2, [pc, #40]	; (800832c <vPortSetupTimerInterrupt+0x40>)
 8008302:	fba2 2303 	umull	r2, r3, r2, r3
 8008306:	099b      	lsrs	r3, r3, #6
 8008308:	4a09      	ldr	r2, [pc, #36]	; (8008330 <vPortSetupTimerInterrupt+0x44>)
 800830a:	3b01      	subs	r3, #1
 800830c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800830e:	4b04      	ldr	r3, [pc, #16]	; (8008320 <vPortSetupTimerInterrupt+0x34>)
 8008310:	2207      	movs	r2, #7
 8008312:	601a      	str	r2, [r3, #0]
}
 8008314:	bf00      	nop
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	e000e010 	.word	0xe000e010
 8008324:	e000e018 	.word	0xe000e018
 8008328:	20000170 	.word	0x20000170
 800832c:	10624dd3 	.word	0x10624dd3
 8008330:	e000e014 	.word	0xe000e014

08008334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008344 <vPortEnableVFP+0x10>
 8008338:	6801      	ldr	r1, [r0, #0]
 800833a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800833e:	6001      	str	r1, [r0, #0]
 8008340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008342:	bf00      	nop
 8008344:	e000ed88 	.word	0xe000ed88

08008348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800834e:	f3ef 8305 	mrs	r3, IPSR
 8008352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b0f      	cmp	r3, #15
 8008358:	d914      	bls.n	8008384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800835a:	4a17      	ldr	r2, [pc, #92]	; (80083b8 <vPortValidateInterruptPriority+0x70>)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4413      	add	r3, r2
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008364:	4b15      	ldr	r3, [pc, #84]	; (80083bc <vPortValidateInterruptPriority+0x74>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	7afa      	ldrb	r2, [r7, #11]
 800836a:	429a      	cmp	r2, r3
 800836c:	d20a      	bcs.n	8008384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	607b      	str	r3, [r7, #4]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008384:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <vPortValidateInterruptPriority+0x78>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800838c:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <vPortValidateInterruptPriority+0x7c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d90a      	bls.n	80083aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	603b      	str	r3, [r7, #0]
}
 80083a6:	bf00      	nop
 80083a8:	e7fe      	b.n	80083a8 <vPortValidateInterruptPriority+0x60>
	}
 80083aa:	bf00      	nop
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	e000e3f0 	.word	0xe000e3f0
 80083bc:	20001654 	.word	0x20001654
 80083c0:	e000ed0c 	.word	0xe000ed0c
 80083c4:	20001658 	.word	0x20001658

080083c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <xQueueGenericReset+0x2a>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	60bb      	str	r3, [r7, #8]
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083f2:	f7ff fec7 	bl	8008184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fe:	68f9      	ldr	r1, [r7, #12]
 8008400:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008402:	fb01 f303 	mul.w	r3, r1, r3
 8008406:	441a      	add	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008422:	3b01      	subs	r3, #1
 8008424:	68f9      	ldr	r1, [r7, #12]
 8008426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	441a      	add	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	22ff      	movs	r2, #255	; 0xff
 8008436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	22ff      	movs	r2, #255	; 0xff
 800843e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d114      	bne.n	8008472 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d01a      	beq.n	8008486 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3310      	adds	r3, #16
 8008454:	4618      	mov	r0, r3
 8008456:	f001 f903 	bl	8009660 <xTaskRemoveFromEventList>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d012      	beq.n	8008486 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008460:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <xQueueGenericReset+0xcc>)
 8008462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	e009      	b.n	8008486 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3310      	adds	r3, #16
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff fca6 	bl	8007dc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3324      	adds	r3, #36	; 0x24
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff fca1 	bl	8007dc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008486:	f7ff fead 	bl	80081e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800848a:	2301      	movs	r3, #1
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	e000ed04 	.word	0xe000ed04

08008498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08e      	sub	sp, #56	; 0x38
 800849c:	af02      	add	r7, sp, #8
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <xQueueGenericCreateStatic+0x52>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <xQueueGenericCreateStatic+0x56>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <xQueueGenericCreateStatic+0x58>
 80084ee:	2300      	movs	r3, #0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	623b      	str	r3, [r7, #32]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d102      	bne.n	8008516 <xQueueGenericCreateStatic+0x7e>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <xQueueGenericCreateStatic+0x82>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <xQueueGenericCreateStatic+0x84>
 800851a:	2300      	movs	r3, #0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	61fb      	str	r3, [r7, #28]
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008536:	2350      	movs	r3, #80	; 0x50
 8008538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b50      	cmp	r3, #80	; 0x50
 800853e:	d00a      	beq.n	8008556 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	61bb      	str	r3, [r7, #24]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008556:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00d      	beq.n	800857e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800856a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	4613      	mov	r3, r2
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	68b9      	ldr	r1, [r7, #8]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 f805 	bl	8008588 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008580:	4618      	mov	r0, r3
 8008582:	3730      	adds	r7, #48	; 0x30
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d103      	bne.n	80085a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	e002      	b.n	80085aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085b6:	2101      	movs	r1, #1
 80085b8:	69b8      	ldr	r0, [r7, #24]
 80085ba:	f7ff ff05 	bl	80083c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	78fa      	ldrb	r2, [r7, #3]
 80085c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08e      	sub	sp, #56	; 0x38
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80085de:	2300      	movs	r3, #0
 80085e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <xQueueGenericSend+0x32>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d103      	bne.n	8008610 <xQueueGenericSend+0x40>
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <xQueueGenericSend+0x44>
 8008610:	2301      	movs	r3, #1
 8008612:	e000      	b.n	8008616 <xQueueGenericSend+0x46>
 8008614:	2300      	movs	r3, #0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10a      	bne.n	8008630 <xQueueGenericSend+0x60>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d103      	bne.n	800863e <xQueueGenericSend+0x6e>
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800863a:	2b01      	cmp	r3, #1
 800863c:	d101      	bne.n	8008642 <xQueueGenericSend+0x72>
 800863e:	2301      	movs	r3, #1
 8008640:	e000      	b.n	8008644 <xQueueGenericSend+0x74>
 8008642:	2300      	movs	r3, #0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <xQueueGenericSend+0x8e>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	623b      	str	r3, [r7, #32]
}
 800865a:	bf00      	nop
 800865c:	e7fe      	b.n	800865c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800865e:	f001 f9bd 	bl	80099dc <xTaskGetSchedulerState>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <xQueueGenericSend+0x9e>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <xQueueGenericSend+0xa2>
 800866e:	2301      	movs	r3, #1
 8008670:	e000      	b.n	8008674 <xQueueGenericSend+0xa4>
 8008672:	2300      	movs	r3, #0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10a      	bne.n	800868e <xQueueGenericSend+0xbe>
	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	61fb      	str	r3, [r7, #28]
}
 800868a:	bf00      	nop
 800868c:	e7fe      	b.n	800868c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800868e:	f7ff fd79 	bl	8008184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869a:	429a      	cmp	r2, r3
 800869c:	d302      	bcc.n	80086a4 <xQueueGenericSend+0xd4>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d129      	bne.n	80086f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086aa:	f000 fa0b 	bl	8008ac4 <prvCopyDataToQueue>
 80086ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d010      	beq.n	80086da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	3324      	adds	r3, #36	; 0x24
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 ffcf 	bl	8009660 <xTaskRemoveFromEventList>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d013      	beq.n	80086f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80086c8:	4b3f      	ldr	r3, [pc, #252]	; (80087c8 <xQueueGenericSend+0x1f8>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	e00a      	b.n	80086f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d007      	beq.n	80086f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086e0:	4b39      	ldr	r3, [pc, #228]	; (80087c8 <xQueueGenericSend+0x1f8>)
 80086e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80086f0:	f7ff fd78 	bl	80081e4 <vPortExitCritical>
				return pdPASS;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e063      	b.n	80087c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d103      	bne.n	8008706 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086fe:	f7ff fd71 	bl	80081e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008702:	2300      	movs	r3, #0
 8008704:	e05c      	b.n	80087c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008708:	2b00      	cmp	r3, #0
 800870a:	d106      	bne.n	800871a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800870c:	f107 0314 	add.w	r3, r7, #20
 8008710:	4618      	mov	r0, r3
 8008712:	f001 f809 	bl	8009728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008716:	2301      	movs	r3, #1
 8008718:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800871a:	f7ff fd63 	bl	80081e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800871e:	f000 fd7b 	bl	8009218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008722:	f7ff fd2f 	bl	8008184 <vPortEnterCritical>
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800872c:	b25b      	sxtb	r3, r3
 800872e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008732:	d103      	bne.n	800873c <xQueueGenericSend+0x16c>
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008742:	b25b      	sxtb	r3, r3
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008748:	d103      	bne.n	8008752 <xQueueGenericSend+0x182>
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008752:	f7ff fd47 	bl	80081e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008756:	1d3a      	adds	r2, r7, #4
 8008758:	f107 0314 	add.w	r3, r7, #20
 800875c:	4611      	mov	r1, r2
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fff8 	bl	8009754 <xTaskCheckForTimeOut>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d124      	bne.n	80087b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800876a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800876c:	f000 faa2 	bl	8008cb4 <prvIsQueueFull>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d018      	beq.n	80087a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	3310      	adds	r3, #16
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	4611      	mov	r1, r2
 800877e:	4618      	mov	r0, r3
 8008780:	f000 ff1e 	bl	80095c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008786:	f000 fa2d 	bl	8008be4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800878a:	f000 fd53 	bl	8009234 <xTaskResumeAll>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	f47f af7c 	bne.w	800868e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008796:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <xQueueGenericSend+0x1f8>)
 8008798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	e772      	b.n	800868e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087aa:	f000 fa1b 	bl	8008be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087ae:	f000 fd41 	bl	8009234 <xTaskResumeAll>
 80087b2:	e76c      	b.n	800868e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087b6:	f000 fa15 	bl	8008be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087ba:	f000 fd3b 	bl	8009234 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80087be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3738      	adds	r7, #56	; 0x38
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b090      	sub	sp, #64	; 0x40
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <xQueueGenericSendFromISR+0x3c>
 8008800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <xQueueGenericSendFromISR+0x40>
 8008808:	2301      	movs	r3, #1
 800880a:	e000      	b.n	800880e <xQueueGenericSendFromISR+0x42>
 800880c:	2300      	movs	r3, #0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d103      	bne.n	8008836 <xQueueGenericSendFromISR+0x6a>
 800882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008832:	2b01      	cmp	r3, #1
 8008834:	d101      	bne.n	800883a <xQueueGenericSendFromISR+0x6e>
 8008836:	2301      	movs	r3, #1
 8008838:	e000      	b.n	800883c <xQueueGenericSendFromISR+0x70>
 800883a:	2300      	movs	r3, #0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10a      	bne.n	8008856 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	623b      	str	r3, [r7, #32]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008856:	f7ff fd77 	bl	8008348 <vPortValidateInterruptPriority>
	__asm volatile
 800885a:	f3ef 8211 	mrs	r2, BASEPRI
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	61fa      	str	r2, [r7, #28]
 8008870:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008872:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008874:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887e:	429a      	cmp	r2, r3
 8008880:	d302      	bcc.n	8008888 <xQueueGenericSendFromISR+0xbc>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b02      	cmp	r3, #2
 8008886:	d12f      	bne.n	80088e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800888e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008896:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800889e:	f000 f911 	bl	8008ac4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088aa:	d112      	bne.n	80088d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d016      	beq.n	80088e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b6:	3324      	adds	r3, #36	; 0x24
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 fed1 	bl	8009660 <xTaskRemoveFromEventList>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00e      	beq.n	80088e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00b      	beq.n	80088e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	e007      	b.n	80088e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088d6:	3301      	adds	r3, #1
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	b25a      	sxtb	r2, r3
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80088e2:	2301      	movs	r3, #1
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80088e6:	e001      	b.n	80088ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	617b      	str	r3, [r7, #20]
	__asm volatile
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f383 8811 	msr	BASEPRI, r3
}
 80088f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3740      	adds	r7, #64	; 0x40
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08c      	sub	sp, #48	; 0x30
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008910:	2300      	movs	r3, #0
 8008912:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <xQueueReceive+0x30>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	623b      	str	r3, [r7, #32]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d103      	bne.n	8008942 <xQueueReceive+0x3e>
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <xQueueReceive+0x42>
 8008942:	2301      	movs	r3, #1
 8008944:	e000      	b.n	8008948 <xQueueReceive+0x44>
 8008946:	2300      	movs	r3, #0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10a      	bne.n	8008962 <xQueueReceive+0x5e>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	61fb      	str	r3, [r7, #28]
}
 800895e:	bf00      	nop
 8008960:	e7fe      	b.n	8008960 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008962:	f001 f83b 	bl	80099dc <xTaskGetSchedulerState>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <xQueueReceive+0x6e>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <xQueueReceive+0x72>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <xQueueReceive+0x74>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10a      	bne.n	8008992 <xQueueReceive+0x8e>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	61bb      	str	r3, [r7, #24]
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008992:	f7ff fbf7 	bl	8008184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d01f      	beq.n	80089e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a6:	f000 f8f7 	bl	8008b98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	1e5a      	subs	r2, r3, #1
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00f      	beq.n	80089da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	3310      	adds	r3, #16
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fe4e 	bl	8009660 <xTaskRemoveFromEventList>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d007      	beq.n	80089da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089ca:	4b3d      	ldr	r3, [pc, #244]	; (8008ac0 <xQueueReceive+0x1bc>)
 80089cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089da:	f7ff fc03 	bl	80081e4 <vPortExitCritical>
				return pdPASS;
 80089de:	2301      	movs	r3, #1
 80089e0:	e069      	b.n	8008ab6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d103      	bne.n	80089f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089e8:	f7ff fbfc 	bl	80081e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089ec:	2300      	movs	r3, #0
 80089ee:	e062      	b.n	8008ab6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089f6:	f107 0310 	add.w	r3, r7, #16
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fe94 	bl	8009728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a00:	2301      	movs	r3, #1
 8008a02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a04:	f7ff fbee 	bl	80081e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a08:	f000 fc06 	bl	8009218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a0c:	f7ff fbba 	bl	8008184 <vPortEnterCritical>
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a16:	b25b      	sxtb	r3, r3
 8008a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1c:	d103      	bne.n	8008a26 <xQueueReceive+0x122>
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a2c:	b25b      	sxtb	r3, r3
 8008a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a32:	d103      	bne.n	8008a3c <xQueueReceive+0x138>
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a3c:	f7ff fbd2 	bl	80081e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a40:	1d3a      	adds	r2, r7, #4
 8008a42:	f107 0310 	add.w	r3, r7, #16
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fe83 	bl	8009754 <xTaskCheckForTimeOut>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d123      	bne.n	8008a9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a56:	f000 f917 	bl	8008c88 <prvIsQueueEmpty>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d017      	beq.n	8008a90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	3324      	adds	r3, #36	; 0x24
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 fda9 	bl	80095c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a70:	f000 f8b8 	bl	8008be4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a74:	f000 fbde 	bl	8009234 <xTaskResumeAll>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d189      	bne.n	8008992 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a7e:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <xQueueReceive+0x1bc>)
 8008a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	e780      	b.n	8008992 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a92:	f000 f8a7 	bl	8008be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a96:	f000 fbcd 	bl	8009234 <xTaskResumeAll>
 8008a9a:	e77a      	b.n	8008992 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a9e:	f000 f8a1 	bl	8008be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008aa2:	f000 fbc7 	bl	8009234 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aa8:	f000 f8ee 	bl	8008c88 <prvIsQueueEmpty>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f43f af6f 	beq.w	8008992 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ab4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3730      	adds	r7, #48	; 0x30
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10d      	bne.n	8008afe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d14d      	bne.n	8008b86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 ff92 	bl	8009a18 <xTaskPriorityDisinherit>
 8008af4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	609a      	str	r2, [r3, #8]
 8008afc:	e043      	b.n	8008b86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d119      	bne.n	8008b38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6858      	ldr	r0, [r3, #4]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	f001 fbb6 	bl	800a280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1c:	441a      	add	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d32b      	bcc.n	8008b86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	605a      	str	r2, [r3, #4]
 8008b36:	e026      	b.n	8008b86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	68d8      	ldr	r0, [r3, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b40:	461a      	mov	r2, r3
 8008b42:	68b9      	ldr	r1, [r7, #8]
 8008b44:	f001 fb9c 	bl	800a280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b50:	425b      	negs	r3, r3
 8008b52:	441a      	add	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d207      	bcs.n	8008b74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	425b      	negs	r3, r3
 8008b6e:	441a      	add	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d105      	bne.n	8008b86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b8e:	697b      	ldr	r3, [r7, #20]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d018      	beq.n	8008bdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	441a      	add	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d303      	bcc.n	8008bcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68d9      	ldr	r1, [r3, #12]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6838      	ldr	r0, [r7, #0]
 8008bd8:	f001 fb52 	bl	800a280 <memcpy>
	}
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bec:	f7ff faca 	bl	8008184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bf8:	e011      	b.n	8008c1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d012      	beq.n	8008c28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3324      	adds	r3, #36	; 0x24
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fd2a 	bl	8009660 <xTaskRemoveFromEventList>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c12:	f000 fe01 	bl	8009818 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	dce9      	bgt.n	8008bfa <prvUnlockQueue+0x16>
 8008c26:	e000      	b.n	8008c2a <prvUnlockQueue+0x46>
					break;
 8008c28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	22ff      	movs	r2, #255	; 0xff
 8008c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c32:	f7ff fad7 	bl	80081e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c36:	f7ff faa5 	bl	8008184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c42:	e011      	b.n	8008c68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d012      	beq.n	8008c72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3310      	adds	r3, #16
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 fd05 	bl	8009660 <xTaskRemoveFromEventList>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c5c:	f000 fddc 	bl	8009818 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	dce9      	bgt.n	8008c44 <prvUnlockQueue+0x60>
 8008c70:	e000      	b.n	8008c74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	22ff      	movs	r2, #255	; 0xff
 8008c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c7c:	f7ff fab2 	bl	80081e4 <vPortExitCritical>
}
 8008c80:	bf00      	nop
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c90:	f7ff fa78 	bl	8008184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	e001      	b.n	8008ca6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ca6:	f7ff fa9d 	bl	80081e4 <vPortExitCritical>

	return xReturn;
 8008caa:	68fb      	ldr	r3, [r7, #12]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cbc:	f7ff fa62 	bl	8008184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d102      	bne.n	8008cd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e001      	b.n	8008cd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cd6:	f7ff fa85 	bl	80081e4 <vPortExitCritical>

	return xReturn;
 8008cda:	68fb      	ldr	r3, [r7, #12]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	e014      	b.n	8008d1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cf4:	4a0f      	ldr	r2, [pc, #60]	; (8008d34 <vQueueAddToRegistry+0x50>)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10b      	bne.n	8008d18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d00:	490c      	ldr	r1, [pc, #48]	; (8008d34 <vQueueAddToRegistry+0x50>)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d0a:	4a0a      	ldr	r2, [pc, #40]	; (8008d34 <vQueueAddToRegistry+0x50>)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	4413      	add	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d16:	e006      	b.n	8008d26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b07      	cmp	r3, #7
 8008d22:	d9e7      	bls.n	8008cf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	20001cd8 	.word	0x20001cd8

08008d38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d48:	f7ff fa1c 	bl	8008184 <vPortEnterCritical>
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d52:	b25b      	sxtb	r3, r3
 8008d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d58:	d103      	bne.n	8008d62 <vQueueWaitForMessageRestricted+0x2a>
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d68:	b25b      	sxtb	r3, r3
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d103      	bne.n	8008d78 <vQueueWaitForMessageRestricted+0x40>
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d78:	f7ff fa34 	bl	80081e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d106      	bne.n	8008d92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	3324      	adds	r3, #36	; 0x24
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fc3b 	bl	8009608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d92:	6978      	ldr	r0, [r7, #20]
 8008d94:	f7ff ff26 	bl	8008be4 <prvUnlockQueue>
	}
 8008d98:	bf00      	nop
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08e      	sub	sp, #56	; 0x38
 8008da4:	af04      	add	r7, sp, #16
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <xTaskCreateStatic+0x2a>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	623b      	str	r3, [r7, #32]
}
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	61fb      	str	r3, [r7, #28]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008de6:	235c      	movs	r3, #92	; 0x5c
 8008de8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2b5c      	cmp	r3, #92	; 0x5c
 8008dee:	d00a      	beq.n	8008e06 <xTaskCreateStatic+0x66>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	61bb      	str	r3, [r7, #24]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d01e      	beq.n	8008e4c <xTaskCreateStatic+0xac>
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01b      	beq.n	8008e4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	2202      	movs	r2, #2
 8008e22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e26:	2300      	movs	r3, #0
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	9302      	str	r3, [sp, #8]
 8008e2e:	f107 0314 	add.w	r3, r7, #20
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 f850 	bl	8008ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e46:	f000 f8dd 	bl	8009004 <prvAddNewTaskToReadyList>
 8008e4a:	e001      	b.n	8008e50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e50:	697b      	ldr	r3, [r7, #20]
	}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3728      	adds	r7, #40	; 0x28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b08c      	sub	sp, #48	; 0x30
 8008e5e:	af04      	add	r7, sp, #16
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	603b      	str	r3, [r7, #0]
 8008e66:	4613      	mov	r3, r2
 8008e68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e6a:	88fb      	ldrh	r3, [r7, #6]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe fdc0 	bl	80079f4 <pvPortMalloc>
 8008e74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00e      	beq.n	8008e9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e7c:	205c      	movs	r0, #92	; 0x5c
 8008e7e:	f7fe fdb9 	bl	80079f4 <pvPortMalloc>
 8008e82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8008e90:	e005      	b.n	8008e9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e92:	6978      	ldr	r0, [r7, #20]
 8008e94:	f7fe fe7a 	bl	8007b8c <vPortFree>
 8008e98:	e001      	b.n	8008e9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d017      	beq.n	8008ed4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008eac:	88fa      	ldrh	r2, [r7, #6]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9303      	str	r3, [sp, #12]
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	9302      	str	r3, [sp, #8]
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f80e 	bl	8008ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ec8:	69f8      	ldr	r0, [r7, #28]
 8008eca:	f000 f89b 	bl	8009004 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	61bb      	str	r3, [r7, #24]
 8008ed2:	e002      	b.n	8008eda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008eda:	69bb      	ldr	r3, [r7, #24]
	}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	461a      	mov	r2, r3
 8008efc:	21a5      	movs	r1, #165	; 0xa5
 8008efe:	f001 f9cd 	bl	800a29c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	f023 0307 	bic.w	r3, r3, #7
 8008f1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	617b      	str	r3, [r7, #20]
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d01f      	beq.n	8008f82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f42:	2300      	movs	r3, #0
 8008f44:	61fb      	str	r3, [r7, #28]
 8008f46:	e012      	b.n	8008f6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	7819      	ldrb	r1, [r3, #0]
 8008f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	4413      	add	r3, r2
 8008f56:	3334      	adds	r3, #52	; 0x34
 8008f58:	460a      	mov	r2, r1
 8008f5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	4413      	add	r3, r2
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d006      	beq.n	8008f76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	2b0f      	cmp	r3, #15
 8008f72:	d9e9      	bls.n	8008f48 <prvInitialiseNewTask+0x64>
 8008f74:	e000      	b.n	8008f78 <prvInitialiseNewTask+0x94>
			{
				break;
 8008f76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f80:	e003      	b.n	8008f8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	2b37      	cmp	r3, #55	; 0x37
 8008f8e:	d901      	bls.n	8008f94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f90:	2337      	movs	r3, #55	; 0x37
 8008f92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	3304      	adds	r3, #4
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe ff2c 	bl	8007e08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb2:	3318      	adds	r3, #24
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe ff27 	bl	8007e08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	69b8      	ldr	r0, [r7, #24]
 8008fe4:	f7fe ffa4 	bl	8007f30 <pxPortInitialiseStack>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ffa:	bf00      	nop
 8008ffc:	3720      	adds	r7, #32
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800900c:	f7ff f8ba 	bl	8008184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009010:	4b2d      	ldr	r3, [pc, #180]	; (80090c8 <prvAddNewTaskToReadyList+0xc4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3301      	adds	r3, #1
 8009016:	4a2c      	ldr	r2, [pc, #176]	; (80090c8 <prvAddNewTaskToReadyList+0xc4>)
 8009018:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800901a:	4b2c      	ldr	r3, [pc, #176]	; (80090cc <prvAddNewTaskToReadyList+0xc8>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d109      	bne.n	8009036 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009022:	4a2a      	ldr	r2, [pc, #168]	; (80090cc <prvAddNewTaskToReadyList+0xc8>)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009028:	4b27      	ldr	r3, [pc, #156]	; (80090c8 <prvAddNewTaskToReadyList+0xc4>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d110      	bne.n	8009052 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009030:	f000 fc16 	bl	8009860 <prvInitialiseTaskLists>
 8009034:	e00d      	b.n	8009052 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009036:	4b26      	ldr	r3, [pc, #152]	; (80090d0 <prvAddNewTaskToReadyList+0xcc>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d109      	bne.n	8009052 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800903e:	4b23      	ldr	r3, [pc, #140]	; (80090cc <prvAddNewTaskToReadyList+0xc8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	429a      	cmp	r2, r3
 800904a:	d802      	bhi.n	8009052 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800904c:	4a1f      	ldr	r2, [pc, #124]	; (80090cc <prvAddNewTaskToReadyList+0xc8>)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009052:	4b20      	ldr	r3, [pc, #128]	; (80090d4 <prvAddNewTaskToReadyList+0xd0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3301      	adds	r3, #1
 8009058:	4a1e      	ldr	r2, [pc, #120]	; (80090d4 <prvAddNewTaskToReadyList+0xd0>)
 800905a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800905c:	4b1d      	ldr	r3, [pc, #116]	; (80090d4 <prvAddNewTaskToReadyList+0xd0>)
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009068:	4b1b      	ldr	r3, [pc, #108]	; (80090d8 <prvAddNewTaskToReadyList+0xd4>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	429a      	cmp	r2, r3
 800906e:	d903      	bls.n	8009078 <prvAddNewTaskToReadyList+0x74>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009074:	4a18      	ldr	r2, [pc, #96]	; (80090d8 <prvAddNewTaskToReadyList+0xd4>)
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4a15      	ldr	r2, [pc, #84]	; (80090dc <prvAddNewTaskToReadyList+0xd8>)
 8009086:	441a      	add	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	3304      	adds	r3, #4
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f7fe fec7 	bl	8007e22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009094:	f7ff f8a6 	bl	80081e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009098:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <prvAddNewTaskToReadyList+0xcc>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00e      	beq.n	80090be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090a0:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <prvAddNewTaskToReadyList+0xc8>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d207      	bcs.n	80090be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090ae:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <prvAddNewTaskToReadyList+0xdc>)
 80090b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090be:	bf00      	nop
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20001b30 	.word	0x20001b30
 80090cc:	2000165c 	.word	0x2000165c
 80090d0:	20001b3c 	.word	0x20001b3c
 80090d4:	20001b4c 	.word	0x20001b4c
 80090d8:	20001b38 	.word	0x20001b38
 80090dc:	20001660 	.word	0x20001660
 80090e0:	e000ed04 	.word	0xe000ed04

080090e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d017      	beq.n	8009126 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090f6:	4b13      	ldr	r3, [pc, #76]	; (8009144 <vTaskDelay+0x60>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00a      	beq.n	8009114 <vTaskDelay+0x30>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	60bb      	str	r3, [r7, #8]
}
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009114:	f000 f880 	bl	8009218 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009118:	2100      	movs	r1, #0
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fcea 	bl	8009af4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009120:	f000 f888 	bl	8009234 <xTaskResumeAll>
 8009124:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d107      	bne.n	800913c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800912c:	4b06      	ldr	r3, [pc, #24]	; (8009148 <vTaskDelay+0x64>)
 800912e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800913c:	bf00      	nop
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	20001b58 	.word	0x20001b58
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08a      	sub	sp, #40	; 0x28
 8009150:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009152:	2300      	movs	r3, #0
 8009154:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009156:	2300      	movs	r3, #0
 8009158:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800915a:	463a      	mov	r2, r7
 800915c:	1d39      	adds	r1, r7, #4
 800915e:	f107 0308 	add.w	r3, r7, #8
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe fc12 	bl	800798c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	9202      	str	r2, [sp, #8]
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	2300      	movs	r3, #0
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	2300      	movs	r3, #0
 8009178:	460a      	mov	r2, r1
 800917a:	4921      	ldr	r1, [pc, #132]	; (8009200 <vTaskStartScheduler+0xb4>)
 800917c:	4821      	ldr	r0, [pc, #132]	; (8009204 <vTaskStartScheduler+0xb8>)
 800917e:	f7ff fe0f 	bl	8008da0 <xTaskCreateStatic>
 8009182:	4603      	mov	r3, r0
 8009184:	4a20      	ldr	r2, [pc, #128]	; (8009208 <vTaskStartScheduler+0xbc>)
 8009186:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009188:	4b1f      	ldr	r3, [pc, #124]	; (8009208 <vTaskStartScheduler+0xbc>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009190:	2301      	movs	r3, #1
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	e001      	b.n	800919a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009196:	2300      	movs	r3, #0
 8009198:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d102      	bne.n	80091a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091a0:	f000 fcfc 	bl	8009b9c <xTimerCreateTimerTask>
 80091a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d116      	bne.n	80091da <vTaskStartScheduler+0x8e>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	613b      	str	r3, [r7, #16]
}
 80091be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091c0:	4b12      	ldr	r3, [pc, #72]	; (800920c <vTaskStartScheduler+0xc0>)
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295
 80091c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091c8:	4b11      	ldr	r3, [pc, #68]	; (8009210 <vTaskStartScheduler+0xc4>)
 80091ca:	2201      	movs	r2, #1
 80091cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091ce:	4b11      	ldr	r3, [pc, #68]	; (8009214 <vTaskStartScheduler+0xc8>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091d4:	f7fe ff34 	bl	8008040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091d8:	e00e      	b.n	80091f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d10a      	bne.n	80091f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	60fb      	str	r3, [r7, #12]
}
 80091f4:	bf00      	nop
 80091f6:	e7fe      	b.n	80091f6 <vTaskStartScheduler+0xaa>
}
 80091f8:	bf00      	nop
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	0800a2d8 	.word	0x0800a2d8
 8009204:	08009831 	.word	0x08009831
 8009208:	20001b54 	.word	0x20001b54
 800920c:	20001b50 	.word	0x20001b50
 8009210:	20001b3c 	.word	0x20001b3c
 8009214:	20001b34 	.word	0x20001b34

08009218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800921c:	4b04      	ldr	r3, [pc, #16]	; (8009230 <vTaskSuspendAll+0x18>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3301      	adds	r3, #1
 8009222:	4a03      	ldr	r2, [pc, #12]	; (8009230 <vTaskSuspendAll+0x18>)
 8009224:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009226:	bf00      	nop
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	20001b58 	.word	0x20001b58

08009234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800923a:	2300      	movs	r3, #0
 800923c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800923e:	2300      	movs	r3, #0
 8009240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009242:	4b42      	ldr	r3, [pc, #264]	; (800934c <xTaskResumeAll+0x118>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10a      	bne.n	8009260 <xTaskResumeAll+0x2c>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	603b      	str	r3, [r7, #0]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009260:	f7fe ff90 	bl	8008184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009264:	4b39      	ldr	r3, [pc, #228]	; (800934c <xTaskResumeAll+0x118>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3b01      	subs	r3, #1
 800926a:	4a38      	ldr	r2, [pc, #224]	; (800934c <xTaskResumeAll+0x118>)
 800926c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800926e:	4b37      	ldr	r3, [pc, #220]	; (800934c <xTaskResumeAll+0x118>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d162      	bne.n	800933c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009276:	4b36      	ldr	r3, [pc, #216]	; (8009350 <xTaskResumeAll+0x11c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d05e      	beq.n	800933c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800927e:	e02f      	b.n	80092e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009280:	4b34      	ldr	r3, [pc, #208]	; (8009354 <xTaskResumeAll+0x120>)
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3318      	adds	r3, #24
 800928c:	4618      	mov	r0, r3
 800928e:	f7fe fe25 	bl	8007edc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3304      	adds	r3, #4
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fe20 	bl	8007edc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a0:	4b2d      	ldr	r3, [pc, #180]	; (8009358 <xTaskResumeAll+0x124>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d903      	bls.n	80092b0 <xTaskResumeAll+0x7c>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	4a2a      	ldr	r2, [pc, #168]	; (8009358 <xTaskResumeAll+0x124>)
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b4:	4613      	mov	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4a27      	ldr	r2, [pc, #156]	; (800935c <xTaskResumeAll+0x128>)
 80092be:	441a      	add	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f7fe fdab 	bl	8007e22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d0:	4b23      	ldr	r3, [pc, #140]	; (8009360 <xTaskResumeAll+0x12c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d302      	bcc.n	80092e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80092da:	4b22      	ldr	r3, [pc, #136]	; (8009364 <xTaskResumeAll+0x130>)
 80092dc:	2201      	movs	r2, #1
 80092de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092e0:	4b1c      	ldr	r3, [pc, #112]	; (8009354 <xTaskResumeAll+0x120>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1cb      	bne.n	8009280 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092ee:	f000 fb55 	bl	800999c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092f2:	4b1d      	ldr	r3, [pc, #116]	; (8009368 <xTaskResumeAll+0x134>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d010      	beq.n	8009320 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092fe:	f000 f847 	bl	8009390 <xTaskIncrementTick>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009308:	4b16      	ldr	r3, [pc, #88]	; (8009364 <xTaskResumeAll+0x130>)
 800930a:	2201      	movs	r2, #1
 800930c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3b01      	subs	r3, #1
 8009312:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1f1      	bne.n	80092fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800931a:	4b13      	ldr	r3, [pc, #76]	; (8009368 <xTaskResumeAll+0x134>)
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009320:	4b10      	ldr	r3, [pc, #64]	; (8009364 <xTaskResumeAll+0x130>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d009      	beq.n	800933c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009328:	2301      	movs	r3, #1
 800932a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800932c:	4b0f      	ldr	r3, [pc, #60]	; (800936c <xTaskResumeAll+0x138>)
 800932e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800933c:	f7fe ff52 	bl	80081e4 <vPortExitCritical>

	return xAlreadyYielded;
 8009340:	68bb      	ldr	r3, [r7, #8]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20001b58 	.word	0x20001b58
 8009350:	20001b30 	.word	0x20001b30
 8009354:	20001af0 	.word	0x20001af0
 8009358:	20001b38 	.word	0x20001b38
 800935c:	20001660 	.word	0x20001660
 8009360:	2000165c 	.word	0x2000165c
 8009364:	20001b44 	.word	0x20001b44
 8009368:	20001b40 	.word	0x20001b40
 800936c:	e000ed04 	.word	0xe000ed04

08009370 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009376:	4b05      	ldr	r3, [pc, #20]	; (800938c <xTaskGetTickCount+0x1c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800937c:	687b      	ldr	r3, [r7, #4]
}
 800937e:	4618      	mov	r0, r3
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20001b34 	.word	0x20001b34

08009390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009396:	2300      	movs	r3, #0
 8009398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800939a:	4b4f      	ldr	r3, [pc, #316]	; (80094d8 <xTaskIncrementTick+0x148>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f040 808f 	bne.w	80094c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093a4:	4b4d      	ldr	r3, [pc, #308]	; (80094dc <xTaskIncrementTick+0x14c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3301      	adds	r3, #1
 80093aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093ac:	4a4b      	ldr	r2, [pc, #300]	; (80094dc <xTaskIncrementTick+0x14c>)
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d120      	bne.n	80093fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80093b8:	4b49      	ldr	r3, [pc, #292]	; (80094e0 <xTaskIncrementTick+0x150>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	603b      	str	r3, [r7, #0]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <xTaskIncrementTick+0x46>
 80093d8:	4b41      	ldr	r3, [pc, #260]	; (80094e0 <xTaskIncrementTick+0x150>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	4b41      	ldr	r3, [pc, #260]	; (80094e4 <xTaskIncrementTick+0x154>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a3f      	ldr	r2, [pc, #252]	; (80094e0 <xTaskIncrementTick+0x150>)
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	4a3f      	ldr	r2, [pc, #252]	; (80094e4 <xTaskIncrementTick+0x154>)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	4b3e      	ldr	r3, [pc, #248]	; (80094e8 <xTaskIncrementTick+0x158>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3301      	adds	r3, #1
 80093f2:	4a3d      	ldr	r2, [pc, #244]	; (80094e8 <xTaskIncrementTick+0x158>)
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	f000 fad1 	bl	800999c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093fa:	4b3c      	ldr	r3, [pc, #240]	; (80094ec <xTaskIncrementTick+0x15c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	429a      	cmp	r2, r3
 8009402:	d349      	bcc.n	8009498 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009404:	4b36      	ldr	r3, [pc, #216]	; (80094e0 <xTaskIncrementTick+0x150>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d104      	bne.n	8009418 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800940e:	4b37      	ldr	r3, [pc, #220]	; (80094ec <xTaskIncrementTick+0x15c>)
 8009410:	f04f 32ff 	mov.w	r2, #4294967295
 8009414:	601a      	str	r2, [r3, #0]
					break;
 8009416:	e03f      	b.n	8009498 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009418:	4b31      	ldr	r3, [pc, #196]	; (80094e0 <xTaskIncrementTick+0x150>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	429a      	cmp	r2, r3
 800942e:	d203      	bcs.n	8009438 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009430:	4a2e      	ldr	r2, [pc, #184]	; (80094ec <xTaskIncrementTick+0x15c>)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009436:	e02f      	b.n	8009498 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	3304      	adds	r3, #4
 800943c:	4618      	mov	r0, r3
 800943e:	f7fe fd4d 	bl	8007edc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009446:	2b00      	cmp	r3, #0
 8009448:	d004      	beq.n	8009454 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	3318      	adds	r3, #24
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fd44 	bl	8007edc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009458:	4b25      	ldr	r3, [pc, #148]	; (80094f0 <xTaskIncrementTick+0x160>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d903      	bls.n	8009468 <xTaskIncrementTick+0xd8>
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	4a22      	ldr	r2, [pc, #136]	; (80094f0 <xTaskIncrementTick+0x160>)
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4a1f      	ldr	r2, [pc, #124]	; (80094f4 <xTaskIncrementTick+0x164>)
 8009476:	441a      	add	r2, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	3304      	adds	r3, #4
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7fe fccf 	bl	8007e22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009488:	4b1b      	ldr	r3, [pc, #108]	; (80094f8 <xTaskIncrementTick+0x168>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	429a      	cmp	r2, r3
 8009490:	d3b8      	bcc.n	8009404 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009492:	2301      	movs	r3, #1
 8009494:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009496:	e7b5      	b.n	8009404 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009498:	4b17      	ldr	r3, [pc, #92]	; (80094f8 <xTaskIncrementTick+0x168>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949e:	4915      	ldr	r1, [pc, #84]	; (80094f4 <xTaskIncrementTick+0x164>)
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d901      	bls.n	80094b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80094b0:	2301      	movs	r3, #1
 80094b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094b4:	4b11      	ldr	r3, [pc, #68]	; (80094fc <xTaskIncrementTick+0x16c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d007      	beq.n	80094cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80094bc:	2301      	movs	r3, #1
 80094be:	617b      	str	r3, [r7, #20]
 80094c0:	e004      	b.n	80094cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094c2:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <xTaskIncrementTick+0x170>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3301      	adds	r3, #1
 80094c8:	4a0d      	ldr	r2, [pc, #52]	; (8009500 <xTaskIncrementTick+0x170>)
 80094ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094cc:	697b      	ldr	r3, [r7, #20]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20001b58 	.word	0x20001b58
 80094dc:	20001b34 	.word	0x20001b34
 80094e0:	20001ae8 	.word	0x20001ae8
 80094e4:	20001aec 	.word	0x20001aec
 80094e8:	20001b48 	.word	0x20001b48
 80094ec:	20001b50 	.word	0x20001b50
 80094f0:	20001b38 	.word	0x20001b38
 80094f4:	20001660 	.word	0x20001660
 80094f8:	2000165c 	.word	0x2000165c
 80094fc:	20001b44 	.word	0x20001b44
 8009500:	20001b40 	.word	0x20001b40

08009504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800950a:	4b28      	ldr	r3, [pc, #160]	; (80095ac <vTaskSwitchContext+0xa8>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009512:	4b27      	ldr	r3, [pc, #156]	; (80095b0 <vTaskSwitchContext+0xac>)
 8009514:	2201      	movs	r2, #1
 8009516:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009518:	e041      	b.n	800959e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800951a:	4b25      	ldr	r3, [pc, #148]	; (80095b0 <vTaskSwitchContext+0xac>)
 800951c:	2200      	movs	r2, #0
 800951e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009520:	4b24      	ldr	r3, [pc, #144]	; (80095b4 <vTaskSwitchContext+0xb0>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	60fb      	str	r3, [r7, #12]
 8009526:	e010      	b.n	800954a <vTaskSwitchContext+0x46>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10a      	bne.n	8009544 <vTaskSwitchContext+0x40>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	607b      	str	r3, [r7, #4]
}
 8009540:	bf00      	nop
 8009542:	e7fe      	b.n	8009542 <vTaskSwitchContext+0x3e>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3b01      	subs	r3, #1
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	491b      	ldr	r1, [pc, #108]	; (80095b8 <vTaskSwitchContext+0xb4>)
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	440b      	add	r3, r1
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0e4      	beq.n	8009528 <vTaskSwitchContext+0x24>
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4a13      	ldr	r2, [pc, #76]	; (80095b8 <vTaskSwitchContext+0xb4>)
 800956a:	4413      	add	r3, r2
 800956c:	60bb      	str	r3, [r7, #8]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	605a      	str	r2, [r3, #4]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	3308      	adds	r3, #8
 8009580:	429a      	cmp	r2, r3
 8009582:	d104      	bne.n	800958e <vTaskSwitchContext+0x8a>
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	605a      	str	r2, [r3, #4]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	4a09      	ldr	r2, [pc, #36]	; (80095bc <vTaskSwitchContext+0xb8>)
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	4a06      	ldr	r2, [pc, #24]	; (80095b4 <vTaskSwitchContext+0xb0>)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6013      	str	r3, [r2, #0]
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	20001b58 	.word	0x20001b58
 80095b0:	20001b44 	.word	0x20001b44
 80095b4:	20001b38 	.word	0x20001b38
 80095b8:	20001660 	.word	0x20001660
 80095bc:	2000165c 	.word	0x2000165c

080095c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	60fb      	str	r3, [r7, #12]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095e6:	4b07      	ldr	r3, [pc, #28]	; (8009604 <vTaskPlaceOnEventList+0x44>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3318      	adds	r3, #24
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7fe fc3b 	bl	8007e6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095f4:	2101      	movs	r1, #1
 80095f6:	6838      	ldr	r0, [r7, #0]
 80095f8:	f000 fa7c 	bl	8009af4 <prvAddCurrentTaskToDelayedList>
}
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	2000165c 	.word	0x2000165c

08009608 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10a      	bne.n	8009630 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	617b      	str	r3, [r7, #20]
}
 800962c:	bf00      	nop
 800962e:	e7fe      	b.n	800962e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009630:	4b0a      	ldr	r3, [pc, #40]	; (800965c <vTaskPlaceOnEventListRestricted+0x54>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3318      	adds	r3, #24
 8009636:	4619      	mov	r1, r3
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f7fe fbf2 	bl	8007e22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009644:	f04f 33ff 	mov.w	r3, #4294967295
 8009648:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	68b8      	ldr	r0, [r7, #8]
 800964e:	f000 fa51 	bl	8009af4 <prvAddCurrentTaskToDelayedList>
	}
 8009652:	bf00      	nop
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	2000165c 	.word	0x2000165c

08009660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10a      	bne.n	800968c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	60fb      	str	r3, [r7, #12]
}
 8009688:	bf00      	nop
 800968a:	e7fe      	b.n	800968a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	3318      	adds	r3, #24
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe fc23 	bl	8007edc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009696:	4b1e      	ldr	r3, [pc, #120]	; (8009710 <xTaskRemoveFromEventList+0xb0>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d11d      	bne.n	80096da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	3304      	adds	r3, #4
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe fc1a 	bl	8007edc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ac:	4b19      	ldr	r3, [pc, #100]	; (8009714 <xTaskRemoveFromEventList+0xb4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d903      	bls.n	80096bc <xTaskRemoveFromEventList+0x5c>
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	4a16      	ldr	r2, [pc, #88]	; (8009714 <xTaskRemoveFromEventList+0xb4>)
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4a13      	ldr	r2, [pc, #76]	; (8009718 <xTaskRemoveFromEventList+0xb8>)
 80096ca:	441a      	add	r2, r3
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f7fe fba5 	bl	8007e22 <vListInsertEnd>
 80096d8:	e005      	b.n	80096e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	3318      	adds	r3, #24
 80096de:	4619      	mov	r1, r3
 80096e0:	480e      	ldr	r0, [pc, #56]	; (800971c <xTaskRemoveFromEventList+0xbc>)
 80096e2:	f7fe fb9e 	bl	8007e22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ea:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <xTaskRemoveFromEventList+0xc0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d905      	bls.n	8009700 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096f4:	2301      	movs	r3, #1
 80096f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096f8:	4b0a      	ldr	r3, [pc, #40]	; (8009724 <xTaskRemoveFromEventList+0xc4>)
 80096fa:	2201      	movs	r2, #1
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	e001      	b.n	8009704 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009704:	697b      	ldr	r3, [r7, #20]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20001b58 	.word	0x20001b58
 8009714:	20001b38 	.word	0x20001b38
 8009718:	20001660 	.word	0x20001660
 800971c:	20001af0 	.word	0x20001af0
 8009720:	2000165c 	.word	0x2000165c
 8009724:	20001b44 	.word	0x20001b44

08009728 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009730:	4b06      	ldr	r3, [pc, #24]	; (800974c <vTaskInternalSetTimeOutState+0x24>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009738:	4b05      	ldr	r3, [pc, #20]	; (8009750 <vTaskInternalSetTimeOutState+0x28>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	605a      	str	r2, [r3, #4]
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	20001b48 	.word	0x20001b48
 8009750:	20001b34 	.word	0x20001b34

08009754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10a      	bne.n	800977a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	613b      	str	r3, [r7, #16]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	60fb      	str	r3, [r7, #12]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009796:	f7fe fcf5 	bl	8008184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800979a:	4b1d      	ldr	r3, [pc, #116]	; (8009810 <xTaskCheckForTimeOut+0xbc>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b2:	d102      	bne.n	80097ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097b4:	2300      	movs	r3, #0
 80097b6:	61fb      	str	r3, [r7, #28]
 80097b8:	e023      	b.n	8009802 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	4b15      	ldr	r3, [pc, #84]	; (8009814 <xTaskCheckForTimeOut+0xc0>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d007      	beq.n	80097d6 <xTaskCheckForTimeOut+0x82>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	69ba      	ldr	r2, [r7, #24]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d302      	bcc.n	80097d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097d0:	2301      	movs	r3, #1
 80097d2:	61fb      	str	r3, [r7, #28]
 80097d4:	e015      	b.n	8009802 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d20b      	bcs.n	80097f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	1ad2      	subs	r2, r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff ff9b 	bl	8009728 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097f2:	2300      	movs	r3, #0
 80097f4:	61fb      	str	r3, [r7, #28]
 80097f6:	e004      	b.n	8009802 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097fe:	2301      	movs	r3, #1
 8009800:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009802:	f7fe fcef 	bl	80081e4 <vPortExitCritical>

	return xReturn;
 8009806:	69fb      	ldr	r3, [r7, #28]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3720      	adds	r7, #32
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	20001b34 	.word	0x20001b34
 8009814:	20001b48 	.word	0x20001b48

08009818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009818:	b480      	push	{r7}
 800981a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800981c:	4b03      	ldr	r3, [pc, #12]	; (800982c <vTaskMissedYield+0x14>)
 800981e:	2201      	movs	r2, #1
 8009820:	601a      	str	r2, [r3, #0]
}
 8009822:	bf00      	nop
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	20001b44 	.word	0x20001b44

08009830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009838:	f000 f852 	bl	80098e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800983c:	4b06      	ldr	r3, [pc, #24]	; (8009858 <prvIdleTask+0x28>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d9f9      	bls.n	8009838 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009844:	4b05      	ldr	r3, [pc, #20]	; (800985c <prvIdleTask+0x2c>)
 8009846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800984a:	601a      	str	r2, [r3, #0]
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009854:	e7f0      	b.n	8009838 <prvIdleTask+0x8>
 8009856:	bf00      	nop
 8009858:	20001660 	.word	0x20001660
 800985c:	e000ed04 	.word	0xe000ed04

08009860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009866:	2300      	movs	r3, #0
 8009868:	607b      	str	r3, [r7, #4]
 800986a:	e00c      	b.n	8009886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	4613      	mov	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4a12      	ldr	r2, [pc, #72]	; (80098c0 <prvInitialiseTaskLists+0x60>)
 8009878:	4413      	add	r3, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe faa4 	bl	8007dc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3301      	adds	r3, #1
 8009884:	607b      	str	r3, [r7, #4]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b37      	cmp	r3, #55	; 0x37
 800988a:	d9ef      	bls.n	800986c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800988c:	480d      	ldr	r0, [pc, #52]	; (80098c4 <prvInitialiseTaskLists+0x64>)
 800988e:	f7fe fa9b 	bl	8007dc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009892:	480d      	ldr	r0, [pc, #52]	; (80098c8 <prvInitialiseTaskLists+0x68>)
 8009894:	f7fe fa98 	bl	8007dc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009898:	480c      	ldr	r0, [pc, #48]	; (80098cc <prvInitialiseTaskLists+0x6c>)
 800989a:	f7fe fa95 	bl	8007dc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800989e:	480c      	ldr	r0, [pc, #48]	; (80098d0 <prvInitialiseTaskLists+0x70>)
 80098a0:	f7fe fa92 	bl	8007dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098a4:	480b      	ldr	r0, [pc, #44]	; (80098d4 <prvInitialiseTaskLists+0x74>)
 80098a6:	f7fe fa8f 	bl	8007dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098aa:	4b0b      	ldr	r3, [pc, #44]	; (80098d8 <prvInitialiseTaskLists+0x78>)
 80098ac:	4a05      	ldr	r2, [pc, #20]	; (80098c4 <prvInitialiseTaskLists+0x64>)
 80098ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <prvInitialiseTaskLists+0x7c>)
 80098b2:	4a05      	ldr	r2, [pc, #20]	; (80098c8 <prvInitialiseTaskLists+0x68>)
 80098b4:	601a      	str	r2, [r3, #0]
}
 80098b6:	bf00      	nop
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20001660 	.word	0x20001660
 80098c4:	20001ac0 	.word	0x20001ac0
 80098c8:	20001ad4 	.word	0x20001ad4
 80098cc:	20001af0 	.word	0x20001af0
 80098d0:	20001b04 	.word	0x20001b04
 80098d4:	20001b1c 	.word	0x20001b1c
 80098d8:	20001ae8 	.word	0x20001ae8
 80098dc:	20001aec 	.word	0x20001aec

080098e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098e6:	e019      	b.n	800991c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098e8:	f7fe fc4c 	bl	8008184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ec:	4b10      	ldr	r3, [pc, #64]	; (8009930 <prvCheckTasksWaitingTermination+0x50>)
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe faef 	bl	8007edc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098fe:	4b0d      	ldr	r3, [pc, #52]	; (8009934 <prvCheckTasksWaitingTermination+0x54>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3b01      	subs	r3, #1
 8009904:	4a0b      	ldr	r2, [pc, #44]	; (8009934 <prvCheckTasksWaitingTermination+0x54>)
 8009906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009908:	4b0b      	ldr	r3, [pc, #44]	; (8009938 <prvCheckTasksWaitingTermination+0x58>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3b01      	subs	r3, #1
 800990e:	4a0a      	ldr	r2, [pc, #40]	; (8009938 <prvCheckTasksWaitingTermination+0x58>)
 8009910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009912:	f7fe fc67 	bl	80081e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f810 	bl	800993c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800991c:	4b06      	ldr	r3, [pc, #24]	; (8009938 <prvCheckTasksWaitingTermination+0x58>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e1      	bne.n	80098e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */

}
 8009924:	bf00      	nop
 8009926:	bf00      	nop
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20001b04 	.word	0x20001b04
 8009934:	20001b30 	.word	0x20001b30
 8009938:	20001b18 	.word	0x20001b18

0800993c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800994a:	2b00      	cmp	r3, #0
 800994c:	d108      	bne.n	8009960 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe f91a 	bl	8007b8c <vPortFree>
				vPortFree( pxTCB );
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7fe f917 	bl	8007b8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800995e:	e018      	b.n	8009992 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009966:	2b01      	cmp	r3, #1
 8009968:	d103      	bne.n	8009972 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7fe f90e 	bl	8007b8c <vPortFree>
	}
 8009970:	e00f      	b.n	8009992 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009978:	2b02      	cmp	r3, #2
 800997a:	d00a      	beq.n	8009992 <prvDeleteTCB+0x56>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60fb      	str	r3, [r7, #12]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <prvDeleteTCB+0x54>
	}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099a2:	4b0c      	ldr	r3, [pc, #48]	; (80099d4 <prvResetNextTaskUnblockTime+0x38>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d104      	bne.n	80099b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099ac:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <prvResetNextTaskUnblockTime+0x3c>)
 80099ae:	f04f 32ff 	mov.w	r2, #4294967295
 80099b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099b4:	e008      	b.n	80099c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b6:	4b07      	ldr	r3, [pc, #28]	; (80099d4 <prvResetNextTaskUnblockTime+0x38>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	4a04      	ldr	r2, [pc, #16]	; (80099d8 <prvResetNextTaskUnblockTime+0x3c>)
 80099c6:	6013      	str	r3, [r2, #0]
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	20001ae8 	.word	0x20001ae8
 80099d8:	20001b50 	.word	0x20001b50

080099dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099e2:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <xTaskGetSchedulerState+0x34>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d102      	bne.n	80099f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099ea:	2301      	movs	r3, #1
 80099ec:	607b      	str	r3, [r7, #4]
 80099ee:	e008      	b.n	8009a02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099f0:	4b08      	ldr	r3, [pc, #32]	; (8009a14 <xTaskGetSchedulerState+0x38>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d102      	bne.n	80099fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099f8:	2302      	movs	r3, #2
 80099fa:	607b      	str	r3, [r7, #4]
 80099fc:	e001      	b.n	8009a02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099fe:	2300      	movs	r3, #0
 8009a00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a02:	687b      	ldr	r3, [r7, #4]
	}
 8009a04:	4618      	mov	r0, r3
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	20001b3c 	.word	0x20001b3c
 8009a14:	20001b58 	.word	0x20001b58

08009a18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a24:	2300      	movs	r3, #0
 8009a26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d056      	beq.n	8009adc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a2e:	4b2e      	ldr	r3, [pc, #184]	; (8009ae8 <xTaskPriorityDisinherit+0xd0>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d00a      	beq.n	8009a4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	60fb      	str	r3, [r7, #12]
}
 8009a4a:	bf00      	nop
 8009a4c:	e7fe      	b.n	8009a4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10a      	bne.n	8009a6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	60bb      	str	r3, [r7, #8]
}
 8009a68:	bf00      	nop
 8009a6a:	e7fe      	b.n	8009a6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a70:	1e5a      	subs	r2, r3, #1
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d02c      	beq.n	8009adc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d128      	bne.n	8009adc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe fa24 	bl	8007edc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aac:	4b0f      	ldr	r3, [pc, #60]	; (8009aec <xTaskPriorityDisinherit+0xd4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d903      	bls.n	8009abc <xTaskPriorityDisinherit+0xa4>
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	4a0c      	ldr	r2, [pc, #48]	; (8009aec <xTaskPriorityDisinherit+0xd4>)
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4a09      	ldr	r2, [pc, #36]	; (8009af0 <xTaskPriorityDisinherit+0xd8>)
 8009aca:	441a      	add	r2, r3
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f7fe f9a5 	bl	8007e22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009adc:	697b      	ldr	r3, [r7, #20]
	}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	2000165c 	.word	0x2000165c
 8009aec:	20001b38 	.word	0x20001b38
 8009af0:	20001660 	.word	0x20001660

08009af4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009afe:	4b21      	ldr	r3, [pc, #132]	; (8009b84 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b04:	4b20      	ldr	r3, [pc, #128]	; (8009b88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3304      	adds	r3, #4
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe f9e6 	bl	8007edc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b16:	d10a      	bne.n	8009b2e <prvAddCurrentTaskToDelayedList+0x3a>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d007      	beq.n	8009b2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b1e:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4619      	mov	r1, r3
 8009b26:	4819      	ldr	r0, [pc, #100]	; (8009b8c <prvAddCurrentTaskToDelayedList+0x98>)
 8009b28:	f7fe f97b 	bl	8007e22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b2c:	e026      	b.n	8009b7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4413      	add	r3, r2
 8009b34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b36:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d209      	bcs.n	8009b5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b46:	4b12      	ldr	r3, [pc, #72]	; (8009b90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	4b0f      	ldr	r3, [pc, #60]	; (8009b88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4619      	mov	r1, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	f7fe f989 	bl	8007e6a <vListInsert>
}
 8009b58:	e010      	b.n	8009b7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b5a:	4b0e      	ldr	r3, [pc, #56]	; (8009b94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3304      	adds	r3, #4
 8009b64:	4619      	mov	r1, r3
 8009b66:	4610      	mov	r0, r2
 8009b68:	f7fe f97f 	bl	8007e6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b6c:	4b0a      	ldr	r3, [pc, #40]	; (8009b98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d202      	bcs.n	8009b7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b76:	4a08      	ldr	r2, [pc, #32]	; (8009b98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6013      	str	r3, [r2, #0]
}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20001b34 	.word	0x20001b34
 8009b88:	2000165c 	.word	0x2000165c
 8009b8c:	20001b1c 	.word	0x20001b1c
 8009b90:	20001aec 	.word	0x20001aec
 8009b94:	20001ae8 	.word	0x20001ae8
 8009b98:	20001b50 	.word	0x20001b50

08009b9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08a      	sub	sp, #40	; 0x28
 8009ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ba6:	f000 fb07 	bl	800a1b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009baa:	4b1c      	ldr	r3, [pc, #112]	; (8009c1c <xTimerCreateTimerTask+0x80>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d021      	beq.n	8009bf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009bba:	1d3a      	adds	r2, r7, #4
 8009bbc:	f107 0108 	add.w	r1, r7, #8
 8009bc0:	f107 030c 	add.w	r3, r7, #12
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fd fefb 	bl	80079c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	9202      	str	r2, [sp, #8]
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	460a      	mov	r2, r1
 8009bdc:	4910      	ldr	r1, [pc, #64]	; (8009c20 <xTimerCreateTimerTask+0x84>)
 8009bde:	4811      	ldr	r0, [pc, #68]	; (8009c24 <xTimerCreateTimerTask+0x88>)
 8009be0:	f7ff f8de 	bl	8008da0 <xTaskCreateStatic>
 8009be4:	4603      	mov	r3, r0
 8009be6:	4a10      	ldr	r2, [pc, #64]	; (8009c28 <xTimerCreateTimerTask+0x8c>)
 8009be8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009bea:	4b0f      	ldr	r3, [pc, #60]	; (8009c28 <xTimerCreateTimerTask+0x8c>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d001      	beq.n	8009bf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	613b      	str	r3, [r7, #16]
}
 8009c0e:	bf00      	nop
 8009c10:	e7fe      	b.n	8009c10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c12:	697b      	ldr	r3, [r7, #20]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20001b8c 	.word	0x20001b8c
 8009c20:	0800a2e0 	.word	0x0800a2e0
 8009c24:	08009d61 	.word	0x08009d61
 8009c28:	20001b90 	.word	0x20001b90

08009c2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08a      	sub	sp, #40	; 0x28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10a      	bne.n	8009c5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	623b      	str	r3, [r7, #32]
}
 8009c56:	bf00      	nop
 8009c58:	e7fe      	b.n	8009c58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c5a:	4b1a      	ldr	r3, [pc, #104]	; (8009cc4 <xTimerGenericCommand+0x98>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d02a      	beq.n	8009cb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b05      	cmp	r3, #5
 8009c72:	dc18      	bgt.n	8009ca6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c74:	f7ff feb2 	bl	80099dc <xTaskGetSchedulerState>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d109      	bne.n	8009c92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c7e:	4b11      	ldr	r3, [pc, #68]	; (8009cc4 <xTimerGenericCommand+0x98>)
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	f107 0110 	add.w	r1, r7, #16
 8009c86:	2300      	movs	r3, #0
 8009c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c8a:	f7fe fca1 	bl	80085d0 <xQueueGenericSend>
 8009c8e:	6278      	str	r0, [r7, #36]	; 0x24
 8009c90:	e012      	b.n	8009cb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c92:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <xTimerGenericCommand+0x98>)
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	f107 0110 	add.w	r1, r7, #16
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f7fe fc97 	bl	80085d0 <xQueueGenericSend>
 8009ca2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ca4:	e008      	b.n	8009cb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ca6:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <xTimerGenericCommand+0x98>)
 8009ca8:	6818      	ldr	r0, [r3, #0]
 8009caa:	f107 0110 	add.w	r1, r7, #16
 8009cae:	2300      	movs	r3, #0
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	f7fe fd8b 	bl	80087cc <xQueueGenericSendFromISR>
 8009cb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3728      	adds	r7, #40	; 0x28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20001b8c 	.word	0x20001b8c

08009cc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b088      	sub	sp, #32
 8009ccc:	af02      	add	r7, sp, #8
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd2:	4b22      	ldr	r3, [pc, #136]	; (8009d5c <prvProcessExpiredTimer+0x94>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe f8fb 	bl	8007edc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cec:	f003 0304 	and.w	r3, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d022      	beq.n	8009d3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	699a      	ldr	r2, [r3, #24]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	18d1      	adds	r1, r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	6978      	ldr	r0, [r7, #20]
 8009d02:	f000 f8d1 	bl	8009ea8 <prvInsertTimerInActiveList>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d01f      	beq.n	8009d4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	2300      	movs	r3, #0
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	2100      	movs	r1, #0
 8009d16:	6978      	ldr	r0, [r7, #20]
 8009d18:	f7ff ff88 	bl	8009c2c <xTimerGenericCommand>
 8009d1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d113      	bne.n	8009d4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	60fb      	str	r3, [r7, #12]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d40:	f023 0301 	bic.w	r3, r3, #1
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	6a1b      	ldr	r3, [r3, #32]
 8009d50:	6978      	ldr	r0, [r7, #20]
 8009d52:	4798      	blx	r3
}
 8009d54:	bf00      	nop
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	20001b84 	.word	0x20001b84

08009d60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d68:	f107 0308 	add.w	r3, r7, #8
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 f857 	bl	8009e20 <prvGetNextExpireTime>
 8009d72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	4619      	mov	r1, r3
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f803 	bl	8009d84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d7e:	f000 f8d5 	bl	8009f2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d82:	e7f1      	b.n	8009d68 <prvTimerTask+0x8>

08009d84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d8e:	f7ff fa43 	bl	8009218 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 f866 	bl	8009e68 <prvSampleTimeNow>
 8009d9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d130      	bne.n	8009e06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <prvProcessTimerOrBlockTask+0x3c>
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d806      	bhi.n	8009dc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009db2:	f7ff fa3f 	bl	8009234 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff ff85 	bl	8009cc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009dbe:	e024      	b.n	8009e0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d008      	beq.n	8009dd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009dc6:	4b13      	ldr	r3, [pc, #76]	; (8009e14 <prvProcessTimerOrBlockTask+0x90>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <prvProcessTimerOrBlockTask+0x50>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <prvProcessTimerOrBlockTask+0x52>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009dd8:	4b0f      	ldr	r3, [pc, #60]	; (8009e18 <prvProcessTimerOrBlockTask+0x94>)
 8009dda:	6818      	ldr	r0, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	f7fe ffa7 	bl	8008d38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009dea:	f7ff fa23 	bl	8009234 <xTaskResumeAll>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10a      	bne.n	8009e0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009df4:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <prvProcessTimerOrBlockTask+0x98>)
 8009df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
}
 8009e04:	e001      	b.n	8009e0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e06:	f7ff fa15 	bl	8009234 <xTaskResumeAll>
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20001b88 	.word	0x20001b88
 8009e18:	20001b8c 	.word	0x20001b8c
 8009e1c:	e000ed04 	.word	0xe000ed04

08009e20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e28:	4b0e      	ldr	r3, [pc, #56]	; (8009e64 <prvGetNextExpireTime+0x44>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <prvGetNextExpireTime+0x16>
 8009e32:	2201      	movs	r2, #1
 8009e34:	e000      	b.n	8009e38 <prvGetNextExpireTime+0x18>
 8009e36:	2200      	movs	r2, #0
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d105      	bne.n	8009e50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e44:	4b07      	ldr	r3, [pc, #28]	; (8009e64 <prvGetNextExpireTime+0x44>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	e001      	b.n	8009e54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e54:	68fb      	ldr	r3, [r7, #12]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20001b84 	.word	0x20001b84

08009e68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e70:	f7ff fa7e 	bl	8009370 <xTaskGetTickCount>
 8009e74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e76:	4b0b      	ldr	r3, [pc, #44]	; (8009ea4 <prvSampleTimeNow+0x3c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d205      	bcs.n	8009e8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e80:	f000 f936 	bl	800a0f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	e002      	b.n	8009e92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e92:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <prvSampleTimeNow+0x3c>)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e98:	68fb      	ldr	r3, [r7, #12]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20001b94 	.word	0x20001b94

08009ea8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d812      	bhi.n	8009ef4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	1ad2      	subs	r2, r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d302      	bcc.n	8009ee2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	e01b      	b.n	8009f1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ee2:	4b10      	ldr	r3, [pc, #64]	; (8009f24 <prvInsertTimerInActiveList+0x7c>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f7fd ffbc 	bl	8007e6a <vListInsert>
 8009ef2:	e012      	b.n	8009f1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d206      	bcs.n	8009f0a <prvInsertTimerInActiveList+0x62>
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d302      	bcc.n	8009f0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f04:	2301      	movs	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	e007      	b.n	8009f1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f0a:	4b07      	ldr	r3, [pc, #28]	; (8009f28 <prvInsertTimerInActiveList+0x80>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	3304      	adds	r3, #4
 8009f12:	4619      	mov	r1, r3
 8009f14:	4610      	mov	r0, r2
 8009f16:	f7fd ffa8 	bl	8007e6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f1a:	697b      	ldr	r3, [r7, #20]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	20001b88 	.word	0x20001b88
 8009f28:	20001b84 	.word	0x20001b84

08009f2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b08e      	sub	sp, #56	; 0x38
 8009f30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f32:	e0ca      	b.n	800a0ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	da18      	bge.n	8009f6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f3a:	1d3b      	adds	r3, r7, #4
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	61fb      	str	r3, [r7, #28]
}
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f62:	6850      	ldr	r0, [r2, #4]
 8009f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f66:	6892      	ldr	r2, [r2, #8]
 8009f68:	4611      	mov	r1, r2
 8009f6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f2c0 80aa 	blt.w	800a0c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	3304      	adds	r3, #4
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fd ffa9 	bl	8007edc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f8a:	463b      	mov	r3, r7
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff ff6b 	bl	8009e68 <prvSampleTimeNow>
 8009f92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b09      	cmp	r3, #9
 8009f98:	f200 8097 	bhi.w	800a0ca <prvProcessReceivedCommands+0x19e>
 8009f9c:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <prvProcessReceivedCommands+0x78>)
 8009f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa2:	bf00      	nop
 8009fa4:	08009fcd 	.word	0x08009fcd
 8009fa8:	08009fcd 	.word	0x08009fcd
 8009fac:	08009fcd 	.word	0x08009fcd
 8009fb0:	0800a041 	.word	0x0800a041
 8009fb4:	0800a055 	.word	0x0800a055
 8009fb8:	0800a09f 	.word	0x0800a09f
 8009fbc:	08009fcd 	.word	0x08009fcd
 8009fc0:	08009fcd 	.word	0x08009fcd
 8009fc4:	0800a041 	.word	0x0800a041
 8009fc8:	0800a055 	.word	0x0800a055
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fd2:	f043 0301 	orr.w	r3, r3, #1
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	18d1      	adds	r1, r2, r3
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fec:	f7ff ff5c 	bl	8009ea8 <prvInsertTimerInActiveList>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d069      	beq.n	800a0ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ffc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d05e      	beq.n	800a0ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	441a      	add	r2, r3
 800a014:	2300      	movs	r3, #0
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	2300      	movs	r3, #0
 800a01a:	2100      	movs	r1, #0
 800a01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a01e:	f7ff fe05 	bl	8009c2c <xTimerGenericCommand>
 800a022:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d14f      	bne.n	800a0ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	61bb      	str	r3, [r7, #24]
}
 800a03c:	bf00      	nop
 800a03e:	e7fe      	b.n	800a03e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a046:	f023 0301 	bic.w	r3, r3, #1
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a052:	e03a      	b.n	800a0ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a05a:	f043 0301 	orr.w	r3, r3, #1
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	617b      	str	r3, [r7, #20]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	699a      	ldr	r2, [r3, #24]
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	18d1      	adds	r1, r2, r3
 800a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a098:	f7ff ff06 	bl	8009ea8 <prvInsertTimerInActiveList>
					break;
 800a09c:	e015      	b.n	800a0ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0a4:	f003 0302 	and.w	r3, r3, #2
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d103      	bne.n	800a0b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a0ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ae:	f7fd fd6d 	bl	8007b8c <vPortFree>
 800a0b2:	e00a      	b.n	800a0ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ba:	f023 0301 	bic.w	r3, r3, #1
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0c6:	e000      	b.n	800a0ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a0c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0ca:	4b08      	ldr	r3, [pc, #32]	; (800a0ec <prvProcessReceivedCommands+0x1c0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	1d39      	adds	r1, r7, #4
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe fc16 	bl	8008904 <xQueueReceive>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f47f af2a 	bne.w	8009f34 <prvProcessReceivedCommands+0x8>
	}
}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	3730      	adds	r7, #48	; 0x30
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20001b8c 	.word	0x20001b8c

0800a0f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0f6:	e048      	b.n	800a18a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0f8:	4b2d      	ldr	r3, [pc, #180]	; (800a1b0 <prvSwitchTimerLists+0xc0>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a102:	4b2b      	ldr	r3, [pc, #172]	; (800a1b0 <prvSwitchTimerLists+0xc0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	3304      	adds	r3, #4
 800a110:	4618      	mov	r0, r3
 800a112:	f7fd fee3 	bl	8007edc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d02e      	beq.n	800a18a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	4413      	add	r3, r2
 800a134:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d90e      	bls.n	800a15c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a14a:	4b19      	ldr	r3, [pc, #100]	; (800a1b0 <prvSwitchTimerLists+0xc0>)
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3304      	adds	r3, #4
 800a152:	4619      	mov	r1, r3
 800a154:	4610      	mov	r0, r2
 800a156:	f7fd fe88 	bl	8007e6a <vListInsert>
 800a15a:	e016      	b.n	800a18a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a15c:	2300      	movs	r3, #0
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	2300      	movs	r3, #0
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	2100      	movs	r1, #0
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7ff fd60 	bl	8009c2c <xTimerGenericCommand>
 800a16c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10a      	bne.n	800a18a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	603b      	str	r3, [r7, #0]
}
 800a186:	bf00      	nop
 800a188:	e7fe      	b.n	800a188 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a18a:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <prvSwitchTimerLists+0xc0>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1b1      	bne.n	800a0f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a194:	4b06      	ldr	r3, [pc, #24]	; (800a1b0 <prvSwitchTimerLists+0xc0>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a19a:	4b06      	ldr	r3, [pc, #24]	; (800a1b4 <prvSwitchTimerLists+0xc4>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a04      	ldr	r2, [pc, #16]	; (800a1b0 <prvSwitchTimerLists+0xc0>)
 800a1a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1a2:	4a04      	ldr	r2, [pc, #16]	; (800a1b4 <prvSwitchTimerLists+0xc4>)
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	6013      	str	r3, [r2, #0]
}
 800a1a8:	bf00      	nop
 800a1aa:	3718      	adds	r7, #24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20001b84 	.word	0x20001b84
 800a1b4:	20001b88 	.word	0x20001b88

0800a1b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a1be:	f7fd ffe1 	bl	8008184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a1c2:	4b15      	ldr	r3, [pc, #84]	; (800a218 <prvCheckForValidListAndQueue+0x60>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d120      	bne.n	800a20c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1ca:	4814      	ldr	r0, [pc, #80]	; (800a21c <prvCheckForValidListAndQueue+0x64>)
 800a1cc:	f7fd fdfc 	bl	8007dc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1d0:	4813      	ldr	r0, [pc, #76]	; (800a220 <prvCheckForValidListAndQueue+0x68>)
 800a1d2:	f7fd fdf9 	bl	8007dc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a1d6:	4b13      	ldr	r3, [pc, #76]	; (800a224 <prvCheckForValidListAndQueue+0x6c>)
 800a1d8:	4a10      	ldr	r2, [pc, #64]	; (800a21c <prvCheckForValidListAndQueue+0x64>)
 800a1da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1dc:	4b12      	ldr	r3, [pc, #72]	; (800a228 <prvCheckForValidListAndQueue+0x70>)
 800a1de:	4a10      	ldr	r2, [pc, #64]	; (800a220 <prvCheckForValidListAndQueue+0x68>)
 800a1e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	4b11      	ldr	r3, [pc, #68]	; (800a22c <prvCheckForValidListAndQueue+0x74>)
 800a1e8:	4a11      	ldr	r2, [pc, #68]	; (800a230 <prvCheckForValidListAndQueue+0x78>)
 800a1ea:	2110      	movs	r1, #16
 800a1ec:	200a      	movs	r0, #10
 800a1ee:	f7fe f953 	bl	8008498 <xQueueGenericCreateStatic>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	4a08      	ldr	r2, [pc, #32]	; (800a218 <prvCheckForValidListAndQueue+0x60>)
 800a1f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1f8:	4b07      	ldr	r3, [pc, #28]	; (800a218 <prvCheckForValidListAndQueue+0x60>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d005      	beq.n	800a20c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a200:	4b05      	ldr	r3, [pc, #20]	; (800a218 <prvCheckForValidListAndQueue+0x60>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	490b      	ldr	r1, [pc, #44]	; (800a234 <prvCheckForValidListAndQueue+0x7c>)
 800a206:	4618      	mov	r0, r3
 800a208:	f7fe fd6c 	bl	8008ce4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a20c:	f7fd ffea 	bl	80081e4 <vPortExitCritical>
}
 800a210:	bf00      	nop
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20001b8c 	.word	0x20001b8c
 800a21c:	20001b5c 	.word	0x20001b5c
 800a220:	20001b70 	.word	0x20001b70
 800a224:	20001b84 	.word	0x20001b84
 800a228:	20001b88 	.word	0x20001b88
 800a22c:	20001c38 	.word	0x20001c38
 800a230:	20001b98 	.word	0x20001b98
 800a234:	0800a2e8 	.word	0x0800a2e8

0800a238 <__libc_init_array>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	4d0d      	ldr	r5, [pc, #52]	; (800a270 <__libc_init_array+0x38>)
 800a23c:	4c0d      	ldr	r4, [pc, #52]	; (800a274 <__libc_init_array+0x3c>)
 800a23e:	1b64      	subs	r4, r4, r5
 800a240:	10a4      	asrs	r4, r4, #2
 800a242:	2600      	movs	r6, #0
 800a244:	42a6      	cmp	r6, r4
 800a246:	d109      	bne.n	800a25c <__libc_init_array+0x24>
 800a248:	4d0b      	ldr	r5, [pc, #44]	; (800a278 <__libc_init_array+0x40>)
 800a24a:	4c0c      	ldr	r4, [pc, #48]	; (800a27c <__libc_init_array+0x44>)
 800a24c:	f000 f82e 	bl	800a2ac <_init>
 800a250:	1b64      	subs	r4, r4, r5
 800a252:	10a4      	asrs	r4, r4, #2
 800a254:	2600      	movs	r6, #0
 800a256:	42a6      	cmp	r6, r4
 800a258:	d105      	bne.n	800a266 <__libc_init_array+0x2e>
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a260:	4798      	blx	r3
 800a262:	3601      	adds	r6, #1
 800a264:	e7ee      	b.n	800a244 <__libc_init_array+0xc>
 800a266:	f855 3b04 	ldr.w	r3, [r5], #4
 800a26a:	4798      	blx	r3
 800a26c:	3601      	adds	r6, #1
 800a26e:	e7f2      	b.n	800a256 <__libc_init_array+0x1e>
 800a270:	0800a4ac 	.word	0x0800a4ac
 800a274:	0800a4ac 	.word	0x0800a4ac
 800a278:	0800a4ac 	.word	0x0800a4ac
 800a27c:	0800a4b4 	.word	0x0800a4b4

0800a280 <memcpy>:
 800a280:	440a      	add	r2, r1
 800a282:	4291      	cmp	r1, r2
 800a284:	f100 33ff 	add.w	r3, r0, #4294967295
 800a288:	d100      	bne.n	800a28c <memcpy+0xc>
 800a28a:	4770      	bx	lr
 800a28c:	b510      	push	{r4, lr}
 800a28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a292:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a296:	4291      	cmp	r1, r2
 800a298:	d1f9      	bne.n	800a28e <memcpy+0xe>
 800a29a:	bd10      	pop	{r4, pc}

0800a29c <memset>:
 800a29c:	4402      	add	r2, r0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d100      	bne.n	800a2a6 <memset+0xa>
 800a2a4:	4770      	bx	lr
 800a2a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2aa:	e7f9      	b.n	800a2a0 <memset+0x4>

0800a2ac <_init>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	bf00      	nop
 800a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b2:	bc08      	pop	{r3}
 800a2b4:	469e      	mov	lr, r3
 800a2b6:	4770      	bx	lr

0800a2b8 <_fini>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	bf00      	nop
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr
