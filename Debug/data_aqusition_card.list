
data_aqusition_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a184  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800a344  0800a344  0001a344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a52c  0800a52c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800a52c  0800a52c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a52c  0800a52c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a52c  0800a52c  0001a52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a534  0800a534  0001a534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb0  20000180  0800a6b8  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d30  0800a6b8  00021d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004830a  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063ac  00000000  00000000  000684ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d0  00000000  00000000  0006e868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020c8  00000000  00000000  00070b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035305  00000000  00000000  00072c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002965b  00000000  00000000  000a7f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014bc15  00000000  00000000  000d1560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021d175  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009460  00000000  00000000  0021d1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000180 	.word	0x20000180
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a32c 	.word	0x0800a32c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000184 	.word	0x20000184
 80001fc:	0800a32c 	.word	0x0800a32c

08000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>:
	 * @param  pBuffer: pointer to data to be read.
	 * @param  RegisterAddr: specifies internal address register to be read.
	 * @param  NumByteToRead: number of bytes to be read.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Read(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4611      	mov	r1, r2
 800020c:	461a      	mov	r2, r3
 800020e:	460b      	mov	r3, r1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4613      	mov	r3, r2
 8000214:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToRead) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f004 f885 	bl	800432c <HAL_GPIO_WritePin>
		uint8_t msg = RegisterAddr | 0x80;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000228:	b2db      	uxtb	r3, r3
 800022a:	75fb      	strb	r3, [r7, #23]
		/* Write Reg Address */
		HAL_SPI_Transmit(&hspi1, &msg, 1, 100);
 800022c:	f107 0117 	add.w	r1, r7, #23
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	2201      	movs	r2, #1
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000236:	f006 f976 	bl	8006526 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, pBuffer, nBytesToRead, 100);
 800023a:	88ba      	ldrh	r2, [r7, #4]
 800023c:	2364      	movs	r3, #100	; 0x64
 800023e:	68b9      	ldr	r1, [r7, #8]
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <_ZN16ISM330DHCXSensor7IO_ReadEPhht+0x5c>)
 8000242:	f006 fade 	bl	8006802 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2110      	movs	r1, #16
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f004 f86d 	bl	800432c <HAL_GPIO_WritePin>

		return 0;
 8000252:	2300      	movs	r3, #0
	}
 8000254:	4618      	mov	r0, r3
 8000256:	3718      	adds	r7, #24
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200002ec 	.word	0x200002ec

08000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>:
	 * @param  pBuffer: pointer to data to be written.
	 * @param  RegisterAddr: specifies internal address register to be written.
	 * @param  NumByteToWrite: number of bytes to write.
	 * @retval 0 if ok, an error code otherwise.
	 */
	uint8_t IO_Write(uint8_t *pBuffer, uint8_t RegisterAddr,
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	4611      	mov	r1, r2
 800026c:	461a      	mov	r2, r3
 800026e:	460b      	mov	r3, r1
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	4613      	mov	r3, r2
 8000274:	80bb      	strh	r3, [r7, #4]
			uint16_t nBytesToWrite) {

		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f004 f855 	bl	800432c <HAL_GPIO_WritePin>
		/* Write Reg Address */
		uint8_t data[2];
		data[0] = RegisterAddr;  // multibyte write
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	753b      	strb	r3, [r7, #20]
		data[1] = *pBuffer;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	757b      	strb	r3, [r7, #21]

		HAL_SPI_Transmit(&hspi1, data, 2, 100);
 800028c:	f107 0114 	add.w	r1, r7, #20
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2202      	movs	r2, #2
 8000294:	4806      	ldr	r0, [pc, #24]	; (80002b0 <_ZN16ISM330DHCXSensor8IO_WriteEPhht+0x50>)
 8000296:	f006 f946 	bl	8006526 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f004 f843 	bl	800432c <HAL_GPIO_WritePin>

		return 0;
 80002a6:	2300      	movs	r3, #0
	}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	200002ec 	.word	0x200002ec

080002b4 <_ZN16ISM330DHCXSensorC1Ev>:
/** Constructor SPI
 *  @param spi object
 *  @param cs_pin the chip select pin
 *  @param spi_speed the SPI speed
 */
ISM330DHCXSensor::ISM330DHCXSensor() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(&hspi1);
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <_ZN16ISM330DHCXSensorC1Ev+0x3c>)
 80002be:	f006 f88f 	bl	80063e0 <HAL_SPI_Init>
	reg_ctx.write_reg = ISM330DHCX_io_write;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <_ZN16ISM330DHCXSensorC1Ev+0x40>)
 80002c6:	611a      	str	r2, [r3, #16]
	reg_ctx.read_reg = ISM330DHCX_io_read;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <_ZN16ISM330DHCXSensorC1Ev+0x44>)
 80002cc:	615a      	str	r2, [r3, #20]
	reg_ctx.handle = (void*) this;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	619a      	str	r2, [r3, #24]
	address = 0U;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
	acc_is_enabled = 0U;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	731a      	strb	r2, [r3, #12]
	gyro_is_enabled = 0U;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	735a      	strb	r2, [r3, #13]
}
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200002ec 	.word	0x200002ec
 80002f4:	080002fd 	.word	0x080002fd
 80002f8:	08000327 	.word	0x08000327

080002fc <ISM330DHCX_io_write>:

	return ISM330DHCX_OK;
}

int32_t ISM330DHCX_io_write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer,
		uint16_t nBytesToWrite) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	607a      	str	r2, [r7, #4]
 8000306:	461a      	mov	r2, r3
 8000308:	460b      	mov	r3, r1
 800030a:	72fb      	strb	r3, [r7, #11]
 800030c:	4613      	mov	r3, r2
 800030e:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Write(pBuffer, WriteAddr,
 8000310:	893b      	ldrh	r3, [r7, #8]
 8000312:	7afa      	ldrb	r2, [r7, #11]
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f7ff ffa2 	bl	8000260 <_ZN16ISM330DHCXSensor8IO_WriteEPhht>
 800031c:	4603      	mov	r3, r0
			nBytesToWrite);
}
 800031e:	4618      	mov	r0, r3
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <ISM330DHCX_io_read>:

int32_t ISM330DHCX_io_read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer,
		uint16_t nBytesToRead) {
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	60f8      	str	r0, [r7, #12]
 800032e:	607a      	str	r2, [r7, #4]
 8000330:	461a      	mov	r2, r3
 8000332:	460b      	mov	r3, r1
 8000334:	72fb      	strb	r3, [r7, #11]
 8000336:	4613      	mov	r3, r2
 8000338:	813b      	strh	r3, [r7, #8]
	return ((ISM330DHCXSensor*) handle)->IO_Read(pBuffer, ReadAddr,
 800033a:	893b      	ldrh	r3, [r7, #8]
 800033c:	7afa      	ldrb	r2, [r7, #11]
 800033e:	6879      	ldr	r1, [r7, #4]
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f7ff ff5d 	bl	8000200 <_ZN16ISM330DHCXSensor7IO_ReadEPhht>
 8000346:	4603      	mov	r3, r0
			nBytesToRead);
}
 8000348:	4618      	mov	r0, r3
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <_ZN8adc_dataC1Ev>:
 *      Author: molso
 */

#include "adc_data.hpp"
std::array<uint16_t, 6> adc_data::data { };
adc_data::adc_data() {
 8000350:	b590      	push	{r4, r7, lr}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) data.begin(), (uint32_t) data.size());
 8000358:	4808      	ldr	r0, [pc, #32]	; (800037c <_ZN8adc_dataC1Ev+0x2c>)
 800035a:	f000 f825 	bl	80003a8 <_ZNSt5arrayItLj6EE5beginEv>
 800035e:	4604      	mov	r4, r0
 8000360:	4806      	ldr	r0, [pc, #24]	; (800037c <_ZN8adc_dataC1Ev+0x2c>)
 8000362:	f000 f82d 	bl	80003c0 <_ZNKSt5arrayItLj6EE4sizeEv>
 8000366:	4603      	mov	r3, r0
 8000368:	461a      	mov	r2, r3
 800036a:	4621      	mov	r1, r4
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <_ZN8adc_dataC1Ev+0x30>)
 800036e:	f001 fe1d 	bl	8001fac <HAL_ADC_Start_DMA>

}
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4618      	mov	r0, r3
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bd90      	pop	{r4, r7, pc}
 800037c:	2000019c 	.word	0x2000019c
 8000380:	200001c8 	.word	0x200001c8

08000384 <_ZN8adc_dataixE14Analog_channel>:
uint16_t adc_data::operator[](Analog_channel channel) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	return data[static_cast<size_t>(channel)];
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	4619      	mov	r1, r3
 8000392:	4804      	ldr	r0, [pc, #16]	; (80003a4 <_ZN8adc_dataixE14Analog_channel+0x20>)
 8000394:	f000 f81f 	bl	80003d6 <_ZNSt5arrayItLj6EEixEj>
 8000398:	4603      	mov	r3, r0
 800039a:	881b      	ldrh	r3, [r3, #0]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	2000019c 	.word	0x2000019c

080003a8 <_ZNSt5arrayItLj6EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f000 f81f 	bl	80003f4 <_ZNSt5arrayItLj6EE4dataEv>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4618      	mov	r0, r3
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <_ZNKSt5arrayItLj6EE4sizeEv>:
      crend() const noexcept
      { return const_reverse_iterator(begin()); }

      // Capacity.
      constexpr size_type
      size() const noexcept { return _Nm; }
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	2306      	movs	r3, #6
 80003ca:	4618      	mov	r0, r3
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <_ZNSt5arrayItLj6EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	6839      	ldr	r1, [r7, #0]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 f812 	bl	800040e <_ZNSt14__array_traitsItLj6EE6_S_refERA6_Ktj>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4618      	mov	r0, r3
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <_ZNSt5arrayItLj6EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 f814 	bl	800042c <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>
 8000404:	4603      	mov	r3, r0
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <_ZNSt14__array_traitsItLj6EE6_S_refERA6_Ktj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
 8000416:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	4618      	mov	r0, r3
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>:
      _S_ptr(const _Type& __t) noexcept
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4618      	mov	r0, r3
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8000442:	b580      	push	{r7, lr}
 8000444:	b084      	sub	sp, #16
 8000446:	af00      	add	r7, sp, #0
 8000448:	60f8      	str	r0, [r7, #12]
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	607a      	str	r2, [r7, #4]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	461a      	mov	r2, r3
 8000452:	2300      	movs	r3, #0
 8000454:	6013      	str	r3, [r2, #0]
 8000456:	6053      	str	r3, [r2, #4]
 8000458:	6093      	str	r3, [r2, #8]
 800045a:	60d3      	str	r3, [r2, #12]
 800045c:	6113      	str	r3, [r2, #16]
 800045e:	6153      	str	r3, [r2, #20]
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	331c      	adds	r3, #28
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 800046c:	68fa      	ldr	r2, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	331c      	adds	r3, #28
 8000472:	6879      	ldr	r1, [r7, #4]
 8000474:	68b8      	ldr	r0, [r7, #8]
 8000476:	f002 ff0b 	bl	8003290 <HAL_CAN_GetRxMessage>
 800047a:	4603      	mov	r3, r0
 800047c:	461a      	mov	r2, r3
    this->status =
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	4618      	mov	r0, r3
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	791a      	ldrb	r2, [r3, #4]
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	f003 030f 	and.w	r3, r3, #15
 80004a0:	021b      	lsls	r3, r3, #8
 80004a2:	4313      	orrs	r3, r2
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &telemetry_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b086      	sub	sp, #24
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	6938      	ldr	r0, [r7, #16]
 80004c6:	f000 f8f9 	bl	80006bc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>
 80004ca:	6178      	str	r0, [r7, #20]
 80004cc:	6938      	ldr	r0, [r7, #16]
 80004ce:	f000 f901 	bl	80006d4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	697a      	ldr	r2, [r7, #20]
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d01f      	beq.n	800051c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ffd2 	bl	800048e <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80004ea:	4602      	mov	r2, r0
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	bf0c      	ite	eq
 80004f4:	2301      	moveq	r3, #1
 80004f6:	2300      	movne	r3, #0
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00a      	beq.n	8000514 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6839      	ldr	r1, [r7, #0]
 800050c:	4610      	mov	r0, r2
 800050e:	4798      	blx	r3
        return true;
 8000510:	2301      	movs	r3, #1
 8000512:	e004      	b.n	800051e <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3304      	adds	r3, #4
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e7db      	b.n	80004d4 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 800051c:	2300      	movs	r3, #0
  }
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	; 0x30
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	2200      	movs	r2, #0
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff82 	bl	8000442 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 800053e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000542:	2b00      	cmp	r3, #0
 8000544:	d10d      	bne.n	8000562 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	4619      	mov	r1, r3
 800054c:	4807      	ldr	r0, [pc, #28]	; (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800054e:	f7ff ffb0 	bl	80004b2 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
 8000552:	4603      	mov	r3, r0
 8000554:	f083 0301 	eor.w	r3, r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
      // Unknown message
      Error_Handler();
 800055e:	f000 ff01 	bl	8001364 <Error_Handler>
    }
  }
}
 8000562:	bf00      	nop
 8000564:	3730      	adds	r7, #48	; 0x30
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000

08000570 <_Z15init_can_filter17CAN_FilterTypeDef>:

#include "can_functions.hpp"
#include <can_interface.hpp>
extern CAN_HandleTypeDef hcan1;

void init_can_filter(CAN_FilterTypeDef sFilterConfig) {
 8000570:	b084      	sub	sp, #16
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
 8000576:	f107 0c08 	add.w	ip, r7, #8
 800057a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sFilterConfig.FilterBank = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000582:	2300      	movs	r3, #0
 8000584:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000586:	2301      	movs	r3, #1
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = 0x0000;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = 0x0000;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 800059e:	2301      	movs	r3, #1
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80005a2:	f107 0108 	add.w	r1, r7, #8
 80005a6:	4809      	ldr	r0, [pc, #36]	; (80005cc <_Z15init_can_filter17CAN_FilterTypeDef+0x5c>)
 80005a8:	f002 fc89 	bl	8002ebe <HAL_CAN_ConfigFilter>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf14      	ite	ne
 80005b2:	2301      	movne	r3, #1
 80005b4:	2300      	moveq	r3, #0
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <_Z15init_can_filter17CAN_FilterTypeDef+0x50>
		Error_Handler();
 80005bc:	f000 fed2 	bl	8001364 <Error_Handler>
	}
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c8:	b004      	add	sp, #16
 80005ca:	4770      	bx	lr
 80005cc:	20000290 	.word	0x20000290

080005d0 <_Z15init_can_configv>:

void init_can_config(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <_Z15init_can_configv+0x40>)
 80005d6:	f002 fd3c 	bl	8003052 <HAL_CAN_Start>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bf14      	ite	ne
 80005e0:	2301      	movne	r3, #1
 80005e2:	2300      	moveq	r3, #0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <_Z15init_can_configv+0x1e>
		Error_Handler();
 80005ea:	f000 febb 	bl	8001364 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1,
 80005ee:	2103      	movs	r1, #3
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <_Z15init_can_configv+0x40>)
 80005f2:	f002 ff5f 	bl	80034b4 <HAL_CAN_ActivateNotification>
 80005f6:	4603      	mov	r3, r0
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf14      	ite	ne
 80005fc:	2301      	movne	r3, #1
 80005fe:	2300      	moveq	r3, #0
 8000600:	b2db      	uxtb	r3, r3
	if (HAL_CAN_ActivateNotification(&hcan1,
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <_Z15init_can_configv+0x3a>
		Error_Handler();
 8000606:	f000 fead 	bl	8001364 <Error_Handler>
	}
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000290 	.word	0x20000290

08000614 <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4614      	mov	r4, r2
 8000626:	461d      	mov	r5, r3
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000630:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3318      	adds	r3, #24
 8000638:	2206      	movs	r2, #6
 800063a:	68b9      	ldr	r1, [r7, #8]
 800063c:	4618      	mov	r0, r3
 800063e:	f009 fe5f 	bl	800a300 <memcpy>
  }
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bdb0      	pop	{r4, r5, r7, pc}

0800064c <_Z19can_main_frame_sendtthh>:

void can_main_frame_send(uint16_t adc_susp_right, uint16_t adc_susp_left, uint8_t brake_pressure_front, uint8_t brake_pressure_back){
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b08d      	sub	sp, #52	; 0x34
 8000650:	af00      	add	r7, sp, #0
 8000652:	4604      	mov	r4, r0
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	461a      	mov	r2, r3
 800065a:	4623      	mov	r3, r4
 800065c:	80fb      	strh	r3, [r7, #6]
 800065e:	4603      	mov	r3, r0
 8000660:	80bb      	strh	r3, [r7, #4]
 8000662:	460b      	mov	r3, r1
 8000664:	70fb      	strb	r3, [r7, #3]
 8000666:	4613      	mov	r3, r2
 8000668:	70bb      	strb	r3, [r7, #2]
	AQ_main aq_frame{
		adc_susp_right,
		adc_susp_left, // i brake balance
		brake_pressure_front, // pressure of braking lquid front in %
		brake_pressure_back, // pressure of braking lquid back in %
	};
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	853b      	strh	r3, [r7, #40]	; 0x28
 800066e:	88bb      	ldrh	r3, [r7, #4]
 8000670:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000678:	78bb      	ldrb	r3, [r7, #2]
 800067a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	auto aq_main_frame = PUTM_CAN::Can_tx_message<AQ_main>(aq_frame, can_tx_header_AQ_MAIN);
 800067e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <_Z19can_main_frame_sendtthh+0x68>)
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffc3 	bl	8000614 <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>
	auto status = aq_main_frame.send(hcan1);
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <_Z19can_main_frame_sendtthh+0x6c>)
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f82b 	bl	80006f0 <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainE4sendER19__CAN_HandleTypeDef>
 800069a:	4603      	mov	r3, r0
 800069c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	 if (HAL_StatusTypeDef::HAL_OK != status)
 80006a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <_Z19can_main_frame_sendtthh+0x60>
	  {
	    Error_Handler();
 80006a8:	f000 fe5c 	bl	8001364 <Error_Handler>
	  };

}
 80006ac:	bf00      	nop
 80006ae:	3734      	adds	r7, #52	; 0x34
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd90      	pop	{r4, r7, pc}
 80006b4:	0800a370 	.word	0x0800a370
 80006b8:	20000290 	.word	0x20000290

080006bc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>:
      begin() noexcept
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 f827 	bl	8000718 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>:
      end() noexcept
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f81b 	bl	8000718 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 80006e2:	4603      	mov	r3, r0
 80006e4:	335c      	adds	r3, #92	; 0x5c
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f103 0218 	add.w	r2, r3, #24
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <_ZN8PUTM_CAN14Can_tx_messageI7AQ_mainE4sendER19__CAN_HandleTypeDef+0x24>)
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f002 fce8 	bl	80030da <HAL_CAN_AddTxMessage>
 800070a:	4603      	mov	r3, r0
  }
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200001a8 	.word	0x200001a8

08000718 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>:
      data() noexcept
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f805 	bl	8000732 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>
 8000728:	4603      	mov	r3, r0
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <_ZN8PUTM_CAN6DeviceI14Telemetry_MainE8set_dataERKNS_14Can_rx_messageE>:
  explicit constexpr Device(uint32_t ide)
      : Device_base(ide, sizeof(Device_data_type)){};

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7993      	ldrb	r3, [r2, #6]
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3307      	adds	r3, #7
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	321c      	adds	r2, #28
 8000764:	7812      	ldrb	r2, [r2, #0]
 8000766:	701a      	strb	r2, [r3, #0]
  }
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <_ZN8PUTM_CAN6DeviceI18TS_rear_suspensionE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	7993      	ldrb	r3, [r2, #6]
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	1dd8      	adds	r0, r3, #7
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	331c      	adds	r3, #28
 8000790:	2208      	movs	r2, #8
 8000792:	4619      	mov	r1, r3
 8000794:	f009 fdb4 	bl	800a300 <memcpy>
  }
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_ZN8PUTM_CAN6DeviceI7TS_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	7993      	ldrb	r3, [r2, #6]
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	1dd8      	adds	r0, r3, #7
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	331c      	adds	r3, #28
 80007bc:	2208      	movs	r2, #8
 80007be:	4619      	mov	r1, r3
 80007c0:	f009 fd9e 	bl	800a300 <memcpy>
  }
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_ZN8PUTM_CAN6DeviceI20Steering_Wheel_eventE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	7993      	ldrb	r3, [r2, #6]
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	1dd8      	adds	r0, r3, #7
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	331c      	adds	r3, #28
 80007e8:	2203      	movs	r2, #3
 80007ea:	4619      	mov	r1, r3
 80007ec:	f009 fd88 	bl	800a300 <memcpy>
  }
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_ZN8PUTM_CAN6DeviceI19Steering_Wheel_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	7993      	ldrb	r3, [r2, #6]
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	1dd8      	adds	r0, r3, #7
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	331c      	adds	r3, #28
 8000814:	2203      	movs	r2, #3
 8000816:	4619      	mov	r1, r3
 8000818:	f009 fd72 	bl	800a300 <memcpy>
  }
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <_ZN8PUTM_CAN6DeviceI7SF_NUCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	7993      	ldrb	r3, [r2, #6]
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3307      	adds	r3, #7
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	321c      	adds	r2, #28
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	601a      	str	r2, [r3, #0]
  }
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_ZN8PUTM_CAN6DeviceI5SF_WSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
    new_data = true;
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	7993      	ldrb	r3, [r2, #6]
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	1dd8      	adds	r0, r3, #7
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	331c      	adds	r3, #28
 800086c:	2208      	movs	r2, #8
 800086e:	4619      	mov	r1, r3
 8000870:	f009 fd46 	bl	800a300 <memcpy>
  }
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <_ZN8PUTM_CAN6DeviceI5SF_DVE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	7993      	ldrb	r3, [r2, #6]
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	1dd8      	adds	r0, r3, #7
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	331c      	adds	r3, #28
 8000898:	2208      	movs	r2, #8
 800089a:	4619      	mov	r1, r3
 800089c:	f009 fd30 	bl	800a300 <memcpy>
  }
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_ZN8PUTM_CAN6DeviceI20SF_CoolingAndVSafetyE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	7993      	ldrb	r3, [r2, #6]
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	1dd8      	adds	r0, r3, #7
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	331c      	adds	r3, #28
 80008c4:	2208      	movs	r2, #8
 80008c6:	4619      	mov	r1, r3
 80008c8:	f009 fd1a 	bl	800a300 <memcpy>
  }
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <_ZN8PUTM_CAN6DeviceI11SF_FrontBoxE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	7993      	ldrb	r3, [r2, #6]
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	1dd8      	adds	r0, r3, #7
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	331c      	adds	r3, #28
 80008f0:	2208      	movs	r2, #8
 80008f2:	4619      	mov	r1, r3
 80008f4:	f009 fd04 	bl	800a300 <memcpy>
  }
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_ZN8PUTM_CAN6DeviceI7SF_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
    new_data = true;
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	7993      	ldrb	r3, [r2, #6]
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	1dd8      	adds	r0, r3, #7
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	331c      	adds	r3, #28
 800091c:	2203      	movs	r2, #3
 800091e:	4619      	mov	r1, r3
 8000920:	f009 fcee 	bl	800a300 <memcpy>
  }
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <_ZN8PUTM_CAN6DeviceI14Lap_timer_PassE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	7993      	ldrb	r3, [r2, #6]
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3307      	adds	r3, #7
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	321c      	adds	r2, #28
 8000948:	8812      	ldrh	r2, [r2, #0]
 800094a:	b292      	uxth	r2, r2
 800094c:	801a      	strh	r2, [r3, #0]
  }
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <_ZN8PUTM_CAN6DeviceI14Lap_timer_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	7993      	ldrb	r3, [r2, #6]
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3307      	adds	r3, #7
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	321c      	adds	r2, #28
 8000976:	7812      	ldrb	r2, [r2, #0]
 8000978:	701a      	strb	r2, [r3, #0]
  }
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <_ZN8PUTM_CAN6DeviceI17Dash_lap_finishedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	7993      	ldrb	r3, [r2, #6]
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3307      	adds	r3, #7
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	321c      	adds	r2, #28
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	601a      	str	r2, [r3, #0]
  }
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_ZN8PUTM_CAN6DeviceI27Dash_steering_wheel_requestE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	6039      	str	r1, [r7, #0]
    new_data = true;
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	7993      	ldrb	r3, [r2, #6]
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3307      	adds	r3, #7
 80009ca:	683a      	ldr	r2, [r7, #0]
 80009cc:	321c      	adds	r2, #28
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	701a      	strb	r2, [r3, #0]
  }
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_ZN8PUTM_CAN6DeviceI26Dash_Smart_Fuses_FAN_speedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	7993      	ldrb	r3, [r2, #6]
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3307      	adds	r3, #7
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	321c      	adds	r2, #28
 80009fa:	8812      	ldrh	r2, [r2, #0]
 80009fc:	b292      	uxth	r2, r2
 80009fe:	801a      	strh	r2, [r3, #0]
  }
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_ZN8PUTM_CAN6DeviceI8Dash_TCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	7993      	ldrb	r3, [r2, #6]
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	1dd8      	adds	r0, r3, #7
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	331c      	adds	r3, #28
 8000a28:	2208      	movs	r2, #8
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f009 fc68 	bl	800a300 <memcpy>
  }
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_ZN8PUTM_CAN6DeviceI9Dash_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	7993      	ldrb	r3, [r2, #6]
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3307      	adds	r3, #7
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	321c      	adds	r2, #28
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	701a      	strb	r2, [r3, #0]
  }
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_ZN8PUTM_CAN6DeviceI18BMS_LV_temperatureE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	7993      	ldrb	r3, [r2, #6]
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	1dd8      	adds	r0, r3, #7
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	331c      	adds	r3, #28
 8000a80:	2208      	movs	r2, #8
 8000a82:	4619      	mov	r1, r3
 8000a84:	f009 fc3c 	bl	800a300 <memcpy>
  }
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_ZN8PUTM_CAN6DeviceI11BMS_LV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	7993      	ldrb	r3, [r2, #6]
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	1dd8      	adds	r0, r3, #7
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	331c      	adds	r3, #28
 8000aac:	2206      	movs	r2, #6
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f009 fc26 	bl	800a300 <memcpy>
  }
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_ZN8PUTM_CAN6DeviceI11BMS_HV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	7993      	ldrb	r3, [r2, #6]
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	1dd8      	adds	r0, r3, #7
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	331c      	adds	r3, #28
 8000ad8:	2207      	movs	r2, #7
 8000ada:	4619      	mov	r1, r3
 8000adc:	f009 fc10 	bl	800a300 <memcpy>
  }
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_ZN8PUTM_CAN6DeviceI7AQ_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	7993      	ldrb	r3, [r2, #6]
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	1dd8      	adds	r0, r3, #7
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	331c      	adds	r3, #28
 8000b04:	2206      	movs	r2, #6
 8000b06:	4619      	mov	r1, r3
 8000b08:	f009 fbfa 	bl	800a300 <memcpy>
  }
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_ZN8PUTM_CAN6DeviceI9Apps_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    new_data = true;
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	7993      	ldrb	r3, [r2, #6]
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	1dd8      	adds	r0, r3, #7
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	331c      	adds	r3, #28
 8000b30:	2205      	movs	r2, #5
 8000b32:	4619      	mov	r1, r3
 8000b34:	f009 fbe4 	bl	800a300 <memcpy>
  }
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_Z41__static_initialization_and_destruction_0ii>:
}

void ism330_read(int32_t *acceleration, int32_t *angular_rate) {
	AccGyr.ACC_GetAxes(acceleration);
	AccGyr.GYRO_GetAxes(angular_rate);
}
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d107      	bne.n	8000b60 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d102      	bne.n	8000b60 <_Z41__static_initialization_and_destruction_0ii+0x20>
ISM330DHCXSensor AccGyr;
 8000b5a:	4803      	ldr	r0, [pc, #12]	; (8000b68 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000b5c:	f7ff fbaa 	bl	80002b4 <_ZN16ISM330DHCXSensorC1Ev>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200001ac 	.word	0x200001ac

08000b6c <_GLOBAL__sub_I_AccGyr>:
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff ffe3 	bl	8000b40 <_Z41__static_initialization_and_destruction_0ii>
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b80:	f000 fea1 	bl	80018c6 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b84:	f000 f82e 	bl	8000be4 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b88:	f000 fa98 	bl	80010bc <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8000b8c:	f000 fa6c 	bl	8001068 <_ZL11MX_DMA_Initv>
	MX_ADC1_Init();
 8000b90:	f000 f88a 	bl	8000ca8 <_ZL12MX_ADC1_Initv>
	MX_CAN1_Init();
 8000b94:	f000 f97c 	bl	8000e90 <_ZL12MX_CAN1_Initv>
	MX_RTC_Init();
 8000b98:	f000 f9b4 	bl	8000f04 <_ZL11MX_RTC_Initv>
	MX_SPI1_Init();
 8000b9c:	f000 fa22 	bl	8000fe4 <_ZL12MX_SPI1_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000ba0:	f006 fe3a 	bl	8007818 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000ba4:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <main+0x50>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <main+0x54>)
 8000baa:	f006 fe7f 	bl	80078ac <osThreadNew>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <main+0x58>)
 8000bb2:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of blink01 */
	blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000bb4:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <main+0x5c>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <main+0x60>)
 8000bba:	f006 fe77 	bl	80078ac <osThreadNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <main+0x64>)
 8000bc2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000bc4:	f006 fe4c 	bl	8007860 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000bc8:	e7fe      	b.n	8000bc8 <main+0x4c>
 8000bca:	bf00      	nop
 8000bcc:	0800a49c 	.word	0x0800a49c
 8000bd0:	0800121d 	.word	0x0800121d
 8000bd4:	2000039c 	.word	0x2000039c
 8000bd8:	0800a4c0 	.word	0x0800a4c0
 8000bdc:	0800122d 	.word	0x0800122d
 8000be0:	200003a0 	.word	0x200003a0

08000be4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b098      	sub	sp, #96	; 0x60
 8000be8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	2248      	movs	r2, #72	; 0x48
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f009 fb92 	bl	800a31c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c06:	2000      	movs	r0, #0
 8000c08:	f003 fbd0 	bl	80043ac <HAL_PWREx_ControlVoltageScaling>
 8000c0c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <_Z18SystemClock_Configv+0x3c>
		Error_Handler();
 8000c1c:	f000 fba2 	bl	8001364 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000c20:	2318      	movs	r3, #24
 8000c22:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c30:	2360      	movs	r3, #96	; 0x60
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c34:	2302      	movs	r3, #2
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 60;
 8000c40:	233c      	movs	r3, #60	; 0x3c
 8000c42:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 fca7 	bl	80045a8 <HAL_RCC_OscConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	bf14      	ite	ne
 8000c60:	2301      	movne	r3, #1
 8000c62:	2300      	moveq	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <_Z18SystemClock_Configv+0x8a>
		Error_Handler();
 8000c6a:	f000 fb7b 	bl	8001364 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2303      	movs	r3, #3
 8000c74:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2105      	movs	r1, #5
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 f916 	bl	8004eb8 <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf14      	ite	ne
 8000c92:	2301      	movne	r3, #1
 8000c94:	2300      	moveq	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 8000c9c:	f000 fb62 	bl	8001364 <Error_Handler>
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	3760      	adds	r7, #96	; 0x60
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000cca:	4b69      	ldr	r3, [pc, #420]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000ccc:	4a69      	ldr	r2, [pc, #420]	; (8000e74 <_ZL12MX_ADC1_Initv+0x1cc>)
 8000cce:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000cd0:	4b67      	ldr	r3, [pc, #412]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cd6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd8:	4b65      	ldr	r3, [pc, #404]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cde:	4b64      	ldr	r3, [pc, #400]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ce4:	4b62      	ldr	r3, [pc, #392]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cea:	4b61      	ldr	r3, [pc, #388]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cf0:	4b5f      	ldr	r3, [pc, #380]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000cf6:	4b5e      	ldr	r3, [pc, #376]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 6;
 8000cfc:	4b5c      	ldr	r3, [pc, #368]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000cfe:	2206      	movs	r2, #6
 8000d00:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d02:	4b5b      	ldr	r3, [pc, #364]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0a:	4b59      	ldr	r3, [pc, #356]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d10:	4b57      	ldr	r3, [pc, #348]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d16:	4b56      	ldr	r3, [pc, #344]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d1e:	4b54      	ldr	r3, [pc, #336]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000d24:	4b52      	ldr	r3, [pc, #328]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000d2c:	4850      	ldr	r0, [pc, #320]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d2e:	f000 ffeb 	bl	8001d08 <HAL_ADC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bf14      	ite	ne
 8000d38:	2301      	movne	r3, #1
 8000d3a:	2300      	moveq	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <_ZL12MX_ADC1_Initv+0x9e>
		Error_Handler();
 8000d42:	f000 fb0f 	bl	8001364 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4847      	ldr	r0, [pc, #284]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d52:	f001 ff15 	bl	8002b80 <HAL_ADCEx_MultiModeConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bf14      	ite	ne
 8000d5c:	2301      	movne	r3, #1
 8000d5e:	2300      	moveq	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <_ZL12MX_ADC1_Initv+0xc2>
		Error_Handler();
 8000d66:	f000 fafd 	bl	8001364 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <_ZL12MX_ADC1_Initv+0x1d0>)
 8000d6c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000d72:	2301      	movs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d76:	237f      	movs	r3, #127	; 0x7f
 8000d78:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	483a      	ldr	r0, [pc, #232]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000d88:	f001 f9e2 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf14      	ite	ne
 8000d92:	2301      	movne	r3, #1
 8000d94:	2300      	moveq	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <_ZL12MX_ADC1_Initv+0xf8>
		Error_Handler();
 8000d9c:	f000 fae2 	bl	8001364 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <_ZL12MX_ADC1_Initv+0x1d4>)
 8000da2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000da4:	230c      	movs	r3, #12
 8000da6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4830      	ldr	r0, [pc, #192]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000dae:	f001 f9cf 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bf14      	ite	ne
 8000db8:	2301      	movne	r3, #1
 8000dba:	2300      	moveq	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <_ZL12MX_ADC1_Initv+0x11e>
		Error_Handler();
 8000dc2:	f000 facf 	bl	8001364 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <_ZL12MX_ADC1_Initv+0x1d8>)
 8000dc8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dca:	2312      	movs	r3, #18
 8000dcc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4827      	ldr	r0, [pc, #156]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000dd4:	f001 f9bc 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf14      	ite	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	2300      	moveq	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <_ZL12MX_ADC1_Initv+0x144>
		Error_Handler();
 8000de8:	f000 fabc 	bl	8001364 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <_ZL12MX_ADC1_Initv+0x1dc>)
 8000dee:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000df0:	2318      	movs	r3, #24
 8000df2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	481d      	ldr	r0, [pc, #116]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000dfa:	f001 f9a9 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf14      	ite	ne
 8000e04:	2301      	movne	r3, #1
 8000e06:	2300      	moveq	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <_ZL12MX_ADC1_Initv+0x16a>
		Error_Handler();
 8000e0e:	f000 faa9 	bl	8001364 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <_ZL12MX_ADC1_Initv+0x1e0>)
 8000e14:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4812      	ldr	r0, [pc, #72]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000e26:	f001 f993 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2301      	movne	r3, #1
 8000e32:	2300      	moveq	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <_ZL12MX_ADC1_Initv+0x196>
		Error_Handler();
 8000e3a:	f000 fa93 	bl	8001364 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_ZL12MX_ADC1_Initv+0x1e4>)
 8000e40:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e42:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000e46:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4808      	ldr	r0, [pc, #32]	; (8000e70 <_ZL12MX_ADC1_Initv+0x1c8>)
 8000e4e:	f001 f97f 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bf14      	ite	ne
 8000e58:	2301      	movne	r3, #1
 8000e5a:	2300      	moveq	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <_ZL12MX_ADC1_Initv+0x1be>
		Error_Handler();
 8000e62:	f000 fa7f 	bl	8001364 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	; 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200001c8 	.word	0x200001c8
 8000e74:	50040000 	.word	0x50040000
 8000e78:	04300002 	.word	0x04300002
 8000e7c:	08600004 	.word	0x08600004
 8000e80:	0c900008 	.word	0x0c900008
 8000e84:	10c00010 	.word	0x10c00010
 8000e88:	36902000 	.word	0x36902000
 8000e8c:	3ac04000 	.word	0x3ac04000

08000e90 <_ZL12MX_CAN1_Initv>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000e96:	4a1a      	ldr	r2, [pc, #104]	; (8000f00 <_ZL12MX_CAN1_Initv+0x70>)
 8000e98:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 12;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000eae:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000eb2:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <_ZL12MX_CAN1_Initv+0x6c>)
 8000ee0:	f001 fef2 	bl	8002cc8 <HAL_CAN_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf14      	ite	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	2300      	moveq	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <_ZL12MX_CAN1_Initv+0x68>
		Error_Handler();
 8000ef4:	f000 fa36 	bl	8001364 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000290 	.word	0x20000290
 8000f00:	40006400 	.word	0x40006400

08000f04 <_ZL11MX_RTC_Initv>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8000f18:	2300      	movs	r3, #0
 8000f1a:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f1e:	4a30      	ldr	r2, [pc, #192]	; (8000fe0 <_ZL11MX_RTC_Initv+0xdc>)
 8000f20:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f2a:	227f      	movs	r2, #127	; 0x7f
 8000f2c:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f30:	22ff      	movs	r2, #255	; 0xff
 8000f32:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4c:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000f54:	4821      	ldr	r0, [pc, #132]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f56:	f004 ffd1 	bl	8005efc <HAL_RTC_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf14      	ite	ne
 8000f60:	2301      	movne	r3, #1
 8000f62:	2300      	moveq	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <_ZL11MX_RTC_Initv+0x6a>
		Error_Handler();
 8000f6a:	f000 f9fb 	bl	8001364 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2201      	movs	r2, #1
 8000f86:	4619      	mov	r1, r3
 8000f88:	4814      	ldr	r0, [pc, #80]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000f8a:	f005 f847 	bl	800601c <HAL_RTC_SetTime>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf14      	ite	ne
 8000f94:	2301      	movne	r3, #1
 8000f96:	2300      	moveq	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <_ZL11MX_RTC_Initv+0x9e>
		Error_Handler();
 8000f9e:	f000 f9e1 	bl	8001364 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4808      	ldr	r0, [pc, #32]	; (8000fdc <_ZL11MX_RTC_Initv+0xd8>)
 8000fba:	f005 f8cf 	bl	800615c <HAL_RTC_SetDate>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf14      	ite	ne
 8000fc4:	2301      	movne	r3, #1
 8000fc6:	2300      	moveq	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <_ZL11MX_RTC_Initv+0xce>
		Error_Handler();
 8000fce:	f000 f9c9 	bl	8001364 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002b8 	.word	0x200002b8
 8000fe0:	40002800 	.word	0x40002800

08000fe4 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8000fea:	4a1e      	ldr	r2, [pc, #120]	; (8001064 <_ZL12MX_SPI1_Initv+0x80>)
 8000fec:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ffe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001002:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8001006:	2202      	movs	r2, #2
 8001008:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 800100c:	2201      	movs	r2, #1
 800100e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8001012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001016:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 800101a:	2230      	movs	r2, #48	; 0x30
 800101c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8001032:	2207      	movs	r2, #7
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8001038:	2200      	movs	r2, #0
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 800103e:	2200      	movs	r2, #0
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <_ZL12MX_SPI1_Initv+0x7c>)
 8001044:	f005 f9cc 	bl	80063e0 <HAL_SPI_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf14      	ite	ne
 800104e:	2301      	movne	r3, #1
 8001050:	2300      	moveq	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 8001058:	f000 f984 	bl	8001364 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200002ec 	.word	0x200002ec
 8001064:	40013000 	.word	0x40013000

08001068 <_ZL11MX_DMA_Initv>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <_ZL11MX_DMA_Initv+0x50>)
 8001070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <_ZL11MX_DMA_Initv+0x50>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6493      	str	r3, [r2, #72]	; 0x48
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <_ZL11MX_DMA_Initv+0x50>)
 800107c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <_ZL11MX_DMA_Initv+0x50>)
 8001088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <_ZL11MX_DMA_Initv+0x50>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6493      	str	r3, [r2, #72]	; 0x48
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <_ZL11MX_DMA_Initv+0x50>)
 8001094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2105      	movs	r1, #5
 80010a2:	200b      	movs	r0, #11
 80010a4:	f002 fd14 	bl	8003ad0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010a8:	200b      	movs	r0, #11
 80010aa:	f002 fd2d 	bl	8003b08 <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <_ZL12MX_GPIO_Initv+0x154>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <_ZL12MX_GPIO_Initv+0x154>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <_ZL12MX_GPIO_Initv+0x154>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b49      	ldr	r3, [pc, #292]	; (8001210 <_ZL12MX_GPIO_Initv+0x154>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a48      	ldr	r2, [pc, #288]	; (8001210 <_ZL12MX_GPIO_Initv+0x154>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <_ZL12MX_GPIO_Initv+0x154>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b43      	ldr	r3, [pc, #268]	; (8001210 <_ZL12MX_GPIO_Initv+0x154>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a42      	ldr	r2, [pc, #264]	; (8001210 <_ZL12MX_GPIO_Initv+0x154>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b40      	ldr	r3, [pc, #256]	; (8001210 <_ZL12MX_GPIO_Initv+0x154>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2110      	movs	r1, #16
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f003 f903 	bl	800432c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001126:	2200      	movs	r2, #0
 8001128:	f24f 0180 	movw	r1, #61568	; 0xf080
 800112c:	4839      	ldr	r0, [pc, #228]	; (8001214 <_ZL12MX_GPIO_Initv+0x158>)
 800112e:	f003 f8fd 	bl	800432c <HAL_GPIO_WritePin>
			LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin | GPIO_PIN_7,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8,
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001138:	4837      	ldr	r0, [pc, #220]	; (8001218 <_ZL12MX_GPIO_Initv+0x15c>)
 800113a:	f003 f8f7 	bl	800432c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800113e:	2310      	movs	r3, #16
 8001140:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001146:	2302      	movs	r3, #2
 8001148:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001158:	f002 ff56 	bl	8004008 <HAL_GPIO_Init>

	/*Configure GPIO pins : EEPROM_SCL_Pin EEPROM_SDA_Pin */
	GPIO_InitStruct.Pin = EEPROM_SCL_Pin | EEPROM_SDA_Pin;
 800115c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001160:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800116e:	2304      	movs	r3, #4
 8001170:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	4619      	mov	r1, r3
 8001178:	4826      	ldr	r0, [pc, #152]	; (8001214 <_ZL12MX_GPIO_Initv+0x158>)
 800117a:	f002 ff45 	bl	8004008 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
	 PB7 */
	GPIO_InitStruct.Pin =
 800117e:	f24f 0380 	movw	r3, #61568	; 0xf080
 8001182:	60fb      	str	r3, [r7, #12]
			LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4619      	mov	r1, r3
 8001196:	481f      	ldr	r0, [pc, #124]	; (8001214 <_ZL12MX_GPIO_Initv+0x158>)
 8001198:	f002 ff36 	bl	8004008 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 800119c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80011a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4818      	ldr	r0, [pc, #96]	; (8001218 <_ZL12MX_GPIO_Initv+0x15c>)
 80011b6:	f002 ff27 	bl	8004008 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	4812      	ldr	r0, [pc, #72]	; (8001218 <_ZL12MX_GPIO_Initv+0x15c>)
 80011d0:	f002 ff1a 	bl	8004008 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80011d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f002 ff0c 	bl	8004008 <HAL_GPIO_Init>

	/*Configure GPIO pin : ISM_INT1_Pin */
	GPIO_InitStruct.Pin = ISM_INT1_Pin;
 80011f0:	2340      	movs	r3, #64	; 0x40
 80011f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ISM_INT1_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <_ZL12MX_GPIO_Initv+0x158>)
 8001204:	f002 ff00 	bl	8004008 <HAL_GPIO_Init>

}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400
 8001218:	48000800 	.word	0x48000800

0800121c <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f006 fbd3 	bl	80079d0 <osDelay>
 800122a:	e7fb      	b.n	8001224 <_Z16StartDefaultTaskPv+0x8>

0800122c <_Z12StartBlink01Pv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink01 */

void StartBlink01(void *argument) {
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	b08b      	sub	sp, #44	; 0x2c
 8001230:	af06      	add	r7, sp, #24
 8001232:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlink01 */
	init_can_filter(sFilterConfig);
 8001234:	4e40      	ldr	r6, [pc, #256]	; (8001338 <_Z12StartBlink01Pv+0x10c>)
 8001236:	466d      	mov	r5, sp
 8001238:	f106 0410 	add.w	r4, r6, #16
 800123c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001240:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001244:	e885 0003 	stmia.w	r5, {r0, r1}
 8001248:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800124c:	f7ff f990 	bl	8000570 <_Z15init_can_filter17CAN_FilterTypeDef>
	init_can_config();
 8001250:	f7ff f9be 	bl	80005d0 <_Z15init_can_configv>
	adc_data adc_data;
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f879 	bl	8000350 <_ZN8adc_dataC1Ev>

	/* Infinite loop */
	for (;;) {
		adc[0] = adc_data[Analog_channel::SUSP_R];
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2102      	movs	r1, #2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f88d 	bl	8000384 <_ZN8adc_dataixE14Analog_channel>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b33      	ldr	r3, [pc, #204]	; (800133c <_Z12StartBlink01Pv+0x110>)
 8001270:	801a      	strh	r2, [r3, #0]
		adc[1] = adc_data[Analog_channel::SUSP_L];
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2105      	movs	r1, #5
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f883 	bl	8000384 <_ZN8adc_dataixE14Analog_channel>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	4b2e      	ldr	r3, [pc, #184]	; (800133c <_Z12StartBlink01Pv+0x110>)
 8001284:	805a      	strh	r2, [r3, #2]
		adc[2] = adc_data[Analog_channel::BRAKE_FRONT];
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f879 	bl	8000384 <_ZN8adc_dataixE14Analog_channel>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <_Z12StartBlink01Pv+0x110>)
 8001298:	809a      	strh	r2, [r3, #4]
		adc[3] = adc_data[Analog_channel::BRAKE_BACK];
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2101      	movs	r1, #1
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f86f 	bl	8000384 <_ZN8adc_dataixE14Analog_channel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <_Z12StartBlink01Pv+0x110>)
 80012ac:	80da      	strh	r2, [r3, #6]
		adc[4] = adc_data[Analog_channel::ANALOG_1];
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2103      	movs	r1, #3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f865 	bl	8000384 <_ZN8adc_dataixE14Analog_channel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <_Z12StartBlink01Pv+0x110>)
 80012c0:	811a      	strh	r2, [r3, #8]
		adc[5] = adc_data[Analog_channel::ANALOG_2];
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2104      	movs	r1, #4
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f85b 	bl	8000384 <_ZN8adc_dataixE14Analog_channel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <_Z12StartBlink01Pv+0x110>)
 80012d4:	815a      	strh	r2, [r3, #10]
//		can_main_frame_send(11 , 22, 33, 44);
		can_main_frame_send(adc_data[Analog_channel::SUSP_R], adc_data[Analog_channel::SUSP_L], braking_pressure_percent_calculation(adc_data[Analog_channel::BRAKE_FRONT]), braking_pressure_percent_calculation( adc_data[Analog_channel::BRAKE_BACK]));
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2102      	movs	r1, #2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f851 	bl	8000384 <_ZN8adc_dataixE14Analog_channel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461c      	mov	r4, r3
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2105      	movs	r1, #5
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f849 	bl	8000384 <_ZN8adc_dataixE14Analog_channel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461d      	mov	r5, r3
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f841 	bl	8000384 <_ZN8adc_dataixE14Analog_channel>
 8001302:	4603      	mov	r3, r0
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f833 	bl	8001370 <_Z36braking_pressure_percent_calculationt>
 800130a:	4603      	mov	r3, r0
 800130c:	461e      	mov	r6, r3
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2101      	movs	r1, #1
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f835 	bl	8000384 <_ZN8adc_dataixE14Analog_channel>
 800131a:	4603      	mov	r3, r0
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f827 	bl	8001370 <_Z36braking_pressure_percent_calculationt>
 8001322:	4603      	mov	r3, r0
 8001324:	4632      	mov	r2, r6
 8001326:	4629      	mov	r1, r5
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff f98f 	bl	800064c <_Z19can_main_frame_sendtthh>
		osDelay(10);
 800132e:	200a      	movs	r0, #10
 8001330:	f006 fb4e 	bl	80079d0 <osDelay>
		adc[0] = adc_data[Analog_channel::SUSP_R];
 8001334:	e793      	b.n	800125e <_Z12StartBlink01Pv+0x32>
 8001336:	bf00      	nop
 8001338:	200003a4 	.word	0x200003a4
 800133c:	200003cc 	.word	0x200003cc

08001340 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001352:	f000 fad1 	bl	80018f8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40001000 	.word	0x40001000

08001364 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <_Z36braking_pressure_percent_calculationt>:
	uint16_t val = adc_value / 819;
	return val;

}

uint8_t braking_pressure_percent_calculation(uint16_t adc_value){
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
	uint16_t val =  (adc_value * 100) / 4095;
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	2264      	movs	r2, #100	; 0x64
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <_Z36braking_pressure_percent_calculationt+0x34>)
 8001384:	fb82 1203 	smull	r1, r2, r2, r3
 8001388:	441a      	add	r2, r3
 800138a:	12d2      	asrs	r2, r2, #11
 800138c:	17db      	asrs	r3, r3, #31
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)val;
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	b2db      	uxtb	r3, r3

}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	80080081 	.word	0x80080081

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_MspInit+0x5c>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	4a14      	ldr	r2, [pc, #80]	; (8001404 <HAL_MspInit+0x5c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_MspInit+0x5c>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_MspInit+0x5c>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_MspInit+0x5c>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6593      	str	r3, [r2, #88]	; 0x58
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_MspInit+0x5c>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	210f      	movs	r1, #15
 80013e2:	f06f 0001 	mvn.w	r0, #1
 80013e6:	f002 fb73 	bl	8003ad0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 5, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2105      	movs	r1, #5
 80013ee:	2001      	movs	r0, #1
 80013f0:	f002 fb6e 	bl	8003ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f002 fb87 	bl	8003b08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b0b0      	sub	sp, #192	; 0xc0
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2298      	movs	r2, #152	; 0x98
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f008 ff77 	bl	800a31c <memset>
  if(hadc->Instance==ADC1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a3c      	ldr	r2, [pc, #240]	; (8001524 <HAL_ADC_MspInit+0x11c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d171      	bne.n	800151c <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001438:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800143c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800143e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800144a:	2301      	movs	r3, #1
 800144c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800144e:	2310      	movs	r3, #16
 8001450:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001452:	2302      	movs	r3, #2
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800145e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fff3 	bl	8005454 <HAL_RCCEx_PeriphCLKConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001474:	f7ff ff76 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_ADC_MspInit+0x120>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <HAL_ADC_MspInit+0x120>)
 800147e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_ADC_MspInit+0x120>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <HAL_ADC_MspInit+0x120>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	4a24      	ldr	r2, [pc, #144]	; (8001528 <HAL_ADC_MspInit+0x120>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_ADC_MspInit+0x120>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 80014a8:	233f      	movs	r3, #63	; 0x3f
 80014aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |ADC4_Pin|ADC5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014ae:	230b      	movs	r3, #11
 80014b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014be:	4619      	mov	r1, r3
 80014c0:	481a      	ldr	r0, [pc, #104]	; (800152c <HAL_ADC_MspInit+0x124>)
 80014c2:	f002 fda1 	bl	8004008 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_ADC_MspInit+0x128>)
 80014c8:	4a1a      	ldr	r2, [pc, #104]	; (8001534 <HAL_ADC_MspInit+0x12c>)
 80014ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_ADC_MspInit+0x128>)
 80014ce:	2205      	movs	r2, #5
 80014d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_ADC_MspInit+0x128>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_ADC_MspInit+0x128>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_ADC_MspInit+0x128>)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_ADC_MspInit+0x128>)
 80014e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_ADC_MspInit+0x128>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_ADC_MspInit+0x128>)
 80014f6:	2220      	movs	r2, #32
 80014f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_ADC_MspInit+0x128>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <HAL_ADC_MspInit+0x128>)
 8001502:	f002 fb0f 	bl	8003b24 <HAL_DMA_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800150c:	f7ff ff2a 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_ADC_MspInit+0x128>)
 8001514:	651a      	str	r2, [r3, #80]	; 0x50
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_ADC_MspInit+0x128>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	37c0      	adds	r7, #192	; 0xc0
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	50040000 	.word	0x50040000
 8001528:	40021000 	.word	0x40021000
 800152c:	48000800 	.word	0x48000800
 8001530:	20000230 	.word	0x20000230
 8001534:	40020008 	.word	0x40020008

08001538 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_CAN_MspInit+0x8c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d130      	bne.n	80015bc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_CAN_MspInit+0x90>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <HAL_CAN_MspInit+0x90>)
 8001560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001564:	6593      	str	r3, [r2, #88]	; 0x58
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_CAN_MspInit+0x90>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_CAN_MspInit+0x90>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <HAL_CAN_MspInit+0x90>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_CAN_MspInit+0x90>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800158a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800159c:	2309      	movs	r3, #9
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4809      	ldr	r0, [pc, #36]	; (80015cc <HAL_CAN_MspInit+0x94>)
 80015a8:	f002 fd2e 	bl	8004008 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2105      	movs	r1, #5
 80015b0:	2013      	movs	r0, #19
 80015b2:	f002 fa8d 	bl	8003ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80015b6:	2013      	movs	r0, #19
 80015b8:	f002 faa6 	bl	8003b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	; 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40006400 	.word	0x40006400
 80015c8:	40021000 	.word	0x40021000
 80015cc:	48000400 	.word	0x48000400

080015d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0aa      	sub	sp, #168	; 0xa8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2298      	movs	r2, #152	; 0x98
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f008 fe9b 	bl	800a31c <memset>
  if(hrtc->Instance==RTC)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <HAL_RTC_MspInit+0x74>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d124      	bne.n	800163a <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	4618      	mov	r0, r3
 8001604:	f003 ff26 	bl	8005454 <HAL_RCCEx_PeriphCLKConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800160e:	f7ff fea9 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_RTC_MspInit+0x78>)
 8001614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_RTC_MspInit+0x78>)
 800161a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RTC_MspInit+0x78>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_RTC_MspInit+0x78>)
 8001628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RTC_MspInit+0x78>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	37a8      	adds	r7, #168	; 0xa8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40002800 	.word	0x40002800
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_SPI_MspInit+0x7c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d128      	bne.n	80016c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_SPI_MspInit+0x80>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <HAL_SPI_MspInit+0x80>)
 8001674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001678:	6613      	str	r3, [r2, #96]	; 0x60
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_SPI_MspInit+0x80>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_SPI_MspInit+0x80>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_SPI_MspInit+0x80>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_SPI_MspInit+0x80>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800169e:	23e0      	movs	r3, #224	; 0xe0
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ae:	2305      	movs	r3, #5
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f002 fca4 	bl	8004008 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40013000 	.word	0x40013000
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <HAL_TIM_Base_MspInit+0x44>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d113      	bne.n	800170a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_TIM_Base_MspInit+0x48>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <HAL_TIM_Base_MspInit+0x48>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6593      	str	r3, [r2, #88]	; 0x58
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_TIM_Base_MspInit+0x48>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2105      	movs	r1, #5
 80016fe:	201d      	movs	r0, #29
 8001700:	f002 f9e6 	bl	8003ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001704:	201d      	movs	r0, #29
 8001706:	f002 f9ff 	bl	8003b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40000400 	.word	0x40000400
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	; 0x30
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	2036      	movs	r0, #54	; 0x36
 8001732:	f002 f9cd 	bl	8003ad0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001736:	2036      	movs	r0, #54	; 0x36
 8001738:	f002 f9e6 	bl	8003b08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_InitTick+0x9c>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	4a1d      	ldr	r2, [pc, #116]	; (80017b8 <HAL_InitTick+0x9c>)
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6593      	str	r3, [r2, #88]	; 0x58
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_InitTick+0x9c>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001754:	f107 0210 	add.w	r2, r7, #16
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fd84 	bl	800526c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001764:	f003 fd6c 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8001768:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176c:	4a13      	ldr	r2, [pc, #76]	; (80017bc <HAL_InitTick+0xa0>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9b      	lsrs	r3, r3, #18
 8001774:	3b01      	subs	r3, #1
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_InitTick+0xa4>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_InitTick+0xa8>)
 800177c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_InitTick+0xa4>)
 8001780:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001784:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_InitTick+0xa4>)
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_InitTick+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_InitTick+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001798:	4809      	ldr	r0, [pc, #36]	; (80017c0 <HAL_InitTick+0xa4>)
 800179a:	f005 fd31 	bl	8007200 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d104      	bne.n	80017ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <HAL_InitTick+0xa4>)
 80017a6:	f005 fd83 	bl	80072b0 <HAL_TIM_Base_Start_IT>
 80017aa:	4603      	mov	r3, r0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3730      	adds	r7, #48	; 0x30
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	431bde83 	.word	0x431bde83
 80017c0:	20001ca0 	.word	0x20001ca0
 80017c4:	40001000 	.word	0x40001000

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80017f8:	f002 fe7c 	bl	80044f4 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <DMA1_Channel1_IRQHandler+0x10>)
 8001806:	f002 fab0 	bl	8003d6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000230 	.word	0x20000230

08001814 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <CAN1_TX_IRQHandler+0x10>)
 800181a:	f001 fe71 	bl	8003500 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000290 	.word	0x20000290

08001828 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <TIM3_IRQHandler+0x10>)
 800182e:	f005 fdaf 	bl	8007390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000350 	.word	0x20000350

0800183c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM6_DAC_IRQHandler+0x10>)
 8001842:	f005 fda5 	bl	8007390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20001ca0 	.word	0x20001ca0

08001850 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001878:	f7ff ffea 	bl	8001850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800187e:	490d      	ldr	r1, [pc, #52]	; (80018b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <LoopForever+0xe>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001894:	4c0a      	ldr	r4, [pc, #40]	; (80018c0 <LoopForever+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a2:	f008 fd09 	bl	800a2b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018a6:	f7ff f969 	bl	8000b7c <main>

080018aa <LoopForever>:

LoopForever:
    b LoopForever
 80018aa:	e7fe      	b.n	80018aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80018b8:	0800a538 	.word	0x0800a538
  ldr r2, =_sbss
 80018bc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80018c0:	20001d30 	.word	0x20001d30

080018c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC1_2_IRQHandler>

080018c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f002 f8f2 	bl	8003aba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d6:	200f      	movs	r0, #15
 80018d8:	f7ff ff20 	bl	800171c <HAL_InitTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	e001      	b.n	80018ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e8:	f7ff fd5e 	bl	80013a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x20>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_IncTick+0x24>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_IncTick+0x24>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000178 	.word	0x20000178
 800191c:	20001cec 	.word	0x20001cec

08001920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20001cec 	.word	0x20001cec

08001938 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	609a      	str	r2, [r3, #8]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3360      	adds	r3, #96	; 0x60
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <LL_ADC_SetOffset+0x44>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	4313      	orrs	r3, r2
 80019d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019d8:	bf00      	nop
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	03fff000 	.word	0x03fff000

080019e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3360      	adds	r3, #96	; 0x60
 80019f6:	461a      	mov	r2, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3360      	adds	r3, #96	; 0x60
 8001a24:	461a      	mov	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	615a      	str	r2, [r3, #20]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3330      	adds	r3, #48	; 0x30
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	4413      	add	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	211f      	movs	r1, #31
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	401a      	ands	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	f003 011f 	and.w	r1, r3, #31
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	431a      	orrs	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ae2:	bf00      	nop
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b087      	sub	sp, #28
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3314      	adds	r3, #20
 8001afe:	461a      	mov	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	0e5b      	lsrs	r3, r3, #25
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	0d1b      	lsrs	r3, r3, #20
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2107      	movs	r1, #7
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	0d1b      	lsrs	r3, r3, #20
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	431a      	orrs	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0318 	and.w	r3, r3, #24
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b68:	40d9      	lsrs	r1, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b72:	431a      	orrs	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	0007ffff 	.word	0x0007ffff

08001b8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 031f 	and.w	r3, r3, #31
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6093      	str	r3, [r2, #8]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be0:	d101      	bne.n	8001be6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <LL_ADC_IsEnabled+0x18>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <LL_ADC_IsEnabled+0x1a>
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ca2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ca6:	f043 0204 	orr.w	r2, r3, #4
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d101      	bne.n	8001cd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e134      	b.n	8001f8c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fb69 	bl	8001408 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff3f 	bl	8001bcc <LL_ADC_IsDeepPowerDownEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff25 	bl	8001ba8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff5a 	bl	8001c1c <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff3e 	bl	8001bf4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d78:	4b86      	ldr	r3, [pc, #536]	; (8001f94 <HAL_ADC_Init+0x28c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	4a86      	ldr	r2, [pc, #536]	; (8001f98 <HAL_ADC_Init+0x290>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff3c 	bl	8001c1c <LL_ADC_IsInternalRegulatorEnabled>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff75 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 8001dd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80cd 	bne.w	8001f7a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 80c9 	bne.w	8001f7a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001df0:	f043 0202 	orr.w	r2, r3, #2
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff35 	bl	8001c6c <LL_ADC_IsEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d110      	bne.n	8001e2a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e08:	4864      	ldr	r0, [pc, #400]	; (8001f9c <HAL_ADC_Init+0x294>)
 8001e0a:	f7ff ff2f 	bl	8001c6c <LL_ADC_IsEnabled>
 8001e0e:	4604      	mov	r4, r0
 8001e10:	4863      	ldr	r0, [pc, #396]	; (8001fa0 <HAL_ADC_Init+0x298>)
 8001e12:	f7ff ff2b 	bl	8001c6c <LL_ADC_IsEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4323      	orrs	r3, r4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4619      	mov	r1, r3
 8001e24:	485f      	ldr	r0, [pc, #380]	; (8001fa4 <HAL_ADC_Init+0x29c>)
 8001e26:	f7ff fd87 	bl	8001938 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7e5b      	ldrb	r3, [r3, #25]
 8001e2e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e34:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e3a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e40:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e48:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d106      	bne.n	8001e66 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	045b      	lsls	r3, r3, #17
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_ADC_Init+0x2a0>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	69b9      	ldr	r1, [r7, #24]
 8001e92:	430b      	orrs	r3, r1
 8001e94:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff0d 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 8001ea0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff1a 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 8001eac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d140      	bne.n	8001f36 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d13d      	bne.n	8001f36 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7e1b      	ldrb	r3, [r3, #24]
 8001ec2:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ec4:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ecc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001edc:	f023 0306 	bic.w	r3, r3, #6
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	69b9      	ldr	r1, [r7, #24]
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d118      	bne.n	8001f26 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001efe:	f023 0304 	bic.w	r3, r3, #4
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f10:	4311      	orrs	r1, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f16:	430a      	orrs	r2, r1
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	611a      	str	r2, [r3, #16]
 8001f24:	e007      	b.n	8001f36 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d10c      	bne.n	8001f58 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	f023 010f 	bic.w	r1, r3, #15
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
 8001f56:	e007      	b.n	8001f68 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 020f 	bic.w	r2, r2, #15
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f023 0303 	bic.w	r3, r3, #3
 8001f70:	f043 0201 	orr.w	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	659a      	str	r2, [r3, #88]	; 0x58
 8001f78:	e007      	b.n	8001f8a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f043 0210 	orr.w	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3724      	adds	r7, #36	; 0x24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd90      	pop	{r4, r7, pc}
 8001f94:	20000170 	.word	0x20000170
 8001f98:	053e2d63 	.word	0x053e2d63
 8001f9c:	50040000 	.word	0x50040000
 8001fa0:	50040100 	.word	0x50040100
 8001fa4:	50040300 	.word	0x50040300
 8001fa8:	fff0c007 	.word	0xfff0c007

08001fac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fb8:	4850      	ldr	r0, [pc, #320]	; (80020fc <HAL_ADC_Start_DMA+0x150>)
 8001fba:	f7ff fde7 	bl	8001b8c <LL_ADC_GetMultimode>
 8001fbe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fe78 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 808e 	bne.w	80020ee <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_Start_DMA+0x34>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e089      	b.n	80020f4 <HAL_ADC_Start_DMA+0x148>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d002      	beq.n	8001ffa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	2b09      	cmp	r3, #9
 8001ff8:	d172      	bne.n	80020e0 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fca4 	bl	8002948 <ADC_Enable>
 8002000:	4603      	mov	r3, r0
 8002002:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d165      	bne.n	80020d6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a37      	ldr	r2, [pc, #220]	; (8002100 <HAL_ADC_Start_DMA+0x154>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d002      	beq.n	800202e <HAL_ADC_Start_DMA+0x82>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	e000      	b.n	8002030 <HAL_ADC_Start_DMA+0x84>
 800202e:	4b35      	ldr	r3, [pc, #212]	; (8002104 <HAL_ADC_Start_DMA+0x158>)
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	4293      	cmp	r3, r2
 8002036:	d002      	beq.n	800203e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	f023 0206 	bic.w	r2, r3, #6
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	65da      	str	r2, [r3, #92]	; 0x5c
 8002062:	e002      	b.n	800206a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206e:	4a26      	ldr	r2, [pc, #152]	; (8002108 <HAL_ADC_Start_DMA+0x15c>)
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002076:	4a25      	ldr	r2, [pc, #148]	; (800210c <HAL_ADC_Start_DMA+0x160>)
 8002078:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207e:	4a24      	ldr	r2, [pc, #144]	; (8002110 <HAL_ADC_Start_DMA+0x164>)
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	221c      	movs	r2, #28
 8002088:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0210 	orr.w	r2, r2, #16
 80020a0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3340      	adds	r3, #64	; 0x40
 80020bc:	4619      	mov	r1, r3
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f001 fdd7 	bl	8003c74 <HAL_DMA_Start_IT>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fddf 	bl	8001c92 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020d4:	e00d      	b.n	80020f2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 80020de:	e008      	b.n	80020f2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80020ec:	e001      	b.n	80020f2 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	50040300 	.word	0x50040300
 8002100:	50040100 	.word	0x50040100
 8002104:	50040000 	.word	0x50040000
 8002108:	08002a0d 	.word	0x08002a0d
 800210c:	08002ae5 	.word	0x08002ae5
 8002110:	08002b01 	.word	0x08002b01

08002114 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0b6      	sub	sp, #216	; 0xd8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x22>
 800216e:	2302      	movs	r3, #2
 8002170:	e3d5      	b.n	800291e <HAL_ADC_ConfigChannel+0x7ce>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fd9b 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 83ba 	bne.w	8002900 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d824      	bhi.n	80021de <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	3b02      	subs	r3, #2
 800219a:	2b03      	cmp	r3, #3
 800219c:	d81b      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0x86>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <HAL_ADC_ConfigChannel+0x54>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021bd 	.word	0x080021bd
 80021ac:	080021c5 	.word	0x080021c5
 80021b0:	080021cd 	.word	0x080021cd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	220c      	movs	r2, #12
 80021b8:	605a      	str	r2, [r3, #4]
          break;
 80021ba:	e011      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2212      	movs	r2, #18
 80021c0:	605a      	str	r2, [r3, #4]
          break;
 80021c2:	e00d      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2218      	movs	r2, #24
 80021c8:	605a      	str	r2, [r3, #4]
          break;
 80021ca:	e009      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d2:	605a      	str	r2, [r3, #4]
          break;
 80021d4:	e004      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2206      	movs	r2, #6
 80021da:	605a      	str	r2, [r3, #4]
          break;
 80021dc:	e000      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80021de:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	f7ff fc52 	bl	8001a96 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fd5f 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 80021fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fd6b 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 800220a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800220e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002212:	2b00      	cmp	r3, #0
 8002214:	f040 81c1 	bne.w	800259a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002218:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 81bc 	bne.w	800259a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800222a:	d10f      	bne.n	800224c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	f7ff fc59 	bl	8001aee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fc00 	bl	8001a4a <LL_ADC_SetSamplingTimeCommonConfig>
 800224a:	e00e      	b.n	800226a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	461a      	mov	r2, r3
 800225a:	f7ff fc48 	bl	8001aee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fbf0 	bl	8001a4a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d00a      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6919      	ldr	r1, [r3, #16]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800229c:	f7ff fb80 	bl	80019a0 <LL_ADC_SetOffset>
 80022a0:	e17b      	b.n	800259a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fb9d 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10a      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x17e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fb92 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	e01e      	b.n	800230c <HAL_ADC_ConfigChannel+0x1bc>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fb87 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e004      	b.n	800230a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1d4>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	e018      	b.n	8002356 <HAL_ADC_ConfigChannel+0x206>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800233c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002348:	2320      	movs	r3, #32
 800234a:	e004      	b.n	8002356 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800234c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002356:	429a      	cmp	r2, r3
 8002358:	d106      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fb56 	bl	8001a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2101      	movs	r1, #1
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fb3a 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x244>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fb2f 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	0e9b      	lsrs	r3, r3, #26
 800238e:	f003 021f 	and.w	r2, r3, #31
 8002392:	e01e      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x282>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fb24 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80023c2:	2320      	movs	r3, #32
 80023c4:	e004      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80023c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x29a>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	0e9b      	lsrs	r3, r3, #26
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	e018      	b.n	800241c <HAL_ADC_ConfigChannel+0x2cc>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800240e:	2320      	movs	r3, #32
 8002410:	e004      	b.n	800241c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2200      	movs	r2, #0
 8002426:	2101      	movs	r1, #1
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff faf3 	bl	8001a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2102      	movs	r1, #2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fad7 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_ADC_ConfigChannel+0x30a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2102      	movs	r1, #2
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff facc 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	0e9b      	lsrs	r3, r3, #26
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	e01e      	b.n	8002498 <HAL_ADC_ConfigChannel+0x348>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2102      	movs	r1, #2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fac1 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800247c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	e004      	b.n	8002496 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800248c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x360>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	e016      	b.n	80024de <HAL_ADC_ConfigChannel+0x38e>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80024d0:	2320      	movs	r3, #32
 80024d2:	e004      	b.n	80024de <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80024d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024de:	429a      	cmp	r2, r3
 80024e0:	d106      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	2102      	movs	r1, #2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fa92 	bl	8001a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2103      	movs	r1, #3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fa76 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_ADC_ConfigChannel+0x3cc>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2103      	movs	r1, #3
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fa6b 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	f003 021f 	and.w	r2, r3, #31
 800251a:	e017      	b.n	800254c <HAL_ADC_ConfigChannel+0x3fc>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2103      	movs	r1, #3
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fa60 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002536:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800253e:	2320      	movs	r3, #32
 8002540:	e003      	b.n	800254a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x414>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	e011      	b.n	8002588 <HAL_ADC_ConfigChannel+0x438>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002574:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e003      	b.n	8002588 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002588:	429a      	cmp	r2, r3
 800258a:	d106      	bne.n	800259a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2200      	movs	r2, #0
 8002592:	2103      	movs	r1, #3
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fa3d 	bl	8001a14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fb64 	bl	8001c6c <LL_ADC_IsEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 8140 	bne.w	800282c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	461a      	mov	r2, r3
 80025ba:	f7ff fac3 	bl	8001b44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4a8f      	ldr	r2, [pc, #572]	; (8002800 <HAL_ADC_ConfigChannel+0x6b0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	f040 8131 	bne.w	800282c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10b      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x4a2>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0e9b      	lsrs	r3, r3, #26
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2b09      	cmp	r3, #9
 80025e8:	bf94      	ite	ls
 80025ea:	2301      	movls	r3, #1
 80025ec:	2300      	movhi	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	e019      	b.n	8002626 <HAL_ADC_ConfigChannel+0x4d6>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002602:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800260a:	2320      	movs	r3, #32
 800260c:	e003      	b.n	8002616 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800260e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2b09      	cmp	r3, #9
 800261e:	bf94      	ite	ls
 8002620:	2301      	movls	r3, #1
 8002622:	2300      	movhi	r3, #0
 8002624:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002626:	2b00      	cmp	r3, #0
 8002628:	d079      	beq.n	800271e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d107      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x4f6>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	3301      	adds	r3, #1
 800263e:	069b      	lsls	r3, r3, #26
 8002640:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002644:	e015      	b.n	8002672 <HAL_ADC_ConfigChannel+0x522>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002656:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800265e:	2320      	movs	r3, #32
 8002660:	e003      	b.n	800266a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3301      	adds	r3, #1
 800266c:	069b      	lsls	r3, r3, #26
 800266e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x542>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0e9b      	lsrs	r3, r3, #26
 8002684:	3301      	adds	r3, #1
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	e017      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x572>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80026aa:	2320      	movs	r3, #32
 80026ac:	e003      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80026ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	ea42 0103 	orr.w	r1, r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x598>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	3301      	adds	r3, #1
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	051b      	lsls	r3, r3, #20
 80026e6:	e018      	b.n	800271a <HAL_ADC_ConfigChannel+0x5ca>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	e003      	b.n	800270c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271a:	430b      	orrs	r3, r1
 800271c:	e081      	b.n	8002822 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <HAL_ADC_ConfigChannel+0x5ea>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	3301      	adds	r3, #1
 8002732:	069b      	lsls	r3, r3, #26
 8002734:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002738:	e015      	b.n	8002766 <HAL_ADC_ConfigChannel+0x616>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002752:	2320      	movs	r3, #32
 8002754:	e003      	b.n	800275e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	3301      	adds	r3, #1
 8002760:	069b      	lsls	r3, r3, #26
 8002762:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x636>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	3301      	adds	r3, #1
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	e017      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x666>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	61fb      	str	r3, [r7, #28]
  return result;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800279e:	2320      	movs	r3, #32
 80027a0:	e003      	b.n	80027aa <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	ea42 0103 	orr.w	r1, r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10d      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x692>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0e9b      	lsrs	r3, r3, #26
 80027cc:	3301      	adds	r3, #1
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	3b1e      	subs	r3, #30
 80027da:	051b      	lsls	r3, r3, #20
 80027dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e0:	e01e      	b.n	8002820 <HAL_ADC_ConfigChannel+0x6d0>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	613b      	str	r3, [r7, #16]
  return result;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e006      	b.n	800280c <HAL_ADC_ConfigChannel+0x6bc>
 80027fe:	bf00      	nop
 8002800:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	3301      	adds	r3, #1
 800280e:	f003 021f 	and.w	r2, r3, #31
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	3b1e      	subs	r3, #30
 800281a:	051b      	lsls	r3, r3, #20
 800281c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002820:	430b      	orrs	r3, r1
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	6892      	ldr	r2, [r2, #8]
 8002826:	4619      	mov	r1, r3
 8002828:	f7ff f961 	bl	8001aee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_ADC_ConfigChannel+0x7d8>)
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d06c      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002838:	483c      	ldr	r0, [pc, #240]	; (800292c <HAL_ADC_ConfigChannel+0x7dc>)
 800283a:	f7ff f8a3 	bl	8001984 <LL_ADC_GetCommonPathInternalCh>
 800283e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a3a      	ldr	r2, [pc, #232]	; (8002930 <HAL_ADC_ConfigChannel+0x7e0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d127      	bne.n	800289c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800284c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d121      	bne.n	800289c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a35      	ldr	r2, [pc, #212]	; (8002934 <HAL_ADC_ConfigChannel+0x7e4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d157      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002866:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800286a:	4619      	mov	r1, r3
 800286c:	482f      	ldr	r0, [pc, #188]	; (800292c <HAL_ADC_ConfigChannel+0x7dc>)
 800286e:	f7ff f876 	bl	800195e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_ADC_ConfigChannel+0x7e8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_ADC_ConfigChannel+0x7ec>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800288c:	e002      	b.n	8002894 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3b01      	subs	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800289a:	e03a      	b.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <HAL_ADC_ConfigChannel+0x7f0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d113      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x77e>
 80028a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <HAL_ADC_ConfigChannel+0x7e4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d12a      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c4:	4619      	mov	r1, r3
 80028c6:	4819      	ldr	r0, [pc, #100]	; (800292c <HAL_ADC_ConfigChannel+0x7dc>)
 80028c8:	f7ff f849 	bl	800195e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028cc:	e021      	b.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <HAL_ADC_ConfigChannel+0x7f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d11c      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a12      	ldr	r2, [pc, #72]	; (8002934 <HAL_ADC_ConfigChannel+0x7e4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d111      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f6:	4619      	mov	r1, r3
 80028f8:	480c      	ldr	r0, [pc, #48]	; (800292c <HAL_ADC_ConfigChannel+0x7dc>)
 80028fa:	f7ff f830 	bl	800195e <LL_ADC_SetCommonPathInternalCh>
 80028fe:	e008      	b.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800291a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800291e:	4618      	mov	r0, r3
 8002920:	37d8      	adds	r7, #216	; 0xd8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	80080000 	.word	0x80080000
 800292c:	50040300 	.word	0x50040300
 8002930:	c7520000 	.word	0xc7520000
 8002934:	50040000 	.word	0x50040000
 8002938:	20000170 	.word	0x20000170
 800293c:	053e2d63 	.word	0x053e2d63
 8002940:	cb840000 	.word	0xcb840000
 8002944:	80000001 	.word	0x80000001

08002948 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff f989 	bl	8001c6c <LL_ADC_IsEnabled>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d14d      	bne.n	80029fc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <ADC_Enable+0xc0>)
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f043 0210 	orr.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e039      	b.n	80029fe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff f958 	bl	8001c44 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002994:	f7fe ffc4 	bl	8001920 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800299a:	e028      	b.n	80029ee <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f963 	bl	8001c6c <LL_ADC_IsEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff f947 	bl	8001c44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029b6:	f7fe ffb3 	bl	8001920 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d914      	bls.n	80029ee <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d00d      	beq.n	80029ee <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	f043 0210 	orr.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e007      	b.n	80029fe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d1cf      	bne.n	800299c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	8000003f 	.word	0x8000003f

08002a0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d14b      	bne.n	8002abe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d021      	beq.n	8002a84 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff f813 	bl	8001a70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d032      	beq.n	8002ab6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d12b      	bne.n	8002ab6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11f      	bne.n	8002ab6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	659a      	str	r2, [r3, #88]	; 0x58
 8002a82:	e018      	b.n	8002ab6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d111      	bne.n	8002ab6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d105      	bne.n	8002ab6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff fb2c 	bl	8002114 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002abc:	e00e      	b.n	8002adc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff fb36 	bl	800213c <HAL_ADC_ErrorCallback>
}
 8002ad0:	e004      	b.n	8002adc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7ff fb18 	bl	8002128 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	f043 0204 	orr.w	r2, r3, #4
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f7ff fb08 	bl	800213c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <LL_ADC_IsEnabled>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <LL_ADC_IsEnabled+0x18>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <LL_ADC_IsEnabled+0x1a>
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <LL_ADC_REG_IsConversionOngoing>:
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d101      	bne.n	8002b72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b0a1      	sub	sp, #132	; 0x84
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e089      	b.n	8002cb2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002baa:	2300      	movs	r3, #0
 8002bac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a42      	ldr	r2, [pc, #264]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d102      	bne.n	8002bbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bb8:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e001      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e068      	b.n	8002cb2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ffb9 	bl	8002b5a <LL_ADC_REG_IsConversionOngoing>
 8002be8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ffb3 	bl	8002b5a <LL_ADC_REG_IsConversionOngoing>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d14a      	bne.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d147      	bne.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c00:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002c02:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d027      	beq.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c1e:	035b      	lsls	r3, r3, #13
 8002c20:	430b      	orrs	r3, r1
 8002c22:	431a      	orrs	r2, r3
 8002c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c28:	4824      	ldr	r0, [pc, #144]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002c2a:	f7ff ff83 	bl	8002b34 <LL_ADC_IsEnabled>
 8002c2e:	4604      	mov	r4, r0
 8002c30:	4823      	ldr	r0, [pc, #140]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c32:	f7ff ff7f 	bl	8002b34 <LL_ADC_IsEnabled>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4323      	orrs	r3, r4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d132      	bne.n	8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c46:	f023 030f 	bic.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	6811      	ldr	r1, [r2, #0]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	6892      	ldr	r2, [r2, #8]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	431a      	orrs	r2, r3
 8002c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c58:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c5a:	e023      	b.n	8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c66:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c68:	4814      	ldr	r0, [pc, #80]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002c6a:	f7ff ff63 	bl	8002b34 <LL_ADC_IsEnabled>
 8002c6e:	4604      	mov	r4, r0
 8002c70:	4813      	ldr	r0, [pc, #76]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c72:	f7ff ff5f 	bl	8002b34 <LL_ADC_IsEnabled>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4323      	orrs	r3, r4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d112      	bne.n	8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c86:	f023 030f 	bic.w	r3, r3, #15
 8002c8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c8c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c8e:	e009      	b.n	8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ca2:	e000      	b.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ca4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002cae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3784      	adds	r7, #132	; 0x84
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd90      	pop	{r4, r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	50040000 	.word	0x50040000
 8002cc0:	50040100 	.word	0x50040100
 8002cc4:	50040300 	.word	0x50040300

08002cc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0ed      	b.n	8002eb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fe fc26 	bl	8001538 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cfc:	f7fe fe10 	bl	8001920 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d02:	e012      	b.n	8002d2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d04:	f7fe fe0c 	bl	8001920 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b0a      	cmp	r3, #10
 8002d10:	d90b      	bls.n	8002d2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2205      	movs	r2, #5
 8002d22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0c5      	b.n	8002eb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0e5      	beq.n	8002d04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0202 	bic.w	r2, r2, #2
 8002d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d48:	f7fe fdea 	bl	8001920 <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d4e:	e012      	b.n	8002d76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d50:	f7fe fde6 	bl	8001920 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b0a      	cmp	r3, #10
 8002d5c:	d90b      	bls.n	8002d76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e09f      	b.n	8002eb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e5      	bne.n	8002d50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7e1b      	ldrb	r3, [r3, #24]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d108      	bne.n	8002d9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e007      	b.n	8002dae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7e5b      	ldrb	r3, [r3, #25]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d108      	bne.n	8002dc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e007      	b.n	8002dd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7e9b      	ldrb	r3, [r3, #26]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d108      	bne.n	8002df2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0220 	orr.w	r2, r2, #32
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e007      	b.n	8002e02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0220 	bic.w	r2, r2, #32
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7edb      	ldrb	r3, [r3, #27]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d108      	bne.n	8002e1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0210 	bic.w	r2, r2, #16
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e007      	b.n	8002e2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0210 	orr.w	r2, r2, #16
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7f1b      	ldrb	r3, [r3, #28]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d108      	bne.n	8002e46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0208 	orr.w	r2, r2, #8
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e007      	b.n	8002e56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0208 	bic.w	r2, r2, #8
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7f5b      	ldrb	r3, [r3, #29]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d108      	bne.n	8002e70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0204 	orr.w	r2, r2, #4
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e007      	b.n	8002e80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0204 	bic.w	r2, r2, #4
 8002e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	ea42 0103 	orr.w	r1, r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	1e5a      	subs	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b087      	sub	sp, #28
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d003      	beq.n	8002ee4 <HAL_CAN_ConfigFilter+0x26>
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	f040 80aa 	bne.w	8003038 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2201      	movs	r2, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d123      	bne.n	8002f66 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	401a      	ands	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3248      	adds	r2, #72	; 0x48
 8002f46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f5c:	6979      	ldr	r1, [r7, #20]
 8002f5e:	3348      	adds	r3, #72	; 0x48
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d122      	bne.n	8002fb4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3248      	adds	r2, #72	; 0x48
 8002f94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fa8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002faa:	6979      	ldr	r1, [r7, #20]
 8002fac:	3348      	adds	r3, #72	; 0x48
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002fce:	e007      	b.n	8002fe0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ffa:	e007      	b.n	800300c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	431a      	orrs	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d107      	bne.n	8003024 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	431a      	orrs	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e006      	b.n	8003046 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d12e      	bne.n	80030c4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800307e:	f7fe fc4f 	bl	8001920 <HAL_GetTick>
 8003082:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003084:	e012      	b.n	80030ac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003086:	f7fe fc4b 	bl	8001920 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b0a      	cmp	r3, #10
 8003092:	d90b      	bls.n	80030ac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2205      	movs	r2, #5
 80030a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e012      	b.n	80030d2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e5      	bne.n	8003086 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e006      	b.n	80030d2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80030da:	b480      	push	{r7}
 80030dc:	b089      	sub	sp, #36	; 0x24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80030f8:	7ffb      	ldrb	r3, [r7, #31]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d003      	beq.n	8003106 <HAL_CAN_AddTxMessage+0x2c>
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
 8003100:	2b02      	cmp	r3, #2
 8003102:	f040 80b8 	bne.w	8003276 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a0 	beq.w	8003266 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	0e1b      	lsrs	r3, r3, #24
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d907      	bls.n	8003146 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e09e      	b.n	8003284 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003146:	2201      	movs	r2, #1
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	409a      	lsls	r2, r3
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10d      	bne.n	8003174 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	6809      	ldr	r1, [r1, #0]
 8003166:	431a      	orrs	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3318      	adds	r3, #24
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	440b      	add	r3, r1
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e00f      	b.n	8003194 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800317e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003188:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	3318      	adds	r3, #24
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	440b      	add	r3, r1
 8003192:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3318      	adds	r3, #24
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	440b      	add	r3, r1
 80031a4:	3304      	adds	r3, #4
 80031a6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	7d1b      	ldrb	r3, [r3, #20]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d111      	bne.n	80031d4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	3318      	adds	r3, #24
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	4413      	add	r3, r2
 80031bc:	3304      	adds	r3, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	6811      	ldr	r1, [r2, #0]
 80031c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3318      	adds	r3, #24
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	440b      	add	r3, r1
 80031d0:	3304      	adds	r3, #4
 80031d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3307      	adds	r3, #7
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	061a      	lsls	r2, r3, #24
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3306      	adds	r3, #6
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3305      	adds	r3, #5
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	4313      	orrs	r3, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	3204      	adds	r2, #4
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	4610      	mov	r0, r2
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	6811      	ldr	r1, [r2, #0]
 80031fc:	ea43 0200 	orr.w	r2, r3, r0
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	440b      	add	r3, r1
 8003206:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800320a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3303      	adds	r3, #3
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	061a      	lsls	r2, r3, #24
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3302      	adds	r3, #2
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3301      	adds	r3, #1
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	4313      	orrs	r3, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	4610      	mov	r0, r2
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	6811      	ldr	r1, [r2, #0]
 8003232:	ea43 0200 	orr.w	r2, r3, r0
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	440b      	add	r3, r1
 800323c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003240:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	3318      	adds	r3, #24
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	4413      	add	r3, r2
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	6811      	ldr	r1, [r2, #0]
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3318      	adds	r3, #24
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	440b      	add	r3, r1
 8003260:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e00e      	b.n	8003284 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e006      	b.n	8003284 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3724      	adds	r7, #36	; 0x24
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d003      	beq.n	80032b4 <HAL_CAN_GetRxMessage+0x24>
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	f040 80f3 	bne.w	800349a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10e      	bne.n	80032d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d116      	bne.n	80032f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0e7      	b.n	80034a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d107      	bne.n	80032f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0d8      	b.n	80034a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	331b      	adds	r3, #27
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	4413      	add	r3, r2
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0204 	and.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10c      	bne.n	800332e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	331b      	adds	r3, #27
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	4413      	add	r3, r2
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	0d5b      	lsrs	r3, r3, #21
 8003324:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e00b      	b.n	8003346 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	331b      	adds	r3, #27
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	4413      	add	r3, r2
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	331b      	adds	r3, #27
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	4413      	add	r3, r2
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0202 	and.w	r2, r3, #2
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	331b      	adds	r3, #27
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	4413      	add	r3, r2
 8003368:	3304      	adds	r3, #4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	331b      	adds	r3, #27
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	4413      	add	r3, r2
 8003380:	3304      	adds	r3, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	b2da      	uxtb	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	331b      	adds	r3, #27
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	0a1a      	lsrs	r2, r3, #8
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	4413      	add	r3, r2
 80033de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0c1a      	lsrs	r2, r3, #16
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	3302      	adds	r3, #2
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	0e1a      	lsrs	r2, r3, #24
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	3303      	adds	r3, #3
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	4413      	add	r3, r2
 8003412:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	3304      	adds	r3, #4
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	4413      	add	r3, r2
 800342a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	0a1a      	lsrs	r2, r3, #8
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	3305      	adds	r3, #5
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	4413      	add	r3, r2
 8003444:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0c1a      	lsrs	r2, r3, #16
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	3306      	adds	r3, #6
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	4413      	add	r3, r2
 800345e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	0e1a      	lsrs	r2, r3, #24
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	3307      	adds	r3, #7
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d108      	bne.n	8003486 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0220 	orr.w	r2, r2, #32
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e007      	b.n	8003496 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0220 	orr.w	r2, r2, #32
 8003494:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e006      	b.n	80034a8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
  }
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d002      	beq.n	80034d2 <HAL_CAN_ActivateNotification+0x1e>
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d109      	bne.n	80034e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6959      	ldr	r1, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e006      	b.n	80034f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003508:	2300      	movs	r3, #0
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d07c      	beq.n	8003640 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d023      	beq.n	8003598 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2201      	movs	r2, #1
 8003556:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f983 	bl	800386e <HAL_CAN_TxMailbox0CompleteCallback>
 8003568:	e016      	b.n	8003598 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d004      	beq.n	800357e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	e00c      	b.n	8003598 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	e002      	b.n	8003598 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f989 	bl	80038aa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d024      	beq.n	80035ec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f963 	bl	8003882 <HAL_CAN_TxMailbox1CompleteCallback>
 80035bc:	e016      	b.n	80035ec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
 80035d0:	e00c      	b.n	80035ec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
 80035e4:	e002      	b.n	80035ec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f969 	bl	80038be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d024      	beq.n	8003640 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f943 	bl	8003896 <HAL_CAN_TxMailbox2CompleteCallback>
 8003610:	e016      	b.n	8003640 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d004      	beq.n	8003626 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
 8003624:	e00c      	b.n	8003640 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	e002      	b.n	8003640 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f949 	bl	80038d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800365a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2210      	movs	r2, #16
 8003662:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2208      	movs	r2, #8
 800367e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f930 	bl	80038e6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d009      	beq.n	80036a4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fc ff42 	bl	8000528 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00c      	beq.n	80036c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d007      	beq.n	80036c8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2210      	movs	r2, #16
 80036c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d006      	beq.n	80036ea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2208      	movs	r2, #8
 80036e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f912 	bl	800390e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8f9 	bl	80038fa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d006      	beq.n	800372a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2210      	movs	r2, #16
 8003722:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f8fc 	bl	8003922 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2208      	movs	r2, #8
 8003744:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8f5 	bl	8003936 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d07b      	beq.n	800384e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d072      	beq.n	8003846 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	f043 0302 	orr.w	r3, r3, #2
 8003796:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d043      	beq.n	8003846 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d03e      	beq.n	8003846 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037ce:	2b60      	cmp	r3, #96	; 0x60
 80037d0:	d02b      	beq.n	800382a <HAL_CAN_IRQHandler+0x32a>
 80037d2:	2b60      	cmp	r3, #96	; 0x60
 80037d4:	d82e      	bhi.n	8003834 <HAL_CAN_IRQHandler+0x334>
 80037d6:	2b50      	cmp	r3, #80	; 0x50
 80037d8:	d022      	beq.n	8003820 <HAL_CAN_IRQHandler+0x320>
 80037da:	2b50      	cmp	r3, #80	; 0x50
 80037dc:	d82a      	bhi.n	8003834 <HAL_CAN_IRQHandler+0x334>
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d019      	beq.n	8003816 <HAL_CAN_IRQHandler+0x316>
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d826      	bhi.n	8003834 <HAL_CAN_IRQHandler+0x334>
 80037e6:	2b30      	cmp	r3, #48	; 0x30
 80037e8:	d010      	beq.n	800380c <HAL_CAN_IRQHandler+0x30c>
 80037ea:	2b30      	cmp	r3, #48	; 0x30
 80037ec:	d822      	bhi.n	8003834 <HAL_CAN_IRQHandler+0x334>
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d002      	beq.n	80037f8 <HAL_CAN_IRQHandler+0x2f8>
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d005      	beq.n	8003802 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80037f6:	e01d      	b.n	8003834 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	f043 0308 	orr.w	r3, r3, #8
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003800:	e019      	b.n	8003836 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	f043 0310 	orr.w	r3, r3, #16
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800380a:	e014      	b.n	8003836 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	f043 0320 	orr.w	r3, r3, #32
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003814:	e00f      	b.n	8003836 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800381e:	e00a      	b.n	8003836 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003828:	e005      	b.n	8003836 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003832:	e000      	b.n	8003836 <HAL_CAN_IRQHandler+0x336>
            break;
 8003834:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699a      	ldr	r2, [r3, #24]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003844:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2204      	movs	r2, #4
 800384c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f872 	bl	800394a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003866:	bf00      	nop
 8003868:	3728      	adds	r7, #40	; 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800397c:	4013      	ands	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800398c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003992:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	60d3      	str	r3, [r2, #12]
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	f003 0307 	and.w	r3, r3, #7
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	db0b      	blt.n	80039ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	f003 021f 	and.w	r2, r3, #31
 80039dc:	4907      	ldr	r1, [pc, #28]	; (80039fc <__NVIC_EnableIRQ+0x38>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	2001      	movs	r0, #1
 80039e6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e100 	.word	0xe000e100

08003a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	db0a      	blt.n	8003a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	490c      	ldr	r1, [pc, #48]	; (8003a4c <__NVIC_SetPriority+0x4c>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	440b      	add	r3, r1
 8003a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a28:	e00a      	b.n	8003a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4908      	ldr	r1, [pc, #32]	; (8003a50 <__NVIC_SetPriority+0x50>)
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	3b04      	subs	r3, #4
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	761a      	strb	r2, [r3, #24]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e100 	.word	0xe000e100
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f1c3 0307 	rsb	r3, r3, #7
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	bf28      	it	cs
 8003a72:	2304      	movcs	r3, #4
 8003a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d902      	bls.n	8003a84 <NVIC_EncodePriority+0x30>
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3b03      	subs	r3, #3
 8003a82:	e000      	b.n	8003a86 <NVIC_EncodePriority+0x32>
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	401a      	ands	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	43d9      	mvns	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	4313      	orrs	r3, r2
         );
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3724      	adds	r7, #36	; 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ff4c 	bl	8003960 <__NVIC_SetPriorityGrouping>
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae2:	f7ff ff61 	bl	80039a8 <__NVIC_GetPriorityGrouping>
 8003ae6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	6978      	ldr	r0, [r7, #20]
 8003aee:	f7ff ffb1 	bl	8003a54 <NVIC_EncodePriority>
 8003af2:	4602      	mov	r2, r0
 8003af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ff80 	bl	8003a00 <__NVIC_SetPriority>
}
 8003b00:	bf00      	nop
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff ff54 	bl	80039c4 <__NVIC_EnableIRQ>
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e08d      	b.n	8003c52 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <HAL_DMA_Init+0x138>)
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d80f      	bhi.n	8003b62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	4b45      	ldr	r3, [pc, #276]	; (8003c60 <HAL_DMA_Init+0x13c>)
 8003b4a:	4413      	add	r3, r2
 8003b4c:	4a45      	ldr	r2, [pc, #276]	; (8003c64 <HAL_DMA_Init+0x140>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	009a      	lsls	r2, r3, #2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a42      	ldr	r2, [pc, #264]	; (8003c68 <HAL_DMA_Init+0x144>)
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8003b60:	e00e      	b.n	8003b80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	4b40      	ldr	r3, [pc, #256]	; (8003c6c <HAL_DMA_Init+0x148>)
 8003b6a:	4413      	add	r3, r2
 8003b6c:	4a3d      	ldr	r2, [pc, #244]	; (8003c64 <HAL_DMA_Init+0x140>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	009a      	lsls	r2, r3, #2
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a3c      	ldr	r2, [pc, #240]	; (8003c70 <HAL_DMA_Init+0x14c>)
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f9b6 	bl	8003f44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be0:	d102      	bne.n	8003be8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bfc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d010      	beq.n	8003c28 <HAL_DMA_Init+0x104>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d80c      	bhi.n	8003c28 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f9d6 	bl	8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	e008      	b.n	8003c3a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40020407 	.word	0x40020407
 8003c60:	bffdfff8 	.word	0xbffdfff8
 8003c64:	cccccccd 	.word	0xcccccccd
 8003c68:	40020000 	.word	0x40020000
 8003c6c:	bffdfbf8 	.word	0xbffdfbf8
 8003c70:	40020400 	.word	0x40020400

08003c74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_DMA_Start_IT+0x20>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e066      	b.n	8003d62 <HAL_DMA_Start_IT+0xee>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d155      	bne.n	8003d54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f8fb 	bl	8003ec8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 020e 	orr.w	r2, r2, #14
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e00f      	b.n	8003d0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0204 	bic.w	r2, r2, #4
 8003cfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 020a 	orr.w	r2, r2, #10
 8003d0a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d28:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d40:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e005      	b.n	8003d60 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f003 031c 	and.w	r3, r3, #28
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d026      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x7a>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d021      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d107      	bne.n	8003dbe <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0204 	bic.w	r2, r2, #4
 8003dbc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f003 021c 	and.w	r2, r3, #28
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2104      	movs	r1, #4
 8003dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d071      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003de2:	e06c      	b.n	8003ebe <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f003 031c 	and.w	r3, r3, #28
 8003dec:	2202      	movs	r2, #2
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d02e      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xec>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d029      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10b      	bne.n	8003e28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 020a 	bic.w	r2, r2, #10
 8003e1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2c:	f003 021c 	and.w	r2, r3, #28
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2102      	movs	r1, #2
 8003e36:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d038      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e54:	e033      	b.n	8003ebe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	f003 031c 	and.w	r3, r3, #28
 8003e5e:	2208      	movs	r2, #8
 8003e60:	409a      	lsls	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02a      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x156>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d025      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 020e 	bic.w	r2, r2, #14
 8003e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	f003 021c 	and.w	r2, r3, #28
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f202 	lsl.w	r2, r1, r2
 8003e96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ebe:	bf00      	nop
 8003ec0:	bf00      	nop
}
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ede:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ef0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f003 021c 	and.w	r2, r3, #28
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2101      	movs	r1, #1
 8003f00:	fa01 f202 	lsl.w	r2, r1, r2
 8003f04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d108      	bne.n	8003f28 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f26:	e007      	b.n	8003f38 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	60da      	str	r2, [r3, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d80a      	bhi.n	8003f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f64:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6493      	str	r3, [r2, #72]	; 0x48
 8003f6c:	e007      	b.n	8003f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	009a      	lsls	r2, r3, #2
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	3b08      	subs	r3, #8
 8003f86:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f94:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40020407 	.word	0x40020407
 8003fb4:	4002081c 	.word	0x4002081c
 8003fb8:	cccccccd 	.word	0xcccccccd
 8003fbc:	40020880 	.word	0x40020880

08003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a08      	ldr	r2, [pc, #32]	; (8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fe2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2201      	movs	r2, #1
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	1000823f 	.word	0x1000823f
 8004004:	40020940 	.word	0x40020940

08004008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004016:	e166      	b.n	80042e6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	4013      	ands	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8158 	beq.w	80042e0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d005      	beq.n	8004048 <HAL_GPIO_Init+0x40>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d130      	bne.n	80040aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	2203      	movs	r2, #3
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800407e:	2201      	movs	r2, #1
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4013      	ands	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f003 0201 	and.w	r2, r3, #1
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d017      	beq.n	80040e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	2203      	movs	r2, #3
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43db      	mvns	r3, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d123      	bne.n	800413a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	08da      	lsrs	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3208      	adds	r2, #8
 80040fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	220f      	movs	r2, #15
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	08da      	lsrs	r2, r3, #3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3208      	adds	r2, #8
 8004134:	6939      	ldr	r1, [r7, #16]
 8004136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	2203      	movs	r2, #3
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0203 	and.w	r2, r3, #3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 80b2 	beq.w	80042e0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417c:	4b61      	ldr	r3, [pc, #388]	; (8004304 <HAL_GPIO_Init+0x2fc>)
 800417e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004180:	4a60      	ldr	r2, [pc, #384]	; (8004304 <HAL_GPIO_Init+0x2fc>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6613      	str	r3, [r2, #96]	; 0x60
 8004188:	4b5e      	ldr	r3, [pc, #376]	; (8004304 <HAL_GPIO_Init+0x2fc>)
 800418a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004194:	4a5c      	ldr	r2, [pc, #368]	; (8004308 <HAL_GPIO_Init+0x300>)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	3302      	adds	r3, #2
 800419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	220f      	movs	r2, #15
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041be:	d02b      	beq.n	8004218 <HAL_GPIO_Init+0x210>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a52      	ldr	r2, [pc, #328]	; (800430c <HAL_GPIO_Init+0x304>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d025      	beq.n	8004214 <HAL_GPIO_Init+0x20c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a51      	ldr	r2, [pc, #324]	; (8004310 <HAL_GPIO_Init+0x308>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d01f      	beq.n	8004210 <HAL_GPIO_Init+0x208>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a50      	ldr	r2, [pc, #320]	; (8004314 <HAL_GPIO_Init+0x30c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d019      	beq.n	800420c <HAL_GPIO_Init+0x204>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a4f      	ldr	r2, [pc, #316]	; (8004318 <HAL_GPIO_Init+0x310>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d013      	beq.n	8004208 <HAL_GPIO_Init+0x200>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a4e      	ldr	r2, [pc, #312]	; (800431c <HAL_GPIO_Init+0x314>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00d      	beq.n	8004204 <HAL_GPIO_Init+0x1fc>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a4d      	ldr	r2, [pc, #308]	; (8004320 <HAL_GPIO_Init+0x318>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <HAL_GPIO_Init+0x1f8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a4c      	ldr	r2, [pc, #304]	; (8004324 <HAL_GPIO_Init+0x31c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_GPIO_Init+0x1f4>
 80041f8:	2307      	movs	r3, #7
 80041fa:	e00e      	b.n	800421a <HAL_GPIO_Init+0x212>
 80041fc:	2308      	movs	r3, #8
 80041fe:	e00c      	b.n	800421a <HAL_GPIO_Init+0x212>
 8004200:	2306      	movs	r3, #6
 8004202:	e00a      	b.n	800421a <HAL_GPIO_Init+0x212>
 8004204:	2305      	movs	r3, #5
 8004206:	e008      	b.n	800421a <HAL_GPIO_Init+0x212>
 8004208:	2304      	movs	r3, #4
 800420a:	e006      	b.n	800421a <HAL_GPIO_Init+0x212>
 800420c:	2303      	movs	r3, #3
 800420e:	e004      	b.n	800421a <HAL_GPIO_Init+0x212>
 8004210:	2302      	movs	r3, #2
 8004212:	e002      	b.n	800421a <HAL_GPIO_Init+0x212>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_GPIO_Init+0x212>
 8004218:	2300      	movs	r3, #0
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	f002 0203 	and.w	r2, r2, #3
 8004220:	0092      	lsls	r2, r2, #2
 8004222:	4093      	lsls	r3, r2
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800422a:	4937      	ldr	r1, [pc, #220]	; (8004308 <HAL_GPIO_Init+0x300>)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	3302      	adds	r3, #2
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004238:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <HAL_GPIO_Init+0x320>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	43db      	mvns	r3, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800425c:	4a32      	ldr	r2, [pc, #200]	; (8004328 <HAL_GPIO_Init+0x320>)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004262:	4b31      	ldr	r3, [pc, #196]	; (8004328 <HAL_GPIO_Init+0x320>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	43db      	mvns	r3, r3
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004286:	4a28      	ldr	r2, [pc, #160]	; (8004328 <HAL_GPIO_Init+0x320>)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800428c:	4b26      	ldr	r3, [pc, #152]	; (8004328 <HAL_GPIO_Init+0x320>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	43db      	mvns	r3, r3
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <HAL_GPIO_Init+0x320>)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80042b6:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <HAL_GPIO_Init+0x320>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	43db      	mvns	r3, r3
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042da:	4a13      	ldr	r2, [pc, #76]	; (8004328 <HAL_GPIO_Init+0x320>)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	3301      	adds	r3, #1
 80042e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f47f ae91 	bne.w	8004018 <HAL_GPIO_Init+0x10>
  }
}
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40021000 	.word	0x40021000
 8004308:	40010000 	.word	0x40010000
 800430c:	48000400 	.word	0x48000400
 8004310:	48000800 	.word	0x48000800
 8004314:	48000c00 	.word	0x48000c00
 8004318:	48001000 	.word	0x48001000
 800431c:	48001400 	.word	0x48001400
 8004320:	48001800 	.word	0x48001800
 8004324:	48001c00 	.word	0x48001c00
 8004328:	40010400 	.word	0x40010400

0800432c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
 8004338:	4613      	mov	r3, r2
 800433a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800433c:	787b      	ldrb	r3, [r7, #1]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004348:	e002      	b.n	8004350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437c:	d102      	bne.n	8004384 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800437e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004382:	e00b      	b.n	800439c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004392:	d102      	bne.n	800439a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004398:	e000      	b.n	800439c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800439a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40007000 	.word	0x40007000

080043ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d141      	bne.n	800443e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ba:	4b4b      	ldr	r3, [pc, #300]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c6:	d131      	bne.n	800442c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c8:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ce:	4a46      	ldr	r2, [pc, #280]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d8:	4b43      	ldr	r3, [pc, #268]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043e0:	4a41      	ldr	r2, [pc, #260]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043e8:	4b40      	ldr	r3, [pc, #256]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2232      	movs	r2, #50	; 0x32
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	4a3f      	ldr	r2, [pc, #252]	; (80044f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	0c9b      	lsrs	r3, r3, #18
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fe:	e002      	b.n	8004406 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004406:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d102      	bne.n	800441a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f2      	bne.n	8004400 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800441a:	4b33      	ldr	r3, [pc, #204]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004426:	d158      	bne.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e057      	b.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800442c:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004432:	4a2d      	ldr	r2, [pc, #180]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800443c:	e04d      	b.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004444:	d141      	bne.n	80044ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004446:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800444e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004452:	d131      	bne.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004454:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800445a:	4a23      	ldr	r2, [pc, #140]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004464:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800446c:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800446e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004472:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2232      	movs	r2, #50	; 0x32
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	0c9b      	lsrs	r3, r3, #18
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800448a:	e002      	b.n	8004492 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3b01      	subs	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449e:	d102      	bne.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f2      	bne.n	800448c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044a6:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b2:	d112      	bne.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e011      	b.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044be:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044c8:	e007      	b.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044d2:	4a05      	ldr	r2, [pc, #20]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40007000 	.word	0x40007000
 80044ec:	20000170 	.word	0x20000170
 80044f0:	431bde83 	.word	0x431bde83

080044f4 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 80044f8:	4b1c      	ldr	r3, [pc, #112]	; (800456c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004504:	f7ff ff2a 	bl	800435c <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800450a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800450e:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8004510:	4b16      	ldr	r3, [pc, #88]	; (800456c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800451c:	f000 f828 	bl	8004570 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004522:	2208      	movs	r2, #8
 8004524:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8004532:	f000 f824 	bl	800457e <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004538:	2210      	movs	r2, #16
 800453a:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004548:	f000 f820 	bl	800458c <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800454e:	2220      	movs	r2, #32
 8004550:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d004      	beq.n	8004568 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800455e:	f000 f81c 	bl	800459a <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8004562:	4b02      	ldr	r3, [pc, #8]	; (800456c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004564:	2240      	movs	r2, #64	; 0x40
 8004566:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8004568:	bf00      	nop
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40010400 	.word	0x40010400

08004570 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800457e:	b480      	push	{r7}
 8004580:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800459a:	b480      	push	{r7}
 800459c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f000 bc76 	b.w	8004ea8 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045bc:	4ba1      	ldr	r3, [pc, #644]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045c6:	4b9f      	ldr	r3, [pc, #636]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80e6 	beq.w	80047aa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4c>
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	f040 808d 	bne.w	8004706 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	f040 8089 	bne.w	8004706 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045f4:	4b93      	ldr	r3, [pc, #588]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <HAL_RCC_OscConfig+0x66>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f000 bc4d 	b.w	8004ea8 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004612:	4b8c      	ldr	r3, [pc, #560]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <HAL_RCC_OscConfig+0x80>
 800461e:	4b89      	ldr	r3, [pc, #548]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004626:	e005      	b.n	8004634 <HAL_RCC_OscConfig+0x8c>
 8004628:	4b86      	ldr	r3, [pc, #536]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800462a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004634:	4293      	cmp	r3, r2
 8004636:	d224      	bcs.n	8004682 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fe47 	bl	80052d0 <RCC_SetFlashLatencyFromMSIRange>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f000 bc2d 	b.w	8004ea8 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800464e:	4b7d      	ldr	r3, [pc, #500]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a7c      	ldr	r2, [pc, #496]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004654:	f043 0308 	orr.w	r3, r3, #8
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b7a      	ldr	r3, [pc, #488]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	4977      	ldr	r1, [pc, #476]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800466c:	4b75      	ldr	r3, [pc, #468]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	4972      	ldr	r1, [pc, #456]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800467c:	4313      	orrs	r3, r2
 800467e:	604b      	str	r3, [r1, #4]
 8004680:	e025      	b.n	80046ce <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004682:	4b70      	ldr	r3, [pc, #448]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6f      	ldr	r2, [pc, #444]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004688:	f043 0308 	orr.w	r3, r3, #8
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b6d      	ldr	r3, [pc, #436]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	496a      	ldr	r1, [pc, #424]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a0:	4b68      	ldr	r3, [pc, #416]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	4965      	ldr	r1, [pc, #404]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fe06 	bl	80052d0 <RCC_SetFlashLatencyFromMSIRange>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e3ec      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ce:	f000 fd1f 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80046d2:	4602      	mov	r2, r0
 80046d4:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	495a      	ldr	r1, [pc, #360]	; (8004848 <HAL_RCC_OscConfig+0x2a0>)
 80046e0:	5ccb      	ldrb	r3, [r1, r3]
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ea:	4a58      	ldr	r2, [pc, #352]	; (800484c <HAL_RCC_OscConfig+0x2a4>)
 80046ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046ee:	4b58      	ldr	r3, [pc, #352]	; (8004850 <HAL_RCC_OscConfig+0x2a8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fd f812 	bl	800171c <HAL_InitTick>
 80046f8:	4603      	mov	r3, r0
 80046fa:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d052      	beq.n	80047a8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	e3d0      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d032      	beq.n	8004774 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800470e:	4b4d      	ldr	r3, [pc, #308]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a4c      	ldr	r2, [pc, #304]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800471a:	f7fd f901 	bl	8001920 <HAL_GetTick>
 800471e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004722:	f7fd f8fd 	bl	8001920 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e3b9      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004734:	4b43      	ldr	r3, [pc, #268]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004740:	4b40      	ldr	r3, [pc, #256]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3f      	ldr	r2, [pc, #252]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004746:	f043 0308 	orr.w	r3, r3, #8
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b3d      	ldr	r3, [pc, #244]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	493a      	ldr	r1, [pc, #232]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800475e:	4b39      	ldr	r3, [pc, #228]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	4935      	ldr	r1, [pc, #212]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]
 8004772:	e01a      	b.n	80047aa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004774:	4b33      	ldr	r3, [pc, #204]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a32      	ldr	r2, [pc, #200]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004780:	f7fd f8ce 	bl	8001920 <HAL_GetTick>
 8004784:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004788:	f7fd f8ca 	bl	8001920 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e386      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800479a:	4b2a      	ldr	r3, [pc, #168]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x1e0>
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d073      	beq.n	800489e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d005      	beq.n	80047c8 <HAL_RCC_OscConfig+0x220>
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d10e      	bne.n	80047e0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d063      	beq.n	800489c <HAL_RCC_OscConfig+0x2f4>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d15f      	bne.n	800489c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e363      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d106      	bne.n	80047f8 <HAL_RCC_OscConfig+0x250>
 80047ea:	4b16      	ldr	r3, [pc, #88]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a15      	ldr	r2, [pc, #84]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e01d      	b.n	8004834 <HAL_RCC_OscConfig+0x28c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x274>
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a0f      	ldr	r2, [pc, #60]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e00b      	b.n	8004834 <HAL_RCC_OscConfig+0x28c>
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a08      	ldr	r2, [pc, #32]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 8004822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a05      	ldr	r2, [pc, #20]	; (8004844 <HAL_RCC_OscConfig+0x29c>)
 800482e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01b      	beq.n	8004874 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fd f870 	bl	8001920 <HAL_GetTick>
 8004840:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004842:	e010      	b.n	8004866 <HAL_RCC_OscConfig+0x2be>
 8004844:	40021000 	.word	0x40021000
 8004848:	0800a4e4 	.word	0x0800a4e4
 800484c:	20000170 	.word	0x20000170
 8004850:	20000174 	.word	0x20000174
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004854:	f7fd f864 	bl	8001920 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e320      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004866:	4ba0      	ldr	r3, [pc, #640]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x2ac>
 8004872:	e014      	b.n	800489e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fd f854 	bl	8001920 <HAL_GetTick>
 8004878:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487c:	f7fd f850 	bl	8001920 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e30c      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800488e:	4b96      	ldr	r3, [pc, #600]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0x2d4>
 800489a:	e000      	b.n	800489e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d060      	beq.n	800496c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_OscConfig+0x314>
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	2b0c      	cmp	r3, #12
 80048b4:	d119      	bne.n	80048ea <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d116      	bne.n	80048ea <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048bc:	4b8a      	ldr	r3, [pc, #552]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_OscConfig+0x32c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e2e9      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d4:	4b84      	ldr	r3, [pc, #528]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	061b      	lsls	r3, r3, #24
 80048e2:	4981      	ldr	r1, [pc, #516]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e8:	e040      	b.n	800496c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d023      	beq.n	800493a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f2:	4b7d      	ldr	r3, [pc, #500]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7c      	ldr	r2, [pc, #496]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 80048f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fd f80f 	bl	8001920 <HAL_GetTick>
 8004902:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004906:	f7fd f80b 	bl	8001920 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e2c7      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004918:	4b73      	ldr	r3, [pc, #460]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b70      	ldr	r3, [pc, #448]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	496d      	ldr	r1, [pc, #436]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
 8004938:	e018      	b.n	800496c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493a:	4b6b      	ldr	r3, [pc, #428]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a6a      	ldr	r2, [pc, #424]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fc ffeb 	bl	8001920 <HAL_GetTick>
 800494a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800494e:	f7fc ffe7 	bl	8001920 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e2a3      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004960:	4b61      	ldr	r3, [pc, #388]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f0      	bne.n	800494e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d07f      	beq.n	8004a78 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05f      	beq.n	8004a40 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004980:	4b59      	ldr	r3, [pc, #356]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004986:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	429a      	cmp	r2, r3
 8004994:	d037      	beq.n	8004a06 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d006      	beq.n	80049ae <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e27c      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01b      	beq.n	80049f0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80049b8:	4b4b      	ldr	r3, [pc, #300]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 80049ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049be:	4a4a      	ldr	r2, [pc, #296]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049c8:	f7fc ffaa 	bl	8001920 <HAL_GetTick>
 80049cc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d0:	f7fc ffa6 	bl	8001920 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b11      	cmp	r3, #17
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e262      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049e2:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 80049e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ef      	bne.n	80049d0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80049f0:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 80049f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f6:	f023 0210 	bic.w	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	493a      	ldr	r1, [pc, #232]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a06:	4b38      	ldr	r3, [pc, #224]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0c:	4a36      	ldr	r2, [pc, #216]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fc ff83 	bl	8001920 <HAL_GetTick>
 8004a1a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fc ff7f 	bl	8001920 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b11      	cmp	r3, #17
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e23b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a30:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ef      	beq.n	8004a1e <HAL_RCC_OscConfig+0x476>
 8004a3e:	e01b      	b.n	8004a78 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a40:	4b29      	ldr	r3, [pc, #164]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a46:	4a28      	ldr	r2, [pc, #160]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004a48:	f023 0301 	bic.w	r3, r3, #1
 8004a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a50:	f7fc ff66 	bl	8001920 <HAL_GetTick>
 8004a54:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a58:	f7fc ff62 	bl	8001920 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b11      	cmp	r3, #17
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e21e      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ef      	bne.n	8004a58 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80c1 	beq.w	8004c08 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a8c:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10e      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a98:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	4a12      	ldr	r2, [pc, #72]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8004aa4:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <HAL_RCC_OscConfig+0x540>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <HAL_RCC_OscConfig+0x544>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d11c      	bne.n	8004afc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <HAL_RCC_OscConfig+0x544>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a09      	ldr	r2, [pc, #36]	; (8004aec <HAL_RCC_OscConfig+0x544>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ace:	f7fc ff27 	bl	8001920 <HAL_GetTick>
 8004ad2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ad4:	e00c      	b.n	8004af0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad6:	f7fc ff23 	bl	8001920 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d905      	bls.n	8004af0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e1df      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af0:	4b99      	ldr	r3, [pc, #612]	; (8004d58 <HAL_RCC_OscConfig+0x7b0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ec      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02c      	beq.n	8004b62 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004b08:	4b94      	ldr	r3, [pc, #592]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	4990      	ldr	r1, [pc, #576]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d010      	beq.n	8004b50 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b2e:	4b8b      	ldr	r3, [pc, #556]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	4a89      	ldr	r2, [pc, #548]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b36:	f043 0304 	orr.w	r3, r3, #4
 8004b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b3e:	4b87      	ldr	r3, [pc, #540]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b44:	4a85      	ldr	r2, [pc, #532]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b4e:	e018      	b.n	8004b82 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b50:	4b82      	ldr	r3, [pc, #520]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	4a81      	ldr	r2, [pc, #516]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b60:	e00f      	b.n	8004b82 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b62:	4b7e      	ldr	r3, [pc, #504]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	4a7c      	ldr	r2, [pc, #496]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b72:	4b7a      	ldr	r3, [pc, #488]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	4a78      	ldr	r2, [pc, #480]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004b7a:	f023 0304 	bic.w	r3, r3, #4
 8004b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d016      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8a:	f7fc fec9 	bl	8001920 <HAL_GetTick>
 8004b8e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fc fec5 	bl	8001920 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e17f      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba8:	4b6c      	ldr	r3, [pc, #432]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ed      	beq.n	8004b92 <HAL_RCC_OscConfig+0x5ea>
 8004bb6:	e01d      	b.n	8004bf4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fc feb2 	bl	8001920 <HAL_GetTick>
 8004bbc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fc feae 	bl	8001920 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e168      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bd6:	4b61      	ldr	r3, [pc, #388]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1ed      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004be4:	4b5d      	ldr	r3, [pc, #372]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a5c      	ldr	r2, [pc, #368]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfc:	4b57      	ldr	r3, [pc, #348]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	4a56      	ldr	r2, [pc, #344]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03c      	beq.n	8004c8e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01c      	beq.n	8004c56 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c1c:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c22:	4a4e      	ldr	r2, [pc, #312]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fc fe78 	bl	8001920 <HAL_GetTick>
 8004c30:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c34:	f7fc fe74 	bl	8001920 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e130      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c46:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ef      	beq.n	8004c34 <HAL_RCC_OscConfig+0x68c>
 8004c54:	e01b      	b.n	8004c8e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c56:	4b41      	ldr	r3, [pc, #260]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c5c:	4a3f      	ldr	r2, [pc, #252]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fc fe5b 	bl	8001920 <HAL_GetTick>
 8004c6a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c6e:	f7fc fe57 	bl	8001920 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e113      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ef      	bne.n	8004c6e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8107 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	f040 80cf 	bne.w	8004e40 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ca2:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0203 	and.w	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d12c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d123      	bne.n	8004d10 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d11b      	bne.n	8004d10 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d113      	bne.n	8004d10 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d109      	bne.n	8004d10 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d071      	beq.n	8004df4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2b0c      	cmp	r3, #12
 8004d14:	d06c      	beq.n	8004df0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d105      	bne.n	8004d2e <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0ba      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <HAL_RCC_OscConfig+0x7b4>)
 8004d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d3e:	f7fc fdef 	bl	8001920 <HAL_GetTick>
 8004d42:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d44:	e00c      	b.n	8004d60 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d46:	f7fc fdeb 	bl	8001920 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d905      	bls.n	8004d60 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e0a7      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
 8004d58:	40007000 	.word	0x40007000
 8004d5c:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d60:	4b53      	ldr	r3, [pc, #332]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1ec      	bne.n	8004d46 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d6c:	4b50      	ldr	r3, [pc, #320]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	4b50      	ldr	r3, [pc, #320]	; (8004eb4 <HAL_RCC_OscConfig+0x90c>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d7c:	3a01      	subs	r2, #1
 8004d7e:	0112      	lsls	r2, r2, #4
 8004d80:	4311      	orrs	r1, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d86:	0212      	lsls	r2, r2, #8
 8004d88:	4311      	orrs	r1, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d8e:	0852      	lsrs	r2, r2, #1
 8004d90:	3a01      	subs	r2, #1
 8004d92:	0552      	lsls	r2, r2, #21
 8004d94:	4311      	orrs	r1, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d9a:	0852      	lsrs	r2, r2, #1
 8004d9c:	3a01      	subs	r2, #1
 8004d9e:	0652      	lsls	r2, r2, #25
 8004da0:	4311      	orrs	r1, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004da6:	06d2      	lsls	r2, r2, #27
 8004da8:	430a      	orrs	r2, r1
 8004daa:	4941      	ldr	r1, [pc, #260]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004db0:	4b3f      	ldr	r3, [pc, #252]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a3e      	ldr	r2, [pc, #248]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dbc:	4b3c      	ldr	r3, [pc, #240]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4a3b      	ldr	r2, [pc, #236]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dc8:	f7fc fdaa 	bl	8001920 <HAL_GetTick>
 8004dcc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fc fda6 	bl	8001920 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e062      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de2:	4b33      	ldr	r3, [pc, #204]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dee:	e05a      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e059      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df4:	4b2e      	ldr	r3, [pc, #184]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d152      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e00:	4b2b      	ldr	r3, [pc, #172]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2a      	ldr	r2, [pc, #168]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e0c:	4b28      	ldr	r3, [pc, #160]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e18:	f7fc fd82 	bl	8001920 <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fc fd7e 	bl	8001920 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e03a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e32:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x878>
 8004e3e:	e032      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d02d      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a19      	ldr	r2, [pc, #100]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e5e:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e64:	f023 0303 	bic.w	r3, r3, #3
 8004e68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	4a10      	ldr	r2, [pc, #64]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7fc fd51 	bl	8001920 <HAL_GetTick>
 8004e7e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e82:	f7fc fd4d 	bl	8001920 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e009      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCC_OscConfig+0x908>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <HAL_RCC_OscConfig+0x8da>
 8004ea0:	e001      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3728      	adds	r7, #40	; 0x28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	019d800c 	.word	0x019d800c

08004eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e10f      	b.n	80050f0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b89      	ldr	r3, [pc, #548]	; (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d910      	bls.n	8004f00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b86      	ldr	r3, [pc, #536]	; (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 020f 	bic.w	r2, r3, #15
 8004ee6:	4984      	ldr	r1, [pc, #528]	; (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b82      	ldr	r3, [pc, #520]	; (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0f7      	b.n	80050f0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8089 	beq.w	8005020 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d133      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f16:	4b79      	ldr	r3, [pc, #484]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0e4      	b.n	80050f0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004f26:	f000 fa2d 	bl	8005384 <RCC_GetSysClockFreqFromPLLSource>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4a74      	ldr	r2, [pc, #464]	; (8005100 <HAL_RCC_ClockConfig+0x248>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d955      	bls.n	8004fde <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f32:	4b72      	ldr	r3, [pc, #456]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f3e:	4b6f      	ldr	r3, [pc, #444]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f46:	4a6d      	ldr	r2, [pc, #436]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e044      	b.n	8004fde <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d03e      	beq.n	8004fde <HAL_RCC_ClockConfig+0x126>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d13a      	bne.n	8004fde <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f68:	4b64      	ldr	r3, [pc, #400]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f70:	4a62      	ldr	r2, [pc, #392]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e02f      	b.n	8004fde <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d107      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f86:	4b5d      	ldr	r3, [pc, #372]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d115      	bne.n	8004fbe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e0ac      	b.n	80050f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d107      	bne.n	8004fae <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f9e:	4b57      	ldr	r3, [pc, #348]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e0a0      	b.n	80050f0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fae:	4b53      	ldr	r3, [pc, #332]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e098      	b.n	80050f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004fbe:	f000 f8a7 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4a4e      	ldr	r2, [pc, #312]	; (8005100 <HAL_RCC_ClockConfig+0x248>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d909      	bls.n	8004fde <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fca:	4b4c      	ldr	r3, [pc, #304]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fd2:	4a4a      	ldr	r2, [pc, #296]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004fda:	2380      	movs	r3, #128	; 0x80
 8004fdc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b47      	ldr	r3, [pc, #284]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4944      	ldr	r1, [pc, #272]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff0:	f7fc fc96 	bl	8001920 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fc fc92 	bl	8001920 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	; 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e070      	b.n	80050f0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d009      	beq.n	8005040 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800502c:	4b33      	ldr	r3, [pc, #204]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	4930      	ldr	r1, [pc, #192]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
 800503e:	e008      	b.n	8005052 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d105      	bne.n	8005052 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 800504c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005050:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005052:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d210      	bcs.n	8005082 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005060:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 020f 	bic.w	r2, r3, #15
 8005068:	4923      	ldr	r1, [pc, #140]	; (80050f8 <HAL_RCC_ClockConfig+0x240>)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	4313      	orrs	r3, r2
 800506e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005070:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d001      	beq.n	8005082 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e036      	b.n	80050f0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508e:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	4918      	ldr	r1, [pc, #96]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 800509c:	4313      	orrs	r3, r2
 800509e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d009      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ac:	4b13      	ldr	r3, [pc, #76]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4910      	ldr	r1, [pc, #64]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050c0:	f000 f826 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <HAL_RCC_ClockConfig+0x244>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	490c      	ldr	r1, [pc, #48]	; (8005104 <HAL_RCC_ClockConfig+0x24c>)
 80050d2:	5ccb      	ldrb	r3, [r1, r3]
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <HAL_RCC_ClockConfig+0x250>)
 80050de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <HAL_RCC_ClockConfig+0x254>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fc fb19 	bl	800171c <HAL_InitTick>
 80050ea:	4603      	mov	r3, r0
 80050ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40022000 	.word	0x40022000
 80050fc:	40021000 	.word	0x40021000
 8005100:	04c4b400 	.word	0x04c4b400
 8005104:	0800a4e4 	.word	0x0800a4e4
 8005108:	20000170 	.word	0x20000170
 800510c:	20000174 	.word	0x20000174

08005110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005110:	b480      	push	{r7}
 8005112:	b089      	sub	sp, #36	; 0x24
 8005114:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	2300      	movs	r3, #0
 800511c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511e:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005128:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0x34>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d121      	bne.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d11e      	bne.n	8005182 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005144:	4b34      	ldr	r3, [pc, #208]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d107      	bne.n	8005160 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	e005      	b.n	800516c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005160:	4b2d      	ldr	r3, [pc, #180]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800516c:	4a2b      	ldr	r2, [pc, #172]	; (800521c <HAL_RCC_GetSysClockFreq+0x10c>)
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005174:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10d      	bne.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005180:	e00a      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d102      	bne.n	800518e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <HAL_RCC_GetSysClockFreq+0x110>)
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	e004      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d101      	bne.n	8005198 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005194:	4b23      	ldr	r3, [pc, #140]	; (8005224 <HAL_RCC_GetSysClockFreq+0x114>)
 8005196:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d134      	bne.n	8005208 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800519e:	4b1e      	ldr	r3, [pc, #120]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d003      	beq.n	80051b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d003      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0xac>
 80051b4:	e005      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <HAL_RCC_GetSysClockFreq+0x110>)
 80051b8:	617b      	str	r3, [r7, #20]
      break;
 80051ba:	e005      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051bc:	4b19      	ldr	r3, [pc, #100]	; (8005224 <HAL_RCC_GetSysClockFreq+0x114>)
 80051be:	617b      	str	r3, [r7, #20]
      break;
 80051c0:	e002      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	617b      	str	r3, [r7, #20]
      break;
 80051c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	3301      	adds	r3, #1
 80051d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051d6:	4b10      	ldr	r3, [pc, #64]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	fb02 f203 	mul.w	r2, r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <HAL_RCC_GetSysClockFreq+0x108>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	0e5b      	lsrs	r3, r3, #25
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	3301      	adds	r3, #1
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005208:	69bb      	ldr	r3, [r7, #24]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3724      	adds	r7, #36	; 0x24
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40021000 	.word	0x40021000
 800521c:	0800a4fc 	.word	0x0800a4fc
 8005220:	00f42400 	.word	0x00f42400
 8005224:	007a1200 	.word	0x007a1200

08005228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <HAL_RCC_GetHCLKFreq+0x14>)
 800522e:	681b      	ldr	r3, [r3, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000170 	.word	0x20000170

08005240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005244:	f7ff fff0 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8005248:	4602      	mov	r2, r0
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	4904      	ldr	r1, [pc, #16]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005256:	5ccb      	ldrb	r3, [r1, r3]
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	0800a4f4 	.word	0x0800a4f4

0800526c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	220f      	movs	r2, #15
 800527a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800527c:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCC_GetClockConfig+0x5c>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 0203 	and.w	r2, r3, #3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005288:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <HAL_RCC_GetClockConfig+0x5c>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005294:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <HAL_RCC_GetClockConfig+0x5c>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052a0:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <HAL_RCC_GetClockConfig+0x5c>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	08db      	lsrs	r3, r3, #3
 80052a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <HAL_RCC_GetClockConfig+0x60>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 020f 	and.w	r2, r3, #15
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	601a      	str	r2, [r3, #0]
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40022000 	.word	0x40022000

080052d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052e8:	f7ff f840 	bl	800436c <HAL_PWREx_GetVoltageRange>
 80052ec:	6178      	str	r0, [r7, #20]
 80052ee:	e014      	b.n	800531a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052f0:	4b22      	ldr	r3, [pc, #136]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f4:	4a21      	ldr	r2, [pc, #132]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fa:	6593      	str	r3, [r2, #88]	; 0x58
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005308:	f7ff f830 	bl	800436c <HAL_PWREx_GetVoltageRange>
 800530c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800530e:	4b1b      	ldr	r3, [pc, #108]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005312:	4a1a      	ldr	r2, [pc, #104]	; (800537c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005318:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005320:	d10b      	bne.n	800533a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b80      	cmp	r3, #128	; 0x80
 8005326:	d913      	bls.n	8005350 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2ba0      	cmp	r3, #160	; 0xa0
 800532c:	d902      	bls.n	8005334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800532e:	2302      	movs	r3, #2
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e00d      	b.n	8005350 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005334:	2301      	movs	r3, #1
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	e00a      	b.n	8005350 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b7f      	cmp	r3, #127	; 0x7f
 800533e:	d902      	bls.n	8005346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005340:	2302      	movs	r3, #2
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	e004      	b.n	8005350 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b70      	cmp	r3, #112	; 0x70
 800534a:	d101      	bne.n	8005350 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800534c:	2301      	movs	r3, #1
 800534e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f023 020f 	bic.w	r2, r3, #15
 8005358:	4909      	ldr	r1, [pc, #36]	; (8005380 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005360:	4b07      	ldr	r3, [pc, #28]	; (8005380 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	429a      	cmp	r2, r3
 800536c:	d001      	beq.n	8005372 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40021000 	.word	0x40021000
 8005380:	40022000 	.word	0x40022000

08005384 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800538e:	4b2d      	ldr	r3, [pc, #180]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b01      	cmp	r3, #1
 8005398:	d118      	bne.n	80053cc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800539a:	4b2a      	ldr	r3, [pc, #168]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053a6:	4b27      	ldr	r3, [pc, #156]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e005      	b.n	80053c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053b6:	4b23      	ldr	r3, [pc, #140]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053c2:	4a21      	ldr	r2, [pc, #132]	; (8005448 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ca:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d003      	beq.n	80053e4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d003      	beq.n	80053ea <RCC_GetSysClockFreqFromPLLSource+0x66>
 80053e2:	e005      	b.n	80053f0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80053e6:	613b      	str	r3, [r7, #16]
    break;
 80053e8:	e005      	b.n	80053f6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80053ea:	4b19      	ldr	r3, [pc, #100]	; (8005450 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80053ec:	613b      	str	r3, [r7, #16]
    break;
 80053ee:	e002      	b.n	80053f6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	613b      	str	r3, [r7, #16]
    break;
 80053f4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f6:	4b13      	ldr	r3, [pc, #76]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	091b      	lsrs	r3, r3, #4
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	3301      	adds	r3, #1
 8005402:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005404:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	fb02 f203 	mul.w	r2, r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	fbb2 f3f3 	udiv	r3, r2, r3
 800541a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	0e5b      	lsrs	r3, r3, #25
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	3301      	adds	r3, #1
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005436:	683b      	ldr	r3, [r7, #0]
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	40021000 	.word	0x40021000
 8005448:	0800a4fc 	.word	0x0800a4fc
 800544c:	00f42400 	.word	0x00f42400
 8005450:	007a1200 	.word	0x007a1200

08005454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800545c:	2300      	movs	r3, #0
 800545e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005460:	2300      	movs	r3, #0
 8005462:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800546c:	2b00      	cmp	r3, #0
 800546e:	d040      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005474:	2b80      	cmp	r3, #128	; 0x80
 8005476:	d02a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	d825      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800547c:	2b60      	cmp	r3, #96	; 0x60
 800547e:	d026      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005480:	2b60      	cmp	r3, #96	; 0x60
 8005482:	d821      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005484:	2b40      	cmp	r3, #64	; 0x40
 8005486:	d006      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d81d      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005490:	2b20      	cmp	r3, #32
 8005492:	d010      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005494:	e018      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005496:	4b89      	ldr	r3, [pc, #548]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	4a88      	ldr	r2, [pc, #544]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800549c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054a2:	e015      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	2100      	movs	r1, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fb3e 	bl	8005b2c <RCCEx_PLLSAI1_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054b4:	e00c      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3320      	adds	r3, #32
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fc29 	bl	8005d14 <RCCEx_PLLSAI2_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054c6:	e003      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	74fb      	strb	r3, [r7, #19]
      break;
 80054cc:	e000      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80054ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d0:	7cfb      	ldrb	r3, [r7, #19]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10b      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054d6:	4b79      	ldr	r3, [pc, #484]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054dc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e4:	4975      	ldr	r1, [pc, #468]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80054ec:	e001      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ee:	7cfb      	ldrb	r3, [r7, #19]
 80054f0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d047      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005506:	d030      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550c:	d82a      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800550e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005512:	d02a      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005518:	d824      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800551a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800551e:	d008      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005524:	d81e      	bhi.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800552a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552e:	d010      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005530:	e018      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005532:	4b62      	ldr	r3, [pc, #392]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	4a61      	ldr	r2, [pc, #388]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800553e:	e015      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3304      	adds	r3, #4
 8005544:	2100      	movs	r1, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f000 faf0 	bl	8005b2c <RCCEx_PLLSAI1_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005550:	e00c      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3320      	adds	r3, #32
 8005556:	2100      	movs	r1, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fbdb 	bl	8005d14 <RCCEx_PLLSAI2_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005562:	e003      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	74fb      	strb	r3, [r7, #19]
      break;
 8005568:	e000      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800556a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556c:	7cfb      	ldrb	r3, [r7, #19]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005572:	4b52      	ldr	r3, [pc, #328]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	494e      	ldr	r1, [pc, #312]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005588:	e001      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	7cfb      	ldrb	r3, [r7, #19]
 800558c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 809f 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800559c:	2300      	movs	r3, #0
 800559e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055a0:	4b46      	ldr	r3, [pc, #280]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80055b0:	2300      	movs	r3, #0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b6:	4b41      	ldr	r3, [pc, #260]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	4a40      	ldr	r2, [pc, #256]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c0:	6593      	str	r3, [r2, #88]	; 0x58
 80055c2:	4b3e      	ldr	r3, [pc, #248]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ce:	2301      	movs	r3, #1
 80055d0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d2:	4b3b      	ldr	r3, [pc, #236]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a3a      	ldr	r2, [pc, #232]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055de:	f7fc f99f 	bl	8001920 <HAL_GetTick>
 80055e2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055e4:	e009      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e6:	f7fc f99b 	bl	8001920 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d902      	bls.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	74fb      	strb	r3, [r7, #19]
        break;
 80055f8:	e005      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055fa:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ef      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d15b      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800560c:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005616:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01f      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	429a      	cmp	r2, r3
 8005628:	d019      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800562a:	4b24      	ldr	r3, [pc, #144]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005634:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005636:	4b21      	ldr	r3, [pc, #132]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	4a1f      	ldr	r2, [pc, #124]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800563e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005646:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564c:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800564e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005656:	4a19      	ldr	r2, [pc, #100]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d016      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc f95a 	bl	8001920 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800566e:	e00b      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005670:	f7fc f956 	bl	8001920 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	; 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d902      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	74fb      	strb	r3, [r7, #19]
            break;
 8005686:	e006      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005688:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800568a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0ec      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005696:	7cfb      	ldrb	r3, [r7, #19]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10c      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ac:	4903      	ldr	r1, [pc, #12]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056b4:	e008      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056b6:	7cfb      	ldrb	r3, [r7, #19]
 80056b8:	74bb      	strb	r3, [r7, #18]
 80056ba:	e005      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80056bc:	40021000 	.word	0x40021000
 80056c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	7cfb      	ldrb	r3, [r7, #19]
 80056c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c8:	7c7b      	ldrb	r3, [r7, #17]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d105      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ce:	4ba0      	ldr	r3, [pc, #640]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	4a9f      	ldr	r2, [pc, #636]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056e6:	4b9a      	ldr	r3, [pc, #616]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f023 0203 	bic.w	r2, r3, #3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f4:	4996      	ldr	r1, [pc, #600]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005708:	4b91      	ldr	r3, [pc, #580]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570e:	f023 020c 	bic.w	r2, r3, #12
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	498e      	ldr	r1, [pc, #568]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800572a:	4b89      	ldr	r3, [pc, #548]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005730:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005738:	4985      	ldr	r1, [pc, #532]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800574c:	4b80      	ldr	r3, [pc, #512]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800575a:	497d      	ldr	r1, [pc, #500]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800576e:	4b78      	ldr	r3, [pc, #480]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577c:	4974      	ldr	r1, [pc, #464]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005790:	4b6f      	ldr	r3, [pc, #444]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579e:	496c      	ldr	r1, [pc, #432]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057b2:	4b67      	ldr	r3, [pc, #412]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c0:	4963      	ldr	r1, [pc, #396]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057d4:	4b5e      	ldr	r3, [pc, #376]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e2:	495b      	ldr	r1, [pc, #364]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057f6:	4b56      	ldr	r3, [pc, #344]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005804:	4952      	ldr	r1, [pc, #328]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005818:	4b4d      	ldr	r3, [pc, #308]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	494a      	ldr	r1, [pc, #296]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800583a:	4b45      	ldr	r3, [pc, #276]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005848:	4941      	ldr	r1, [pc, #260]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800585c:	4b3c      	ldr	r3, [pc, #240]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800585e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005862:	f023 0203 	bic.w	r2, r3, #3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586a:	4939      	ldr	r1, [pc, #228]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d028      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800587e:	4b34      	ldr	r3, [pc, #208]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588c:	4930      	ldr	r1, [pc, #192]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589c:	d106      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800589e:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a8:	60d3      	str	r3, [r2, #12]
 80058aa:	e011      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3304      	adds	r3, #4
 80058ba:	2101      	movs	r1, #1
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 f935 	bl	8005b2c <RCCEx_PLLSAI1_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058c6:	7cfb      	ldrb	r3, [r7, #19]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d04d      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e4:	d108      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80058e6:	4b1a      	ldr	r3, [pc, #104]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058ec:	4a18      	ldr	r2, [pc, #96]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80058f6:	e012      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80058f8:	4b15      	ldr	r3, [pc, #84]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058fe:	4a14      	ldr	r2, [pc, #80]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005904:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005908:	4b11      	ldr	r3, [pc, #68]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800590a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005916:	490e      	ldr	r1, [pc, #56]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005926:	d106      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4a08      	ldr	r2, [pc, #32]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800592e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005932:	60d3      	str	r3, [r2, #12]
 8005934:	e020      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800593e:	d109      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005940:	4b03      	ldr	r3, [pc, #12]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	4a02      	ldr	r2, [pc, #8]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594a:	60d3      	str	r3, [r2, #12]
 800594c:	e014      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800595c:	d10c      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3304      	adds	r3, #4
 8005962:	2101      	movs	r1, #1
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f8e1 	bl	8005b2c <RCCEx_PLLSAI1_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800596e:	7cfb      	ldrb	r3, [r7, #19]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005974:	7cfb      	ldrb	r3, [r7, #19]
 8005976:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d028      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005984:	4b68      	ldr	r3, [pc, #416]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005992:	4965      	ldr	r1, [pc, #404]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800599e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059a2:	d106      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a4:	4b60      	ldr	r3, [pc, #384]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a5f      	ldr	r2, [pc, #380]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ae:	60d3      	str	r3, [r2, #12]
 80059b0:	e011      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059ba:	d10c      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f8b2 	bl	8005b2c <RCCEx_PLLSAI1_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80059d2:	7cfb      	ldrb	r3, [r7, #19]
 80059d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01e      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059e2:	4b51      	ldr	r3, [pc, #324]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f2:	494d      	ldr	r1, [pc, #308]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a04:	d10c      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	2102      	movs	r1, #2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f88d 	bl	8005b2c <RCCEx_PLLSAI1_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a2c:	4b3e      	ldr	r3, [pc, #248]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a32:	f023 0204 	bic.w	r2, r3, #4
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a3c:	493a      	ldr	r1, [pc, #232]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a50:	4b35      	ldr	r3, [pc, #212]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a56:	f023 0218 	bic.w	r2, r3, #24
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	4931      	ldr	r1, [pc, #196]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d035      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a74:	4b2c      	ldr	r3, [pc, #176]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a2b      	ldr	r2, [pc, #172]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a80:	f7fb ff4e 	bl	8001920 <HAL_GetTick>
 8005a84:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a86:	e009      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a88:	f7fb ff4a 	bl	8001920 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d902      	bls.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	74fb      	strb	r3, [r7, #19]
        break;
 8005a9a:	e005      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a9c:	4b22      	ldr	r3, [pc, #136]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1ef      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005aa8:	7cfb      	ldrb	r3, [r7, #19]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d113      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005aae:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005abe:	491a      	ldr	r1, [pc, #104]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3320      	adds	r3, #32
 8005aca:	2102      	movs	r1, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f921 	bl	8005d14 <RCCEx_PLLSAI2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005ad6:	7cfb      	ldrb	r3, [r7, #19]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005adc:	7cfb      	ldrb	r3, [r7, #19]
 8005ade:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d017      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005aec:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	490a      	ldr	r1, [pc, #40]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b0e:	d105      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40021000 	.word	0x40021000

08005b2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b3a:	4b72      	ldr	r3, [pc, #456]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00e      	beq.n	8005b64 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b46:	4b6f      	ldr	r3, [pc, #444]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f003 0203 	and.w	r2, r3, #3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d103      	bne.n	8005b5e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
       ||
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d142      	bne.n	8005be4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
 8005b62:	e03f      	b.n	8005be4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d018      	beq.n	8005b9e <RCCEx_PLLSAI1_Config+0x72>
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d825      	bhi.n	8005bbc <RCCEx_PLLSAI1_Config+0x90>
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d002      	beq.n	8005b7a <RCCEx_PLLSAI1_Config+0x4e>
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d009      	beq.n	8005b8c <RCCEx_PLLSAI1_Config+0x60>
 8005b78:	e020      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b7a:	4b62      	ldr	r3, [pc, #392]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d11d      	bne.n	8005bc2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b8a:	e01a      	b.n	8005bc2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b8c:	4b5d      	ldr	r3, [pc, #372]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d116      	bne.n	8005bc6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b9c:	e013      	b.n	8005bc6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b9e:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10f      	bne.n	8005bca <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005baa:	4b56      	ldr	r3, [pc, #344]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d109      	bne.n	8005bca <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bba:	e006      	b.n	8005bca <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc0:	e004      	b.n	8005bcc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005bc2:	bf00      	nop
 8005bc4:	e002      	b.n	8005bcc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d108      	bne.n	8005be4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005bd2:	4b4c      	ldr	r3, [pc, #304]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f023 0203 	bic.w	r2, r3, #3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4949      	ldr	r1, [pc, #292]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f040 8086 	bne.w	8005cf8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005bec:	4b45      	ldr	r3, [pc, #276]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a44      	ldr	r2, [pc, #272]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf8:	f7fb fe92 	bl	8001920 <HAL_GetTick>
 8005bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bfe:	e009      	b.n	8005c14 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c00:	f7fb fe8e 	bl	8001920 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d902      	bls.n	8005c14 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	73fb      	strb	r3, [r7, #15]
        break;
 8005c12:	e005      	b.n	8005c20 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c14:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1ef      	bne.n	8005c00 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d168      	bne.n	8005cf8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d113      	bne.n	8005c54 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c2c:	4b35      	ldr	r3, [pc, #212]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	4b35      	ldr	r3, [pc, #212]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6892      	ldr	r2, [r2, #8]
 8005c38:	0211      	lsls	r1, r2, #8
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	68d2      	ldr	r2, [r2, #12]
 8005c3e:	06d2      	lsls	r2, r2, #27
 8005c40:	4311      	orrs	r1, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6852      	ldr	r2, [r2, #4]
 8005c46:	3a01      	subs	r2, #1
 8005c48:	0112      	lsls	r2, r2, #4
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	492d      	ldr	r1, [pc, #180]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	610b      	str	r3, [r1, #16]
 8005c52:	e02d      	b.n	8005cb0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d115      	bne.n	8005c86 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c5a:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	4b2b      	ldr	r3, [pc, #172]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6892      	ldr	r2, [r2, #8]
 8005c66:	0211      	lsls	r1, r2, #8
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6912      	ldr	r2, [r2, #16]
 8005c6c:	0852      	lsrs	r2, r2, #1
 8005c6e:	3a01      	subs	r2, #1
 8005c70:	0552      	lsls	r2, r2, #21
 8005c72:	4311      	orrs	r1, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6852      	ldr	r2, [r2, #4]
 8005c78:	3a01      	subs	r2, #1
 8005c7a:	0112      	lsls	r2, r2, #4
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	4921      	ldr	r1, [pc, #132]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	610b      	str	r3, [r1, #16]
 8005c84:	e014      	b.n	8005cb0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c86:	4b1f      	ldr	r3, [pc, #124]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	4b21      	ldr	r3, [pc, #132]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6892      	ldr	r2, [r2, #8]
 8005c92:	0211      	lsls	r1, r2, #8
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6952      	ldr	r2, [r2, #20]
 8005c98:	0852      	lsrs	r2, r2, #1
 8005c9a:	3a01      	subs	r2, #1
 8005c9c:	0652      	lsls	r2, r2, #25
 8005c9e:	4311      	orrs	r1, r2
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6852      	ldr	r2, [r2, #4]
 8005ca4:	3a01      	subs	r2, #1
 8005ca6:	0112      	lsls	r2, r2, #4
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	4916      	ldr	r1, [pc, #88]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005cb0:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a13      	ldr	r2, [pc, #76]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbc:	f7fb fe30 	bl	8001920 <HAL_GetTick>
 8005cc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cc2:	e009      	b.n	8005cd8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cc4:	f7fb fe2c 	bl	8001920 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d902      	bls.n	8005cd8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	73fb      	strb	r3, [r7, #15]
          break;
 8005cd6:	e005      	b.n	8005ce4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0ef      	beq.n	8005cc4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	4904      	ldr	r1, [pc, #16]	; (8005d04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	40021000 	.word	0x40021000
 8005d08:	07ff800f 	.word	0x07ff800f
 8005d0c:	ff9f800f 	.word	0xff9f800f
 8005d10:	f9ff800f 	.word	0xf9ff800f

08005d14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d22:	4b72      	ldr	r3, [pc, #456]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00e      	beq.n	8005d4c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d2e:	4b6f      	ldr	r3, [pc, #444]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0203 	and.w	r2, r3, #3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d103      	bne.n	8005d46 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
       ||
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d142      	bne.n	8005dcc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
 8005d4a:	e03f      	b.n	8005dcc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d018      	beq.n	8005d86 <RCCEx_PLLSAI2_Config+0x72>
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d825      	bhi.n	8005da4 <RCCEx_PLLSAI2_Config+0x90>
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d002      	beq.n	8005d62 <RCCEx_PLLSAI2_Config+0x4e>
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d009      	beq.n	8005d74 <RCCEx_PLLSAI2_Config+0x60>
 8005d60:	e020      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d62:	4b62      	ldr	r3, [pc, #392]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d11d      	bne.n	8005daa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d72:	e01a      	b.n	8005daa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d74:	4b5d      	ldr	r3, [pc, #372]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d116      	bne.n	8005dae <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d84:	e013      	b.n	8005dae <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d86:	4b59      	ldr	r3, [pc, #356]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10f      	bne.n	8005db2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d92:	4b56      	ldr	r3, [pc, #344]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005da2:	e006      	b.n	8005db2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	73fb      	strb	r3, [r7, #15]
      break;
 8005da8:	e004      	b.n	8005db4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005daa:	bf00      	nop
 8005dac:	e002      	b.n	8005db4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005db2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d108      	bne.n	8005dcc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005dba:	4b4c      	ldr	r3, [pc, #304]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f023 0203 	bic.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4949      	ldr	r1, [pc, #292]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 8086 	bne.w	8005ee0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005dd4:	4b45      	ldr	r3, [pc, #276]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a44      	ldr	r2, [pc, #272]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de0:	f7fb fd9e 	bl	8001920 <HAL_GetTick>
 8005de4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005de6:	e009      	b.n	8005dfc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005de8:	f7fb fd9a 	bl	8001920 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d902      	bls.n	8005dfc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	73fb      	strb	r3, [r7, #15]
        break;
 8005dfa:	e005      	b.n	8005e08 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dfc:	4b3b      	ldr	r3, [pc, #236]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1ef      	bne.n	8005de8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d168      	bne.n	8005ee0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d113      	bne.n	8005e3c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e14:	4b35      	ldr	r3, [pc, #212]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e16:	695a      	ldr	r2, [r3, #20]
 8005e18:	4b35      	ldr	r3, [pc, #212]	; (8005ef0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6892      	ldr	r2, [r2, #8]
 8005e20:	0211      	lsls	r1, r2, #8
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	68d2      	ldr	r2, [r2, #12]
 8005e26:	06d2      	lsls	r2, r2, #27
 8005e28:	4311      	orrs	r1, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6852      	ldr	r2, [r2, #4]
 8005e2e:	3a01      	subs	r2, #1
 8005e30:	0112      	lsls	r2, r2, #4
 8005e32:	430a      	orrs	r2, r1
 8005e34:	492d      	ldr	r1, [pc, #180]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	614b      	str	r3, [r1, #20]
 8005e3a:	e02d      	b.n	8005e98 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d115      	bne.n	8005e6e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e42:	4b2a      	ldr	r3, [pc, #168]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	4b2b      	ldr	r3, [pc, #172]	; (8005ef4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6892      	ldr	r2, [r2, #8]
 8005e4e:	0211      	lsls	r1, r2, #8
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6912      	ldr	r2, [r2, #16]
 8005e54:	0852      	lsrs	r2, r2, #1
 8005e56:	3a01      	subs	r2, #1
 8005e58:	0552      	lsls	r2, r2, #21
 8005e5a:	4311      	orrs	r1, r2
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6852      	ldr	r2, [r2, #4]
 8005e60:	3a01      	subs	r2, #1
 8005e62:	0112      	lsls	r2, r2, #4
 8005e64:	430a      	orrs	r2, r1
 8005e66:	4921      	ldr	r1, [pc, #132]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	614b      	str	r3, [r1, #20]
 8005e6c:	e014      	b.n	8005e98 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e6e:	4b1f      	ldr	r3, [pc, #124]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6892      	ldr	r2, [r2, #8]
 8005e7a:	0211      	lsls	r1, r2, #8
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6952      	ldr	r2, [r2, #20]
 8005e80:	0852      	lsrs	r2, r2, #1
 8005e82:	3a01      	subs	r2, #1
 8005e84:	0652      	lsls	r2, r2, #25
 8005e86:	4311      	orrs	r1, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6852      	ldr	r2, [r2, #4]
 8005e8c:	3a01      	subs	r2, #1
 8005e8e:	0112      	lsls	r2, r2, #4
 8005e90:	430a      	orrs	r2, r1
 8005e92:	4916      	ldr	r1, [pc, #88]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e98:	4b14      	ldr	r3, [pc, #80]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a13      	ldr	r2, [pc, #76]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea4:	f7fb fd3c 	bl	8001920 <HAL_GetTick>
 8005ea8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005eaa:	e009      	b.n	8005ec0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005eac:	f7fb fd38 	bl	8001920 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d902      	bls.n	8005ec0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	73fb      	strb	r3, [r7, #15]
          break;
 8005ebe:	e005      	b.n	8005ecc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0ef      	beq.n	8005eac <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ed4:	695a      	ldr	r2, [r3, #20]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	4904      	ldr	r1, [pc, #16]	; (8005eec <RCCEx_PLLSAI2_Config+0x1d8>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	07ff800f 	.word	0x07ff800f
 8005ef4:	ff9f800f 	.word	0xff9f800f
 8005ef8:	f9ff800f 	.word	0xf9ff800f

08005efc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d07f      	beq.n	800600e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fb fb54 	bl	80015d0 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005f2e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	22ca      	movs	r2, #202	; 0xca
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2253      	movs	r2, #83	; 0x53
 8005f46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f9b5 	bl	80062b8 <RTC_EnterInitMode>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d15a      	bne.n	800600e <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6a:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6999      	ldr	r1, [r3, #24]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6912      	ldr	r2, [r2, #16]
 8005f92:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6919      	ldr	r1, [r3, #16]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	041a      	lsls	r2, r3, #16
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005fa8:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <HAL_RTC_Init+0x11c>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	4917      	ldr	r1, [pc, #92]	; (8006018 <HAL_RTC_Init+0x11c>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f9af 	bl	8006324 <RTC_ExitInitMode>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d11e      	bne.n	800600e <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005fde:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6999      	ldr	r1, [r3, #24]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	22ff      	movs	r2, #255	; 0xff
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40002800 	.word	0x40002800

0800601c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_RTC_SetTime+0x1a>
 8006032:	2302      	movs	r3, #2
 8006034:	e08b      	b.n	800614e <HAL_RTC_SetTime+0x132>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2202      	movs	r2, #2
 8006042:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	22ca      	movs	r2, #202	; 0xca
 800604c:	625a      	str	r2, [r3, #36]	; 0x24
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2253      	movs	r2, #83	; 0x53
 8006054:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f92e 	bl	80062b8 <RTC_EnterInitMode>
 800605c:	4603      	mov	r3, r0
 800605e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006060:	7cfb      	ldrb	r3, [r7, #19]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d15e      	bne.n	8006124 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8006066:	4b3c      	ldr	r3, [pc, #240]	; (8006158 <HAL_RTC_SetTime+0x13c>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006072:	d057      	beq.n	8006124 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d125      	bne.n	80060c6 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800607a:	4b37      	ldr	r3, [pc, #220]	; (8006158 <HAL_RTC_SetTime+0x13c>)
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d102      	bne.n	800608c <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2200      	movs	r2, #0
 800608a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 f985 	bl	80063a0 <RTC_ByteToBcd2>
 8006096:	4603      	mov	r3, r0
 8006098:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 f97e 	bl	80063a0 <RTC_ByteToBcd2>
 80060a4:	4603      	mov	r3, r0
 80060a6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060a8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	789b      	ldrb	r3, [r3, #2]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 f976 	bl	80063a0 <RTC_ByteToBcd2>
 80060b4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060b6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	78db      	ldrb	r3, [r3, #3]
 80060be:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e017      	b.n	80060f6 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80060c6:	4b24      	ldr	r3, [pc, #144]	; (8006158 <HAL_RTC_SetTime+0x13c>)
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060e4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060ea:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	78db      	ldrb	r3, [r3, #3]
 80060f0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80060f6:	4a18      	ldr	r2, [pc, #96]	; (8006158 <HAL_RTC_SetTime+0x13c>)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80060fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006102:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8006104:	4b14      	ldr	r3, [pc, #80]	; (8006158 <HAL_RTC_SetTime+0x13c>)
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <HAL_RTC_SetTime+0x13c>)
 800610a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800610e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006110:	4b11      	ldr	r3, [pc, #68]	; (8006158 <HAL_RTC_SetTime+0x13c>)
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	68d9      	ldr	r1, [r3, #12]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	430b      	orrs	r3, r1
 800611e:	490e      	ldr	r1, [pc, #56]	; (8006158 <HAL_RTC_SetTime+0x13c>)
 8006120:	4313      	orrs	r3, r2
 8006122:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f8fd 	bl	8006324 <RTC_ExitInitMode>
 800612a:	4603      	mov	r3, r0
 800612c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	22ff      	movs	r2, #255	; 0xff
 8006134:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006136:	7cfb      	ldrb	r3, [r7, #19]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800614c:	7cfb      	ldrb	r3, [r7, #19]
}
 800614e:	4618      	mov	r0, r3
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	bd90      	pop	{r4, r7, pc}
 8006156:	bf00      	nop
 8006158:	40002800 	.word	0x40002800

0800615c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_RTC_SetDate+0x1a>
 8006172:	2302      	movs	r3, #2
 8006174:	e074      	b.n	8006260 <HAL_RTC_SetDate+0x104>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2202      	movs	r2, #2
 8006182:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10e      	bne.n	80061aa <HAL_RTC_SetDate+0x4e>
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	f003 0310 	and.w	r3, r3, #16
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	f023 0310 	bic.w	r3, r3, #16
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	330a      	adds	r3, #10
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d11c      	bne.n	80061ea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	78db      	ldrb	r3, [r3, #3]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 f8f3 	bl	80063a0 <RTC_ByteToBcd2>
 80061ba:	4603      	mov	r3, r0
 80061bc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f8ec 	bl	80063a0 <RTC_ByteToBcd2>
 80061c8:	4603      	mov	r3, r0
 80061ca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80061cc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	789b      	ldrb	r3, [r3, #2]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 f8e4 	bl	80063a0 <RTC_ByteToBcd2>
 80061d8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061da:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	e00e      	b.n	8006208 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	78db      	ldrb	r3, [r3, #3]
 80061ee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80061f6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80061fc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	22ca      	movs	r2, #202	; 0xca
 800620e:	625a      	str	r2, [r3, #36]	; 0x24
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2253      	movs	r2, #83	; 0x53
 8006216:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f84d 	bl	80062b8 <RTC_EnterInitMode>
 800621e:	4603      	mov	r3, r0
 8006220:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006222:	7cfb      	ldrb	r3, [r7, #19]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10b      	bne.n	8006240 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8006228:	4a0f      	ldr	r2, [pc, #60]	; (8006268 <HAL_RTC_SetDate+0x10c>)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006230:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006234:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f874 	bl	8006324 <RTC_ExitInitMode>
 800623c:	4603      	mov	r3, r0
 800623e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	22ff      	movs	r2, #255	; 0xff
 8006246:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006248:	7cfb      	ldrb	r3, [r7, #19]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800625e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006260:	4618      	mov	r0, r3
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	bd90      	pop	{r4, r7, pc}
 8006268:	40002800 	.word	0x40002800

0800626c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006282:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8006284:	f7fb fb4c 	bl	8001920 <HAL_GetTick>
 8006288:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800628a:	e009      	b.n	80062a0 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800628c:	f7fb fb48 	bl	8001920 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800629a:	d901      	bls.n	80062a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e007      	b.n	80062b0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0ee      	beq.n	800628c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d123      	bne.n	800631a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062e0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80062e2:	f7fb fb1d 	bl	8001920 <HAL_GetTick>
 80062e6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80062e8:	e00d      	b.n	8006306 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80062ea:	f7fb fb19 	bl	8001920 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062f8:	d905      	bls.n	8006306 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2203      	movs	r2, #3
 8006302:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d102      	bne.n	800631a <RTC_EnterInitMode+0x62>
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	2b03      	cmp	r3, #3
 8006318:	d1e7      	bne.n	80062ea <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800631a:	7bfb      	ldrb	r3, [r7, #15]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006330:	4b1a      	ldr	r3, [pc, #104]	; (800639c <RTC_ExitInitMode+0x78>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4a19      	ldr	r2, [pc, #100]	; (800639c <RTC_ExitInitMode+0x78>)
 8006336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800633a:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800633c:	4b17      	ldr	r3, [pc, #92]	; (800639c <RTC_ExitInitMode+0x78>)
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10c      	bne.n	8006362 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff ff8f 	bl	800626c <HAL_RTC_WaitForSynchro>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01e      	beq.n	8006392 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2203      	movs	r2, #3
 8006358:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	73fb      	strb	r3, [r7, #15]
 8006360:	e017      	b.n	8006392 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006362:	4b0e      	ldr	r3, [pc, #56]	; (800639c <RTC_ExitInitMode+0x78>)
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	4a0d      	ldr	r2, [pc, #52]	; (800639c <RTC_ExitInitMode+0x78>)
 8006368:	f023 0320 	bic.w	r3, r3, #32
 800636c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff ff7c 	bl	800626c <HAL_RTC_WaitForSynchro>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2203      	movs	r2, #3
 800637e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006386:	4b05      	ldr	r3, [pc, #20]	; (800639c <RTC_ExitInitMode+0x78>)
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	4a04      	ldr	r2, [pc, #16]	; (800639c <RTC_ExitInitMode+0x78>)
 800638c:	f043 0320 	orr.w	r3, r3, #32
 8006390:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006392:	7bfb      	ldrb	r3, [r7, #15]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	40002800 	.word	0x40002800

080063a0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80063b2:	e005      	b.n	80063c0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80063ba:	7afb      	ldrb	r3, [r7, #11]
 80063bc:	3b0a      	subs	r3, #10
 80063be:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80063c0:	7afb      	ldrb	r3, [r7, #11]
 80063c2:	2b09      	cmp	r3, #9
 80063c4:	d8f6      	bhi.n	80063b4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	b2db      	uxtb	r3, r3
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e095      	b.n	800651e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d108      	bne.n	800640c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006402:	d009      	beq.n	8006418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	61da      	str	r2, [r3, #28]
 800640a:	e005      	b.n	8006418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb f90a 	bl	800164c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006458:	d902      	bls.n	8006460 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e002      	b.n	8006466 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006464:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800646e:	d007      	beq.n	8006480 <HAL_SPI_Init+0xa0>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006478:	d002      	beq.n	8006480 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	ea42 0103 	orr.w	r1, r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	0c1b      	lsrs	r3, r3, #16
 80064dc:	f003 0204 	and.w	r2, r3, #4
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80064fc:	ea42 0103 	orr.w	r1, r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b088      	sub	sp, #32
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	603b      	str	r3, [r7, #0]
 8006532:	4613      	mov	r3, r2
 8006534:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_SPI_Transmit+0x22>
 8006544:	2302      	movs	r3, #2
 8006546:	e158      	b.n	80067fa <HAL_SPI_Transmit+0x2d4>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006550:	f7fb f9e6 	bl	8001920 <HAL_GetTick>
 8006554:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b01      	cmp	r3, #1
 8006564:	d002      	beq.n	800656c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006566:	2302      	movs	r3, #2
 8006568:	77fb      	strb	r3, [r7, #31]
    goto error;
 800656a:	e13d      	b.n	80067e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_SPI_Transmit+0x52>
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800657c:	e134      	b.n	80067e8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2203      	movs	r2, #3
 8006582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	88fa      	ldrh	r2, [r7, #6]
 8006596:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	88fa      	ldrh	r2, [r7, #6]
 800659c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c8:	d10f      	bne.n	80065ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d007      	beq.n	8006608 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006610:	d94b      	bls.n	80066aa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HAL_SPI_Transmit+0xfa>
 800661a:	8afb      	ldrh	r3, [r7, #22]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d13e      	bne.n	800669e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006644:	e02b      	b.n	800669e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b02      	cmp	r3, #2
 8006652:	d112      	bne.n	800667a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	881a      	ldrh	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	1c9a      	adds	r2, r3, #2
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006678:	e011      	b.n	800669e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800667a:	f7fb f951 	bl	8001920 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d803      	bhi.n	8006692 <HAL_SPI_Transmit+0x16c>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d102      	bne.n	8006698 <HAL_SPI_Transmit+0x172>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800669c:	e0a4      	b.n	80067e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1ce      	bne.n	8006646 <HAL_SPI_Transmit+0x120>
 80066a8:	e07c      	b.n	80067a4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <HAL_SPI_Transmit+0x192>
 80066b2:	8afb      	ldrh	r3, [r7, #22]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d170      	bne.n	800679a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d912      	bls.n	80066e8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	881a      	ldrh	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	1c9a      	adds	r2, r3, #2
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b02      	subs	r3, #2
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066e6:	e058      	b.n	800679a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800670e:	e044      	b.n	800679a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d12b      	bne.n	8006776 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	d912      	bls.n	800674e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	881a      	ldrh	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	1c9a      	adds	r2, r3, #2
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b02      	subs	r3, #2
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800674c:	e025      	b.n	800679a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	330c      	adds	r3, #12
 8006758:	7812      	ldrb	r2, [r2, #0]
 800675a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006774:	e011      	b.n	800679a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006776:	f7fb f8d3 	bl	8001920 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d803      	bhi.n	800678e <HAL_SPI_Transmit+0x268>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678c:	d102      	bne.n	8006794 <HAL_SPI_Transmit+0x26e>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d102      	bne.n	800679a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006798:	e026      	b.n	80067e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1b5      	bne.n	8006710 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fce3 	bl	8007174 <SPI_EndRxTxTransaction>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067c2:	2300      	movs	r3, #0
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e000      	b.n	80067e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80067e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b088      	sub	sp, #32
 8006806:	af02      	add	r7, sp, #8
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	4613      	mov	r3, r2
 8006810:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800681e:	d112      	bne.n	8006846 <HAL_SPI_Receive+0x44>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10e      	bne.n	8006846 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2204      	movs	r2, #4
 800682c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006830:	88fa      	ldrh	r2, [r7, #6]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	4613      	mov	r3, r2
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f910 	bl	8006a62 <HAL_SPI_TransmitReceive>
 8006842:	4603      	mov	r3, r0
 8006844:	e109      	b.n	8006a5a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_SPI_Receive+0x52>
 8006850:	2302      	movs	r3, #2
 8006852:	e102      	b.n	8006a5a <HAL_SPI_Receive+0x258>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800685c:	f7fb f860 	bl	8001920 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b01      	cmp	r3, #1
 800686c:	d002      	beq.n	8006874 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800686e:	2302      	movs	r3, #2
 8006870:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006872:	e0e9      	b.n	8006a48 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_SPI_Receive+0x7e>
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d102      	bne.n	8006886 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006884:	e0e0      	b.n	8006a48 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2204      	movs	r2, #4
 800688a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	88fa      	ldrh	r2, [r7, #6]
 800689e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	88fa      	ldrh	r2, [r7, #6]
 80068a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068d0:	d908      	bls.n	80068e4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	e007      	b.n	80068f4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068fc:	d10f      	bne.n	800691e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800690c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800691c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006928:	2b40      	cmp	r3, #64	; 0x40
 800692a:	d007      	beq.n	800693c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006944:	d867      	bhi.n	8006a16 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006946:	e030      	b.n	80069aa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b01      	cmp	r3, #1
 8006954:	d117      	bne.n	8006986 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f103 020c 	add.w	r2, r3, #12
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	7812      	ldrb	r2, [r2, #0]
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006984:	e011      	b.n	80069aa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006986:	f7fa ffcb 	bl	8001920 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d803      	bhi.n	800699e <HAL_SPI_Receive+0x19c>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d102      	bne.n	80069a4 <HAL_SPI_Receive+0x1a2>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80069a8:	e04e      	b.n	8006a48 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1c8      	bne.n	8006948 <HAL_SPI_Receive+0x146>
 80069b6:	e034      	b.n	8006a22 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d115      	bne.n	80069f2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	b292      	uxth	r2, r2
 80069d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d8:	1c9a      	adds	r2, r3, #2
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80069f0:	e011      	b.n	8006a16 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069f2:	f7fa ff95 	bl	8001920 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d803      	bhi.n	8006a0a <HAL_SPI_Receive+0x208>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d102      	bne.n	8006a10 <HAL_SPI_Receive+0x20e>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a14:	e018      	b.n	8006a48 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1ca      	bne.n	80069b8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fb4c 	bl	80070c4 <SPI_EndRxTransaction>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	75fb      	strb	r3, [r7, #23]
 8006a44:	e000      	b.n	8006a48 <HAL_SPI_Receive+0x246>
  }

error :
 8006a46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b08a      	sub	sp, #40	; 0x28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
 8006a6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a70:	2301      	movs	r3, #1
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_SPI_TransmitReceive+0x26>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e1fb      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x41e>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a90:	f7fa ff46 	bl	8001920 <HAL_GetTick>
 8006a94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006aa4:	887b      	ldrh	r3, [r7, #2]
 8006aa6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006aa8:	887b      	ldrh	r3, [r7, #2]
 8006aaa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aac:	7efb      	ldrb	r3, [r7, #27]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d00e      	beq.n	8006ad0 <HAL_SPI_TransmitReceive+0x6e>
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ab8:	d106      	bne.n	8006ac8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d102      	bne.n	8006ac8 <HAL_SPI_TransmitReceive+0x66>
 8006ac2:	7efb      	ldrb	r3, [r7, #27]
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d003      	beq.n	8006ad0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ace:	e1cd      	b.n	8006e6c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <HAL_SPI_TransmitReceive+0x80>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <HAL_SPI_TransmitReceive+0x80>
 8006adc:	887b      	ldrh	r3, [r7, #2]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ae8:	e1c0      	b.n	8006e6c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d003      	beq.n	8006afe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2205      	movs	r2, #5
 8006afa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	887a      	ldrh	r2, [r7, #2]
 8006b0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	887a      	ldrh	r2, [r7, #2]
 8006b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	887a      	ldrh	r2, [r7, #2]
 8006b24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	887a      	ldrh	r2, [r7, #2]
 8006b2a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b40:	d802      	bhi.n	8006b48 <HAL_SPI_TransmitReceive+0xe6>
 8006b42:	8a3b      	ldrh	r3, [r7, #16]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d908      	bls.n	8006b5a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b56:	605a      	str	r2, [r3, #4]
 8006b58:	e007      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b68:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b74:	2b40      	cmp	r3, #64	; 0x40
 8006b76:	d007      	beq.n	8006b88 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b90:	d97c      	bls.n	8006c8c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_SPI_TransmitReceive+0x13e>
 8006b9a:	8a7b      	ldrh	r3, [r7, #18]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d169      	bne.n	8006c74 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	881a      	ldrh	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	1c9a      	adds	r2, r3, #2
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bc4:	e056      	b.n	8006c74 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d11b      	bne.n	8006c0c <HAL_SPI_TransmitReceive+0x1aa>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d016      	beq.n	8006c0c <HAL_SPI_TransmitReceive+0x1aa>
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d113      	bne.n	8006c0c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be8:	881a      	ldrh	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	1c9a      	adds	r2, r3, #2
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d11c      	bne.n	8006c54 <HAL_SPI_TransmitReceive+0x1f2>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d016      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	b292      	uxth	r2, r2
 8006c32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	1c9a      	adds	r2, r3, #2
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c50:	2301      	movs	r3, #1
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c54:	f7fa fe64 	bl	8001920 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d807      	bhi.n	8006c74 <HAL_SPI_TransmitReceive+0x212>
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6a:	d003      	beq.n	8006c74 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006c72:	e0fb      	b.n	8006e6c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1a3      	bne.n	8006bc6 <HAL_SPI_TransmitReceive+0x164>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d19d      	bne.n	8006bc6 <HAL_SPI_TransmitReceive+0x164>
 8006c8a:	e0df      	b.n	8006e4c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_SPI_TransmitReceive+0x23a>
 8006c94:	8a7b      	ldrh	r3, [r7, #18]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	f040 80cb 	bne.w	8006e32 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d912      	bls.n	8006ccc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	881a      	ldrh	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	1c9a      	adds	r2, r3, #2
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b02      	subs	r3, #2
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cca:	e0b2      	b.n	8006e32 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	7812      	ldrb	r2, [r2, #0]
 8006cd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cf2:	e09e      	b.n	8006e32 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d134      	bne.n	8006d6c <HAL_SPI_TransmitReceive+0x30a>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d02f      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0x30a>
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d12c      	bne.n	8006d6c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d912      	bls.n	8006d42 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	881a      	ldrh	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2c:	1c9a      	adds	r2, r3, #2
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b02      	subs	r3, #2
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d40:	e012      	b.n	8006d68 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	7812      	ldrb	r2, [r2, #0]
 8006d4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d148      	bne.n	8006e0c <HAL_SPI_TransmitReceive+0x3aa>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d042      	beq.n	8006e0c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d923      	bls.n	8006dda <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	b292      	uxth	r2, r2
 8006d9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da4:	1c9a      	adds	r2, r3, #2
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b02      	subs	r3, #2
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d81f      	bhi.n	8006e08 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dd6:	605a      	str	r2, [r3, #4]
 8006dd8:	e016      	b.n	8006e08 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f103 020c 	add.w	r2, r3, #12
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	7812      	ldrb	r2, [r2, #0]
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e0c:	f7fa fd88 	bl	8001920 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d803      	bhi.n	8006e24 <HAL_SPI_TransmitReceive+0x3c2>
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d102      	bne.n	8006e2a <HAL_SPI_TransmitReceive+0x3c8>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006e30:	e01c      	b.n	8006e6c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f47f af5b 	bne.w	8006cf4 <HAL_SPI_TransmitReceive+0x292>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f47f af54 	bne.w	8006cf4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f98f 	bl	8007174 <SPI_EndRxTxTransaction>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d006      	beq.n	8006e6a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2220      	movs	r2, #32
 8006e66:	661a      	str	r2, [r3, #96]	; 0x60
 8006e68:	e000      	b.n	8006e6c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006e6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3728      	adds	r7, #40	; 0x28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	4613      	mov	r3, r2
 8006e96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e98:	f7fa fd42 	bl	8001920 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	1a9b      	subs	r3, r3, r2
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ea8:	f7fa fd3a 	bl	8001920 <HAL_GetTick>
 8006eac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006eae:	4b39      	ldr	r3, [pc, #228]	; (8006f94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	015b      	lsls	r3, r3, #5
 8006eb4:	0d1b      	lsrs	r3, r3, #20
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	fb02 f303 	mul.w	r3, r2, r3
 8006ebc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ebe:	e054      	b.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d050      	beq.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ec8:	f7fa fd2a 	bl	8001920 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d902      	bls.n	8006ede <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d13d      	bne.n	8006f5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ef6:	d111      	bne.n	8006f1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f00:	d004      	beq.n	8006f0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0a:	d107      	bne.n	8006f1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f24:	d10f      	bne.n	8006f46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e017      	b.n	8006f8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4013      	ands	r3, r2
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	bf0c      	ite	eq
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	2300      	movne	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d19b      	bne.n	8006ec0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3720      	adds	r7, #32
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000170 	.word	0x20000170

08006f98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	; 0x28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006faa:	f7fa fcb9 	bl	8001920 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006fba:	f7fa fcb1 	bl	8001920 <HAL_GetTick>
 8006fbe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fc8:	4b3d      	ldr	r3, [pc, #244]	; (80070c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	00da      	lsls	r2, r3, #3
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	0d1b      	lsrs	r3, r3, #20
 8006fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fda:	fb02 f303 	mul.w	r3, r2, r3
 8006fde:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fe0:	e060      	b.n	80070a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006fe8:	d107      	bne.n	8006ffa <SPI_WaitFifoStateUntilTimeout+0x62>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d104      	bne.n	8006ffa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007000:	d050      	beq.n	80070a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007002:	f7fa fc8d 	bl	8001920 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800700e:	429a      	cmp	r2, r3
 8007010:	d902      	bls.n	8007018 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	d13d      	bne.n	8007094 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007026:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007030:	d111      	bne.n	8007056 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800703a:	d004      	beq.n	8007046 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007044:	d107      	bne.n	8007056 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007054:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800705e:	d10f      	bne.n	8007080 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800707e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e010      	b.n	80070b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4013      	ands	r3, r2
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d196      	bne.n	8006fe2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3728      	adds	r7, #40	; 0x28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20000170 	.word	0x20000170

080070c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070d8:	d111      	bne.n	80070fe <SPI_EndRxTransaction+0x3a>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e2:	d004      	beq.n	80070ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ec:	d107      	bne.n	80070fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2200      	movs	r2, #0
 8007106:	2180      	movs	r1, #128	; 0x80
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f7ff febd 	bl	8006e88 <SPI_WaitFlagStateUntilTimeout>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007118:	f043 0220 	orr.w	r2, r3, #32
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e023      	b.n	800716c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800712c:	d11d      	bne.n	800716a <SPI_EndRxTransaction+0xa6>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007136:	d004      	beq.n	8007142 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007140:	d113      	bne.n	800716a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f7ff ff22 	bl	8006f98 <SPI_WaitFifoStateUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d007      	beq.n	800716a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715e:	f043 0220 	orr.w	r2, r3, #32
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e000      	b.n	800716c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af02      	add	r7, sp, #8
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f7ff ff03 	bl	8006f98 <SPI_WaitFifoStateUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719c:	f043 0220 	orr.w	r2, r3, #32
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e027      	b.n	80071f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2200      	movs	r2, #0
 80071b0:	2180      	movs	r1, #128	; 0x80
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7ff fe68 	bl	8006e88 <SPI_WaitFlagStateUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c2:	f043 0220 	orr.w	r2, r3, #32
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e014      	b.n	80071f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff fedc 	bl	8006f98 <SPI_WaitFifoStateUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ea:	f043 0220 	orr.w	r2, r3, #32
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e000      	b.n	80071f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e049      	b.n	80072a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fa fa52 	bl	80016d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3304      	adds	r3, #4
 800723c:	4619      	mov	r1, r3
 800723e:	4610      	mov	r0, r2
 8007240:	f000 f9ee 	bl	8007620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d001      	beq.n	80072c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e04f      	b.n	8007368 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0201 	orr.w	r2, r2, #1
 80072de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a23      	ldr	r2, [pc, #140]	; (8007374 <HAL_TIM_Base_Start_IT+0xc4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d01d      	beq.n	8007326 <HAL_TIM_Base_Start_IT+0x76>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f2:	d018      	beq.n	8007326 <HAL_TIM_Base_Start_IT+0x76>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a1f      	ldr	r2, [pc, #124]	; (8007378 <HAL_TIM_Base_Start_IT+0xc8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d013      	beq.n	8007326 <HAL_TIM_Base_Start_IT+0x76>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1e      	ldr	r2, [pc, #120]	; (800737c <HAL_TIM_Base_Start_IT+0xcc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00e      	beq.n	8007326 <HAL_TIM_Base_Start_IT+0x76>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1c      	ldr	r2, [pc, #112]	; (8007380 <HAL_TIM_Base_Start_IT+0xd0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d009      	beq.n	8007326 <HAL_TIM_Base_Start_IT+0x76>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1b      	ldr	r2, [pc, #108]	; (8007384 <HAL_TIM_Base_Start_IT+0xd4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d004      	beq.n	8007326 <HAL_TIM_Base_Start_IT+0x76>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a19      	ldr	r2, [pc, #100]	; (8007388 <HAL_TIM_Base_Start_IT+0xd8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d115      	bne.n	8007352 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	4b17      	ldr	r3, [pc, #92]	; (800738c <HAL_TIM_Base_Start_IT+0xdc>)
 800732e:	4013      	ands	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b06      	cmp	r3, #6
 8007336:	d015      	beq.n	8007364 <HAL_TIM_Base_Start_IT+0xb4>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800733e:	d011      	beq.n	8007364 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007350:	e008      	b.n	8007364 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f042 0201 	orr.w	r2, r2, #1
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	e000      	b.n	8007366 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007364:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	40012c00 	.word	0x40012c00
 8007378:	40000400 	.word	0x40000400
 800737c:	40000800 	.word	0x40000800
 8007380:	40000c00 	.word	0x40000c00
 8007384:	40013400 	.word	0x40013400
 8007388:	40014000 	.word	0x40014000
 800738c:	00010007 	.word	0x00010007

08007390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d122      	bne.n	80073ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d11b      	bne.n	80073ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f06f 0202 	mvn.w	r2, #2
 80073bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f905 	bl	80075e2 <HAL_TIM_IC_CaptureCallback>
 80073d8:	e005      	b.n	80073e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f8f7 	bl	80075ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f908 	bl	80075f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d122      	bne.n	8007440 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b04      	cmp	r3, #4
 8007406:	d11b      	bne.n	8007440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f06f 0204 	mvn.w	r2, #4
 8007410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2202      	movs	r2, #2
 8007416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f8db 	bl	80075e2 <HAL_TIM_IC_CaptureCallback>
 800742c:	e005      	b.n	800743a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f8cd 	bl	80075ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f8de 	bl	80075f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b08      	cmp	r3, #8
 800744c:	d122      	bne.n	8007494 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b08      	cmp	r3, #8
 800745a:	d11b      	bne.n	8007494 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0208 	mvn.w	r2, #8
 8007464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2204      	movs	r2, #4
 800746a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f8b1 	bl	80075e2 <HAL_TIM_IC_CaptureCallback>
 8007480:	e005      	b.n	800748e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8a3 	bl	80075ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f8b4 	bl	80075f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0310 	and.w	r3, r3, #16
 800749e:	2b10      	cmp	r3, #16
 80074a0:	d122      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	2b10      	cmp	r3, #16
 80074ae:	d11b      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0210 	mvn.w	r2, #16
 80074b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2208      	movs	r2, #8
 80074be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f887 	bl	80075e2 <HAL_TIM_IC_CaptureCallback>
 80074d4:	e005      	b.n	80074e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f879 	bl	80075ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f88a 	bl	80075f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d10e      	bne.n	8007514 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b01      	cmp	r3, #1
 8007502:	d107      	bne.n	8007514 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0201 	mvn.w	r2, #1
 800750c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7f9 ff16 	bl	8001340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751e:	2b80      	cmp	r3, #128	; 0x80
 8007520:	d10e      	bne.n	8007540 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752c:	2b80      	cmp	r3, #128	; 0x80
 800752e:	d107      	bne.n	8007540 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f914 	bl	8007768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800754e:	d10e      	bne.n	800756e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755a:	2b80      	cmp	r3, #128	; 0x80
 800755c:	d107      	bne.n	800756e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f907 	bl	800777c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b40      	cmp	r3, #64	; 0x40
 800757a:	d10e      	bne.n	800759a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b40      	cmp	r3, #64	; 0x40
 8007588:	d107      	bne.n	800759a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f838 	bl	800760a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	d10e      	bne.n	80075c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b20      	cmp	r3, #32
 80075b4:	d107      	bne.n	80075c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f06f 0220 	mvn.w	r2, #32
 80075be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f8c7 	bl	8007754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
	...

08007620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a40      	ldr	r2, [pc, #256]	; (8007734 <TIM_Base_SetConfig+0x114>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d013      	beq.n	8007660 <TIM_Base_SetConfig+0x40>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763e:	d00f      	beq.n	8007660 <TIM_Base_SetConfig+0x40>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a3d      	ldr	r2, [pc, #244]	; (8007738 <TIM_Base_SetConfig+0x118>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00b      	beq.n	8007660 <TIM_Base_SetConfig+0x40>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a3c      	ldr	r2, [pc, #240]	; (800773c <TIM_Base_SetConfig+0x11c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d007      	beq.n	8007660 <TIM_Base_SetConfig+0x40>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a3b      	ldr	r2, [pc, #236]	; (8007740 <TIM_Base_SetConfig+0x120>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <TIM_Base_SetConfig+0x40>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a3a      	ldr	r2, [pc, #232]	; (8007744 <TIM_Base_SetConfig+0x124>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d108      	bne.n	8007672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a2f      	ldr	r2, [pc, #188]	; (8007734 <TIM_Base_SetConfig+0x114>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d01f      	beq.n	80076ba <TIM_Base_SetConfig+0x9a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007680:	d01b      	beq.n	80076ba <TIM_Base_SetConfig+0x9a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a2c      	ldr	r2, [pc, #176]	; (8007738 <TIM_Base_SetConfig+0x118>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d017      	beq.n	80076ba <TIM_Base_SetConfig+0x9a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a2b      	ldr	r2, [pc, #172]	; (800773c <TIM_Base_SetConfig+0x11c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <TIM_Base_SetConfig+0x9a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a2a      	ldr	r2, [pc, #168]	; (8007740 <TIM_Base_SetConfig+0x120>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00f      	beq.n	80076ba <TIM_Base_SetConfig+0x9a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a29      	ldr	r2, [pc, #164]	; (8007744 <TIM_Base_SetConfig+0x124>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00b      	beq.n	80076ba <TIM_Base_SetConfig+0x9a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a28      	ldr	r2, [pc, #160]	; (8007748 <TIM_Base_SetConfig+0x128>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d007      	beq.n	80076ba <TIM_Base_SetConfig+0x9a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a27      	ldr	r2, [pc, #156]	; (800774c <TIM_Base_SetConfig+0x12c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d003      	beq.n	80076ba <TIM_Base_SetConfig+0x9a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a26      	ldr	r2, [pc, #152]	; (8007750 <TIM_Base_SetConfig+0x130>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d108      	bne.n	80076cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a10      	ldr	r2, [pc, #64]	; (8007734 <TIM_Base_SetConfig+0x114>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00f      	beq.n	8007718 <TIM_Base_SetConfig+0xf8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a12      	ldr	r2, [pc, #72]	; (8007744 <TIM_Base_SetConfig+0x124>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00b      	beq.n	8007718 <TIM_Base_SetConfig+0xf8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a11      	ldr	r2, [pc, #68]	; (8007748 <TIM_Base_SetConfig+0x128>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d007      	beq.n	8007718 <TIM_Base_SetConfig+0xf8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a10      	ldr	r2, [pc, #64]	; (800774c <TIM_Base_SetConfig+0x12c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_Base_SetConfig+0xf8>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a0f      	ldr	r2, [pc, #60]	; (8007750 <TIM_Base_SetConfig+0x130>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d103      	bne.n	8007720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	615a      	str	r2, [r3, #20]
}
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	40012c00 	.word	0x40012c00
 8007738:	40000400 	.word	0x40000400
 800773c:	40000800 	.word	0x40000800
 8007740:	40000c00 	.word	0x40000c00
 8007744:	40013400 	.word	0x40013400
 8007748:	40014000 	.word	0x40014000
 800774c:	40014400 	.word	0x40014400
 8007750:	40014800 	.word	0x40014800

08007754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <__NVIC_SetPriority>:
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	6039      	str	r1, [r7, #0]
 800779a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800779c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	db0a      	blt.n	80077ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	490c      	ldr	r1, [pc, #48]	; (80077dc <__NVIC_SetPriority+0x4c>)
 80077aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ae:	0112      	lsls	r2, r2, #4
 80077b0:	b2d2      	uxtb	r2, r2
 80077b2:	440b      	add	r3, r1
 80077b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80077b8:	e00a      	b.n	80077d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	4908      	ldr	r1, [pc, #32]	; (80077e0 <__NVIC_SetPriority+0x50>)
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	3b04      	subs	r3, #4
 80077c8:	0112      	lsls	r2, r2, #4
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	440b      	add	r3, r1
 80077ce:	761a      	strb	r2, [r3, #24]
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	e000e100 	.word	0xe000e100
 80077e0:	e000ed00 	.word	0xe000ed00

080077e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80077e8:	4b05      	ldr	r3, [pc, #20]	; (8007800 <SysTick_Handler+0x1c>)
 80077ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80077ec:	f002 f936 	bl	8009a5c <xTaskGetSchedulerState>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d001      	beq.n	80077fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80077f6:	f000 fd97 	bl	8008328 <xPortSysTickHandler>
  }
}
 80077fa:	bf00      	nop
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	e000e010 	.word	0xe000e010

08007804 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007808:	2100      	movs	r1, #0
 800780a:	f06f 0004 	mvn.w	r0, #4
 800780e:	f7ff ffbf 	bl	8007790 <__NVIC_SetPriority>
#endif
}
 8007812:	bf00      	nop
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800781e:	f3ef 8305 	mrs	r3, IPSR
 8007822:	603b      	str	r3, [r7, #0]
  return(result);
 8007824:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800782a:	f06f 0305 	mvn.w	r3, #5
 800782e:	607b      	str	r3, [r7, #4]
 8007830:	e00c      	b.n	800784c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007832:	4b0a      	ldr	r3, [pc, #40]	; (800785c <osKernelInitialize+0x44>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d105      	bne.n	8007846 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800783a:	4b08      	ldr	r3, [pc, #32]	; (800785c <osKernelInitialize+0x44>)
 800783c:	2201      	movs	r2, #1
 800783e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007840:	2300      	movs	r3, #0
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	e002      	b.n	800784c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007846:	f04f 33ff 	mov.w	r3, #4294967295
 800784a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800784c:	687b      	ldr	r3, [r7, #4]
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	200003d8 	.word	0x200003d8

08007860 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007866:	f3ef 8305 	mrs	r3, IPSR
 800786a:	603b      	str	r3, [r7, #0]
  return(result);
 800786c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007872:	f06f 0305 	mvn.w	r3, #5
 8007876:	607b      	str	r3, [r7, #4]
 8007878:	e010      	b.n	800789c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800787a:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <osKernelStart+0x48>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d109      	bne.n	8007896 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007882:	f7ff ffbf 	bl	8007804 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <osKernelStart+0x48>)
 8007888:	2202      	movs	r2, #2
 800788a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800788c:	f001 fc9e 	bl	80091cc <vTaskStartScheduler>
      stat = osOK;
 8007890:	2300      	movs	r3, #0
 8007892:	607b      	str	r3, [r7, #4]
 8007894:	e002      	b.n	800789c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007896:	f04f 33ff 	mov.w	r3, #4294967295
 800789a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800789c:	687b      	ldr	r3, [r7, #4]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	200003d8 	.word	0x200003d8

080078ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08e      	sub	sp, #56	; 0x38
 80078b0:	af04      	add	r7, sp, #16
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078bc:	f3ef 8305 	mrs	r3, IPSR
 80078c0:	617b      	str	r3, [r7, #20]
  return(result);
 80078c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d17e      	bne.n	80079c6 <osThreadNew+0x11a>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d07b      	beq.n	80079c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80078ce:	2380      	movs	r3, #128	; 0x80
 80078d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80078d2:	2318      	movs	r3, #24
 80078d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80078da:	f04f 33ff 	mov.w	r3, #4294967295
 80078de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d045      	beq.n	8007972 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <osThreadNew+0x48>
        name = attr->name;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d008      	beq.n	800791a <osThreadNew+0x6e>
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b38      	cmp	r3, #56	; 0x38
 800790c:	d805      	bhi.n	800791a <osThreadNew+0x6e>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <osThreadNew+0x72>
        return (NULL);
 800791a:	2300      	movs	r3, #0
 800791c:	e054      	b.n	80079c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	089b      	lsrs	r3, r3, #2
 800792c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00e      	beq.n	8007954 <osThreadNew+0xa8>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	2b5b      	cmp	r3, #91	; 0x5b
 800793c:	d90a      	bls.n	8007954 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007942:	2b00      	cmp	r3, #0
 8007944:	d006      	beq.n	8007954 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <osThreadNew+0xa8>
        mem = 1;
 800794e:	2301      	movs	r3, #1
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	e010      	b.n	8007976 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10c      	bne.n	8007976 <osThreadNew+0xca>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d108      	bne.n	8007976 <osThreadNew+0xca>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d104      	bne.n	8007976 <osThreadNew+0xca>
          mem = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	61bb      	str	r3, [r7, #24]
 8007970:	e001      	b.n	8007976 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007972:	2300      	movs	r3, #0
 8007974:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d110      	bne.n	800799e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007984:	9202      	str	r2, [sp, #8]
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6a3a      	ldr	r2, [r7, #32]
 8007990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f001 fa44 	bl	8008e20 <xTaskCreateStatic>
 8007998:	4603      	mov	r3, r0
 800799a:	613b      	str	r3, [r7, #16]
 800799c:	e013      	b.n	80079c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d110      	bne.n	80079c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	f107 0310 	add.w	r3, r7, #16
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f001 fa8f 	bl	8008eda <xTaskCreate>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d001      	beq.n	80079c6 <osThreadNew+0x11a>
            hTask = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80079c6:	693b      	ldr	r3, [r7, #16]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3728      	adds	r7, #40	; 0x28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079d8:	f3ef 8305 	mrs	r3, IPSR
 80079dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80079de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <osDelay+0x1c>
    stat = osErrorISR;
 80079e4:	f06f 0305 	mvn.w	r3, #5
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	e007      	b.n	80079fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 fbb4 	bl	8009164 <vTaskDelay>
    }
  }

  return (stat);
 80079fc:	68fb      	ldr	r3, [r7, #12]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4a07      	ldr	r2, [pc, #28]	; (8007a34 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4a06      	ldr	r2, [pc, #24]	; (8007a38 <vApplicationGetIdleTaskMemory+0x30>)
 8007a1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2280      	movs	r2, #128	; 0x80
 8007a24:	601a      	str	r2, [r3, #0]
}
 8007a26:	bf00      	nop
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	200003dc 	.word	0x200003dc
 8007a38:	20000438 	.word	0x20000438

08007a3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4a07      	ldr	r2, [pc, #28]	; (8007a68 <vApplicationGetTimerTaskMemory+0x2c>)
 8007a4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	4a06      	ldr	r2, [pc, #24]	; (8007a6c <vApplicationGetTimerTaskMemory+0x30>)
 8007a52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a5a:	601a      	str	r2, [r3, #0]
}
 8007a5c:	bf00      	nop
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	20000638 	.word	0x20000638
 8007a6c:	20000694 	.word	0x20000694

08007a70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b08a      	sub	sp, #40	; 0x28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a7c:	f001 fc0c 	bl	8009298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a80:	4b5b      	ldr	r3, [pc, #364]	; (8007bf0 <pvPortMalloc+0x180>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a88:	f000 f920 	bl	8007ccc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a8c:	4b59      	ldr	r3, [pc, #356]	; (8007bf4 <pvPortMalloc+0x184>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4013      	ands	r3, r2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f040 8093 	bne.w	8007bc0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01d      	beq.n	8007adc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f003 0307 	and.w	r3, r3, #7
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d014      	beq.n	8007adc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f023 0307 	bic.w	r3, r3, #7
 8007ab8:	3308      	adds	r3, #8
 8007aba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f003 0307 	and.w	r3, r3, #7
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ad8:	bf00      	nop
 8007ada:	e7fe      	b.n	8007ada <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d06e      	beq.n	8007bc0 <pvPortMalloc+0x150>
 8007ae2:	4b45      	ldr	r3, [pc, #276]	; (8007bf8 <pvPortMalloc+0x188>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d869      	bhi.n	8007bc0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aec:	4b43      	ldr	r3, [pc, #268]	; (8007bfc <pvPortMalloc+0x18c>)
 8007aee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007af0:	4b42      	ldr	r3, [pc, #264]	; (8007bfc <pvPortMalloc+0x18c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007af6:	e004      	b.n	8007b02 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d903      	bls.n	8007b14 <pvPortMalloc+0xa4>
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f1      	bne.n	8007af8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b14:	4b36      	ldr	r3, [pc, #216]	; (8007bf0 <pvPortMalloc+0x180>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d050      	beq.n	8007bc0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2208      	movs	r2, #8
 8007b24:	4413      	add	r3, r2
 8007b26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	1ad2      	subs	r2, r2, r3
 8007b38:	2308      	movs	r3, #8
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d91f      	bls.n	8007b80 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4413      	add	r3, r2
 8007b46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <pvPortMalloc+0xf8>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	613b      	str	r3, [r7, #16]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b7a:	69b8      	ldr	r0, [r7, #24]
 8007b7c:	f000 f908 	bl	8007d90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b80:	4b1d      	ldr	r3, [pc, #116]	; (8007bf8 <pvPortMalloc+0x188>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	4a1b      	ldr	r2, [pc, #108]	; (8007bf8 <pvPortMalloc+0x188>)
 8007b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b8e:	4b1a      	ldr	r3, [pc, #104]	; (8007bf8 <pvPortMalloc+0x188>)
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4b1b      	ldr	r3, [pc, #108]	; (8007c00 <pvPortMalloc+0x190>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d203      	bcs.n	8007ba2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b9a:	4b17      	ldr	r3, [pc, #92]	; (8007bf8 <pvPortMalloc+0x188>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <pvPortMalloc+0x190>)
 8007ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	4b13      	ldr	r3, [pc, #76]	; (8007bf4 <pvPortMalloc+0x184>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bb6:	4b13      	ldr	r3, [pc, #76]	; (8007c04 <pvPortMalloc+0x194>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	4a11      	ldr	r2, [pc, #68]	; (8007c04 <pvPortMalloc+0x194>)
 8007bbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bc0:	f001 fb78 	bl	80092b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <pvPortMalloc+0x174>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	60fb      	str	r3, [r7, #12]
}
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <pvPortMalloc+0x172>
	return pvReturn;
 8007be4:	69fb      	ldr	r3, [r7, #28]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3728      	adds	r7, #40	; 0x28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20001654 	.word	0x20001654
 8007bf4:	20001668 	.word	0x20001668
 8007bf8:	20001658 	.word	0x20001658
 8007bfc:	2000164c 	.word	0x2000164c
 8007c00:	2000165c 	.word	0x2000165c
 8007c04:	20001660 	.word	0x20001660

08007c08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d04d      	beq.n	8007cb6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c1a:	2308      	movs	r3, #8
 8007c1c:	425b      	negs	r3, r3
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	4413      	add	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <vPortFree+0xb8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4013      	ands	r3, r2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <vPortFree+0x44>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	60fb      	str	r3, [r7, #12]
}
 8007c48:	bf00      	nop
 8007c4a:	e7fe      	b.n	8007c4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <vPortFree+0x62>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	60bb      	str	r3, [r7, #8]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	4b14      	ldr	r3, [pc, #80]	; (8007cc0 <vPortFree+0xb8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4013      	ands	r3, r2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01e      	beq.n	8007cb6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d11a      	bne.n	8007cb6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <vPortFree+0xb8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	43db      	mvns	r3, r3
 8007c8a:	401a      	ands	r2, r3
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c90:	f001 fb02 	bl	8009298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <vPortFree+0xbc>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	4a09      	ldr	r2, [pc, #36]	; (8007cc4 <vPortFree+0xbc>)
 8007ca0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ca2:	6938      	ldr	r0, [r7, #16]
 8007ca4:	f000 f874 	bl	8007d90 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ca8:	4b07      	ldr	r3, [pc, #28]	; (8007cc8 <vPortFree+0xc0>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3301      	adds	r3, #1
 8007cae:	4a06      	ldr	r2, [pc, #24]	; (8007cc8 <vPortFree+0xc0>)
 8007cb0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cb2:	f001 faff 	bl	80092b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cb6:	bf00      	nop
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20001668 	.word	0x20001668
 8007cc4:	20001658 	.word	0x20001658
 8007cc8:	20001664 	.word	0x20001664

08007ccc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cd2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007cd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cd8:	4b27      	ldr	r3, [pc, #156]	; (8007d78 <prvHeapInit+0xac>)
 8007cda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00c      	beq.n	8007d00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3307      	adds	r3, #7
 8007cea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0307 	bic.w	r3, r3, #7
 8007cf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	4a1f      	ldr	r2, [pc, #124]	; (8007d78 <prvHeapInit+0xac>)
 8007cfc:	4413      	add	r3, r2
 8007cfe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d04:	4a1d      	ldr	r2, [pc, #116]	; (8007d7c <prvHeapInit+0xb0>)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d0a:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <prvHeapInit+0xb0>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	4413      	add	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d18:	2208      	movs	r2, #8
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	1a9b      	subs	r3, r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0307 	bic.w	r3, r3, #7
 8007d26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4a15      	ldr	r2, [pc, #84]	; (8007d80 <prvHeapInit+0xb4>)
 8007d2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d2e:	4b14      	ldr	r3, [pc, #80]	; (8007d80 <prvHeapInit+0xb4>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2200      	movs	r2, #0
 8007d34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d36:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <prvHeapInit+0xb4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	1ad2      	subs	r2, r2, r3
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d4c:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <prvHeapInit+0xb4>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	4a0a      	ldr	r2, [pc, #40]	; (8007d84 <prvHeapInit+0xb8>)
 8007d5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	4a09      	ldr	r2, [pc, #36]	; (8007d88 <prvHeapInit+0xbc>)
 8007d62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d64:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <prvHeapInit+0xc0>)
 8007d66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d6a:	601a      	str	r2, [r3, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	20000a94 	.word	0x20000a94
 8007d7c:	2000164c 	.word	0x2000164c
 8007d80:	20001654 	.word	0x20001654
 8007d84:	2000165c 	.word	0x2000165c
 8007d88:	20001658 	.word	0x20001658
 8007d8c:	20001668 	.word	0x20001668

08007d90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d98:	4b28      	ldr	r3, [pc, #160]	; (8007e3c <prvInsertBlockIntoFreeList+0xac>)
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	e002      	b.n	8007da4 <prvInsertBlockIntoFreeList+0x14>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d8f7      	bhi.n	8007d9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	4413      	add	r3, r2
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d108      	bne.n	8007dd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	441a      	add	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	441a      	add	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d118      	bne.n	8007e18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <prvInsertBlockIntoFreeList+0xb0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d00d      	beq.n	8007e0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	441a      	add	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	e008      	b.n	8007e20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e0e:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <prvInsertBlockIntoFreeList+0xb0>)
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	e003      	b.n	8007e20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d002      	beq.n	8007e2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	2000164c 	.word	0x2000164c
 8007e40:	20001654 	.word	0x20001654

08007e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f103 0208 	add.w	r2, r3, #8
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f103 0208 	add.w	r2, r3, #8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f103 0208 	add.w	r2, r3, #8
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	601a      	str	r2, [r3, #0]
}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d103      	bne.n	8007f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e00c      	b.n	8007f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3308      	adds	r3, #8
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	e002      	b.n	8007f14 <vListInsert+0x2e>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d2f6      	bcs.n	8007f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	601a      	str	r2, [r3, #0]
}
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6892      	ldr	r2, [r2, #8]
 8007f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6852      	ldr	r2, [r2, #4]
 8007f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d103      	bne.n	8007f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	1e5a      	subs	r2, r3, #1
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3b04      	subs	r3, #4
 8007fbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3b04      	subs	r3, #4
 8007fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f023 0201 	bic.w	r2, r3, #1
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3b04      	subs	r3, #4
 8007fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fdc:	4a0c      	ldr	r2, [pc, #48]	; (8008010 <pxPortInitialiseStack+0x64>)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3b14      	subs	r3, #20
 8007fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3b04      	subs	r3, #4
 8007ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f06f 0202 	mvn.w	r2, #2
 8007ffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3b20      	subs	r3, #32
 8008000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008002:	68fb      	ldr	r3, [r7, #12]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	08008015 	.word	0x08008015

08008014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800801e:	4b12      	ldr	r3, [pc, #72]	; (8008068 <prvTaskExitError+0x54>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008026:	d00a      	beq.n	800803e <prvTaskExitError+0x2a>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	60fb      	str	r3, [r7, #12]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <prvTaskExitError+0x28>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	60bb      	str	r3, [r7, #8]
}
 8008050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008052:	bf00      	nop
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0fc      	beq.n	8008054 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800805a:	bf00      	nop
 800805c:	bf00      	nop
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	2000017c 	.word	0x2000017c
 800806c:	00000000 	.word	0x00000000

08008070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <pxCurrentTCBConst2>)
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	6808      	ldr	r0, [r1, #0]
 8008076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807a:	f380 8809 	msr	PSP, r0
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f04f 0000 	mov.w	r0, #0
 8008086:	f380 8811 	msr	BASEPRI, r0
 800808a:	4770      	bx	lr
 800808c:	f3af 8000 	nop.w

08008090 <pxCurrentTCBConst2>:
 8008090:	20001674 	.word	0x20001674
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop

08008098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008098:	4808      	ldr	r0, [pc, #32]	; (80080bc <prvPortStartFirstTask+0x24>)
 800809a:	6800      	ldr	r0, [r0, #0]
 800809c:	6800      	ldr	r0, [r0, #0]
 800809e:	f380 8808 	msr	MSP, r0
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f380 8814 	msr	CONTROL, r0
 80080aa:	b662      	cpsie	i
 80080ac:	b661      	cpsie	f
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	df00      	svc	0
 80080b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ba:	bf00      	nop
 80080bc:	e000ed08 	.word	0xe000ed08

080080c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080c6:	4b46      	ldr	r3, [pc, #280]	; (80081e0 <xPortStartScheduler+0x120>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a46      	ldr	r2, [pc, #280]	; (80081e4 <xPortStartScheduler+0x124>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d10a      	bne.n	80080e6 <xPortStartScheduler+0x26>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	613b      	str	r3, [r7, #16]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080e6:	4b3e      	ldr	r3, [pc, #248]	; (80081e0 <xPortStartScheduler+0x120>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a3f      	ldr	r2, [pc, #252]	; (80081e8 <xPortStartScheduler+0x128>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d10a      	bne.n	8008106 <xPortStartScheduler+0x46>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	60fb      	str	r3, [r7, #12]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008106:	4b39      	ldr	r3, [pc, #228]	; (80081ec <xPortStartScheduler+0x12c>)
 8008108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b2db      	uxtb	r3, r3
 8008110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	22ff      	movs	r2, #255	; 0xff
 8008116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008128:	b2da      	uxtb	r2, r3
 800812a:	4b31      	ldr	r3, [pc, #196]	; (80081f0 <xPortStartScheduler+0x130>)
 800812c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800812e:	4b31      	ldr	r3, [pc, #196]	; (80081f4 <xPortStartScheduler+0x134>)
 8008130:	2207      	movs	r2, #7
 8008132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008134:	e009      	b.n	800814a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008136:	4b2f      	ldr	r3, [pc, #188]	; (80081f4 <xPortStartScheduler+0x134>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3b01      	subs	r3, #1
 800813c:	4a2d      	ldr	r2, [pc, #180]	; (80081f4 <xPortStartScheduler+0x134>)
 800813e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	b2db      	uxtb	r3, r3
 800814e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008152:	2b80      	cmp	r3, #128	; 0x80
 8008154:	d0ef      	beq.n	8008136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008156:	4b27      	ldr	r3, [pc, #156]	; (80081f4 <xPortStartScheduler+0x134>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f1c3 0307 	rsb	r3, r3, #7
 800815e:	2b04      	cmp	r3, #4
 8008160:	d00a      	beq.n	8008178 <xPortStartScheduler+0xb8>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	60bb      	str	r3, [r7, #8]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008178:	4b1e      	ldr	r3, [pc, #120]	; (80081f4 <xPortStartScheduler+0x134>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	4a1d      	ldr	r2, [pc, #116]	; (80081f4 <xPortStartScheduler+0x134>)
 8008180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008182:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <xPortStartScheduler+0x134>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800818a:	4a1a      	ldr	r2, [pc, #104]	; (80081f4 <xPortStartScheduler+0x134>)
 800818c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	b2da      	uxtb	r2, r3
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008196:	4b18      	ldr	r3, [pc, #96]	; (80081f8 <xPortStartScheduler+0x138>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <xPortStartScheduler+0x138>)
 800819c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081a2:	4b15      	ldr	r3, [pc, #84]	; (80081f8 <xPortStartScheduler+0x138>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a14      	ldr	r2, [pc, #80]	; (80081f8 <xPortStartScheduler+0x138>)
 80081a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081ae:	f000 f8dd 	bl	800836c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081b2:	4b12      	ldr	r3, [pc, #72]	; (80081fc <xPortStartScheduler+0x13c>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081b8:	f000 f8fc 	bl	80083b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081bc:	4b10      	ldr	r3, [pc, #64]	; (8008200 <xPortStartScheduler+0x140>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a0f      	ldr	r2, [pc, #60]	; (8008200 <xPortStartScheduler+0x140>)
 80081c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081c8:	f7ff ff66 	bl	8008098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081cc:	f001 f9da 	bl	8009584 <vTaskSwitchContext>
	prvTaskExitError();
 80081d0:	f7ff ff20 	bl	8008014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	e000ed00 	.word	0xe000ed00
 80081e4:	410fc271 	.word	0x410fc271
 80081e8:	410fc270 	.word	0x410fc270
 80081ec:	e000e400 	.word	0xe000e400
 80081f0:	2000166c 	.word	0x2000166c
 80081f4:	20001670 	.word	0x20001670
 80081f8:	e000ed20 	.word	0xe000ed20
 80081fc:	2000017c 	.word	0x2000017c
 8008200:	e000ef34 	.word	0xe000ef34

08008204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	607b      	str	r3, [r7, #4]
}
 800821c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800821e:	4b0f      	ldr	r3, [pc, #60]	; (800825c <vPortEnterCritical+0x58>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3301      	adds	r3, #1
 8008224:	4a0d      	ldr	r2, [pc, #52]	; (800825c <vPortEnterCritical+0x58>)
 8008226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008228:	4b0c      	ldr	r3, [pc, #48]	; (800825c <vPortEnterCritical+0x58>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d10f      	bne.n	8008250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008230:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <vPortEnterCritical+0x5c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <vPortEnterCritical+0x4c>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	603b      	str	r3, [r7, #0]
}
 800824c:	bf00      	nop
 800824e:	e7fe      	b.n	800824e <vPortEnterCritical+0x4a>
	}
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	2000017c 	.word	0x2000017c
 8008260:	e000ed04 	.word	0xe000ed04

08008264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800826a:	4b12      	ldr	r3, [pc, #72]	; (80082b4 <vPortExitCritical+0x50>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <vPortExitCritical+0x24>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	607b      	str	r3, [r7, #4]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008288:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <vPortExitCritical+0x50>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3b01      	subs	r3, #1
 800828e:	4a09      	ldr	r2, [pc, #36]	; (80082b4 <vPortExitCritical+0x50>)
 8008290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008292:	4b08      	ldr	r3, [pc, #32]	; (80082b4 <vPortExitCritical+0x50>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <vPortExitCritical+0x42>
 800829a:	2300      	movs	r3, #0
 800829c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	2000017c 	.word	0x2000017c
	...

080082c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082c0:	f3ef 8009 	mrs	r0, PSP
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	4b15      	ldr	r3, [pc, #84]	; (8008320 <pxCurrentTCBConst>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	f01e 0f10 	tst.w	lr, #16
 80082d0:	bf08      	it	eq
 80082d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082da:	6010      	str	r0, [r2, #0]
 80082dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082e4:	f380 8811 	msr	BASEPRI, r0
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f001 f948 	bl	8009584 <vTaskSwitchContext>
 80082f4:	f04f 0000 	mov.w	r0, #0
 80082f8:	f380 8811 	msr	BASEPRI, r0
 80082fc:	bc09      	pop	{r0, r3}
 80082fe:	6819      	ldr	r1, [r3, #0]
 8008300:	6808      	ldr	r0, [r1, #0]
 8008302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008306:	f01e 0f10 	tst.w	lr, #16
 800830a:	bf08      	it	eq
 800830c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008310:	f380 8809 	msr	PSP, r0
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	f3af 8000 	nop.w

08008320 <pxCurrentTCBConst>:
 8008320:	20001674 	.word	0x20001674
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008324:	bf00      	nop
 8008326:	bf00      	nop

08008328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	607b      	str	r3, [r7, #4]
}
 8008340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008342:	f001 f865 	bl	8009410 <xTaskIncrementTick>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800834c:	4b06      	ldr	r3, [pc, #24]	; (8008368 <xPortSysTickHandler+0x40>)
 800834e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	2300      	movs	r3, #0
 8008356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	f383 8811 	msr	BASEPRI, r3
}
 800835e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	e000ed04 	.word	0xe000ed04

0800836c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008370:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <vPortSetupTimerInterrupt+0x34>)
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008376:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <vPortSetupTimerInterrupt+0x38>)
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800837c:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <vPortSetupTimerInterrupt+0x3c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a0a      	ldr	r2, [pc, #40]	; (80083ac <vPortSetupTimerInterrupt+0x40>)
 8008382:	fba2 2303 	umull	r2, r3, r2, r3
 8008386:	099b      	lsrs	r3, r3, #6
 8008388:	4a09      	ldr	r2, [pc, #36]	; (80083b0 <vPortSetupTimerInterrupt+0x44>)
 800838a:	3b01      	subs	r3, #1
 800838c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800838e:	4b04      	ldr	r3, [pc, #16]	; (80083a0 <vPortSetupTimerInterrupt+0x34>)
 8008390:	2207      	movs	r2, #7
 8008392:	601a      	str	r2, [r3, #0]
}
 8008394:	bf00      	nop
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	e000e010 	.word	0xe000e010
 80083a4:	e000e018 	.word	0xe000e018
 80083a8:	20000170 	.word	0x20000170
 80083ac:	10624dd3 	.word	0x10624dd3
 80083b0:	e000e014 	.word	0xe000e014

080083b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083c4 <vPortEnableVFP+0x10>
 80083b8:	6801      	ldr	r1, [r0, #0]
 80083ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083be:	6001      	str	r1, [r0, #0]
 80083c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083c2:	bf00      	nop
 80083c4:	e000ed88 	.word	0xe000ed88

080083c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083ce:	f3ef 8305 	mrs	r3, IPSR
 80083d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b0f      	cmp	r3, #15
 80083d8:	d914      	bls.n	8008404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083da:	4a17      	ldr	r2, [pc, #92]	; (8008438 <vPortValidateInterruptPriority+0x70>)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083e4:	4b15      	ldr	r3, [pc, #84]	; (800843c <vPortValidateInterruptPriority+0x74>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	7afa      	ldrb	r2, [r7, #11]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d20a      	bcs.n	8008404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	607b      	str	r3, [r7, #4]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <vPortValidateInterruptPriority+0x78>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800840c:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <vPortValidateInterruptPriority+0x7c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	429a      	cmp	r2, r3
 8008412:	d90a      	bls.n	800842a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	603b      	str	r3, [r7, #0]
}
 8008426:	bf00      	nop
 8008428:	e7fe      	b.n	8008428 <vPortValidateInterruptPriority+0x60>
	}
 800842a:	bf00      	nop
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	e000e3f0 	.word	0xe000e3f0
 800843c:	2000166c 	.word	0x2000166c
 8008440:	e000ed0c 	.word	0xe000ed0c
 8008444:	20001670 	.word	0x20001670

08008448 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <xQueueGenericReset+0x2a>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60bb      	str	r3, [r7, #8]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008472:	f7ff fec7 	bl	8008204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847e:	68f9      	ldr	r1, [r7, #12]
 8008480:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008482:	fb01 f303 	mul.w	r3, r1, r3
 8008486:	441a      	add	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a2:	3b01      	subs	r3, #1
 80084a4:	68f9      	ldr	r1, [r7, #12]
 80084a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	441a      	add	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	22ff      	movs	r2, #255	; 0xff
 80084b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	22ff      	movs	r2, #255	; 0xff
 80084be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d114      	bne.n	80084f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01a      	beq.n	8008506 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3310      	adds	r3, #16
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 f903 	bl	80096e0 <xTaskRemoveFromEventList>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d012      	beq.n	8008506 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80084e0:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <xQueueGenericReset+0xcc>)
 80084e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	e009      	b.n	8008506 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3310      	adds	r3, #16
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff fca4 	bl	8007e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3324      	adds	r3, #36	; 0x24
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff fc9f 	bl	8007e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008506:	f7ff fead 	bl	8008264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800850a:	2301      	movs	r3, #1
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	e000ed04 	.word	0xe000ed04

08008518 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08e      	sub	sp, #56	; 0x38
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <xQueueGenericCreateStatic+0x52>
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <xQueueGenericCreateStatic+0x56>
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <xQueueGenericCreateStatic+0x58>
 800856e:	2300      	movs	r3, #0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	623b      	str	r3, [r7, #32]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <xQueueGenericCreateStatic+0x7e>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <xQueueGenericCreateStatic+0x82>
 8008596:	2301      	movs	r3, #1
 8008598:	e000      	b.n	800859c <xQueueGenericCreateStatic+0x84>
 800859a:	2300      	movs	r3, #0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	61fb      	str	r3, [r7, #28]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085b6:	2350      	movs	r3, #80	; 0x50
 80085b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b50      	cmp	r3, #80	; 0x50
 80085be:	d00a      	beq.n	80085d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	61bb      	str	r3, [r7, #24]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80085d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00d      	beq.n	80085fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	4613      	mov	r3, r2
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f805 	bl	8008608 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008600:	4618      	mov	r0, r3
 8008602:	3730      	adds	r7, #48	; 0x30
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d103      	bne.n	8008624 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	e002      	b.n	800862a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008636:	2101      	movs	r1, #1
 8008638:	69b8      	ldr	r0, [r7, #24]
 800863a:	f7ff ff05 	bl	8008448 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008646:	bf00      	nop
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08e      	sub	sp, #56	; 0x38
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800865e:	2300      	movs	r3, #0
 8008660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10a      	bne.n	8008682 <xQueueGenericSend+0x32>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <xQueueGenericSend+0x40>
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <xQueueGenericSend+0x44>
 8008690:	2301      	movs	r3, #1
 8008692:	e000      	b.n	8008696 <xQueueGenericSend+0x46>
 8008694:	2300      	movs	r3, #0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <xQueueGenericSend+0x60>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d103      	bne.n	80086be <xQueueGenericSend+0x6e>
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d101      	bne.n	80086c2 <xQueueGenericSend+0x72>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <xQueueGenericSend+0x74>
 80086c2:	2300      	movs	r3, #0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <xQueueGenericSend+0x8e>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	623b      	str	r3, [r7, #32]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086de:	f001 f9bd 	bl	8009a5c <xTaskGetSchedulerState>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <xQueueGenericSend+0x9e>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <xQueueGenericSend+0xa2>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e000      	b.n	80086f4 <xQueueGenericSend+0xa4>
 80086f2:	2300      	movs	r3, #0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <xQueueGenericSend+0xbe>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	61fb      	str	r3, [r7, #28]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800870e:	f7ff fd79 	bl	8008204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	429a      	cmp	r2, r3
 800871c:	d302      	bcc.n	8008724 <xQueueGenericSend+0xd4>
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b02      	cmp	r3, #2
 8008722:	d129      	bne.n	8008778 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	68b9      	ldr	r1, [r7, #8]
 8008728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800872a:	f000 fa0b 	bl	8008b44 <prvCopyDataToQueue>
 800872e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	2b00      	cmp	r3, #0
 8008736:	d010      	beq.n	800875a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	3324      	adds	r3, #36	; 0x24
 800873c:	4618      	mov	r0, r3
 800873e:	f000 ffcf 	bl	80096e0 <xTaskRemoveFromEventList>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d013      	beq.n	8008770 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008748:	4b3f      	ldr	r3, [pc, #252]	; (8008848 <xQueueGenericSend+0x1f8>)
 800874a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	e00a      	b.n	8008770 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008760:	4b39      	ldr	r3, [pc, #228]	; (8008848 <xQueueGenericSend+0x1f8>)
 8008762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008770:	f7ff fd78 	bl	8008264 <vPortExitCritical>
				return pdPASS;
 8008774:	2301      	movs	r3, #1
 8008776:	e063      	b.n	8008840 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d103      	bne.n	8008786 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800877e:	f7ff fd71 	bl	8008264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008782:	2300      	movs	r3, #0
 8008784:	e05c      	b.n	8008840 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008788:	2b00      	cmp	r3, #0
 800878a:	d106      	bne.n	800879a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800878c:	f107 0314 	add.w	r3, r7, #20
 8008790:	4618      	mov	r0, r3
 8008792:	f001 f809 	bl	80097a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008796:	2301      	movs	r3, #1
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800879a:	f7ff fd63 	bl	8008264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800879e:	f000 fd7b 	bl	8009298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087a2:	f7ff fd2f 	bl	8008204 <vPortEnterCritical>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087ac:	b25b      	sxtb	r3, r3
 80087ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b2:	d103      	bne.n	80087bc <xQueueGenericSend+0x16c>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087c2:	b25b      	sxtb	r3, r3
 80087c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c8:	d103      	bne.n	80087d2 <xQueueGenericSend+0x182>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087d2:	f7ff fd47 	bl	8008264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087d6:	1d3a      	adds	r2, r7, #4
 80087d8:	f107 0314 	add.w	r3, r7, #20
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fff8 	bl	80097d4 <xTaskCheckForTimeOut>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d124      	bne.n	8008834 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087ec:	f000 faa2 	bl	8008d34 <prvIsQueueFull>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d018      	beq.n	8008828 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	3310      	adds	r3, #16
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	4611      	mov	r1, r2
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 ff1e 	bl	8009640 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008806:	f000 fa2d 	bl	8008c64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800880a:	f000 fd53 	bl	80092b4 <xTaskResumeAll>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	f47f af7c 	bne.w	800870e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <xQueueGenericSend+0x1f8>)
 8008818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	e772      	b.n	800870e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800882a:	f000 fa1b 	bl	8008c64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800882e:	f000 fd41 	bl	80092b4 <xTaskResumeAll>
 8008832:	e76c      	b.n	800870e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008836:	f000 fa15 	bl	8008c64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800883a:	f000 fd3b 	bl	80092b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800883e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008840:	4618      	mov	r0, r3
 8008842:	3738      	adds	r7, #56	; 0x38
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b090      	sub	sp, #64	; 0x40
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d103      	bne.n	8008888 <xQueueGenericSendFromISR+0x3c>
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <xQueueGenericSendFromISR+0x40>
 8008888:	2301      	movs	r3, #1
 800888a:	e000      	b.n	800888e <xQueueGenericSendFromISR+0x42>
 800888c:	2300      	movs	r3, #0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088a4:	bf00      	nop
 80088a6:	e7fe      	b.n	80088a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d103      	bne.n	80088b6 <xQueueGenericSendFromISR+0x6a>
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d101      	bne.n	80088ba <xQueueGenericSendFromISR+0x6e>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e000      	b.n	80088bc <xQueueGenericSendFromISR+0x70>
 80088ba:	2300      	movs	r3, #0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	623b      	str	r3, [r7, #32]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088d6:	f7ff fd77 	bl	80083c8 <vPortValidateInterruptPriority>
	__asm volatile
 80088da:	f3ef 8211 	mrs	r2, BASEPRI
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	61fa      	str	r2, [r7, #28]
 80088f0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80088f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fe:	429a      	cmp	r2, r3
 8008900:	d302      	bcc.n	8008908 <xQueueGenericSendFromISR+0xbc>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d12f      	bne.n	8008968 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800890e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	68b9      	ldr	r1, [r7, #8]
 800891c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800891e:	f000 f911 	bl	8008b44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008922:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d112      	bne.n	8008952 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	2b00      	cmp	r3, #0
 8008932:	d016      	beq.n	8008962 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008936:	3324      	adds	r3, #36	; 0x24
 8008938:	4618      	mov	r0, r3
 800893a:	f000 fed1 	bl	80096e0 <xTaskRemoveFromEventList>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00e      	beq.n	8008962 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	e007      	b.n	8008962 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008956:	3301      	adds	r3, #1
 8008958:	b2db      	uxtb	r3, r3
 800895a:	b25a      	sxtb	r2, r3
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008962:	2301      	movs	r3, #1
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008966:	e001      	b.n	800896c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008968:	2300      	movs	r3, #0
 800896a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f383 8811 	msr	BASEPRI, r3
}
 8008976:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800897a:	4618      	mov	r0, r3
 800897c:	3740      	adds	r7, #64	; 0x40
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08c      	sub	sp, #48	; 0x30
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008990:	2300      	movs	r3, #0
 8008992:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <xQueueReceive+0x30>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	623b      	str	r3, [r7, #32]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d103      	bne.n	80089c2 <xQueueReceive+0x3e>
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <xQueueReceive+0x42>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <xQueueReceive+0x44>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <xQueueReceive+0x5e>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	61fb      	str	r3, [r7, #28]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089e2:	f001 f83b 	bl	8009a5c <xTaskGetSchedulerState>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d102      	bne.n	80089f2 <xQueueReceive+0x6e>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <xQueueReceive+0x72>
 80089f2:	2301      	movs	r3, #1
 80089f4:	e000      	b.n	80089f8 <xQueueReceive+0x74>
 80089f6:	2300      	movs	r3, #0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <xQueueReceive+0x8e>
	__asm volatile
 80089fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	61bb      	str	r3, [r7, #24]
}
 8008a0e:	bf00      	nop
 8008a10:	e7fe      	b.n	8008a10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a12:	f7ff fbf7 	bl	8008204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01f      	beq.n	8008a62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a22:	68b9      	ldr	r1, [r7, #8]
 8008a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a26:	f000 f8f7 	bl	8008c18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	1e5a      	subs	r2, r3, #1
 8008a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00f      	beq.n	8008a5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	3310      	adds	r3, #16
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fe4e 	bl	80096e0 <xTaskRemoveFromEventList>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d007      	beq.n	8008a5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a4a:	4b3d      	ldr	r3, [pc, #244]	; (8008b40 <xQueueReceive+0x1bc>)
 8008a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a5a:	f7ff fc03 	bl	8008264 <vPortExitCritical>
				return pdPASS;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e069      	b.n	8008b36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d103      	bne.n	8008a70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a68:	f7ff fbfc 	bl	8008264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e062      	b.n	8008b36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a76:	f107 0310 	add.w	r3, r7, #16
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fe94 	bl	80097a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a84:	f7ff fbee 	bl	8008264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a88:	f000 fc06 	bl	8009298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a8c:	f7ff fbba 	bl	8008204 <vPortEnterCritical>
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a96:	b25b      	sxtb	r3, r3
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9c:	d103      	bne.n	8008aa6 <xQueueReceive+0x122>
 8008a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aac:	b25b      	sxtb	r3, r3
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d103      	bne.n	8008abc <xQueueReceive+0x138>
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008abc:	f7ff fbd2 	bl	8008264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ac0:	1d3a      	adds	r2, r7, #4
 8008ac2:	f107 0310 	add.w	r3, r7, #16
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fe83 	bl	80097d4 <xTaskCheckForTimeOut>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d123      	bne.n	8008b1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ad6:	f000 f917 	bl	8008d08 <prvIsQueueEmpty>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d017      	beq.n	8008b10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	3324      	adds	r3, #36	; 0x24
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 fda9 	bl	8009640 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008af0:	f000 f8b8 	bl	8008c64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008af4:	f000 fbde 	bl	80092b4 <xTaskResumeAll>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d189      	bne.n	8008a12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008afe:	4b10      	ldr	r3, [pc, #64]	; (8008b40 <xQueueReceive+0x1bc>)
 8008b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	e780      	b.n	8008a12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b12:	f000 f8a7 	bl	8008c64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b16:	f000 fbcd 	bl	80092b4 <xTaskResumeAll>
 8008b1a:	e77a      	b.n	8008a12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1e:	f000 f8a1 	bl	8008c64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b22:	f000 fbc7 	bl	80092b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b28:	f000 f8ee 	bl	8008d08 <prvIsQueueEmpty>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f43f af6f 	beq.w	8008a12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3730      	adds	r7, #48	; 0x30
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10d      	bne.n	8008b7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d14d      	bne.n	8008c06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 ff92 	bl	8009a98 <xTaskPriorityDisinherit>
 8008b74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	609a      	str	r2, [r3, #8]
 8008b7c:	e043      	b.n	8008c06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d119      	bne.n	8008bb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6858      	ldr	r0, [r3, #4]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	68b9      	ldr	r1, [r7, #8]
 8008b90:	f001 fbb6 	bl	800a300 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	441a      	add	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d32b      	bcc.n	8008c06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	605a      	str	r2, [r3, #4]
 8008bb6:	e026      	b.n	8008c06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68d8      	ldr	r0, [r3, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	68b9      	ldr	r1, [r7, #8]
 8008bc4:	f001 fb9c 	bl	800a300 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	68da      	ldr	r2, [r3, #12]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd0:	425b      	negs	r3, r3
 8008bd2:	441a      	add	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68da      	ldr	r2, [r3, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d207      	bcs.n	8008bf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	425b      	negs	r3, r3
 8008bee:	441a      	add	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d105      	bne.n	8008c06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c0e:	697b      	ldr	r3, [r7, #20]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3718      	adds	r7, #24
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d018      	beq.n	8008c5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	441a      	add	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d303      	bcc.n	8008c4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68d9      	ldr	r1, [r3, #12]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	461a      	mov	r2, r3
 8008c56:	6838      	ldr	r0, [r7, #0]
 8008c58:	f001 fb52 	bl	800a300 <memcpy>
	}
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c6c:	f7ff faca 	bl	8008204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c78:	e011      	b.n	8008c9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d012      	beq.n	8008ca8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3324      	adds	r3, #36	; 0x24
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 fd2a 	bl	80096e0 <xTaskRemoveFromEventList>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c92:	f000 fe01 	bl	8009898 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dce9      	bgt.n	8008c7a <prvUnlockQueue+0x16>
 8008ca6:	e000      	b.n	8008caa <prvUnlockQueue+0x46>
					break;
 8008ca8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	22ff      	movs	r2, #255	; 0xff
 8008cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008cb2:	f7ff fad7 	bl	8008264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cb6:	f7ff faa5 	bl	8008204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cc2:	e011      	b.n	8008ce8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d012      	beq.n	8008cf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	3310      	adds	r3, #16
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fd05 	bl	80096e0 <xTaskRemoveFromEventList>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008cdc:	f000 fddc 	bl	8009898 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dce9      	bgt.n	8008cc4 <prvUnlockQueue+0x60>
 8008cf0:	e000      	b.n	8008cf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008cf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	22ff      	movs	r2, #255	; 0xff
 8008cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008cfc:	f7ff fab2 	bl	8008264 <vPortExitCritical>
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d10:	f7ff fa78 	bl	8008204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d102      	bne.n	8008d22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	e001      	b.n	8008d26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d22:	2300      	movs	r3, #0
 8008d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d26:	f7ff fa9d 	bl	8008264 <vPortExitCritical>

	return xReturn;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d3c:	f7ff fa62 	bl	8008204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d102      	bne.n	8008d52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	e001      	b.n	8008d56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d56:	f7ff fa85 	bl	8008264 <vPortExitCritical>

	return xReturn;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	e014      	b.n	8008d9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d74:	4a0f      	ldr	r2, [pc, #60]	; (8008db4 <vQueueAddToRegistry+0x50>)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10b      	bne.n	8008d98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d80:	490c      	ldr	r1, [pc, #48]	; (8008db4 <vQueueAddToRegistry+0x50>)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d8a:	4a0a      	ldr	r2, [pc, #40]	; (8008db4 <vQueueAddToRegistry+0x50>)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	4413      	add	r3, r2
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d96:	e006      	b.n	8008da6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	60fb      	str	r3, [r7, #12]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b07      	cmp	r3, #7
 8008da2:	d9e7      	bls.n	8008d74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	20001cf0 	.word	0x20001cf0

08008db8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008dc8:	f7ff fa1c 	bl	8008204 <vPortEnterCritical>
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dd2:	b25b      	sxtb	r3, r3
 8008dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd8:	d103      	bne.n	8008de2 <vQueueWaitForMessageRestricted+0x2a>
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008de8:	b25b      	sxtb	r3, r3
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dee:	d103      	bne.n	8008df8 <vQueueWaitForMessageRestricted+0x40>
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008df8:	f7ff fa34 	bl	8008264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	3324      	adds	r3, #36	; 0x24
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	68b9      	ldr	r1, [r7, #8]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 fc3b 	bl	8009688 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e12:	6978      	ldr	r0, [r7, #20]
 8008e14:	f7ff ff26 	bl	8008c64 <prvUnlockQueue>
	}
 8008e18:	bf00      	nop
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08e      	sub	sp, #56	; 0x38
 8008e24:	af04      	add	r7, sp, #16
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	623b      	str	r3, [r7, #32]
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10a      	bne.n	8008e66 <xTaskCreateStatic+0x46>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	61fb      	str	r3, [r7, #28]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e66:	235c      	movs	r3, #92	; 0x5c
 8008e68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b5c      	cmp	r3, #92	; 0x5c
 8008e6e:	d00a      	beq.n	8008e86 <xTaskCreateStatic+0x66>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	61bb      	str	r3, [r7, #24]
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d01e      	beq.n	8008ecc <xTaskCreateStatic+0xac>
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d01b      	beq.n	8008ecc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9303      	str	r3, [sp, #12]
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	9302      	str	r3, [sp, #8]
 8008eae:	f107 0314 	add.w	r3, r7, #20
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	68b9      	ldr	r1, [r7, #8]
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 f850 	bl	8008f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ec6:	f000 f8dd 	bl	8009084 <prvAddNewTaskToReadyList>
 8008eca:	e001      	b.n	8008ed0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ed0:	697b      	ldr	r3, [r7, #20]
	}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3728      	adds	r7, #40	; 0x28
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b08c      	sub	sp, #48	; 0x30
 8008ede:	af04      	add	r7, sp, #16
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	603b      	str	r3, [r7, #0]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008eea:	88fb      	ldrh	r3, [r7, #6]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fe fdbe 	bl	8007a70 <pvPortMalloc>
 8008ef4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00e      	beq.n	8008f1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008efc:	205c      	movs	r0, #92	; 0x5c
 8008efe:	f7fe fdb7 	bl	8007a70 <pvPortMalloc>
 8008f02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8008f10:	e005      	b.n	8008f1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f12:	6978      	ldr	r0, [r7, #20]
 8008f14:	f7fe fe78 	bl	8007c08 <vPortFree>
 8008f18:	e001      	b.n	8008f1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d017      	beq.n	8008f54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f2c:	88fa      	ldrh	r2, [r7, #6]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9303      	str	r3, [sp, #12]
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	9302      	str	r3, [sp, #8]
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68b9      	ldr	r1, [r7, #8]
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 f80e 	bl	8008f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f48:	69f8      	ldr	r0, [r7, #28]
 8008f4a:	f000 f89b 	bl	8009084 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	61bb      	str	r3, [r7, #24]
 8008f52:	e002      	b.n	8008f5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f54:	f04f 33ff 	mov.w	r3, #4294967295
 8008f58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3720      	adds	r7, #32
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	21a5      	movs	r1, #165	; 0xa5
 8008f7e:	f001 f9cd 	bl	800a31c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	f023 0307 	bic.w	r3, r3, #7
 8008f9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	f003 0307 	and.w	r3, r3, #7
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00a      	beq.n	8008fbc <prvInitialiseNewTask+0x58>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	617b      	str	r3, [r7, #20]
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d01f      	beq.n	8009002 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	61fb      	str	r3, [r7, #28]
 8008fc6:	e012      	b.n	8008fee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	4413      	add	r3, r2
 8008fce:	7819      	ldrb	r1, [r3, #0]
 8008fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	3334      	adds	r3, #52	; 0x34
 8008fd8:	460a      	mov	r2, r1
 8008fda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d006      	beq.n	8008ff6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	3301      	adds	r3, #1
 8008fec:	61fb      	str	r3, [r7, #28]
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	2b0f      	cmp	r3, #15
 8008ff2:	d9e9      	bls.n	8008fc8 <prvInitialiseNewTask+0x64>
 8008ff4:	e000      	b.n	8008ff8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008ff6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009000:	e003      	b.n	800900a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	2b37      	cmp	r3, #55	; 0x37
 800900e:	d901      	bls.n	8009014 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009010:	2337      	movs	r3, #55	; 0x37
 8009012:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009018:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800901e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	2200      	movs	r2, #0
 8009024:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	3304      	adds	r3, #4
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe ff2a 	bl	8007e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	3318      	adds	r3, #24
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe ff25 	bl	8007e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800903e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800904e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	2200      	movs	r2, #0
 8009054:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	68f9      	ldr	r1, [r7, #12]
 8009062:	69b8      	ldr	r0, [r7, #24]
 8009064:	f7fe ffa2 	bl	8007fac <pxPortInitialiseStack>
 8009068:	4602      	mov	r2, r0
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800907a:	bf00      	nop
 800907c:	3720      	adds	r7, #32
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800908c:	f7ff f8ba 	bl	8008204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009090:	4b2d      	ldr	r3, [pc, #180]	; (8009148 <prvAddNewTaskToReadyList+0xc4>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	4a2c      	ldr	r2, [pc, #176]	; (8009148 <prvAddNewTaskToReadyList+0xc4>)
 8009098:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800909a:	4b2c      	ldr	r3, [pc, #176]	; (800914c <prvAddNewTaskToReadyList+0xc8>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d109      	bne.n	80090b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090a2:	4a2a      	ldr	r2, [pc, #168]	; (800914c <prvAddNewTaskToReadyList+0xc8>)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090a8:	4b27      	ldr	r3, [pc, #156]	; (8009148 <prvAddNewTaskToReadyList+0xc4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d110      	bne.n	80090d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090b0:	f000 fc16 	bl	80098e0 <prvInitialiseTaskLists>
 80090b4:	e00d      	b.n	80090d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090b6:	4b26      	ldr	r3, [pc, #152]	; (8009150 <prvAddNewTaskToReadyList+0xcc>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090be:	4b23      	ldr	r3, [pc, #140]	; (800914c <prvAddNewTaskToReadyList+0xc8>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d802      	bhi.n	80090d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090cc:	4a1f      	ldr	r2, [pc, #124]	; (800914c <prvAddNewTaskToReadyList+0xc8>)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090d2:	4b20      	ldr	r3, [pc, #128]	; (8009154 <prvAddNewTaskToReadyList+0xd0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3301      	adds	r3, #1
 80090d8:	4a1e      	ldr	r2, [pc, #120]	; (8009154 <prvAddNewTaskToReadyList+0xd0>)
 80090da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090dc:	4b1d      	ldr	r3, [pc, #116]	; (8009154 <prvAddNewTaskToReadyList+0xd0>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e8:	4b1b      	ldr	r3, [pc, #108]	; (8009158 <prvAddNewTaskToReadyList+0xd4>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d903      	bls.n	80090f8 <prvAddNewTaskToReadyList+0x74>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	4a18      	ldr	r2, [pc, #96]	; (8009158 <prvAddNewTaskToReadyList+0xd4>)
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4a15      	ldr	r2, [pc, #84]	; (800915c <prvAddNewTaskToReadyList+0xd8>)
 8009106:	441a      	add	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3304      	adds	r3, #4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f7fe fec5 	bl	8007e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009114:	f7ff f8a6 	bl	8008264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009118:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <prvAddNewTaskToReadyList+0xcc>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00e      	beq.n	800913e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009120:	4b0a      	ldr	r3, [pc, #40]	; (800914c <prvAddNewTaskToReadyList+0xc8>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	429a      	cmp	r2, r3
 800912c:	d207      	bcs.n	800913e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800912e:	4b0c      	ldr	r3, [pc, #48]	; (8009160 <prvAddNewTaskToReadyList+0xdc>)
 8009130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20001b48 	.word	0x20001b48
 800914c:	20001674 	.word	0x20001674
 8009150:	20001b54 	.word	0x20001b54
 8009154:	20001b64 	.word	0x20001b64
 8009158:	20001b50 	.word	0x20001b50
 800915c:	20001678 	.word	0x20001678
 8009160:	e000ed04 	.word	0xe000ed04

08009164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d017      	beq.n	80091a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009176:	4b13      	ldr	r3, [pc, #76]	; (80091c4 <vTaskDelay+0x60>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <vTaskDelay+0x30>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	60bb      	str	r3, [r7, #8]
}
 8009190:	bf00      	nop
 8009192:	e7fe      	b.n	8009192 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009194:	f000 f880 	bl	8009298 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009198:	2100      	movs	r1, #0
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fcea 	bl	8009b74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091a0:	f000 f888 	bl	80092b4 <xTaskResumeAll>
 80091a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d107      	bne.n	80091bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80091ac:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <vTaskDelay+0x64>)
 80091ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091bc:	bf00      	nop
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20001b70 	.word	0x20001b70
 80091c8:	e000ed04 	.word	0xe000ed04

080091cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	; 0x28
 80091d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091da:	463a      	mov	r2, r7
 80091dc:	1d39      	adds	r1, r7, #4
 80091de:	f107 0308 	add.w	r3, r7, #8
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fc10 	bl	8007a08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	9202      	str	r2, [sp, #8]
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	2300      	movs	r3, #0
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	460a      	mov	r2, r1
 80091fa:	4921      	ldr	r1, [pc, #132]	; (8009280 <vTaskStartScheduler+0xb4>)
 80091fc:	4821      	ldr	r0, [pc, #132]	; (8009284 <vTaskStartScheduler+0xb8>)
 80091fe:	f7ff fe0f 	bl	8008e20 <xTaskCreateStatic>
 8009202:	4603      	mov	r3, r0
 8009204:	4a20      	ldr	r2, [pc, #128]	; (8009288 <vTaskStartScheduler+0xbc>)
 8009206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009208:	4b1f      	ldr	r3, [pc, #124]	; (8009288 <vTaskStartScheduler+0xbc>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009210:	2301      	movs	r3, #1
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	e001      	b.n	800921a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d102      	bne.n	8009226 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009220:	f000 fcfc 	bl	8009c1c <xTimerCreateTimerTask>
 8009224:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d116      	bne.n	800925a <vTaskStartScheduler+0x8e>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	613b      	str	r3, [r7, #16]
}
 800923e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009240:	4b12      	ldr	r3, [pc, #72]	; (800928c <vTaskStartScheduler+0xc0>)
 8009242:	f04f 32ff 	mov.w	r2, #4294967295
 8009246:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009248:	4b11      	ldr	r3, [pc, #68]	; (8009290 <vTaskStartScheduler+0xc4>)
 800924a:	2201      	movs	r2, #1
 800924c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800924e:	4b11      	ldr	r3, [pc, #68]	; (8009294 <vTaskStartScheduler+0xc8>)
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009254:	f7fe ff34 	bl	80080c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009258:	e00e      	b.n	8009278 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d10a      	bne.n	8009278 <vTaskStartScheduler+0xac>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	60fb      	str	r3, [r7, #12]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <vTaskStartScheduler+0xaa>
}
 8009278:	bf00      	nop
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	0800a358 	.word	0x0800a358
 8009284:	080098b1 	.word	0x080098b1
 8009288:	20001b6c 	.word	0x20001b6c
 800928c:	20001b68 	.word	0x20001b68
 8009290:	20001b54 	.word	0x20001b54
 8009294:	20001b4c 	.word	0x20001b4c

08009298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800929c:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <vTaskSuspendAll+0x18>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3301      	adds	r3, #1
 80092a2:	4a03      	ldr	r2, [pc, #12]	; (80092b0 <vTaskSuspendAll+0x18>)
 80092a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092a6:	bf00      	nop
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	20001b70 	.word	0x20001b70

080092b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092be:	2300      	movs	r3, #0
 80092c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092c2:	4b42      	ldr	r3, [pc, #264]	; (80093cc <xTaskResumeAll+0x118>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10a      	bne.n	80092e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	603b      	str	r3, [r7, #0]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092e0:	f7fe ff90 	bl	8008204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092e4:	4b39      	ldr	r3, [pc, #228]	; (80093cc <xTaskResumeAll+0x118>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	4a38      	ldr	r2, [pc, #224]	; (80093cc <xTaskResumeAll+0x118>)
 80092ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ee:	4b37      	ldr	r3, [pc, #220]	; (80093cc <xTaskResumeAll+0x118>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d162      	bne.n	80093bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092f6:	4b36      	ldr	r3, [pc, #216]	; (80093d0 <xTaskResumeAll+0x11c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d05e      	beq.n	80093bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092fe:	e02f      	b.n	8009360 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009300:	4b34      	ldr	r3, [pc, #208]	; (80093d4 <xTaskResumeAll+0x120>)
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	3318      	adds	r3, #24
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fe23 	bl	8007f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3304      	adds	r3, #4
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fe1e 	bl	8007f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009320:	4b2d      	ldr	r3, [pc, #180]	; (80093d8 <xTaskResumeAll+0x124>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	429a      	cmp	r2, r3
 8009326:	d903      	bls.n	8009330 <xTaskResumeAll+0x7c>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932c:	4a2a      	ldr	r2, [pc, #168]	; (80093d8 <xTaskResumeAll+0x124>)
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009334:	4613      	mov	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4413      	add	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4a27      	ldr	r2, [pc, #156]	; (80093dc <xTaskResumeAll+0x128>)
 800933e:	441a      	add	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	3304      	adds	r3, #4
 8009344:	4619      	mov	r1, r3
 8009346:	4610      	mov	r0, r2
 8009348:	f7fe fda9 	bl	8007e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009350:	4b23      	ldr	r3, [pc, #140]	; (80093e0 <xTaskResumeAll+0x12c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009356:	429a      	cmp	r2, r3
 8009358:	d302      	bcc.n	8009360 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800935a:	4b22      	ldr	r3, [pc, #136]	; (80093e4 <xTaskResumeAll+0x130>)
 800935c:	2201      	movs	r2, #1
 800935e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009360:	4b1c      	ldr	r3, [pc, #112]	; (80093d4 <xTaskResumeAll+0x120>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1cb      	bne.n	8009300 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800936e:	f000 fb55 	bl	8009a1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009372:	4b1d      	ldr	r3, [pc, #116]	; (80093e8 <xTaskResumeAll+0x134>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d010      	beq.n	80093a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800937e:	f000 f847 	bl	8009410 <xTaskIncrementTick>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009388:	4b16      	ldr	r3, [pc, #88]	; (80093e4 <xTaskResumeAll+0x130>)
 800938a:	2201      	movs	r2, #1
 800938c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3b01      	subs	r3, #1
 8009392:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1f1      	bne.n	800937e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800939a:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <xTaskResumeAll+0x134>)
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093a0:	4b10      	ldr	r3, [pc, #64]	; (80093e4 <xTaskResumeAll+0x130>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d009      	beq.n	80093bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093ac:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <xTaskResumeAll+0x138>)
 80093ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093bc:	f7fe ff52 	bl	8008264 <vPortExitCritical>

	return xAlreadyYielded;
 80093c0:	68bb      	ldr	r3, [r7, #8]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20001b70 	.word	0x20001b70
 80093d0:	20001b48 	.word	0x20001b48
 80093d4:	20001b08 	.word	0x20001b08
 80093d8:	20001b50 	.word	0x20001b50
 80093dc:	20001678 	.word	0x20001678
 80093e0:	20001674 	.word	0x20001674
 80093e4:	20001b5c 	.word	0x20001b5c
 80093e8:	20001b58 	.word	0x20001b58
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <xTaskGetTickCount+0x1c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093fc:	687b      	ldr	r3, [r7, #4]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	20001b4c 	.word	0x20001b4c

08009410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009416:	2300      	movs	r3, #0
 8009418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800941a:	4b4f      	ldr	r3, [pc, #316]	; (8009558 <xTaskIncrementTick+0x148>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f040 808f 	bne.w	8009542 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009424:	4b4d      	ldr	r3, [pc, #308]	; (800955c <xTaskIncrementTick+0x14c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3301      	adds	r3, #1
 800942a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800942c:	4a4b      	ldr	r2, [pc, #300]	; (800955c <xTaskIncrementTick+0x14c>)
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d120      	bne.n	800947a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009438:	4b49      	ldr	r3, [pc, #292]	; (8009560 <xTaskIncrementTick+0x150>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00a      	beq.n	8009458 <xTaskIncrementTick+0x48>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	603b      	str	r3, [r7, #0]
}
 8009454:	bf00      	nop
 8009456:	e7fe      	b.n	8009456 <xTaskIncrementTick+0x46>
 8009458:	4b41      	ldr	r3, [pc, #260]	; (8009560 <xTaskIncrementTick+0x150>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	4b41      	ldr	r3, [pc, #260]	; (8009564 <xTaskIncrementTick+0x154>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a3f      	ldr	r2, [pc, #252]	; (8009560 <xTaskIncrementTick+0x150>)
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	4a3f      	ldr	r2, [pc, #252]	; (8009564 <xTaskIncrementTick+0x154>)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	4b3e      	ldr	r3, [pc, #248]	; (8009568 <xTaskIncrementTick+0x158>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3301      	adds	r3, #1
 8009472:	4a3d      	ldr	r2, [pc, #244]	; (8009568 <xTaskIncrementTick+0x158>)
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	f000 fad1 	bl	8009a1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800947a:	4b3c      	ldr	r3, [pc, #240]	; (800956c <xTaskIncrementTick+0x15c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	429a      	cmp	r2, r3
 8009482:	d349      	bcc.n	8009518 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009484:	4b36      	ldr	r3, [pc, #216]	; (8009560 <xTaskIncrementTick+0x150>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d104      	bne.n	8009498 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800948e:	4b37      	ldr	r3, [pc, #220]	; (800956c <xTaskIncrementTick+0x15c>)
 8009490:	f04f 32ff 	mov.w	r2, #4294967295
 8009494:	601a      	str	r2, [r3, #0]
					break;
 8009496:	e03f      	b.n	8009518 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009498:	4b31      	ldr	r3, [pc, #196]	; (8009560 <xTaskIncrementTick+0x150>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d203      	bcs.n	80094b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094b0:	4a2e      	ldr	r2, [pc, #184]	; (800956c <xTaskIncrementTick+0x15c>)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094b6:	e02f      	b.n	8009518 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fd4b 	bl	8007f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d004      	beq.n	80094d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	3318      	adds	r3, #24
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fe fd42 	bl	8007f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d8:	4b25      	ldr	r3, [pc, #148]	; (8009570 <xTaskIncrementTick+0x160>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d903      	bls.n	80094e8 <xTaskIncrementTick+0xd8>
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e4:	4a22      	ldr	r2, [pc, #136]	; (8009570 <xTaskIncrementTick+0x160>)
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4a1f      	ldr	r2, [pc, #124]	; (8009574 <xTaskIncrementTick+0x164>)
 80094f6:	441a      	add	r2, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f7fe fccd 	bl	8007e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009508:	4b1b      	ldr	r3, [pc, #108]	; (8009578 <xTaskIncrementTick+0x168>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	429a      	cmp	r2, r3
 8009510:	d3b8      	bcc.n	8009484 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009512:	2301      	movs	r3, #1
 8009514:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009516:	e7b5      	b.n	8009484 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009518:	4b17      	ldr	r3, [pc, #92]	; (8009578 <xTaskIncrementTick+0x168>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951e:	4915      	ldr	r1, [pc, #84]	; (8009574 <xTaskIncrementTick+0x164>)
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d901      	bls.n	8009534 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009530:	2301      	movs	r3, #1
 8009532:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009534:	4b11      	ldr	r3, [pc, #68]	; (800957c <xTaskIncrementTick+0x16c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d007      	beq.n	800954c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	e004      	b.n	800954c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009542:	4b0f      	ldr	r3, [pc, #60]	; (8009580 <xTaskIncrementTick+0x170>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3301      	adds	r3, #1
 8009548:	4a0d      	ldr	r2, [pc, #52]	; (8009580 <xTaskIncrementTick+0x170>)
 800954a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800954c:	697b      	ldr	r3, [r7, #20]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20001b70 	.word	0x20001b70
 800955c:	20001b4c 	.word	0x20001b4c
 8009560:	20001b00 	.word	0x20001b00
 8009564:	20001b04 	.word	0x20001b04
 8009568:	20001b60 	.word	0x20001b60
 800956c:	20001b68 	.word	0x20001b68
 8009570:	20001b50 	.word	0x20001b50
 8009574:	20001678 	.word	0x20001678
 8009578:	20001674 	.word	0x20001674
 800957c:	20001b5c 	.word	0x20001b5c
 8009580:	20001b58 	.word	0x20001b58

08009584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800958a:	4b28      	ldr	r3, [pc, #160]	; (800962c <vTaskSwitchContext+0xa8>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d003      	beq.n	800959a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009592:	4b27      	ldr	r3, [pc, #156]	; (8009630 <vTaskSwitchContext+0xac>)
 8009594:	2201      	movs	r2, #1
 8009596:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009598:	e041      	b.n	800961e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800959a:	4b25      	ldr	r3, [pc, #148]	; (8009630 <vTaskSwitchContext+0xac>)
 800959c:	2200      	movs	r2, #0
 800959e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a0:	4b24      	ldr	r3, [pc, #144]	; (8009634 <vTaskSwitchContext+0xb0>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	e010      	b.n	80095ca <vTaskSwitchContext+0x46>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	607b      	str	r3, [r7, #4]
}
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <vTaskSwitchContext+0x3e>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	491b      	ldr	r1, [pc, #108]	; (8009638 <vTaskSwitchContext+0xb4>)
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	440b      	add	r3, r1
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0e4      	beq.n	80095a8 <vTaskSwitchContext+0x24>
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	4613      	mov	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4a13      	ldr	r2, [pc, #76]	; (8009638 <vTaskSwitchContext+0xb4>)
 80095ea:	4413      	add	r3, r2
 80095ec:	60bb      	str	r3, [r7, #8]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	605a      	str	r2, [r3, #4]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	3308      	adds	r3, #8
 8009600:	429a      	cmp	r2, r3
 8009602:	d104      	bne.n	800960e <vTaskSwitchContext+0x8a>
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	605a      	str	r2, [r3, #4]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	4a09      	ldr	r2, [pc, #36]	; (800963c <vTaskSwitchContext+0xb8>)
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	4a06      	ldr	r2, [pc, #24]	; (8009634 <vTaskSwitchContext+0xb0>)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6013      	str	r3, [r2, #0]
}
 800961e:	bf00      	nop
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20001b70 	.word	0x20001b70
 8009630:	20001b5c 	.word	0x20001b5c
 8009634:	20001b50 	.word	0x20001b50
 8009638:	20001678 	.word	0x20001678
 800963c:	20001674 	.word	0x20001674

08009640 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	60fb      	str	r3, [r7, #12]
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009666:	4b07      	ldr	r3, [pc, #28]	; (8009684 <vTaskPlaceOnEventList+0x44>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3318      	adds	r3, #24
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7fe fc39 	bl	8007ee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009674:	2101      	movs	r1, #1
 8009676:	6838      	ldr	r0, [r7, #0]
 8009678:	f000 fa7c 	bl	8009b74 <prvAddCurrentTaskToDelayedList>
}
 800967c:	bf00      	nop
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	20001674 	.word	0x20001674

08009688 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10a      	bne.n	80096b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	617b      	str	r3, [r7, #20]
}
 80096ac:	bf00      	nop
 80096ae:	e7fe      	b.n	80096ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096b0:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <vTaskPlaceOnEventListRestricted+0x54>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3318      	adds	r3, #24
 80096b6:	4619      	mov	r1, r3
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7fe fbf0 	bl	8007e9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80096c4:	f04f 33ff 	mov.w	r3, #4294967295
 80096c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	68b8      	ldr	r0, [r7, #8]
 80096ce:	f000 fa51 	bl	8009b74 <prvAddCurrentTaskToDelayedList>
	}
 80096d2:	bf00      	nop
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20001674 	.word	0x20001674

080096e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10a      	bne.n	800970c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	60fb      	str	r3, [r7, #12]
}
 8009708:	bf00      	nop
 800970a:	e7fe      	b.n	800970a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	3318      	adds	r3, #24
 8009710:	4618      	mov	r0, r3
 8009712:	f7fe fc21 	bl	8007f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009716:	4b1e      	ldr	r3, [pc, #120]	; (8009790 <xTaskRemoveFromEventList+0xb0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d11d      	bne.n	800975a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3304      	adds	r3, #4
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe fc18 	bl	8007f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972c:	4b19      	ldr	r3, [pc, #100]	; (8009794 <xTaskRemoveFromEventList+0xb4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d903      	bls.n	800973c <xTaskRemoveFromEventList+0x5c>
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	4a16      	ldr	r2, [pc, #88]	; (8009794 <xTaskRemoveFromEventList+0xb4>)
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009740:	4613      	mov	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4a13      	ldr	r2, [pc, #76]	; (8009798 <xTaskRemoveFromEventList+0xb8>)
 800974a:	441a      	add	r2, r3
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	3304      	adds	r3, #4
 8009750:	4619      	mov	r1, r3
 8009752:	4610      	mov	r0, r2
 8009754:	f7fe fba3 	bl	8007e9e <vListInsertEnd>
 8009758:	e005      	b.n	8009766 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	3318      	adds	r3, #24
 800975e:	4619      	mov	r1, r3
 8009760:	480e      	ldr	r0, [pc, #56]	; (800979c <xTaskRemoveFromEventList+0xbc>)
 8009762:	f7fe fb9c 	bl	8007e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976a:	4b0d      	ldr	r3, [pc, #52]	; (80097a0 <xTaskRemoveFromEventList+0xc0>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009770:	429a      	cmp	r2, r3
 8009772:	d905      	bls.n	8009780 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009774:	2301      	movs	r3, #1
 8009776:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009778:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <xTaskRemoveFromEventList+0xc4>)
 800977a:	2201      	movs	r2, #1
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	e001      	b.n	8009784 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009780:	2300      	movs	r3, #0
 8009782:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009784:	697b      	ldr	r3, [r7, #20]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20001b70 	.word	0x20001b70
 8009794:	20001b50 	.word	0x20001b50
 8009798:	20001678 	.word	0x20001678
 800979c:	20001b08 	.word	0x20001b08
 80097a0:	20001674 	.word	0x20001674
 80097a4:	20001b5c 	.word	0x20001b5c

080097a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097b0:	4b06      	ldr	r3, [pc, #24]	; (80097cc <vTaskInternalSetTimeOutState+0x24>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <vTaskInternalSetTimeOutState+0x28>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	605a      	str	r2, [r3, #4]
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	20001b60 	.word	0x20001b60
 80097d0:	20001b4c 	.word	0x20001b4c

080097d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	613b      	str	r3, [r7, #16]
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	60fb      	str	r3, [r7, #12]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009816:	f7fe fcf5 	bl	8008204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800981a:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <xTaskCheckForTimeOut+0xbc>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009832:	d102      	bne.n	800983a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009834:	2300      	movs	r3, #0
 8009836:	61fb      	str	r3, [r7, #28]
 8009838:	e023      	b.n	8009882 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b15      	ldr	r3, [pc, #84]	; (8009894 <xTaskCheckForTimeOut+0xc0>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d007      	beq.n	8009856 <xTaskCheckForTimeOut+0x82>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	429a      	cmp	r2, r3
 800984e:	d302      	bcc.n	8009856 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009850:	2301      	movs	r3, #1
 8009852:	61fb      	str	r3, [r7, #28]
 8009854:	e015      	b.n	8009882 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	429a      	cmp	r2, r3
 800985e:	d20b      	bcs.n	8009878 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	1ad2      	subs	r2, r2, r3
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff ff9b 	bl	80097a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009872:	2300      	movs	r3, #0
 8009874:	61fb      	str	r3, [r7, #28]
 8009876:	e004      	b.n	8009882 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2200      	movs	r2, #0
 800987c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800987e:	2301      	movs	r3, #1
 8009880:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009882:	f7fe fcef 	bl	8008264 <vPortExitCritical>

	return xReturn;
 8009886:	69fb      	ldr	r3, [r7, #28]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20001b4c 	.word	0x20001b4c
 8009894:	20001b60 	.word	0x20001b60

08009898 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009898:	b480      	push	{r7}
 800989a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800989c:	4b03      	ldr	r3, [pc, #12]	; (80098ac <vTaskMissedYield+0x14>)
 800989e:	2201      	movs	r2, #1
 80098a0:	601a      	str	r2, [r3, #0]
}
 80098a2:	bf00      	nop
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	20001b5c 	.word	0x20001b5c

080098b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098b8:	f000 f852 	bl	8009960 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098bc:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <prvIdleTask+0x28>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d9f9      	bls.n	80098b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <prvIdleTask+0x2c>)
 80098c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098d4:	e7f0      	b.n	80098b8 <prvIdleTask+0x8>
 80098d6:	bf00      	nop
 80098d8:	20001678 	.word	0x20001678
 80098dc:	e000ed04 	.word	0xe000ed04

080098e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098e6:	2300      	movs	r3, #0
 80098e8:	607b      	str	r3, [r7, #4]
 80098ea:	e00c      	b.n	8009906 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4a12      	ldr	r2, [pc, #72]	; (8009940 <prvInitialiseTaskLists+0x60>)
 80098f8:	4413      	add	r3, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe faa2 	bl	8007e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3301      	adds	r3, #1
 8009904:	607b      	str	r3, [r7, #4]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b37      	cmp	r3, #55	; 0x37
 800990a:	d9ef      	bls.n	80098ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800990c:	480d      	ldr	r0, [pc, #52]	; (8009944 <prvInitialiseTaskLists+0x64>)
 800990e:	f7fe fa99 	bl	8007e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009912:	480d      	ldr	r0, [pc, #52]	; (8009948 <prvInitialiseTaskLists+0x68>)
 8009914:	f7fe fa96 	bl	8007e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009918:	480c      	ldr	r0, [pc, #48]	; (800994c <prvInitialiseTaskLists+0x6c>)
 800991a:	f7fe fa93 	bl	8007e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800991e:	480c      	ldr	r0, [pc, #48]	; (8009950 <prvInitialiseTaskLists+0x70>)
 8009920:	f7fe fa90 	bl	8007e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009924:	480b      	ldr	r0, [pc, #44]	; (8009954 <prvInitialiseTaskLists+0x74>)
 8009926:	f7fe fa8d 	bl	8007e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800992a:	4b0b      	ldr	r3, [pc, #44]	; (8009958 <prvInitialiseTaskLists+0x78>)
 800992c:	4a05      	ldr	r2, [pc, #20]	; (8009944 <prvInitialiseTaskLists+0x64>)
 800992e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009930:	4b0a      	ldr	r3, [pc, #40]	; (800995c <prvInitialiseTaskLists+0x7c>)
 8009932:	4a05      	ldr	r2, [pc, #20]	; (8009948 <prvInitialiseTaskLists+0x68>)
 8009934:	601a      	str	r2, [r3, #0]
}
 8009936:	bf00      	nop
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20001678 	.word	0x20001678
 8009944:	20001ad8 	.word	0x20001ad8
 8009948:	20001aec 	.word	0x20001aec
 800994c:	20001b08 	.word	0x20001b08
 8009950:	20001b1c 	.word	0x20001b1c
 8009954:	20001b34 	.word	0x20001b34
 8009958:	20001b00 	.word	0x20001b00
 800995c:	20001b04 	.word	0x20001b04

08009960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009966:	e019      	b.n	800999c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009968:	f7fe fc4c 	bl	8008204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800996c:	4b10      	ldr	r3, [pc, #64]	; (80099b0 <prvCheckTasksWaitingTermination+0x50>)
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3304      	adds	r3, #4
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe faed 	bl	8007f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800997e:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <prvCheckTasksWaitingTermination+0x54>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3b01      	subs	r3, #1
 8009984:	4a0b      	ldr	r2, [pc, #44]	; (80099b4 <prvCheckTasksWaitingTermination+0x54>)
 8009986:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009988:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <prvCheckTasksWaitingTermination+0x58>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3b01      	subs	r3, #1
 800998e:	4a0a      	ldr	r2, [pc, #40]	; (80099b8 <prvCheckTasksWaitingTermination+0x58>)
 8009990:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009992:	f7fe fc67 	bl	8008264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f810 	bl	80099bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800999c:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <prvCheckTasksWaitingTermination+0x58>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1e1      	bne.n	8009968 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */

}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20001b1c 	.word	0x20001b1c
 80099b4:	20001b48 	.word	0x20001b48
 80099b8:	20001b30 	.word	0x20001b30

080099bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d108      	bne.n	80099e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe f918 	bl	8007c08 <vPortFree>
				vPortFree( pxTCB );
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7fe f915 	bl	8007c08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099de:	e018      	b.n	8009a12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d103      	bne.n	80099f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7fe f90c 	bl	8007c08 <vPortFree>
	}
 80099f0:	e00f      	b.n	8009a12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d00a      	beq.n	8009a12 <prvDeleteTCB+0x56>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	60fb      	str	r3, [r7, #12]
}
 8009a0e:	bf00      	nop
 8009a10:	e7fe      	b.n	8009a10 <prvDeleteTCB+0x54>
	}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a22:	4b0c      	ldr	r3, [pc, #48]	; (8009a54 <prvResetNextTaskUnblockTime+0x38>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d104      	bne.n	8009a36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <prvResetNextTaskUnblockTime+0x3c>)
 8009a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a34:	e008      	b.n	8009a48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a36:	4b07      	ldr	r3, [pc, #28]	; (8009a54 <prvResetNextTaskUnblockTime+0x38>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	4a04      	ldr	r2, [pc, #16]	; (8009a58 <prvResetNextTaskUnblockTime+0x3c>)
 8009a46:	6013      	str	r3, [r2, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	20001b00 	.word	0x20001b00
 8009a58:	20001b68 	.word	0x20001b68

08009a5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a62:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <xTaskGetSchedulerState+0x34>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d102      	bne.n	8009a70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	607b      	str	r3, [r7, #4]
 8009a6e:	e008      	b.n	8009a82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a70:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <xTaskGetSchedulerState+0x38>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a78:	2302      	movs	r3, #2
 8009a7a:	607b      	str	r3, [r7, #4]
 8009a7c:	e001      	b.n	8009a82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a82:	687b      	ldr	r3, [r7, #4]
	}
 8009a84:	4618      	mov	r0, r3
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	20001b54 	.word	0x20001b54
 8009a94:	20001b70 	.word	0x20001b70

08009a98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d056      	beq.n	8009b5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009aae:	4b2e      	ldr	r3, [pc, #184]	; (8009b68 <xTaskPriorityDisinherit+0xd0>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d00a      	beq.n	8009ace <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	60fb      	str	r3, [r7, #12]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10a      	bne.n	8009aec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	60bb      	str	r3, [r7, #8]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af0:	1e5a      	subs	r2, r3, #1
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d02c      	beq.n	8009b5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d128      	bne.n	8009b5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fe fa22 	bl	8007f58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2c:	4b0f      	ldr	r3, [pc, #60]	; (8009b6c <xTaskPriorityDisinherit+0xd4>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d903      	bls.n	8009b3c <xTaskPriorityDisinherit+0xa4>
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b38:	4a0c      	ldr	r2, [pc, #48]	; (8009b6c <xTaskPriorityDisinherit+0xd4>)
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4a09      	ldr	r2, [pc, #36]	; (8009b70 <xTaskPriorityDisinherit+0xd8>)
 8009b4a:	441a      	add	r2, r3
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4619      	mov	r1, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	f7fe f9a3 	bl	8007e9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b5c:	697b      	ldr	r3, [r7, #20]
	}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20001674 	.word	0x20001674
 8009b6c:	20001b50 	.word	0x20001b50
 8009b70:	20001678 	.word	0x20001678

08009b74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b7e:	4b21      	ldr	r3, [pc, #132]	; (8009c04 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b84:	4b20      	ldr	r3, [pc, #128]	; (8009c08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe f9e4 	bl	8007f58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b96:	d10a      	bne.n	8009bae <prvAddCurrentTaskToDelayedList+0x3a>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d007      	beq.n	8009bae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b9e:	4b1a      	ldr	r3, [pc, #104]	; (8009c08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4819      	ldr	r0, [pc, #100]	; (8009c0c <prvAddCurrentTaskToDelayedList+0x98>)
 8009ba8:	f7fe f979 	bl	8007e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bac:	e026      	b.n	8009bfc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bb6:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d209      	bcs.n	8009bda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bc6:	4b12      	ldr	r3, [pc, #72]	; (8009c10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	f7fe f987 	bl	8007ee6 <vListInsert>
}
 8009bd8:	e010      	b.n	8009bfc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bda:	4b0e      	ldr	r3, [pc, #56]	; (8009c14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	4b0a      	ldr	r3, [pc, #40]	; (8009c08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3304      	adds	r3, #4
 8009be4:	4619      	mov	r1, r3
 8009be6:	4610      	mov	r0, r2
 8009be8:	f7fe f97d 	bl	8007ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bec:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d202      	bcs.n	8009bfc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009bf6:	4a08      	ldr	r2, [pc, #32]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	6013      	str	r3, [r2, #0]
}
 8009bfc:	bf00      	nop
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20001b4c 	.word	0x20001b4c
 8009c08:	20001674 	.word	0x20001674
 8009c0c:	20001b34 	.word	0x20001b34
 8009c10:	20001b04 	.word	0x20001b04
 8009c14:	20001b00 	.word	0x20001b00
 8009c18:	20001b68 	.word	0x20001b68

08009c1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08a      	sub	sp, #40	; 0x28
 8009c20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c26:	f000 fb07 	bl	800a238 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c2a:	4b1c      	ldr	r3, [pc, #112]	; (8009c9c <xTimerCreateTimerTask+0x80>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d021      	beq.n	8009c76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c3a:	1d3a      	adds	r2, r7, #4
 8009c3c:	f107 0108 	add.w	r1, r7, #8
 8009c40:	f107 030c 	add.w	r3, r7, #12
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fd fef9 	bl	8007a3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	9202      	str	r2, [sp, #8]
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	2302      	movs	r3, #2
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	2300      	movs	r3, #0
 8009c5a:	460a      	mov	r2, r1
 8009c5c:	4910      	ldr	r1, [pc, #64]	; (8009ca0 <xTimerCreateTimerTask+0x84>)
 8009c5e:	4811      	ldr	r0, [pc, #68]	; (8009ca4 <xTimerCreateTimerTask+0x88>)
 8009c60:	f7ff f8de 	bl	8008e20 <xTaskCreateStatic>
 8009c64:	4603      	mov	r3, r0
 8009c66:	4a10      	ldr	r2, [pc, #64]	; (8009ca8 <xTimerCreateTimerTask+0x8c>)
 8009c68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c6a:	4b0f      	ldr	r3, [pc, #60]	; (8009ca8 <xTimerCreateTimerTask+0x8c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c72:	2301      	movs	r3, #1
 8009c74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	613b      	str	r3, [r7, #16]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c92:	697b      	ldr	r3, [r7, #20]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	20001ba4 	.word	0x20001ba4
 8009ca0:	0800a360 	.word	0x0800a360
 8009ca4:	08009de1 	.word	0x08009de1
 8009ca8:	20001ba8 	.word	0x20001ba8

08009cac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b08a      	sub	sp, #40	; 0x28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <xTimerGenericCommand+0x2e>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	623b      	str	r3, [r7, #32]
}
 8009cd6:	bf00      	nop
 8009cd8:	e7fe      	b.n	8009cd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cda:	4b1a      	ldr	r3, [pc, #104]	; (8009d44 <xTimerGenericCommand+0x98>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d02a      	beq.n	8009d38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b05      	cmp	r3, #5
 8009cf2:	dc18      	bgt.n	8009d26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cf4:	f7ff feb2 	bl	8009a5c <xTaskGetSchedulerState>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d109      	bne.n	8009d12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009cfe:	4b11      	ldr	r3, [pc, #68]	; (8009d44 <xTimerGenericCommand+0x98>)
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	f107 0110 	add.w	r1, r7, #16
 8009d06:	2300      	movs	r3, #0
 8009d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d0a:	f7fe fca1 	bl	8008650 <xQueueGenericSend>
 8009d0e:	6278      	str	r0, [r7, #36]	; 0x24
 8009d10:	e012      	b.n	8009d38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d12:	4b0c      	ldr	r3, [pc, #48]	; (8009d44 <xTimerGenericCommand+0x98>)
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	f107 0110 	add.w	r1, r7, #16
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f7fe fc97 	bl	8008650 <xQueueGenericSend>
 8009d22:	6278      	str	r0, [r7, #36]	; 0x24
 8009d24:	e008      	b.n	8009d38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d26:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <xTimerGenericCommand+0x98>)
 8009d28:	6818      	ldr	r0, [r3, #0]
 8009d2a:	f107 0110 	add.w	r1, r7, #16
 8009d2e:	2300      	movs	r3, #0
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	f7fe fd8b 	bl	800884c <xQueueGenericSendFromISR>
 8009d36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3728      	adds	r7, #40	; 0x28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20001ba4 	.word	0x20001ba4

08009d48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d52:	4b22      	ldr	r3, [pc, #136]	; (8009ddc <prvProcessExpiredTimer+0x94>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe f8f9 	bl	8007f58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d022      	beq.n	8009dba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	699a      	ldr	r2, [r3, #24]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	18d1      	adds	r1, r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	6978      	ldr	r0, [r7, #20]
 8009d82:	f000 f8d1 	bl	8009f28 <prvInsertTimerInActiveList>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d01f      	beq.n	8009dcc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	2300      	movs	r3, #0
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	2100      	movs	r1, #0
 8009d96:	6978      	ldr	r0, [r7, #20]
 8009d98:	f7ff ff88 	bl	8009cac <xTimerGenericCommand>
 8009d9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d113      	bne.n	8009dcc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	60fb      	str	r3, [r7, #12]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dc0:	f023 0301 	bic.w	r3, r3, #1
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	6978      	ldr	r0, [r7, #20]
 8009dd2:	4798      	blx	r3
}
 8009dd4:	bf00      	nop
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	20001b9c 	.word	0x20001b9c

08009de0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009de8:	f107 0308 	add.w	r3, r7, #8
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 f857 	bl	8009ea0 <prvGetNextExpireTime>
 8009df2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	4619      	mov	r1, r3
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 f803 	bl	8009e04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009dfe:	f000 f8d5 	bl	8009fac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e02:	e7f1      	b.n	8009de8 <prvTimerTask+0x8>

08009e04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e0e:	f7ff fa43 	bl	8009298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e12:	f107 0308 	add.w	r3, r7, #8
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 f866 	bl	8009ee8 <prvSampleTimeNow>
 8009e1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d130      	bne.n	8009e86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10a      	bne.n	8009e40 <prvProcessTimerOrBlockTask+0x3c>
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d806      	bhi.n	8009e40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e32:	f7ff fa3f 	bl	80092b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e36:	68f9      	ldr	r1, [r7, #12]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff ff85 	bl	8009d48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e3e:	e024      	b.n	8009e8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d008      	beq.n	8009e58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e46:	4b13      	ldr	r3, [pc, #76]	; (8009e94 <prvProcessTimerOrBlockTask+0x90>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <prvProcessTimerOrBlockTask+0x50>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e000      	b.n	8009e56 <prvProcessTimerOrBlockTask+0x52>
 8009e54:	2300      	movs	r3, #0
 8009e56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e58:	4b0f      	ldr	r3, [pc, #60]	; (8009e98 <prvProcessTimerOrBlockTask+0x94>)
 8009e5a:	6818      	ldr	r0, [r3, #0]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4619      	mov	r1, r3
 8009e66:	f7fe ffa7 	bl	8008db8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e6a:	f7ff fa23 	bl	80092b4 <xTaskResumeAll>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10a      	bne.n	8009e8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e74:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <prvProcessTimerOrBlockTask+0x98>)
 8009e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e7a:	601a      	str	r2, [r3, #0]
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	f3bf 8f6f 	isb	sy
}
 8009e84:	e001      	b.n	8009e8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e86:	f7ff fa15 	bl	80092b4 <xTaskResumeAll>
}
 8009e8a:	bf00      	nop
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20001ba0 	.word	0x20001ba0
 8009e98:	20001ba4 	.word	0x20001ba4
 8009e9c:	e000ed04 	.word	0xe000ed04

08009ea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ea8:	4b0e      	ldr	r3, [pc, #56]	; (8009ee4 <prvGetNextExpireTime+0x44>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <prvGetNextExpireTime+0x16>
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	e000      	b.n	8009eb8 <prvGetNextExpireTime+0x18>
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d105      	bne.n	8009ed0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ec4:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <prvGetNextExpireTime+0x44>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	e001      	b.n	8009ed4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	20001b9c 	.word	0x20001b9c

08009ee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ef0:	f7ff fa7e 	bl	80093f0 <xTaskGetTickCount>
 8009ef4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ef6:	4b0b      	ldr	r3, [pc, #44]	; (8009f24 <prvSampleTimeNow+0x3c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d205      	bcs.n	8009f0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f00:	f000 f936 	bl	800a170 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	e002      	b.n	8009f12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f12:	4a04      	ldr	r2, [pc, #16]	; (8009f24 <prvSampleTimeNow+0x3c>)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f18:	68fb      	ldr	r3, [r7, #12]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20001bac 	.word	0x20001bac

08009f28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f36:	2300      	movs	r3, #0
 8009f38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d812      	bhi.n	8009f74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	1ad2      	subs	r2, r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d302      	bcc.n	8009f62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	e01b      	b.n	8009f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f62:	4b10      	ldr	r3, [pc, #64]	; (8009fa4 <prvInsertTimerInActiveList+0x7c>)
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	f7fd ffba 	bl	8007ee6 <vListInsert>
 8009f72:	e012      	b.n	8009f9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d206      	bcs.n	8009f8a <prvInsertTimerInActiveList+0x62>
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d302      	bcc.n	8009f8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f84:	2301      	movs	r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	e007      	b.n	8009f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f8a:	4b07      	ldr	r3, [pc, #28]	; (8009fa8 <prvInsertTimerInActiveList+0x80>)
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3304      	adds	r3, #4
 8009f92:	4619      	mov	r1, r3
 8009f94:	4610      	mov	r0, r2
 8009f96:	f7fd ffa6 	bl	8007ee6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f9a:	697b      	ldr	r3, [r7, #20]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20001ba0 	.word	0x20001ba0
 8009fa8:	20001b9c 	.word	0x20001b9c

08009fac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08e      	sub	sp, #56	; 0x38
 8009fb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fb2:	e0ca      	b.n	800a14a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	da18      	bge.n	8009fec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fba:	1d3b      	adds	r3, r7, #4
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10a      	bne.n	8009fdc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	61fb      	str	r3, [r7, #28]
}
 8009fd8:	bf00      	nop
 8009fda:	e7fe      	b.n	8009fda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe2:	6850      	ldr	r0, [r2, #4]
 8009fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe6:	6892      	ldr	r2, [r2, #8]
 8009fe8:	4611      	mov	r1, r2
 8009fea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f2c0 80aa 	blt.w	800a148 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d004      	beq.n	800a00a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a002:	3304      	adds	r3, #4
 800a004:	4618      	mov	r0, r3
 800a006:	f7fd ffa7 	bl	8007f58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a00a:	463b      	mov	r3, r7
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7ff ff6b 	bl	8009ee8 <prvSampleTimeNow>
 800a012:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b09      	cmp	r3, #9
 800a018:	f200 8097 	bhi.w	800a14a <prvProcessReceivedCommands+0x19e>
 800a01c:	a201      	add	r2, pc, #4	; (adr r2, 800a024 <prvProcessReceivedCommands+0x78>)
 800a01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a022:	bf00      	nop
 800a024:	0800a04d 	.word	0x0800a04d
 800a028:	0800a04d 	.word	0x0800a04d
 800a02c:	0800a04d 	.word	0x0800a04d
 800a030:	0800a0c1 	.word	0x0800a0c1
 800a034:	0800a0d5 	.word	0x0800a0d5
 800a038:	0800a11f 	.word	0x0800a11f
 800a03c:	0800a04d 	.word	0x0800a04d
 800a040:	0800a04d 	.word	0x0800a04d
 800a044:	0800a0c1 	.word	0x0800a0c1
 800a048:	0800a0d5 	.word	0x0800a0d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a052:	f043 0301 	orr.w	r3, r3, #1
 800a056:	b2da      	uxtb	r2, r3
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	18d1      	adds	r1, r2, r3
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a06a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a06c:	f7ff ff5c 	bl	8009f28 <prvInsertTimerInActiveList>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d069      	beq.n	800a14a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a07c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d05e      	beq.n	800a14a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	441a      	add	r2, r3
 800a094:	2300      	movs	r3, #0
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	2300      	movs	r3, #0
 800a09a:	2100      	movs	r1, #0
 800a09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a09e:	f7ff fe05 	bl	8009cac <xTimerGenericCommand>
 800a0a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0a4:	6a3b      	ldr	r3, [r7, #32]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d14f      	bne.n	800a14a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	61bb      	str	r3, [r7, #24]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0c6:	f023 0301 	bic.w	r3, r3, #1
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a0d2:	e03a      	b.n	800a14a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0da:	f043 0301 	orr.w	r3, r3, #1
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10a      	bne.n	800a10a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	617b      	str	r3, [r7, #20]
}
 800a106:	bf00      	nop
 800a108:	e7fe      	b.n	800a108 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	699a      	ldr	r2, [r3, #24]
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	18d1      	adds	r1, r2, r3
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a118:	f7ff ff06 	bl	8009f28 <prvInsertTimerInActiveList>
					break;
 800a11c:	e015      	b.n	800a14a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d103      	bne.n	800a134 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a12e:	f7fd fd6b 	bl	8007c08 <vPortFree>
 800a132:	e00a      	b.n	800a14a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a13a:	f023 0301 	bic.w	r3, r3, #1
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a146:	e000      	b.n	800a14a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a148:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a14a:	4b08      	ldr	r3, [pc, #32]	; (800a16c <prvProcessReceivedCommands+0x1c0>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	1d39      	adds	r1, r7, #4
 800a150:	2200      	movs	r2, #0
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe fc16 	bl	8008984 <xQueueReceive>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f47f af2a 	bne.w	8009fb4 <prvProcessReceivedCommands+0x8>
	}
}
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	3730      	adds	r7, #48	; 0x30
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20001ba4 	.word	0x20001ba4

0800a170 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a176:	e048      	b.n	800a20a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a178:	4b2d      	ldr	r3, [pc, #180]	; (800a230 <prvSwitchTimerLists+0xc0>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a182:	4b2b      	ldr	r3, [pc, #172]	; (800a230 <prvSwitchTimerLists+0xc0>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3304      	adds	r3, #4
 800a190:	4618      	mov	r0, r3
 800a192:	f7fd fee1 	bl	8007f58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d02e      	beq.n	800a20a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d90e      	bls.n	800a1dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1ca:	4b19      	ldr	r3, [pc, #100]	; (800a230 <prvSwitchTimerLists+0xc0>)
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	f7fd fe86 	bl	8007ee6 <vListInsert>
 800a1da:	e016      	b.n	800a20a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1dc:	2300      	movs	r3, #0
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7ff fd60 	bl	8009cac <xTimerGenericCommand>
 800a1ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	603b      	str	r3, [r7, #0]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a20a:	4b09      	ldr	r3, [pc, #36]	; (800a230 <prvSwitchTimerLists+0xc0>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1b1      	bne.n	800a178 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a214:	4b06      	ldr	r3, [pc, #24]	; (800a230 <prvSwitchTimerLists+0xc0>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a21a:	4b06      	ldr	r3, [pc, #24]	; (800a234 <prvSwitchTimerLists+0xc4>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a04      	ldr	r2, [pc, #16]	; (800a230 <prvSwitchTimerLists+0xc0>)
 800a220:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a222:	4a04      	ldr	r2, [pc, #16]	; (800a234 <prvSwitchTimerLists+0xc4>)
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	6013      	str	r3, [r2, #0]
}
 800a228:	bf00      	nop
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20001b9c 	.word	0x20001b9c
 800a234:	20001ba0 	.word	0x20001ba0

0800a238 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a23e:	f7fd ffe1 	bl	8008204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a242:	4b15      	ldr	r3, [pc, #84]	; (800a298 <prvCheckForValidListAndQueue+0x60>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d120      	bne.n	800a28c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a24a:	4814      	ldr	r0, [pc, #80]	; (800a29c <prvCheckForValidListAndQueue+0x64>)
 800a24c:	f7fd fdfa 	bl	8007e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a250:	4813      	ldr	r0, [pc, #76]	; (800a2a0 <prvCheckForValidListAndQueue+0x68>)
 800a252:	f7fd fdf7 	bl	8007e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a256:	4b13      	ldr	r3, [pc, #76]	; (800a2a4 <prvCheckForValidListAndQueue+0x6c>)
 800a258:	4a10      	ldr	r2, [pc, #64]	; (800a29c <prvCheckForValidListAndQueue+0x64>)
 800a25a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a25c:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <prvCheckForValidListAndQueue+0x70>)
 800a25e:	4a10      	ldr	r2, [pc, #64]	; (800a2a0 <prvCheckForValidListAndQueue+0x68>)
 800a260:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a262:	2300      	movs	r3, #0
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <prvCheckForValidListAndQueue+0x74>)
 800a268:	4a11      	ldr	r2, [pc, #68]	; (800a2b0 <prvCheckForValidListAndQueue+0x78>)
 800a26a:	2110      	movs	r1, #16
 800a26c:	200a      	movs	r0, #10
 800a26e:	f7fe f953 	bl	8008518 <xQueueGenericCreateStatic>
 800a272:	4603      	mov	r3, r0
 800a274:	4a08      	ldr	r2, [pc, #32]	; (800a298 <prvCheckForValidListAndQueue+0x60>)
 800a276:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a278:	4b07      	ldr	r3, [pc, #28]	; (800a298 <prvCheckForValidListAndQueue+0x60>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d005      	beq.n	800a28c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a280:	4b05      	ldr	r3, [pc, #20]	; (800a298 <prvCheckForValidListAndQueue+0x60>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	490b      	ldr	r1, [pc, #44]	; (800a2b4 <prvCheckForValidListAndQueue+0x7c>)
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fd6c 	bl	8008d64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a28c:	f7fd ffea 	bl	8008264 <vPortExitCritical>
}
 800a290:	bf00      	nop
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20001ba4 	.word	0x20001ba4
 800a29c:	20001b74 	.word	0x20001b74
 800a2a0:	20001b88 	.word	0x20001b88
 800a2a4:	20001b9c 	.word	0x20001b9c
 800a2a8:	20001ba0 	.word	0x20001ba0
 800a2ac:	20001c50 	.word	0x20001c50
 800a2b0:	20001bb0 	.word	0x20001bb0
 800a2b4:	0800a368 	.word	0x0800a368

0800a2b8 <__libc_init_array>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	4d0d      	ldr	r5, [pc, #52]	; (800a2f0 <__libc_init_array+0x38>)
 800a2bc:	4c0d      	ldr	r4, [pc, #52]	; (800a2f4 <__libc_init_array+0x3c>)
 800a2be:	1b64      	subs	r4, r4, r5
 800a2c0:	10a4      	asrs	r4, r4, #2
 800a2c2:	2600      	movs	r6, #0
 800a2c4:	42a6      	cmp	r6, r4
 800a2c6:	d109      	bne.n	800a2dc <__libc_init_array+0x24>
 800a2c8:	4d0b      	ldr	r5, [pc, #44]	; (800a2f8 <__libc_init_array+0x40>)
 800a2ca:	4c0c      	ldr	r4, [pc, #48]	; (800a2fc <__libc_init_array+0x44>)
 800a2cc:	f000 f82e 	bl	800a32c <_init>
 800a2d0:	1b64      	subs	r4, r4, r5
 800a2d2:	10a4      	asrs	r4, r4, #2
 800a2d4:	2600      	movs	r6, #0
 800a2d6:	42a6      	cmp	r6, r4
 800a2d8:	d105      	bne.n	800a2e6 <__libc_init_array+0x2e>
 800a2da:	bd70      	pop	{r4, r5, r6, pc}
 800a2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e0:	4798      	blx	r3
 800a2e2:	3601      	adds	r6, #1
 800a2e4:	e7ee      	b.n	800a2c4 <__libc_init_array+0xc>
 800a2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ea:	4798      	blx	r3
 800a2ec:	3601      	adds	r6, #1
 800a2ee:	e7f2      	b.n	800a2d6 <__libc_init_array+0x1e>
 800a2f0:	0800a52c 	.word	0x0800a52c
 800a2f4:	0800a52c 	.word	0x0800a52c
 800a2f8:	0800a52c 	.word	0x0800a52c
 800a2fc:	0800a534 	.word	0x0800a534

0800a300 <memcpy>:
 800a300:	440a      	add	r2, r1
 800a302:	4291      	cmp	r1, r2
 800a304:	f100 33ff 	add.w	r3, r0, #4294967295
 800a308:	d100      	bne.n	800a30c <memcpy+0xc>
 800a30a:	4770      	bx	lr
 800a30c:	b510      	push	{r4, lr}
 800a30e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a316:	4291      	cmp	r1, r2
 800a318:	d1f9      	bne.n	800a30e <memcpy+0xe>
 800a31a:	bd10      	pop	{r4, pc}

0800a31c <memset>:
 800a31c:	4402      	add	r2, r0
 800a31e:	4603      	mov	r3, r0
 800a320:	4293      	cmp	r3, r2
 800a322:	d100      	bne.n	800a326 <memset+0xa>
 800a324:	4770      	bx	lr
 800a326:	f803 1b01 	strb.w	r1, [r3], #1
 800a32a:	e7f9      	b.n	800a320 <memset+0x4>

0800a32c <_init>:
 800a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32e:	bf00      	nop
 800a330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a332:	bc08      	pop	{r3}
 800a334:	469e      	mov	lr, r3
 800a336:	4770      	bx	lr

0800a338 <_fini>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	bf00      	nop
 800a33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33e:	bc08      	pop	{r3}
 800a340:	469e      	mov	lr, r3
 800a342:	4770      	bx	lr
